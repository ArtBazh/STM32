
f103_connection_+_IMU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037d4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080038e0  080038e0  000138e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003998  08003998  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003998  08003998  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003998  08003998  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003998  08003998  00013998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800399c  0800399c  0001399c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080039a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  20000070  08003a10  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  08003a10  00020198  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009e8f  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002400  00000000  00000000  00029f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c68  00000000  00000000  0002c328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b40  00000000  00000000  0002cf90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e0d  00000000  00000000  0002dad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c378  00000000  00000000  000468dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088dee  00000000  00000000  00052c55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dba43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035d4  00000000  00000000  000dba94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080038c8 	.word	0x080038c8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080038c8 	.word	0x080038c8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800015c:	b480      	push	{r7}
 800015e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000160:	4b04      	ldr	r3, [pc, #16]	; (8000174 <__NVIC_GetPriorityGrouping+0x18>)
 8000162:	68db      	ldr	r3, [r3, #12]
 8000164:	0a1b      	lsrs	r3, r3, #8
 8000166:	f003 0307 	and.w	r3, r3, #7
}
 800016a:	4618      	mov	r0, r3
 800016c:	46bd      	mov	sp, r7
 800016e:	bc80      	pop	{r7}
 8000170:	4770      	bx	lr
 8000172:	bf00      	nop
 8000174:	e000ed00 	.word	0xe000ed00

08000178 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000178:	b480      	push	{r7}
 800017a:	b083      	sub	sp, #12
 800017c:	af00      	add	r7, sp, #0
 800017e:	4603      	mov	r3, r0
 8000180:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000186:	2b00      	cmp	r3, #0
 8000188:	db0b      	blt.n	80001a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800018a:	79fb      	ldrb	r3, [r7, #7]
 800018c:	f003 021f 	and.w	r2, r3, #31
 8000190:	4906      	ldr	r1, [pc, #24]	; (80001ac <__NVIC_EnableIRQ+0x34>)
 8000192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000196:	095b      	lsrs	r3, r3, #5
 8000198:	2001      	movs	r0, #1
 800019a:	fa00 f202 	lsl.w	r2, r0, r2
 800019e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001a2:	bf00      	nop
 80001a4:	370c      	adds	r7, #12
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr
 80001ac:	e000e100 	.word	0xe000e100

080001b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001b0:	b480      	push	{r7}
 80001b2:	b083      	sub	sp, #12
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	4603      	mov	r3, r0
 80001b8:	6039      	str	r1, [r7, #0]
 80001ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	db0a      	blt.n	80001da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001c4:	683b      	ldr	r3, [r7, #0]
 80001c6:	b2da      	uxtb	r2, r3
 80001c8:	490c      	ldr	r1, [pc, #48]	; (80001fc <__NVIC_SetPriority+0x4c>)
 80001ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001ce:	0112      	lsls	r2, r2, #4
 80001d0:	b2d2      	uxtb	r2, r2
 80001d2:	440b      	add	r3, r1
 80001d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001d8:	e00a      	b.n	80001f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001da:	683b      	ldr	r3, [r7, #0]
 80001dc:	b2da      	uxtb	r2, r3
 80001de:	4908      	ldr	r1, [pc, #32]	; (8000200 <__NVIC_SetPriority+0x50>)
 80001e0:	79fb      	ldrb	r3, [r7, #7]
 80001e2:	f003 030f 	and.w	r3, r3, #15
 80001e6:	3b04      	subs	r3, #4
 80001e8:	0112      	lsls	r2, r2, #4
 80001ea:	b2d2      	uxtb	r2, r2
 80001ec:	440b      	add	r3, r1
 80001ee:	761a      	strb	r2, [r3, #24]
}
 80001f0:	bf00      	nop
 80001f2:	370c      	adds	r7, #12
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bc80      	pop	{r7}
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	e000e100 	.word	0xe000e100
 8000200:	e000ed00 	.word	0xe000ed00

08000204 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000204:	b480      	push	{r7}
 8000206:	b089      	sub	sp, #36	; 0x24
 8000208:	af00      	add	r7, sp, #0
 800020a:	60f8      	str	r0, [r7, #12]
 800020c:	60b9      	str	r1, [r7, #8]
 800020e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000210:	68fb      	ldr	r3, [r7, #12]
 8000212:	f003 0307 	and.w	r3, r3, #7
 8000216:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000218:	69fb      	ldr	r3, [r7, #28]
 800021a:	f1c3 0307 	rsb	r3, r3, #7
 800021e:	2b04      	cmp	r3, #4
 8000220:	bf28      	it	cs
 8000222:	2304      	movcs	r3, #4
 8000224:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000226:	69fb      	ldr	r3, [r7, #28]
 8000228:	3304      	adds	r3, #4
 800022a:	2b06      	cmp	r3, #6
 800022c:	d902      	bls.n	8000234 <NVIC_EncodePriority+0x30>
 800022e:	69fb      	ldr	r3, [r7, #28]
 8000230:	3b03      	subs	r3, #3
 8000232:	e000      	b.n	8000236 <NVIC_EncodePriority+0x32>
 8000234:	2300      	movs	r3, #0
 8000236:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000238:	f04f 32ff 	mov.w	r2, #4294967295
 800023c:	69bb      	ldr	r3, [r7, #24]
 800023e:	fa02 f303 	lsl.w	r3, r2, r3
 8000242:	43da      	mvns	r2, r3
 8000244:	68bb      	ldr	r3, [r7, #8]
 8000246:	401a      	ands	r2, r3
 8000248:	697b      	ldr	r3, [r7, #20]
 800024a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800024c:	f04f 31ff 	mov.w	r1, #4294967295
 8000250:	697b      	ldr	r3, [r7, #20]
 8000252:	fa01 f303 	lsl.w	r3, r1, r3
 8000256:	43d9      	mvns	r1, r3
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800025c:	4313      	orrs	r3, r2
         );
}
 800025e:	4618      	mov	r0, r3
 8000260:	3724      	adds	r7, #36	; 0x24
 8000262:	46bd      	mov	sp, r7
 8000264:	bc80      	pop	{r7}
 8000266:	4770      	bx	lr

08000268 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000268:	b480      	push	{r7}
 800026a:	b085      	sub	sp, #20
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000270:	4b08      	ldr	r3, [pc, #32]	; (8000294 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000272:	695a      	ldr	r2, [r3, #20]
 8000274:	4907      	ldr	r1, [pc, #28]	; (8000294 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	4313      	orrs	r3, r2
 800027a:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800027c:	4b05      	ldr	r3, [pc, #20]	; (8000294 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800027e:	695a      	ldr	r2, [r3, #20]
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	4013      	ands	r3, r2
 8000284:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000286:	68fb      	ldr	r3, [r7, #12]
}
 8000288:	bf00      	nop
 800028a:	3714      	adds	r7, #20
 800028c:	46bd      	mov	sp, r7
 800028e:	bc80      	pop	{r7}
 8000290:	4770      	bx	lr
 8000292:	bf00      	nop
 8000294:	40021000 	.word	0x40021000

08000298 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 800029c:	2001      	movs	r0, #1
 800029e:	f7ff ffe3 	bl	8000268 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80002a2:	f7ff ff5b 	bl	800015c <__NVIC_GetPriorityGrouping>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2200      	movs	r2, #0
 80002aa:	2100      	movs	r1, #0
 80002ac:	4618      	mov	r0, r3
 80002ae:	f7ff ffa9 	bl	8000204 <NVIC_EncodePriority>
 80002b2:	4603      	mov	r3, r0
 80002b4:	4619      	mov	r1, r3
 80002b6:	200e      	movs	r0, #14
 80002b8:	f7ff ff7a 	bl	80001b0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80002bc:	200e      	movs	r0, #14
 80002be:	f7ff ff5b 	bl	8000178 <__NVIC_EnableIRQ>

}
 80002c2:	bf00      	nop
 80002c4:	bd80      	pop	{r7, pc}
	...

080002c8 <__NVIC_GetPriorityGrouping>:
{
 80002c8:	b480      	push	{r7}
 80002ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002cc:	4b04      	ldr	r3, [pc, #16]	; (80002e0 <__NVIC_GetPriorityGrouping+0x18>)
 80002ce:	68db      	ldr	r3, [r3, #12]
 80002d0:	0a1b      	lsrs	r3, r3, #8
 80002d2:	f003 0307 	and.w	r3, r3, #7
}
 80002d6:	4618      	mov	r0, r3
 80002d8:	46bd      	mov	sp, r7
 80002da:	bc80      	pop	{r7}
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop
 80002e0:	e000ed00 	.word	0xe000ed00

080002e4 <__NVIC_EnableIRQ>:
{
 80002e4:	b480      	push	{r7}
 80002e6:	b083      	sub	sp, #12
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	4603      	mov	r3, r0
 80002ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	db0b      	blt.n	800030e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002f6:	79fb      	ldrb	r3, [r7, #7]
 80002f8:	f003 021f 	and.w	r2, r3, #31
 80002fc:	4906      	ldr	r1, [pc, #24]	; (8000318 <__NVIC_EnableIRQ+0x34>)
 80002fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000302:	095b      	lsrs	r3, r3, #5
 8000304:	2001      	movs	r0, #1
 8000306:	fa00 f202 	lsl.w	r2, r0, r2
 800030a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800030e:	bf00      	nop
 8000310:	370c      	adds	r7, #12
 8000312:	46bd      	mov	sp, r7
 8000314:	bc80      	pop	{r7}
 8000316:	4770      	bx	lr
 8000318:	e000e100 	.word	0xe000e100

0800031c <__NVIC_SetPriority>:
{
 800031c:	b480      	push	{r7}
 800031e:	b083      	sub	sp, #12
 8000320:	af00      	add	r7, sp, #0
 8000322:	4603      	mov	r3, r0
 8000324:	6039      	str	r1, [r7, #0]
 8000326:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800032c:	2b00      	cmp	r3, #0
 800032e:	db0a      	blt.n	8000346 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000330:	683b      	ldr	r3, [r7, #0]
 8000332:	b2da      	uxtb	r2, r3
 8000334:	490c      	ldr	r1, [pc, #48]	; (8000368 <__NVIC_SetPriority+0x4c>)
 8000336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800033a:	0112      	lsls	r2, r2, #4
 800033c:	b2d2      	uxtb	r2, r2
 800033e:	440b      	add	r3, r1
 8000340:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000344:	e00a      	b.n	800035c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000346:	683b      	ldr	r3, [r7, #0]
 8000348:	b2da      	uxtb	r2, r3
 800034a:	4908      	ldr	r1, [pc, #32]	; (800036c <__NVIC_SetPriority+0x50>)
 800034c:	79fb      	ldrb	r3, [r7, #7]
 800034e:	f003 030f 	and.w	r3, r3, #15
 8000352:	3b04      	subs	r3, #4
 8000354:	0112      	lsls	r2, r2, #4
 8000356:	b2d2      	uxtb	r2, r2
 8000358:	440b      	add	r3, r1
 800035a:	761a      	strb	r2, [r3, #24]
}
 800035c:	bf00      	nop
 800035e:	370c      	adds	r7, #12
 8000360:	46bd      	mov	sp, r7
 8000362:	bc80      	pop	{r7}
 8000364:	4770      	bx	lr
 8000366:	bf00      	nop
 8000368:	e000e100 	.word	0xe000e100
 800036c:	e000ed00 	.word	0xe000ed00

08000370 <NVIC_EncodePriority>:
{
 8000370:	b480      	push	{r7}
 8000372:	b089      	sub	sp, #36	; 0x24
 8000374:	af00      	add	r7, sp, #0
 8000376:	60f8      	str	r0, [r7, #12]
 8000378:	60b9      	str	r1, [r7, #8]
 800037a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	f003 0307 	and.w	r3, r3, #7
 8000382:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000384:	69fb      	ldr	r3, [r7, #28]
 8000386:	f1c3 0307 	rsb	r3, r3, #7
 800038a:	2b04      	cmp	r3, #4
 800038c:	bf28      	it	cs
 800038e:	2304      	movcs	r3, #4
 8000390:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000392:	69fb      	ldr	r3, [r7, #28]
 8000394:	3304      	adds	r3, #4
 8000396:	2b06      	cmp	r3, #6
 8000398:	d902      	bls.n	80003a0 <NVIC_EncodePriority+0x30>
 800039a:	69fb      	ldr	r3, [r7, #28]
 800039c:	3b03      	subs	r3, #3
 800039e:	e000      	b.n	80003a2 <NVIC_EncodePriority+0x32>
 80003a0:	2300      	movs	r3, #0
 80003a2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003a4:	f04f 32ff 	mov.w	r2, #4294967295
 80003a8:	69bb      	ldr	r3, [r7, #24]
 80003aa:	fa02 f303 	lsl.w	r3, r2, r3
 80003ae:	43da      	mvns	r2, r3
 80003b0:	68bb      	ldr	r3, [r7, #8]
 80003b2:	401a      	ands	r2, r3
 80003b4:	697b      	ldr	r3, [r7, #20]
 80003b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003b8:	f04f 31ff 	mov.w	r1, #4294967295
 80003bc:	697b      	ldr	r3, [r7, #20]
 80003be:	fa01 f303 	lsl.w	r3, r1, r3
 80003c2:	43d9      	mvns	r1, r3
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003c8:	4313      	orrs	r3, r2
}
 80003ca:	4618      	mov	r0, r3
 80003cc:	3724      	adds	r7, #36	; 0x24
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bc80      	pop	{r7}
 80003d2:	4770      	bx	lr

080003d4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80003d4:	b480      	push	{r7}
 80003d6:	b085      	sub	sp, #20
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80003dc:	4b08      	ldr	r3, [pc, #32]	; (8000400 <LL_APB2_GRP1_EnableClock+0x2c>)
 80003de:	699a      	ldr	r2, [r3, #24]
 80003e0:	4907      	ldr	r1, [pc, #28]	; (8000400 <LL_APB2_GRP1_EnableClock+0x2c>)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	4313      	orrs	r3, r2
 80003e6:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80003e8:	4b05      	ldr	r3, [pc, #20]	; (8000400 <LL_APB2_GRP1_EnableClock+0x2c>)
 80003ea:	699a      	ldr	r2, [r3, #24]
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	4013      	ands	r3, r2
 80003f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80003f2:	68fb      	ldr	r3, [r7, #12]
}
 80003f4:	bf00      	nop
 80003f6:	3714      	adds	r7, #20
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bc80      	pop	{r7}
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	40021000 	.word	0x40021000

08000404 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_OUTPUT
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000404:	b490      	push	{r4, r7}
 8000406:	b088      	sub	sp, #32
 8000408:	af00      	add	r7, sp, #0
 800040a:	60f8      	str	r0, [r7, #12]
 800040c:	60b9      	str	r1, [r7, #8]
 800040e:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	461a      	mov	r2, r3
 8000414:	68bb      	ldr	r3, [r7, #8]
 8000416:	0e1b      	lsrs	r3, r3, #24
 8000418:	4413      	add	r3, r2
 800041a:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 800041c:	6822      	ldr	r2, [r4, #0]
 800041e:	68bb      	ldr	r3, [r7, #8]
 8000420:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000422:	697b      	ldr	r3, [r7, #20]
 8000424:	fa93 f3a3 	rbit	r3, r3
 8000428:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800042a:	693b      	ldr	r3, [r7, #16]
 800042c:	fab3 f383 	clz	r3, r3
 8000430:	b2db      	uxtb	r3, r3
 8000432:	009b      	lsls	r3, r3, #2
 8000434:	210f      	movs	r1, #15
 8000436:	fa01 f303 	lsl.w	r3, r1, r3
 800043a:	43db      	mvns	r3, r3
 800043c:	401a      	ands	r2, r3
 800043e:	68bb      	ldr	r3, [r7, #8]
 8000440:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000442:	69fb      	ldr	r3, [r7, #28]
 8000444:	fa93 f3a3 	rbit	r3, r3
 8000448:	61bb      	str	r3, [r7, #24]
  return result;
 800044a:	69bb      	ldr	r3, [r7, #24]
 800044c:	fab3 f383 	clz	r3, r3
 8000450:	b2db      	uxtb	r3, r3
 8000452:	009b      	lsls	r3, r3, #2
 8000454:	6879      	ldr	r1, [r7, #4]
 8000456:	fa01 f303 	lsl.w	r3, r1, r3
 800045a:	4313      	orrs	r3, r2
 800045c:	6023      	str	r3, [r4, #0]
}
 800045e:	bf00      	nop
 8000460:	3720      	adds	r7, #32
 8000462:	46bd      	mov	sp, r7
 8000464:	bc90      	pop	{r4, r7}
 8000466:	4770      	bx	lr

08000468 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000468:	b480      	push	{r7}
 800046a:	b083      	sub	sp, #12
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
 8000470:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000472:	683b      	ldr	r3, [r7, #0]
 8000474:	0a1b      	lsrs	r3, r3, #8
 8000476:	b29a      	uxth	r2, r3
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	615a      	str	r2, [r3, #20]
}
 800047c:	bf00      	nop
 800047e:	370c      	adds	r7, #12
 8000480:	46bd      	mov	sp, r7
 8000482:	bc80      	pop	{r7}
 8000484:	4770      	bx	lr
	...

08000488 <LL_GPIO_AF_SetEXTISource>:
  *         @arg @ref LL_GPIO_AF_EXTI_LINE14
  *         @arg @ref LL_GPIO_AF_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000488:	b480      	push	{r7}
 800048a:	b085      	sub	sp, #20
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
 8000490:	6039      	str	r1, [r7, #0]
  MODIFY_REG(AFIO->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8000492:	4a13      	ldr	r2, [pc, #76]	; (80004e0 <LL_GPIO_AF_SetEXTISource+0x58>)
 8000494:	683b      	ldr	r3, [r7, #0]
 8000496:	b2db      	uxtb	r3, r3
 8000498:	3302      	adds	r3, #2
 800049a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800049e:	683b      	ldr	r3, [r7, #0]
 80004a0:	0c1b      	lsrs	r3, r3, #16
 80004a2:	43db      	mvns	r3, r3
 80004a4:	ea02 0103 	and.w	r1, r2, r3
 80004a8:	683b      	ldr	r3, [r7, #0]
 80004aa:	0c1b      	lsrs	r3, r3, #16
 80004ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	fa93 f3a3 	rbit	r3, r3
 80004b4:	60bb      	str	r3, [r7, #8]
  return result;
 80004b6:	68bb      	ldr	r3, [r7, #8]
 80004b8:	fab3 f383 	clz	r3, r3
 80004bc:	b2db      	uxtb	r3, r3
 80004be:	461a      	mov	r2, r3
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	fa03 f202 	lsl.w	r2, r3, r2
 80004c6:	4806      	ldr	r0, [pc, #24]	; (80004e0 <LL_GPIO_AF_SetEXTISource+0x58>)
 80004c8:	683b      	ldr	r3, [r7, #0]
 80004ca:	b2db      	uxtb	r3, r3
 80004cc:	430a      	orrs	r2, r1
 80004ce:	3302      	adds	r3, #2
 80004d0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80004d4:	bf00      	nop
 80004d6:	3714      	adds	r7, #20
 80004d8:	46bd      	mov	sp, r7
 80004da:	bc80      	pop	{r7}
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop
 80004e0:	40010000 	.word	0x40010000

080004e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b088      	sub	sp, #32
 80004e8:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80004ea:	f107 0318 	add.w	r3, r7, #24
 80004ee:	2200      	movs	r2, #0
 80004f0:	601a      	str	r2, [r3, #0]
 80004f2:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f4:	1d3b      	adds	r3, r7, #4
 80004f6:	2200      	movs	r2, #0
 80004f8:	601a      	str	r2, [r3, #0]
 80004fa:	605a      	str	r2, [r3, #4]
 80004fc:	609a      	str	r2, [r3, #8]
 80004fe:	60da      	str	r2, [r3, #12]
 8000500:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 8000502:	2010      	movs	r0, #16
 8000504:	f7ff ff66 	bl	80003d4 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 8000508:	2020      	movs	r0, #32
 800050a:	f7ff ff63 	bl	80003d4 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 800050e:	2004      	movs	r0, #4
 8000510:	f7ff ff60 	bl	80003d4 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOB);
 8000514:	2008      	movs	r0, #8
 8000516:	f7ff ff5d 	bl	80003d4 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_13);
 800051a:	4929      	ldr	r1, [pc, #164]	; (80005c0 <MX_GPIO_Init+0xdc>)
 800051c:	4829      	ldr	r0, [pc, #164]	; (80005c4 <MX_GPIO_Init+0xe0>)
 800051e:	f7ff ffa3 	bl	8000468 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0);
 8000522:	f240 1101 	movw	r1, #257	; 0x101
 8000526:	4828      	ldr	r0, [pc, #160]	; (80005c8 <MX_GPIO_Init+0xe4>)
 8000528:	f7ff ff9e 	bl	8000468 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 800052c:	4b24      	ldr	r3, [pc, #144]	; (80005c0 <MX_GPIO_Init+0xdc>)
 800052e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000530:	2301      	movs	r3, #1
 8000532:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000534:	2302      	movs	r3, #2
 8000536:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000538:	2300      	movs	r3, #0
 800053a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800053c:	1d3b      	adds	r3, r7, #4
 800053e:	4619      	mov	r1, r3
 8000540:	4820      	ldr	r0, [pc, #128]	; (80005c4 <MX_GPIO_Init+0xe0>)
 8000542:	f002 faa0 	bl	8002a86 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8000546:	f240 1301 	movw	r3, #257	; 0x101
 800054a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800054c:	2301      	movs	r3, #1
 800054e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000550:	2303      	movs	r3, #3
 8000552:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000554:	2300      	movs	r3, #0
 8000556:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000558:	2300      	movs	r3, #0
 800055a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800055c:	1d3b      	adds	r3, r7, #4
 800055e:	4619      	mov	r1, r3
 8000560:	4819      	ldr	r0, [pc, #100]	; (80005c8 <MX_GPIO_Init+0xe4>)
 8000562:	f002 fa90 	bl	8002a86 <LL_GPIO_Init>

  /**/
  LL_GPIO_AF_SetEXTISource(LL_GPIO_AF_EXTI_PORTA, LL_GPIO_AF_EXTI_LINE1);
 8000566:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 800056a:	2000      	movs	r0, #0
 800056c:	f7ff ff8c 	bl	8000488 <LL_GPIO_AF_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8000570:	2302      	movs	r3, #2
 8000572:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000574:	2301      	movs	r3, #1
 8000576:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000578:	2300      	movs	r3, #0
 800057a:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 800057c:	2301      	movs	r3, #1
 800057e:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000580:	f107 0318 	add.w	r3, r7, #24
 8000584:	4618      	mov	r0, r3
 8000586:	f002 f945 	bl	8002814 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_1, LL_GPIO_MODE_FLOATING);
 800058a:	2204      	movs	r2, #4
 800058c:	f240 2102 	movw	r1, #514	; 0x202
 8000590:	480e      	ldr	r0, [pc, #56]	; (80005cc <MX_GPIO_Init+0xe8>)
 8000592:	f7ff ff37 	bl	8000404 <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000596:	f7ff fe97 	bl	80002c8 <__NVIC_GetPriorityGrouping>
 800059a:	4603      	mov	r3, r0
 800059c:	2200      	movs	r2, #0
 800059e:	2100      	movs	r1, #0
 80005a0:	4618      	mov	r0, r3
 80005a2:	f7ff fee5 	bl	8000370 <NVIC_EncodePriority>
 80005a6:	4603      	mov	r3, r0
 80005a8:	4619      	mov	r1, r3
 80005aa:	2007      	movs	r0, #7
 80005ac:	f7ff feb6 	bl	800031c <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI1_IRQn);
 80005b0:	2007      	movs	r0, #7
 80005b2:	f7ff fe97 	bl	80002e4 <__NVIC_EnableIRQ>

}
 80005b6:	bf00      	nop
 80005b8:	3720      	adds	r7, #32
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	04200020 	.word	0x04200020
 80005c4:	40011000 	.word	0x40011000
 80005c8:	40010c00 	.word	0x40010c00
 80005cc:	40010800 	.word	0x40010800

080005d0 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	3b01      	subs	r3, #1
 80005de:	4a0a      	ldr	r2, [pc, #40]	; (8000608 <LL_DMA_EnableChannel+0x38>)
 80005e0:	5cd3      	ldrb	r3, [r2, r3]
 80005e2:	461a      	mov	r2, r3
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	4413      	add	r3, r2
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	683a      	ldr	r2, [r7, #0]
 80005ec:	3a01      	subs	r2, #1
 80005ee:	4906      	ldr	r1, [pc, #24]	; (8000608 <LL_DMA_EnableChannel+0x38>)
 80005f0:	5c8a      	ldrb	r2, [r1, r2]
 80005f2:	4611      	mov	r1, r2
 80005f4:	687a      	ldr	r2, [r7, #4]
 80005f6:	440a      	add	r2, r1
 80005f8:	f043 0301 	orr.w	r3, r3, #1
 80005fc:	6013      	str	r3, [r2, #0]
}
 80005fe:	bf00      	nop
 8000600:	370c      	adds	r7, #12
 8000602:	46bd      	mov	sp, r7
 8000604:	bc80      	pop	{r7}
 8000606:	4770      	bx	lr
 8000608:	08003934 	.word	0x08003934

0800060c <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	3b01      	subs	r3, #1
 800061a:	4a0a      	ldr	r2, [pc, #40]	; (8000644 <LL_DMA_DisableChannel+0x38>)
 800061c:	5cd3      	ldrb	r3, [r2, r3]
 800061e:	461a      	mov	r2, r3
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	4413      	add	r3, r2
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	683a      	ldr	r2, [r7, #0]
 8000628:	3a01      	subs	r2, #1
 800062a:	4906      	ldr	r1, [pc, #24]	; (8000644 <LL_DMA_DisableChannel+0x38>)
 800062c:	5c8a      	ldrb	r2, [r1, r2]
 800062e:	4611      	mov	r1, r2
 8000630:	687a      	ldr	r2, [r7, #4]
 8000632:	440a      	add	r2, r1
 8000634:	f023 0301 	bic.w	r3, r3, #1
 8000638:	6013      	str	r3, [r2, #0]
}
 800063a:	bf00      	nop
 800063c:	370c      	adds	r7, #12
 800063e:	46bd      	mov	sp, r7
 8000640:	bc80      	pop	{r7}
 8000642:	4770      	bx	lr
 8000644:	08003934 	.word	0x08003934

08000648 <LL_DMA_GetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_PERIPH_TO_MEMORY
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
 8000650:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	3b01      	subs	r3, #1
 8000656:	4a07      	ldr	r2, [pc, #28]	; (8000674 <LL_DMA_GetDataTransferDirection+0x2c>)
 8000658:	5cd3      	ldrb	r3, [r2, r3]
 800065a:	461a      	mov	r2, r3
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	4413      	add	r3, r2
 8000660:	681a      	ldr	r2, [r3, #0]
 8000662:	f244 0310 	movw	r3, #16400	; 0x4010
 8000666:	4013      	ands	r3, r2
                   DMA_CCR_DIR | DMA_CCR_MEM2MEM));
}
 8000668:	4618      	mov	r0, r3
 800066a:	370c      	adds	r7, #12
 800066c:	46bd      	mov	sp, r7
 800066e:	bc80      	pop	{r7}
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	08003934 	.word	0x08003934

08000678 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8000678:	b480      	push	{r7}
 800067a:	b085      	sub	sp, #20
 800067c:	af00      	add	r7, sp, #0
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	60b9      	str	r1, [r7, #8]
 8000682:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8000684:	68bb      	ldr	r3, [r7, #8]
 8000686:	3b01      	subs	r3, #1
 8000688:	4a0b      	ldr	r2, [pc, #44]	; (80006b8 <LL_DMA_SetDataLength+0x40>)
 800068a:	5cd3      	ldrb	r3, [r2, r3]
 800068c:	461a      	mov	r2, r3
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	4413      	add	r3, r2
 8000692:	685b      	ldr	r3, [r3, #4]
 8000694:	0c1b      	lsrs	r3, r3, #16
 8000696:	041b      	lsls	r3, r3, #16
 8000698:	68ba      	ldr	r2, [r7, #8]
 800069a:	3a01      	subs	r2, #1
 800069c:	4906      	ldr	r1, [pc, #24]	; (80006b8 <LL_DMA_SetDataLength+0x40>)
 800069e:	5c8a      	ldrb	r2, [r1, r2]
 80006a0:	4611      	mov	r1, r2
 80006a2:	68fa      	ldr	r2, [r7, #12]
 80006a4:	440a      	add	r2, r1
 80006a6:	4611      	mov	r1, r2
 80006a8:	687a      	ldr	r2, [r7, #4]
 80006aa:	4313      	orrs	r3, r2
 80006ac:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 80006ae:	bf00      	nop
 80006b0:	3714      	adds	r7, #20
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bc80      	pop	{r7}
 80006b6:	4770      	bx	lr
 80006b8:	08003934 	.word	0x08003934

080006bc <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddress,
                                            uint32_t DstAddress, uint32_t Direction)
{
 80006bc:	b480      	push	{r7}
 80006be:	b085      	sub	sp, #20
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	60f8      	str	r0, [r7, #12]
 80006c4:	60b9      	str	r1, [r7, #8]
 80006c6:	607a      	str	r2, [r7, #4]
 80006c8:	603b      	str	r3, [r7, #0]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 80006ca:	69bb      	ldr	r3, [r7, #24]
 80006cc:	2b10      	cmp	r3, #16
 80006ce:	d114      	bne.n	80006fa <LL_DMA_ConfigAddresses+0x3e>
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	3b01      	subs	r3, #1
 80006d4:	4a15      	ldr	r2, [pc, #84]	; (800072c <LL_DMA_ConfigAddresses+0x70>)
 80006d6:	5cd3      	ldrb	r3, [r2, r3]
 80006d8:	461a      	mov	r2, r3
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	4413      	add	r3, r2
 80006de:	461a      	mov	r2, r3
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 80006e4:	68bb      	ldr	r3, [r7, #8]
 80006e6:	3b01      	subs	r3, #1
 80006e8:	4a10      	ldr	r2, [pc, #64]	; (800072c <LL_DMA_ConfigAddresses+0x70>)
 80006ea:	5cd3      	ldrb	r3, [r2, r3]
 80006ec:	461a      	mov	r2, r3
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	4413      	add	r3, r2
 80006f2:	461a      	mov	r2, r3
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	6093      	str	r3, [r2, #8]
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
  }
}
 80006f8:	e013      	b.n	8000722 <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 80006fa:	68bb      	ldr	r3, [r7, #8]
 80006fc:	3b01      	subs	r3, #1
 80006fe:	4a0b      	ldr	r2, [pc, #44]	; (800072c <LL_DMA_ConfigAddresses+0x70>)
 8000700:	5cd3      	ldrb	r3, [r2, r3]
 8000702:	461a      	mov	r2, r3
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	4413      	add	r3, r2
 8000708:	461a      	mov	r2, r3
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	3b01      	subs	r3, #1
 8000712:	4a06      	ldr	r2, [pc, #24]	; (800072c <LL_DMA_ConfigAddresses+0x70>)
 8000714:	5cd3      	ldrb	r3, [r2, r3]
 8000716:	461a      	mov	r2, r3
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	4413      	add	r3, r2
 800071c:	461a      	mov	r2, r3
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	60d3      	str	r3, [r2, #12]
}
 8000722:	bf00      	nop
 8000724:	3714      	adds	r7, #20
 8000726:	46bd      	mov	sp, r7
 8000728:	bc80      	pop	{r7}
 800072a:	4770      	bx	lr
 800072c:	08003934 	.word	0x08003934

08000730 <LL_DMA_ClearFlag_GI4>:
  * @rmtoll IFCR         CGIF4         LL_DMA_ClearFlag_GI4
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_GI4(DMA_TypeDef *DMAx)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF4);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800073e:	605a      	str	r2, [r3, #4]
}
 8000740:	bf00      	nop
 8000742:	370c      	adds	r7, #12
 8000744:	46bd      	mov	sp, r7
 8000746:	bc80      	pop	{r7}
 8000748:	4770      	bx	lr

0800074a <LL_DMA_ClearFlag_TC4>:
  * @rmtoll IFCR         CTCIF4        LL_DMA_ClearFlag_TC4
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC4(DMA_TypeDef *DMAx)
{
 800074a:	b480      	push	{r7}
 800074c:	b083      	sub	sp, #12
 800074e:	af00      	add	r7, sp, #0
 8000750:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF4);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000758:	605a      	str	r2, [r3, #4]
}
 800075a:	bf00      	nop
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	bc80      	pop	{r7}
 8000762:	4770      	bx	lr

08000764 <LL_DMA_ClearFlag_TE4>:
  * @rmtoll IFCR         CTEIF4        LL_DMA_ClearFlag_TE4
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TE4(DMA_TypeDef *DMAx)
{
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF4);
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000772:	605a      	str	r2, [r3, #4]
}
 8000774:	bf00      	nop
 8000776:	370c      	adds	r7, #12
 8000778:	46bd      	mov	sp, r7
 800077a:	bc80      	pop	{r7}
 800077c:	4770      	bx	lr
	...

08000780 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	3b01      	subs	r3, #1
 800078e:	4a0a      	ldr	r2, [pc, #40]	; (80007b8 <LL_DMA_EnableIT_TC+0x38>)
 8000790:	5cd3      	ldrb	r3, [r2, r3]
 8000792:	461a      	mov	r2, r3
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	4413      	add	r3, r2
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	683a      	ldr	r2, [r7, #0]
 800079c:	3a01      	subs	r2, #1
 800079e:	4906      	ldr	r1, [pc, #24]	; (80007b8 <LL_DMA_EnableIT_TC+0x38>)
 80007a0:	5c8a      	ldrb	r2, [r1, r2]
 80007a2:	4611      	mov	r1, r2
 80007a4:	687a      	ldr	r2, [r7, #4]
 80007a6:	440a      	add	r2, r1
 80007a8:	f043 0302 	orr.w	r3, r3, #2
 80007ac:	6013      	str	r3, [r2, #0]
}
 80007ae:	bf00      	nop
 80007b0:	370c      	adds	r7, #12
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bc80      	pop	{r7}
 80007b6:	4770      	bx	lr
 80007b8:	08003934 	.word	0x08003934

080007bc <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	3b01      	subs	r3, #1
 80007ca:	4a0a      	ldr	r2, [pc, #40]	; (80007f4 <LL_DMA_EnableIT_TE+0x38>)
 80007cc:	5cd3      	ldrb	r3, [r2, r3]
 80007ce:	461a      	mov	r2, r3
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	4413      	add	r3, r2
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	683a      	ldr	r2, [r7, #0]
 80007d8:	3a01      	subs	r2, #1
 80007da:	4906      	ldr	r1, [pc, #24]	; (80007f4 <LL_DMA_EnableIT_TE+0x38>)
 80007dc:	5c8a      	ldrb	r2, [r1, r2]
 80007de:	4611      	mov	r1, r2
 80007e0:	687a      	ldr	r2, [r7, #4]
 80007e2:	440a      	add	r2, r1
 80007e4:	f043 0308 	orr.w	r3, r3, #8
 80007e8:	6013      	str	r3, [r2, #0]
}
 80007ea:	bf00      	nop
 80007ec:	370c      	adds	r7, #12
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bc80      	pop	{r7}
 80007f2:	4770      	bx	lr
 80007f4:	08003934 	.word	0x08003934

080007f8 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80007fc:	4b04      	ldr	r3, [pc, #16]	; (8000810 <LL_RCC_HSE_Enable+0x18>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a03      	ldr	r2, [pc, #12]	; (8000810 <LL_RCC_HSE_Enable+0x18>)
 8000802:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000806:	6013      	str	r3, [r2, #0]
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr
 8000810:	40021000 	.word	0x40021000

08000814 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000818:	4b06      	ldr	r3, [pc, #24]	; (8000834 <LL_RCC_HSE_IsReady+0x20>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000820:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000824:	bf0c      	ite	eq
 8000826:	2301      	moveq	r3, #1
 8000828:	2300      	movne	r3, #0
 800082a:	b2db      	uxtb	r3, r3
}
 800082c:	4618      	mov	r0, r3
 800082e:	46bd      	mov	sp, r7
 8000830:	bc80      	pop	{r7}
 8000832:	4770      	bx	lr
 8000834:	40021000 	.word	0x40021000

08000838 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <LL_RCC_SetSysClkSource+0x24>)
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	f023 0203 	bic.w	r2, r3, #3
 8000848:	4904      	ldr	r1, [pc, #16]	; (800085c <LL_RCC_SetSysClkSource+0x24>)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	4313      	orrs	r3, r2
 800084e:	604b      	str	r3, [r1, #4]
}
 8000850:	bf00      	nop
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	bc80      	pop	{r7}
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	40021000 	.word	0x40021000

08000860 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000864:	4b03      	ldr	r3, [pc, #12]	; (8000874 <LL_RCC_GetSysClkSource+0x14>)
 8000866:	685b      	ldr	r3, [r3, #4]
 8000868:	f003 030c 	and.w	r3, r3, #12
}
 800086c:	4618      	mov	r0, r3
 800086e:	46bd      	mov	sp, r7
 8000870:	bc80      	pop	{r7}
 8000872:	4770      	bx	lr
 8000874:	40021000 	.word	0x40021000

08000878 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000880:	4b06      	ldr	r3, [pc, #24]	; (800089c <LL_RCC_SetAHBPrescaler+0x24>)
 8000882:	685b      	ldr	r3, [r3, #4]
 8000884:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000888:	4904      	ldr	r1, [pc, #16]	; (800089c <LL_RCC_SetAHBPrescaler+0x24>)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	4313      	orrs	r3, r2
 800088e:	604b      	str	r3, [r1, #4]
}
 8000890:	bf00      	nop
 8000892:	370c      	adds	r7, #12
 8000894:	46bd      	mov	sp, r7
 8000896:	bc80      	pop	{r7}
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	40021000 	.word	0x40021000

080008a0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80008a8:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <LL_RCC_SetAPB1Prescaler+0x24>)
 80008aa:	685b      	ldr	r3, [r3, #4]
 80008ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80008b0:	4904      	ldr	r1, [pc, #16]	; (80008c4 <LL_RCC_SetAPB1Prescaler+0x24>)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4313      	orrs	r3, r2
 80008b6:	604b      	str	r3, [r1, #4]
}
 80008b8:	bf00      	nop
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	bc80      	pop	{r7}
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	40021000 	.word	0x40021000

080008c8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80008d0:	4b06      	ldr	r3, [pc, #24]	; (80008ec <LL_RCC_SetAPB2Prescaler+0x24>)
 80008d2:	685b      	ldr	r3, [r3, #4]
 80008d4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80008d8:	4904      	ldr	r1, [pc, #16]	; (80008ec <LL_RCC_SetAPB2Prescaler+0x24>)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	4313      	orrs	r3, r2
 80008de:	604b      	str	r3, [r1, #4]
}
 80008e0:	bf00      	nop
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bc80      	pop	{r7}
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	40021000 	.word	0x40021000

080008f0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80008f4:	4b04      	ldr	r3, [pc, #16]	; (8000908 <LL_RCC_PLL_Enable+0x18>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a03      	ldr	r2, [pc, #12]	; (8000908 <LL_RCC_PLL_Enable+0x18>)
 80008fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80008fe:	6013      	str	r3, [r2, #0]
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	bc80      	pop	{r7}
 8000906:	4770      	bx	lr
 8000908:	40021000 	.word	0x40021000

0800090c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <LL_RCC_PLL_IsReady+0x20>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000918:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800091c:	bf0c      	ite	eq
 800091e:	2301      	moveq	r3, #1
 8000920:	2300      	movne	r3, #0
 8000922:	b2db      	uxtb	r3, r3
}
 8000924:	4618      	mov	r0, r3
 8000926:	46bd      	mov	sp, r7
 8000928:	bc80      	pop	{r7}
 800092a:	4770      	bx	lr
 800092c:	40021000 	.word	0x40021000

08000930 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 800093a:	4b08      	ldr	r3, [pc, #32]	; (800095c <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	430b      	orrs	r3, r1
 800094c:	4903      	ldr	r1, [pc, #12]	; (800095c <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 800094e:	4313      	orrs	r3, r2
 8000950:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 8000952:	bf00      	nop
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	bc80      	pop	{r7}
 800095a:	4770      	bx	lr
 800095c:	40021000 	.word	0x40021000

08000960 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <LL_FLASH_SetLatency+0x24>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f023 0207 	bic.w	r2, r3, #7
 8000970:	4904      	ldr	r1, [pc, #16]	; (8000984 <LL_FLASH_SetLatency+0x24>)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4313      	orrs	r3, r2
 8000976:	600b      	str	r3, [r1, #0]
}
 8000978:	bf00      	nop
 800097a:	370c      	adds	r7, #12
 800097c:	46bd      	mov	sp, r7
 800097e:	bc80      	pop	{r7}
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	40022000 	.word	0x40022000

08000988 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800098c:	4b03      	ldr	r3, [pc, #12]	; (800099c <LL_FLASH_GetLatency+0x14>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f003 0307 	and.w	r3, r3, #7
}
 8000994:	4618      	mov	r0, r3
 8000996:	46bd      	mov	sp, r7
 8000998:	bc80      	pop	{r7}
 800099a:	4770      	bx	lr
 800099c:	40022000 	.word	0x40022000

080009a0 <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	695b      	ldr	r3, [r3, #20]
 80009ac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	615a      	str	r2, [r3, #20]
}
 80009b4:	bf00      	nop
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bc80      	pop	{r7}
 80009bc:	4770      	bx	lr

080009be <LL_USART_DMA_GetRegAddr>:
  * @note   Address of Data Register is valid for both Transmit and Receive transfers.
  * @param  USARTx USART Instance
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx)
{
 80009be:	b480      	push	{r7}
 80009c0:	b083      	sub	sp, #12
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
  /* return address of DR register */
  return ((uint32_t) & (USARTx->DR));
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	3304      	adds	r3, #4
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	370c      	adds	r7, #12
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bc80      	pop	{r7}
 80009d2:	4770      	bx	lr

080009d4 <MPU_begin>:
int whoAmIAK8963();

//-------------------------------------------

/* starts communication with the MPU-9250 */
int MPU_begin(){
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  // select clock source to gyro
  if(writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL) < 0){
 80009d8:	236b      	movs	r3, #107	; 0x6b
 80009da:	2201      	movs	r2, #1
 80009dc:	4611      	mov	r1, r2
 80009de:	4618      	mov	r0, r3
 80009e0:	f000 f934 	bl	8000c4c <writeRegister>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	da02      	bge.n	80009f0 <MPU_begin+0x1c>
    return -1;
 80009ea:	f04f 33ff 	mov.w	r3, #4294967295
 80009ee:	e101      	b.n	8000bf4 <MPU_begin+0x220>
  }
  // enable I2C master mode
  if(writeRegister(USER_CTRL,I2C_MST_EN) < 0){
 80009f0:	236a      	movs	r3, #106	; 0x6a
 80009f2:	2220      	movs	r2, #32
 80009f4:	4611      	mov	r1, r2
 80009f6:	4618      	mov	r0, r3
 80009f8:	f000 f928 	bl	8000c4c <writeRegister>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	da02      	bge.n	8000a08 <MPU_begin+0x34>
    return -2;
 8000a02:	f06f 0301 	mvn.w	r3, #1
 8000a06:	e0f5      	b.n	8000bf4 <MPU_begin+0x220>
  }
  // set the I2C bus speed to 400 kHz
  if(writeRegister(I2C_MST_CTRL,I2C_MST_CLK) < 0){
 8000a08:	2324      	movs	r3, #36	; 0x24
 8000a0a:	220d      	movs	r2, #13
 8000a0c:	4611      	mov	r1, r2
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f000 f91c 	bl	8000c4c <writeRegister>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	da02      	bge.n	8000a20 <MPU_begin+0x4c>
    return -3;
 8000a1a:	f06f 0302 	mvn.w	r3, #2
 8000a1e:	e0e9      	b.n	8000bf4 <MPU_begin+0x220>
  }
  // set AK8963 to Power Down
  writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 8000a20:	230a      	movs	r3, #10
 8000a22:	2200      	movs	r2, #0
 8000a24:	4611      	mov	r1, r2
 8000a26:	4618      	mov	r0, r3
 8000a28:	f000 f9d0 	bl	8000dcc <writeAK8963Register>
  // reset the MPU9250
  writeRegister(PWR_MGMNT_1,PWR_RESET);
 8000a2c:	236b      	movs	r3, #107	; 0x6b
 8000a2e:	2280      	movs	r2, #128	; 0x80
 8000a30:	4611      	mov	r1, r2
 8000a32:	4618      	mov	r0, r3
 8000a34:	f000 f90a 	bl	8000c4c <writeRegister>
  // wait for MPU-9250 to come back up
  HAL_Delay(10);
 8000a38:	200a      	movs	r0, #10
 8000a3a:	f001 f8d1 	bl	8001be0 <HAL_Delay>
  // reset the AK8963
  writeAK8963Register(AK8963_CNTL2,AK8963_RESET);
 8000a3e:	230b      	movs	r3, #11
 8000a40:	2201      	movs	r2, #1
 8000a42:	4611      	mov	r1, r2
 8000a44:	4618      	mov	r0, r3
 8000a46:	f000 f9c1 	bl	8000dcc <writeAK8963Register>
  // select clock source to gyro
  if(writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL) < 0){
 8000a4a:	236b      	movs	r3, #107	; 0x6b
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	4611      	mov	r1, r2
 8000a50:	4618      	mov	r0, r3
 8000a52:	f000 f8fb 	bl	8000c4c <writeRegister>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	da02      	bge.n	8000a62 <MPU_begin+0x8e>
    return -4;
 8000a5c:	f06f 0303 	mvn.w	r3, #3
 8000a60:	e0c8      	b.n	8000bf4 <MPU_begin+0x220>
  }
  // check the WHO AM I byte, expected value is 0x71 (decimal 113) or 0x73 (decimal 115)
  if((whoAmI() != 113)&&(whoAmI() != 115)){
 8000a62:	f000 f8cb 	bl	8000bfc <whoAmI>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b71      	cmp	r3, #113	; 0x71
 8000a6a:	d007      	beq.n	8000a7c <MPU_begin+0xa8>
 8000a6c:	f000 f8c6 	bl	8000bfc <whoAmI>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b73      	cmp	r3, #115	; 0x73
 8000a74:	d002      	beq.n	8000a7c <MPU_begin+0xa8>
    return -5;
 8000a76:	f06f 0304 	mvn.w	r3, #4
 8000a7a:	e0bb      	b.n	8000bf4 <MPU_begin+0x220>
  }
  // enable accelerometer and gyro
  if(writeRegister(PWR_MGMNT_2,SEN_ENABLE) < 0){
 8000a7c:	236c      	movs	r3, #108	; 0x6c
 8000a7e:	2200      	movs	r2, #0
 8000a80:	4611      	mov	r1, r2
 8000a82:	4618      	mov	r0, r3
 8000a84:	f000 f8e2 	bl	8000c4c <writeRegister>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	da02      	bge.n	8000a94 <MPU_begin+0xc0>
    return -6;
 8000a8e:	f06f 0305 	mvn.w	r3, #5
 8000a92:	e0af      	b.n	8000bf4 <MPU_begin+0x220>
  }
  // setting accel range to 16G as default
  if(writeRegister(ACCEL_CONFIG,ACCEL_FS_SEL_16G) < 0){
 8000a94:	231c      	movs	r3, #28
 8000a96:	2218      	movs	r2, #24
 8000a98:	4611      	mov	r1, r2
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f000 f8d6 	bl	8000c4c <writeRegister>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	da02      	bge.n	8000aac <MPU_begin+0xd8>
    return -7;
 8000aa6:	f06f 0306 	mvn.w	r3, #6
 8000aaa:	e0a3      	b.n	8000bf4 <MPU_begin+0x220>
  }

  // setting the gyro range to 2000DPS as default
  if(writeRegister(GYRO_CONFIG,GYRO_FS_SEL_250DPS) < 0){
 8000aac:	231b      	movs	r3, #27
 8000aae:	2200      	movs	r2, #0
 8000ab0:	4611      	mov	r1, r2
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f000 f8ca 	bl	8000c4c <writeRegister>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	da02      	bge.n	8000ac4 <MPU_begin+0xf0>
    return -8;
 8000abe:	f06f 0307 	mvn.w	r3, #7
 8000ac2:	e097      	b.n	8000bf4 <MPU_begin+0x220>
  }

  // setting bandwidth to 184Hz as default
  if(writeRegister(ACCEL_CONFIG2,DLPF_184) < 0){
 8000ac4:	231d      	movs	r3, #29
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	4611      	mov	r1, r2
 8000aca:	4618      	mov	r0, r3
 8000acc:	f000 f8be 	bl	8000c4c <writeRegister>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	da02      	bge.n	8000adc <MPU_begin+0x108>
    return -9;
 8000ad6:	f06f 0308 	mvn.w	r3, #8
 8000ada:	e08b      	b.n	8000bf4 <MPU_begin+0x220>
  }
  if(writeRegister(CONFIG,DLPF_184) < 0){ // setting gyro bandwidth to 184Hz
 8000adc:	231a      	movs	r3, #26
 8000ade:	2201      	movs	r2, #1
 8000ae0:	4611      	mov	r1, r2
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f000 f8b2 	bl	8000c4c <writeRegister>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	da02      	bge.n	8000af4 <MPU_begin+0x120>
    return -10;
 8000aee:	f06f 0309 	mvn.w	r3, #9
 8000af2:	e07f      	b.n	8000bf4 <MPU_begin+0x220>
  }

  // setting the sample rate divider to 0 as default
  if(writeRegister(SMPDIV,0x00) < 0){
 8000af4:	2319      	movs	r3, #25
 8000af6:	2100      	movs	r1, #0
 8000af8:	4618      	mov	r0, r3
 8000afa:	f000 f8a7 	bl	8000c4c <writeRegister>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	da02      	bge.n	8000b0a <MPU_begin+0x136>
    return -11;
 8000b04:	f06f 030a 	mvn.w	r3, #10
 8000b08:	e074      	b.n	8000bf4 <MPU_begin+0x220>
  }

  // enable I2C master mode
  if(writeRegister(USER_CTRL,I2C_MST_EN) < 0){
 8000b0a:	236a      	movs	r3, #106	; 0x6a
 8000b0c:	2220      	movs	r2, #32
 8000b0e:	4611      	mov	r1, r2
 8000b10:	4618      	mov	r0, r3
 8000b12:	f000 f89b 	bl	8000c4c <writeRegister>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	da02      	bge.n	8000b22 <MPU_begin+0x14e>
  	return -12;
 8000b1c:	f06f 030b 	mvn.w	r3, #11
 8000b20:	e068      	b.n	8000bf4 <MPU_begin+0x220>
  }
	// set the I2C bus speed to 400 kHz
	if( writeRegister(I2C_MST_CTRL,I2C_MST_CLK) < 0){
 8000b22:	2324      	movs	r3, #36	; 0x24
 8000b24:	220d      	movs	r2, #13
 8000b26:	4611      	mov	r1, r2
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f000 f88f 	bl	8000c4c <writeRegister>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	da02      	bge.n	8000b3a <MPU_begin+0x166>
		return -13;
 8000b34:	f06f 030c 	mvn.w	r3, #12
 8000b38:	e05c      	b.n	8000bf4 <MPU_begin+0x220>
	}
	// check AK8963 WHO AM I register, expected value is 0x48 (decimal 72)
	if( whoAmIAK8963() != 72 ){
 8000b3a:	f000 f873 	bl	8000c24 <whoAmIAK8963>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b48      	cmp	r3, #72	; 0x48
 8000b42:	d002      	beq.n	8000b4a <MPU_begin+0x176>
    return -14;
 8000b44:	f06f 030d 	mvn.w	r3, #13
 8000b48:	e054      	b.n	8000bf4 <MPU_begin+0x220>
	}

  /* get the magnetometer calibration */
  // set AK8963 to Power Down
  if(writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN) < 0){
 8000b4a:	230a      	movs	r3, #10
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	4611      	mov	r1, r2
 8000b50:	4618      	mov	r0, r3
 8000b52:	f000 f93b 	bl	8000dcc <writeAK8963Register>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	da02      	bge.n	8000b62 <MPU_begin+0x18e>
    return -15;
 8000b5c:	f06f 030e 	mvn.w	r3, #14
 8000b60:	e048      	b.n	8000bf4 <MPU_begin+0x220>
  }
  HAL_Delay(100); // long wait between AK8963 mode changes
 8000b62:	2064      	movs	r0, #100	; 0x64
 8000b64:	f001 f83c 	bl	8001be0 <HAL_Delay>
  // set AK8963 to FUSE ROM access
  if(writeAK8963Register(AK8963_CNTL1,AK8963_FUSE_ROM) < 0){
 8000b68:	230a      	movs	r3, #10
 8000b6a:	220f      	movs	r2, #15
 8000b6c:	4611      	mov	r1, r2
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f000 f92c 	bl	8000dcc <writeAK8963Register>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	da02      	bge.n	8000b80 <MPU_begin+0x1ac>
    return -16;
 8000b7a:	f06f 030f 	mvn.w	r3, #15
 8000b7e:	e039      	b.n	8000bf4 <MPU_begin+0x220>
  }




  HAL_Delay(100); // long wait between AK8963 mode changes
 8000b80:	2064      	movs	r0, #100	; 0x64
 8000b82:	f001 f82d 	bl	8001be0 <HAL_Delay>
  // read the AK8963 ASA registers and compute magnetometer scale factors
  readAK8963Registers(AK8963_ASA,3,_buffer);
 8000b86:	2310      	movs	r3, #16
 8000b88:	4a1b      	ldr	r2, [pc, #108]	; (8000bf8 <MPU_begin+0x224>)
 8000b8a:	2103      	movs	r1, #3
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f000 f973 	bl	8000e78 <readAK8963Registers>




  // set AK8963 to Power Down
  if(writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN) < 0){
 8000b92:	230a      	movs	r3, #10
 8000b94:	2200      	movs	r2, #0
 8000b96:	4611      	mov	r1, r2
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f000 f917 	bl	8000dcc <writeAK8963Register>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	da02      	bge.n	8000baa <MPU_begin+0x1d6>
    return -17;
 8000ba4:	f06f 0310 	mvn.w	r3, #16
 8000ba8:	e024      	b.n	8000bf4 <MPU_begin+0x220>
  }
  HAL_Delay(100); // long wait between AK8963 mode changes
 8000baa:	2064      	movs	r0, #100	; 0x64
 8000bac:	f001 f818 	bl	8001be0 <HAL_Delay>
  // set AK8963 to 16 bit resolution, 100 Hz update rate
  if(writeAK8963Register(AK8963_CNTL1,AK8963_CNT_MEAS2) < 0){
 8000bb0:	230a      	movs	r3, #10
 8000bb2:	2216      	movs	r2, #22
 8000bb4:	4611      	mov	r1, r2
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f000 f908 	bl	8000dcc <writeAK8963Register>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	da02      	bge.n	8000bc8 <MPU_begin+0x1f4>
    return -18;
 8000bc2:	f06f 0311 	mvn.w	r3, #17
 8000bc6:	e015      	b.n	8000bf4 <MPU_begin+0x220>
  }
  HAL_Delay(100); // long wait between AK8963 mode changes
 8000bc8:	2064      	movs	r0, #100	; 0x64
 8000bca:	f001 f809 	bl	8001be0 <HAL_Delay>
  // select clock source to gyro
  if(writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL) < 0){
 8000bce:	236b      	movs	r3, #107	; 0x6b
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	4611      	mov	r1, r2
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f000 f839 	bl	8000c4c <writeRegister>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	da02      	bge.n	8000be6 <MPU_begin+0x212>
    return -19;
 8000be0:	f06f 0312 	mvn.w	r3, #18
 8000be4:	e006      	b.n	8000bf4 <MPU_begin+0x220>
  }
  // instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
  readAK8963Registers(AK8963_HXL,7,_buffer);
 8000be6:	2303      	movs	r3, #3
 8000be8:	4a03      	ldr	r2, [pc, #12]	; (8000bf8 <MPU_begin+0x224>)
 8000bea:	2107      	movs	r1, #7
 8000bec:	4618      	mov	r0, r3
 8000bee:	f000 f943 	bl	8000e78 <readAK8963Registers>

  // successful init, return 1
  return 1;
 8000bf2:	2301      	movs	r3, #1
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000090 	.word	0x20000090

08000bfc <whoAmI>:


/* gets the MPU9250 WHO_AM_I register value, expected to be 0x71 */
int whoAmI(){
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  // read the WHO AM I register
  if (readRegisters(WHO_AM_I,1,_buffer) < 0) {
 8000c00:	2375      	movs	r3, #117	; 0x75
 8000c02:	4a07      	ldr	r2, [pc, #28]	; (8000c20 <whoAmI+0x24>)
 8000c04:	2101      	movs	r1, #1
 8000c06:	4618      	mov	r0, r3
 8000c08:	f000 f848 	bl	8000c9c <readRegisters>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	da02      	bge.n	8000c18 <whoAmI+0x1c>
    return -1;
 8000c12:	f04f 33ff 	mov.w	r3, #4294967295
 8000c16:	e001      	b.n	8000c1c <whoAmI+0x20>
  }
  // return the register value
  return _buffer[0];
 8000c18:	4b01      	ldr	r3, [pc, #4]	; (8000c20 <whoAmI+0x24>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20000090 	.word	0x20000090

08000c24 <whoAmIAK8963>:

/* gets the AK8963 WHO_AM_I register value, expected to be 0x48 */
int whoAmIAK8963(){
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  // read the WHO AM I register
  if (readAK8963Registers(AK8963_WHO_AM_I,1,_buffer) < 0) {
 8000c28:	2300      	movs	r3, #0
 8000c2a:	4a07      	ldr	r2, [pc, #28]	; (8000c48 <whoAmIAK8963+0x24>)
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f000 f922 	bl	8000e78 <readAK8963Registers>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	da02      	bge.n	8000c40 <whoAmIAK8963+0x1c>
    return -1;
 8000c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3e:	e001      	b.n	8000c44 <whoAmIAK8963+0x20>
  }
  // return the register value
  return _buffer[0];
 8000c40:	4b01      	ldr	r3, [pc, #4]	; (8000c48 <whoAmIAK8963+0x24>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	20000090 	.word	0x20000090

08000c4c <writeRegister>:


/* writes a byte to MPU9250 register given a register address and data */
int writeRegister(uint8_t subAddress, uint8_t data)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	460a      	mov	r2, r1
 8000c56:	71fb      	strb	r3, [r7, #7]
 8000c58:	4613      	mov	r3, r2
 8000c5a:	71bb      	strb	r3, [r7, #6]
  /* write data to device */
	HAL_StatusTypeDef status = HAL_OK;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	73fb      	strb	r3, [r7, #15]
	//status = HAL_I2C_Mem_Write(&hi2c1, _address, subAddress, I2C_MEMADD_SIZE_8BIT, &data, 1, 0x10000);
	MPU_SPI_Write(&data, subAddress, 1);
 8000c60:	79f9      	ldrb	r1, [r7, #7]
 8000c62:	1dbb      	adds	r3, r7, #6
 8000c64:	2201      	movs	r2, #1
 8000c66:	4618      	mov	r0, r3
 8000c68:	f000 f884 	bl	8000d74 <MPU_SPI_Write>
	HAL_Delay(10);
 8000c6c:	200a      	movs	r0, #10
 8000c6e:	f000 ffb7 	bl	8001be0 <HAL_Delay>

  /* read back the register */
  readRegisters(subAddress,1,_buffer);
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	4a08      	ldr	r2, [pc, #32]	; (8000c98 <writeRegister+0x4c>)
 8000c76:	2101      	movs	r1, #1
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f000 f80f 	bl	8000c9c <readRegisters>
  /* check the read back register against the written register */
  if(_buffer[0] == data) {
 8000c7e:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <writeRegister+0x4c>)
 8000c80:	781a      	ldrb	r2, [r3, #0]
 8000c82:	79bb      	ldrb	r3, [r7, #6]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d101      	bne.n	8000c8c <writeRegister+0x40>
    return 1;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	e001      	b.n	8000c90 <writeRegister+0x44>
  }
  else{
    return -1;
 8000c8c:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3710      	adds	r7, #16
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20000090 	.word	0x20000090

08000c9c <readRegisters>:

/* reads registers from MPU9250 given a starting register address, number of bytes, and a pointer to store data */
int readRegisters(uint8_t subAddress, uint8_t count, uint8_t* dest){
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	603a      	str	r2, [r7, #0]
 8000ca6:	71fb      	strb	r3, [r7, #7]
 8000ca8:	460b      	mov	r3, r1
 8000caa:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef status = HAL_OK;
 8000cac:	2300      	movs	r3, #0
 8000cae:	73fb      	strb	r3, [r7, #15]
//	status = HAL_I2C_Mem_Read(&hi2c1, _address, subAddress, I2C_MEMADD_SIZE_8BIT, dest, count, 0x10000);
	MPU_SPI_Read(dest, subAddress, count);
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
 8000cb2:	79ba      	ldrb	r2, [r7, #6]
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	6838      	ldr	r0, [r7, #0]
 8000cb8:	f000 f82a 	bl	8000d10 <MPU_SPI_Read>
	if (status == HAL_OK) {
 8000cbc:	7bfb      	ldrb	r3, [r7, #15]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d101      	bne.n	8000cc6 <readRegisters+0x2a>
      return 1;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e001      	b.n	8000cca <readRegisters+0x2e>
    } else {
      return -1;
 8000cc6:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3710      	adds	r7, #16
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <SPIx_WriteRead>:

uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af02      	add	r7, sp, #8
 8000cda:	4603      	mov	r3, r0
 8000cdc:	71fb      	strb	r3, [r7, #7]
	uint8_t receivedbyte = 0;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	73fb      	strb	r3, [r7, #15]
	if(HAL_SPI_TransmitReceive(&hspi1,(uint8_t*) &Byte,(uint8_t*) &receivedbyte,1,0x1000)!=HAL_OK)
 8000ce2:	f107 020f 	add.w	r2, r7, #15
 8000ce6:	1df9      	adds	r1, r7, #7
 8000ce8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cec:	9300      	str	r3, [sp, #0]
 8000cee:	2301      	movs	r3, #1
 8000cf0:	4806      	ldr	r0, [pc, #24]	; (8000d0c <SPIx_WriteRead+0x38>)
 8000cf2:	f001 fab6 	bl	8002262 <HAL_SPI_TransmitReceive>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <SPIx_WriteRead+0x2c>
	{
		return -1;
 8000cfc:	23ff      	movs	r3, #255	; 0xff
 8000cfe:	e000      	b.n	8000d02 <SPIx_WriteRead+0x2e>
	}
	else
	{
	}
	return receivedbyte;
 8000d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3710      	adds	r7, #16
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000124 	.word	0x20000124

08000d10 <MPU_SPI_Read>:

void MPU_SPI_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	460b      	mov	r3, r1
 8000d1a:	70fb      	strb	r3, [r7, #3]
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	803b      	strh	r3, [r7, #0]
	ReadAddr |= (uint8_t)READWRITE_CMD;
 8000d20:	2280      	movs	r2, #128	; 0x80
 8000d22:	78fb      	ldrb	r3, [r7, #3]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	70fb      	strb	r3, [r7, #3]
	CS_ON;
 8000d28:	2200      	movs	r2, #0
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	4810      	ldr	r0, [pc, #64]	; (8000d70 <MPU_SPI_Read+0x60>)
 8000d2e:	f001 f9e3 	bl	80020f8 <HAL_GPIO_WritePin>
	SPIx_WriteRead(ReadAddr);
 8000d32:	78fb      	ldrb	r3, [r7, #3]
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff ffcd 	bl	8000cd4 <SPIx_WriteRead>
	while(NumByteToRead>0x00)
 8000d3a:	e00d      	b.n	8000d58 <MPU_SPI_Read+0x48>
	{
		*pBuffer=SPIx_WriteRead(DUMMY_BYTE);
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f7ff ffc8 	bl	8000cd4 <SPIx_WriteRead>
 8000d44:	4603      	mov	r3, r0
 8000d46:	461a      	mov	r2, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	701a      	strb	r2, [r3, #0]
		NumByteToRead--;
 8000d4c:	883b      	ldrh	r3, [r7, #0]
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	803b      	strh	r3, [r7, #0]
		pBuffer++;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	3301      	adds	r3, #1
 8000d56:	607b      	str	r3, [r7, #4]
	while(NumByteToRead>0x00)
 8000d58:	883b      	ldrh	r3, [r7, #0]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d1ee      	bne.n	8000d3c <MPU_SPI_Read+0x2c>
	}
	CS_OFF;
 8000d5e:	2201      	movs	r2, #1
 8000d60:	2101      	movs	r1, #1
 8000d62:	4803      	ldr	r0, [pc, #12]	; (8000d70 <MPU_SPI_Read+0x60>)
 8000d64:	f001 f9c8 	bl	80020f8 <HAL_GPIO_WritePin>
}
 8000d68:	bf00      	nop
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40010c00 	.word	0x40010c00

08000d74 <MPU_SPI_Write>:
//--------------------------------------
void MPU_SPI_Write (uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	460b      	mov	r3, r1
 8000d7e:	70fb      	strb	r3, [r7, #3]
 8000d80:	4613      	mov	r3, r2
 8000d82:	803b      	strh	r3, [r7, #0]
	CS_ON;
 8000d84:	2200      	movs	r2, #0
 8000d86:	2101      	movs	r1, #1
 8000d88:	480f      	ldr	r0, [pc, #60]	; (8000dc8 <MPU_SPI_Write+0x54>)
 8000d8a:	f001 f9b5 	bl	80020f8 <HAL_GPIO_WritePin>
	SPIx_WriteRead(WriteAddr);
 8000d8e:	78fb      	ldrb	r3, [r7, #3]
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff ff9f 	bl	8000cd4 <SPIx_WriteRead>
	while(NumByteToWrite>=0x01)
 8000d96:	e00a      	b.n	8000dae <MPU_SPI_Write+0x3a>
	{
		SPIx_WriteRead(*pBuffer);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff ff99 	bl	8000cd4 <SPIx_WriteRead>
		NumByteToWrite--;
 8000da2:	883b      	ldrh	r3, [r7, #0]
 8000da4:	3b01      	subs	r3, #1
 8000da6:	803b      	strh	r3, [r7, #0]
		pBuffer++;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	3301      	adds	r3, #1
 8000dac:	607b      	str	r3, [r7, #4]
	while(NumByteToWrite>=0x01)
 8000dae:	883b      	ldrh	r3, [r7, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d1f1      	bne.n	8000d98 <MPU_SPI_Write+0x24>
	}
	CS_OFF;
 8000db4:	2201      	movs	r2, #1
 8000db6:	2101      	movs	r1, #1
 8000db8:	4803      	ldr	r0, [pc, #12]	; (8000dc8 <MPU_SPI_Write+0x54>)
 8000dba:	f001 f99d 	bl	80020f8 <HAL_GPIO_WritePin>
}
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40010c00 	.word	0x40010c00

08000dcc <writeAK8963Register>:


/* writes a register to the AK8963 given a register address and data */
int writeAK8963Register(uint8_t subAddress, uint8_t data){
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	460a      	mov	r2, r1
 8000dd6:	71fb      	strb	r3, [r7, #7]
 8000dd8:	4613      	mov	r3, r2
 8000dda:	71bb      	strb	r3, [r7, #6]
  // set slave 0 to the AK8963 and set for write
	if (writeRegister(I2C_SLV0_ADDR,AK8963_I2C_ADDR) < 0) {
 8000ddc:	2325      	movs	r3, #37	; 0x25
 8000dde:	220c      	movs	r2, #12
 8000de0:	4611      	mov	r1, r2
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff ff32 	bl	8000c4c <writeRegister>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	da02      	bge.n	8000df4 <writeAK8963Register+0x28>
    return -1;
 8000dee:	f04f 33ff 	mov.w	r3, #4294967295
 8000df2:	e03b      	b.n	8000e6c <writeAK8963Register+0xa0>
  }
  // set the register to the desired AK8963 sub address
	if (writeRegister(I2C_SLV0_REG,subAddress) < 0) {
 8000df4:	2226      	movs	r2, #38	; 0x26
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4610      	mov	r0, r2
 8000dfc:	f7ff ff26 	bl	8000c4c <writeRegister>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	da02      	bge.n	8000e0c <writeAK8963Register+0x40>
    return -2;
 8000e06:	f06f 0301 	mvn.w	r3, #1
 8000e0a:	e02f      	b.n	8000e6c <writeAK8963Register+0xa0>
  }
  // store the data for write
	if (writeRegister(I2C_SLV0_DO,data) < 0) {
 8000e0c:	2263      	movs	r2, #99	; 0x63
 8000e0e:	79bb      	ldrb	r3, [r7, #6]
 8000e10:	4619      	mov	r1, r3
 8000e12:	4610      	mov	r0, r2
 8000e14:	f7ff ff1a 	bl	8000c4c <writeRegister>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	da02      	bge.n	8000e24 <writeAK8963Register+0x58>
    return -3;
 8000e1e:	f06f 0302 	mvn.w	r3, #2
 8000e22:	e023      	b.n	8000e6c <writeAK8963Register+0xa0>
  }
  // enable I2C and send 1 byte
	if (writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | (uint8_t)1) < 0) {
 8000e24:	2227      	movs	r2, #39	; 0x27
 8000e26:	2380      	movs	r3, #128	; 0x80
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4610      	mov	r0, r2
 8000e32:	f7ff ff0b 	bl	8000c4c <writeRegister>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	da02      	bge.n	8000e42 <writeAK8963Register+0x76>
    return -4;
 8000e3c:	f06f 0303 	mvn.w	r3, #3
 8000e40:	e014      	b.n	8000e6c <writeAK8963Register+0xa0>
  }
	// read the register and confirm
	if (readAK8963Registers(subAddress,1,_buffer) < 0) {
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	4a0b      	ldr	r2, [pc, #44]	; (8000e74 <writeAK8963Register+0xa8>)
 8000e46:	2101      	movs	r1, #1
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f000 f815 	bl	8000e78 <readAK8963Registers>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	da02      	bge.n	8000e5a <writeAK8963Register+0x8e>
    return -5;
 8000e54:	f06f 0304 	mvn.w	r3, #4
 8000e58:	e008      	b.n	8000e6c <writeAK8963Register+0xa0>
  }
	if(_buffer[0] == data) {
 8000e5a:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <writeAK8963Register+0xa8>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	79ba      	ldrb	r2, [r7, #6]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d101      	bne.n	8000e68 <writeAK8963Register+0x9c>
  	return 1;
 8000e64:	2301      	movs	r3, #1
 8000e66:	e001      	b.n	8000e6c <writeAK8963Register+0xa0>
  } else{
  	return -6;
 8000e68:	f06f 0305 	mvn.w	r3, #5
  }
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20000090 	.word	0x20000090

08000e78 <readAK8963Registers>:

/* reads registers from the AK8963 */
int readAK8963Registers(uint8_t subAddress, uint8_t count, uint8_t* dest){
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	603a      	str	r2, [r7, #0]
 8000e82:	71fb      	strb	r3, [r7, #7]
 8000e84:	460b      	mov	r3, r1
 8000e86:	71bb      	strb	r3, [r7, #6]
  // set slave 0 to the AK8963 and set for read
	if (writeRegister(I2C_SLV0_ADDR,AK8963_I2C_ADDR | I2C_READ_FLAG) < 0) {
 8000e88:	2025      	movs	r0, #37	; 0x25
 8000e8a:	220c      	movs	r2, #12
 8000e8c:	2380      	movs	r3, #128	; 0x80
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	4619      	mov	r1, r3
 8000e94:	f7ff feda 	bl	8000c4c <writeRegister>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	da02      	bge.n	8000ea4 <readAK8963Registers+0x2c>
    return -1;
 8000e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea2:	e027      	b.n	8000ef4 <readAK8963Registers+0x7c>
  }
  // set the register to the desired AK8963 sub address
	if (writeRegister(I2C_SLV0_REG,subAddress) < 0) {
 8000ea4:	2226      	movs	r2, #38	; 0x26
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4610      	mov	r0, r2
 8000eac:	f7ff fece 	bl	8000c4c <writeRegister>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	da02      	bge.n	8000ebc <readAK8963Registers+0x44>
    return -2;
 8000eb6:	f06f 0301 	mvn.w	r3, #1
 8000eba:	e01b      	b.n	8000ef4 <readAK8963Registers+0x7c>
  }
  // enable I2C and request the bytes
	if (writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | count) < 0) {
 8000ebc:	2027      	movs	r0, #39	; 0x27
 8000ebe:	2280      	movs	r2, #128	; 0x80
 8000ec0:	79bb      	ldrb	r3, [r7, #6]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	f7ff fec0 	bl	8000c4c <writeRegister>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	da02      	bge.n	8000ed8 <readAK8963Registers+0x60>
    return -3;
 8000ed2:	f06f 0302 	mvn.w	r3, #2
 8000ed6:	e00d      	b.n	8000ef4 <readAK8963Registers+0x7c>
  }
	HAL_Delay(1); // takes some time for these registers to fill
 8000ed8:	2001      	movs	r0, #1
 8000eda:	f000 fe81 	bl	8001be0 <HAL_Delay>
  // read the bytes off the MPU9250 EXT_SENS_DATA registers
	_status = readRegisters(EXT_SENS_DATA_00,count,dest);
 8000ede:	2049      	movs	r0, #73	; 0x49
 8000ee0:	79bb      	ldrb	r3, [r7, #6]
 8000ee2:	683a      	ldr	r2, [r7, #0]
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	f7ff fed9 	bl	8000c9c <readRegisters>
 8000eea:	4603      	mov	r3, r0
 8000eec:	4a03      	ldr	r2, [pc, #12]	; (8000efc <readAK8963Registers+0x84>)
 8000eee:	6013      	str	r3, [r2, #0]
  return _status;
 8000ef0:	4b02      	ldr	r3, [pc, #8]	; (8000efc <readAK8963Registers+0x84>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	2000008c 	.word	0x2000008c

08000f00 <setSrd>:
  }
 return 1;
}

/* sets the sample rate divider to values other than default */
int setSrd(uint8_t srd) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	71fb      	strb	r3, [r7, #7]

  /* setting the sample rate divider to 19 to facilitate setting up magnetometer */
  if(writeRegister(SMPDIV,19) < 0){ // setting the sample rate divider
 8000f0a:	2319      	movs	r3, #25
 8000f0c:	2113      	movs	r1, #19
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff fe9c 	bl	8000c4c <writeRegister>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	da02      	bge.n	8000f20 <setSrd+0x20>
    return -1;
 8000f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f1e:	e058      	b.n	8000fd2 <setSrd+0xd2>
  }
  if(srd > 9){
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	2b09      	cmp	r3, #9
 8000f24:	d924      	bls.n	8000f70 <setSrd+0x70>
    // set AK8963 to Power Down
    if(writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN) < 0){
 8000f26:	230a      	movs	r3, #10
 8000f28:	2200      	movs	r2, #0
 8000f2a:	4611      	mov	r1, r2
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff ff4d 	bl	8000dcc <writeAK8963Register>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	da02      	bge.n	8000f3e <setSrd+0x3e>
      return -2;
 8000f38:	f06f 0301 	mvn.w	r3, #1
 8000f3c:	e049      	b.n	8000fd2 <setSrd+0xd2>
    }
    HAL_Delay(100); // long wait between AK8963 mode changes
 8000f3e:	2064      	movs	r0, #100	; 0x64
 8000f40:	f000 fe4e 	bl	8001be0 <HAL_Delay>
    // set AK8963 to 16 bit resolution, 8 Hz update rate
    if(writeAK8963Register(AK8963_CNTL1,AK8963_CNT_MEAS1) < 0){
 8000f44:	230a      	movs	r3, #10
 8000f46:	2212      	movs	r2, #18
 8000f48:	4611      	mov	r1, r2
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff ff3e 	bl	8000dcc <writeAK8963Register>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	da02      	bge.n	8000f5c <setSrd+0x5c>
      return -3;
 8000f56:	f06f 0302 	mvn.w	r3, #2
 8000f5a:	e03a      	b.n	8000fd2 <setSrd+0xd2>
    }
    HAL_Delay(100); // long wait between AK8963 mode changes
 8000f5c:	2064      	movs	r0, #100	; 0x64
 8000f5e:	f000 fe3f 	bl	8001be0 <HAL_Delay>
    // instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
    readAK8963Registers(AK8963_HXL,7,_buffer);
 8000f62:	2303      	movs	r3, #3
 8000f64:	4a1d      	ldr	r2, [pc, #116]	; (8000fdc <setSrd+0xdc>)
 8000f66:	2107      	movs	r1, #7
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff ff85 	bl	8000e78 <readAK8963Registers>
 8000f6e:	e023      	b.n	8000fb8 <setSrd+0xb8>
  } else {
    // set AK8963 to Power Down
    if(writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN) < 0){
 8000f70:	230a      	movs	r3, #10
 8000f72:	2200      	movs	r2, #0
 8000f74:	4611      	mov	r1, r2
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff ff28 	bl	8000dcc <writeAK8963Register>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	da02      	bge.n	8000f88 <setSrd+0x88>
      return -2;
 8000f82:	f06f 0301 	mvn.w	r3, #1
 8000f86:	e024      	b.n	8000fd2 <setSrd+0xd2>
    }
    HAL_Delay(100); // long wait between AK8963 mode changes
 8000f88:	2064      	movs	r0, #100	; 0x64
 8000f8a:	f000 fe29 	bl	8001be0 <HAL_Delay>
    // set AK8963 to 16 bit resolution, 100 Hz update rate
    if(writeAK8963Register(AK8963_CNTL1,AK8963_CNT_MEAS2) < 0){
 8000f8e:	230a      	movs	r3, #10
 8000f90:	2216      	movs	r2, #22
 8000f92:	4611      	mov	r1, r2
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff ff19 	bl	8000dcc <writeAK8963Register>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	da02      	bge.n	8000fa6 <setSrd+0xa6>
      return -3;
 8000fa0:	f06f 0302 	mvn.w	r3, #2
 8000fa4:	e015      	b.n	8000fd2 <setSrd+0xd2>
    }
    HAL_Delay(100); // long wait between AK8963 mode changes
 8000fa6:	2064      	movs	r0, #100	; 0x64
 8000fa8:	f000 fe1a 	bl	8001be0 <HAL_Delay>
    // instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
    readAK8963Registers(AK8963_HXL,7,_buffer);
 8000fac:	2303      	movs	r3, #3
 8000fae:	4a0b      	ldr	r2, [pc, #44]	; (8000fdc <setSrd+0xdc>)
 8000fb0:	2107      	movs	r1, #7
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff ff60 	bl	8000e78 <readAK8963Registers>
  }
  /* setting the sample rate divider */
  if(writeRegister(SMPDIV,srd) < 0){ // setting the sample rate divider
 8000fb8:	2219      	movs	r2, #25
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4610      	mov	r0, r2
 8000fc0:	f7ff fe44 	bl	8000c4c <writeRegister>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	da02      	bge.n	8000fd0 <setSrd+0xd0>
    return -4;
 8000fca:	f06f 0303 	mvn.w	r3, #3
 8000fce:	e000      	b.n	8000fd2 <setSrd+0xd2>
  }
  return 1;
 8000fd0:	2301      	movs	r3, #1
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000090 	.word	0x20000090

08000fe0 <enableDataReadyInterrupt>:


/* enables the data ready interrupt */
int enableDataReadyInterrupt() {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* setting the interrupt */
  if (writeRegister(INT_PIN_CFG,INT_PULSE_50US) < 0){ // setup interrupt, 50 us pulse
 8000fe4:	2337      	movs	r3, #55	; 0x37
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	4611      	mov	r1, r2
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff fe2e 	bl	8000c4c <writeRegister>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	da02      	bge.n	8000ffc <enableDataReadyInterrupt+0x1c>
    return -1;
 8000ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffa:	e00c      	b.n	8001016 <enableDataReadyInterrupt+0x36>
  }
  if (writeRegister(INT_ENABLE,INT_RAW_RDY_EN) < 0){ // set to data ready
 8000ffc:	2338      	movs	r3, #56	; 0x38
 8000ffe:	2201      	movs	r2, #1
 8001000:	4611      	mov	r1, r2
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff fe22 	bl	8000c4c <writeRegister>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	da02      	bge.n	8001014 <enableDataReadyInterrupt+0x34>
    return -2;
 800100e:	f06f 0301 	mvn.w	r3, #1
 8001012:	e000      	b.n	8001016 <enableDataReadyInterrupt+0x36>
  }
  return 1;
 8001014:	2301      	movs	r3, #1
}
 8001016:	4618      	mov	r0, r3
 8001018:	bd80      	pop	{r7, pc}
	...

0800101c <readSensor>:
  return 1;
}


/* reads the most current data from MPU9250 and stores in buffer */
int readSensor() {
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  // grab the data from the MPU9250
  if (readRegisters(ACCEL_OUT, 21, _buffer) < 0) {
 8001020:	233b      	movs	r3, #59	; 0x3b
 8001022:	4a3e      	ldr	r2, [pc, #248]	; (800111c <readSensor+0x100>)
 8001024:	2115      	movs	r1, #21
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff fe38 	bl	8000c9c <readRegisters>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	da02      	bge.n	8001038 <readSensor+0x1c>
    return -1;
 8001032:	f04f 33ff 	mov.w	r3, #4294967295
 8001036:	e06e      	b.n	8001116 <readSensor+0xfa>
  }
  // combine into 16 bit values
  _axcounts = (((int16_t)_buffer[0]) << 8) | _buffer[1];
 8001038:	4b38      	ldr	r3, [pc, #224]	; (800111c <readSensor+0x100>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	021b      	lsls	r3, r3, #8
 800103e:	b21a      	sxth	r2, r3
 8001040:	4b36      	ldr	r3, [pc, #216]	; (800111c <readSensor+0x100>)
 8001042:	785b      	ldrb	r3, [r3, #1]
 8001044:	b21b      	sxth	r3, r3
 8001046:	4313      	orrs	r3, r2
 8001048:	b21a      	sxth	r2, r3
 800104a:	4b35      	ldr	r3, [pc, #212]	; (8001120 <readSensor+0x104>)
 800104c:	801a      	strh	r2, [r3, #0]
  _aycounts = (((int16_t)_buffer[2]) << 8) | _buffer[3];
 800104e:	4b33      	ldr	r3, [pc, #204]	; (800111c <readSensor+0x100>)
 8001050:	789b      	ldrb	r3, [r3, #2]
 8001052:	021b      	lsls	r3, r3, #8
 8001054:	b21a      	sxth	r2, r3
 8001056:	4b31      	ldr	r3, [pc, #196]	; (800111c <readSensor+0x100>)
 8001058:	78db      	ldrb	r3, [r3, #3]
 800105a:	b21b      	sxth	r3, r3
 800105c:	4313      	orrs	r3, r2
 800105e:	b21a      	sxth	r2, r3
 8001060:	4b30      	ldr	r3, [pc, #192]	; (8001124 <readSensor+0x108>)
 8001062:	801a      	strh	r2, [r3, #0]
  _azcounts = (((int16_t)_buffer[4]) << 8) | _buffer[5];
 8001064:	4b2d      	ldr	r3, [pc, #180]	; (800111c <readSensor+0x100>)
 8001066:	791b      	ldrb	r3, [r3, #4]
 8001068:	021b      	lsls	r3, r3, #8
 800106a:	b21a      	sxth	r2, r3
 800106c:	4b2b      	ldr	r3, [pc, #172]	; (800111c <readSensor+0x100>)
 800106e:	795b      	ldrb	r3, [r3, #5]
 8001070:	b21b      	sxth	r3, r3
 8001072:	4313      	orrs	r3, r2
 8001074:	b21a      	sxth	r2, r3
 8001076:	4b2c      	ldr	r3, [pc, #176]	; (8001128 <readSensor+0x10c>)
 8001078:	801a      	strh	r2, [r3, #0]
  _tcounts = (((int16_t)_buffer[6]) << 8) | _buffer[7];
 800107a:	4b28      	ldr	r3, [pc, #160]	; (800111c <readSensor+0x100>)
 800107c:	799b      	ldrb	r3, [r3, #6]
 800107e:	021b      	lsls	r3, r3, #8
 8001080:	b21a      	sxth	r2, r3
 8001082:	4b26      	ldr	r3, [pc, #152]	; (800111c <readSensor+0x100>)
 8001084:	79db      	ldrb	r3, [r3, #7]
 8001086:	b21b      	sxth	r3, r3
 8001088:	4313      	orrs	r3, r2
 800108a:	b21a      	sxth	r2, r3
 800108c:	4b27      	ldr	r3, [pc, #156]	; (800112c <readSensor+0x110>)
 800108e:	801a      	strh	r2, [r3, #0]
  _gxcounts = (((int16_t)_buffer[8]) << 8) | _buffer[9];
 8001090:	4b22      	ldr	r3, [pc, #136]	; (800111c <readSensor+0x100>)
 8001092:	7a1b      	ldrb	r3, [r3, #8]
 8001094:	021b      	lsls	r3, r3, #8
 8001096:	b21a      	sxth	r2, r3
 8001098:	4b20      	ldr	r3, [pc, #128]	; (800111c <readSensor+0x100>)
 800109a:	7a5b      	ldrb	r3, [r3, #9]
 800109c:	b21b      	sxth	r3, r3
 800109e:	4313      	orrs	r3, r2
 80010a0:	b21a      	sxth	r2, r3
 80010a2:	4b23      	ldr	r3, [pc, #140]	; (8001130 <readSensor+0x114>)
 80010a4:	801a      	strh	r2, [r3, #0]
  _gycounts = (((int16_t)_buffer[10]) << 8) | _buffer[11];
 80010a6:	4b1d      	ldr	r3, [pc, #116]	; (800111c <readSensor+0x100>)
 80010a8:	7a9b      	ldrb	r3, [r3, #10]
 80010aa:	021b      	lsls	r3, r3, #8
 80010ac:	b21a      	sxth	r2, r3
 80010ae:	4b1b      	ldr	r3, [pc, #108]	; (800111c <readSensor+0x100>)
 80010b0:	7adb      	ldrb	r3, [r3, #11]
 80010b2:	b21b      	sxth	r3, r3
 80010b4:	4313      	orrs	r3, r2
 80010b6:	b21a      	sxth	r2, r3
 80010b8:	4b1e      	ldr	r3, [pc, #120]	; (8001134 <readSensor+0x118>)
 80010ba:	801a      	strh	r2, [r3, #0]
  _gzcounts = (((int16_t)_buffer[12]) << 8) | _buffer[13];
 80010bc:	4b17      	ldr	r3, [pc, #92]	; (800111c <readSensor+0x100>)
 80010be:	7b1b      	ldrb	r3, [r3, #12]
 80010c0:	021b      	lsls	r3, r3, #8
 80010c2:	b21a      	sxth	r2, r3
 80010c4:	4b15      	ldr	r3, [pc, #84]	; (800111c <readSensor+0x100>)
 80010c6:	7b5b      	ldrb	r3, [r3, #13]
 80010c8:	b21b      	sxth	r3, r3
 80010ca:	4313      	orrs	r3, r2
 80010cc:	b21a      	sxth	r2, r3
 80010ce:	4b1a      	ldr	r3, [pc, #104]	; (8001138 <readSensor+0x11c>)
 80010d0:	801a      	strh	r2, [r3, #0]
  _hxcounts = (((int16_t)_buffer[15]) << 8) | _buffer[14];
 80010d2:	4b12      	ldr	r3, [pc, #72]	; (800111c <readSensor+0x100>)
 80010d4:	7bdb      	ldrb	r3, [r3, #15]
 80010d6:	021b      	lsls	r3, r3, #8
 80010d8:	b21a      	sxth	r2, r3
 80010da:	4b10      	ldr	r3, [pc, #64]	; (800111c <readSensor+0x100>)
 80010dc:	7b9b      	ldrb	r3, [r3, #14]
 80010de:	b21b      	sxth	r3, r3
 80010e0:	4313      	orrs	r3, r2
 80010e2:	b21a      	sxth	r2, r3
 80010e4:	4b15      	ldr	r3, [pc, #84]	; (800113c <readSensor+0x120>)
 80010e6:	801a      	strh	r2, [r3, #0]
  _hycounts = (((int16_t)_buffer[17]) << 8) | _buffer[16];
 80010e8:	4b0c      	ldr	r3, [pc, #48]	; (800111c <readSensor+0x100>)
 80010ea:	7c5b      	ldrb	r3, [r3, #17]
 80010ec:	021b      	lsls	r3, r3, #8
 80010ee:	b21a      	sxth	r2, r3
 80010f0:	4b0a      	ldr	r3, [pc, #40]	; (800111c <readSensor+0x100>)
 80010f2:	7c1b      	ldrb	r3, [r3, #16]
 80010f4:	b21b      	sxth	r3, r3
 80010f6:	4313      	orrs	r3, r2
 80010f8:	b21a      	sxth	r2, r3
 80010fa:	4b11      	ldr	r3, [pc, #68]	; (8001140 <readSensor+0x124>)
 80010fc:	801a      	strh	r2, [r3, #0]
  _hzcounts = (((int16_t)_buffer[19]) << 8) | _buffer[18];
 80010fe:	4b07      	ldr	r3, [pc, #28]	; (800111c <readSensor+0x100>)
 8001100:	7cdb      	ldrb	r3, [r3, #19]
 8001102:	021b      	lsls	r3, r3, #8
 8001104:	b21a      	sxth	r2, r3
 8001106:	4b05      	ldr	r3, [pc, #20]	; (800111c <readSensor+0x100>)
 8001108:	7c9b      	ldrb	r3, [r3, #18]
 800110a:	b21b      	sxth	r3, r3
 800110c:	4313      	orrs	r3, r2
 800110e:	b21a      	sxth	r2, r3
 8001110:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <readSensor+0x128>)
 8001112:	801a      	strh	r2, [r3, #0]
  return 1;
 8001114:	2301      	movs	r3, #1
}
 8001116:	4618      	mov	r0, r3
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20000090 	.word	0x20000090
 8001120:	200000a6 	.word	0x200000a6
 8001124:	200000a8 	.word	0x200000a8
 8001128:	200000aa 	.word	0x200000aa
 800112c:	200000b8 	.word	0x200000b8
 8001130:	200000ac 	.word	0x200000ac
 8001134:	200000ae 	.word	0x200000ae
 8001138:	200000b0 	.word	0x200000b0
 800113c:	200000b2 	.word	0x200000b2
 8001140:	200000b4 	.word	0x200000b4
 8001144:	200000b6 	.word	0x200000b6

08001148 <UART_TX_to_computer_DMA>:
		ind++;
	  }
}

void UART_TX_to_computer_DMA(unsigned char data[])
	{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
	  //uint16_t size = sizeof(data)+1;
	  uint16_t size = strlen(data);
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7fe fffb 	bl	800014c <strlen>
 8001156:	4603      	mov	r3, r0
 8001158:	81fb      	strh	r3, [r7, #14]
	  LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_4);
 800115a:	2104      	movs	r1, #4
 800115c:	480c      	ldr	r0, [pc, #48]	; (8001190 <UART_TX_to_computer_DMA+0x48>)
 800115e:	f7ff fa55 	bl	800060c <LL_DMA_DisableChannel>
	  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_4, size);
 8001162:	89fb      	ldrh	r3, [r7, #14]
 8001164:	461a      	mov	r2, r3
 8001166:	2104      	movs	r1, #4
 8001168:	4809      	ldr	r0, [pc, #36]	; (8001190 <UART_TX_to_computer_DMA+0x48>)
 800116a:	f7ff fa85 	bl	8000678 <LL_DMA_SetDataLength>
	  LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_4);
 800116e:	2104      	movs	r1, #4
 8001170:	4807      	ldr	r0, [pc, #28]	; (8001190 <UART_TX_to_computer_DMA+0x48>)
 8001172:	f7ff fa2d 	bl	80005d0 <LL_DMA_EnableChannel>
	  while (!flag_tx) {;}
 8001176:	bf00      	nop
 8001178:	4b06      	ldr	r3, [pc, #24]	; (8001194 <UART_TX_to_computer_DMA+0x4c>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d0fb      	beq.n	8001178 <UART_TX_to_computer_DMA+0x30>
	  flag_tx=0;
 8001180:	4b04      	ldr	r3, [pc, #16]	; (8001194 <UART_TX_to_computer_DMA+0x4c>)
 8001182:	2200      	movs	r2, #0
 8001184:	701a      	strb	r2, [r3, #0]
	}
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40020000 	.word	0x40020000
 8001194:	2000017c 	.word	0x2000017c

08001198 <DMA1_TransmitComplete>:

void DMA1_TransmitComplete(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  flag_tx = 1;
 800119c:	4b03      	ldr	r3, [pc, #12]	; (80011ac <DMA1_TransmitComplete+0x14>)
 800119e:	2201      	movs	r2, #1
 80011a0:	701a      	strb	r2, [r3, #0]
}
 80011a2:	bf00      	nop
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bc80      	pop	{r7}
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	2000017c 	.word	0x2000017c

080011b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011b0:	b5b0      	push	{r4, r5, r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011b6:	f000 fcb1 	bl	8001b1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ba:	f000 f851 	bl	8001260 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011be:	f7ff f991 	bl	80004e4 <MX_GPIO_Init>
  MX_DMA_Init();
 80011c2:	f7ff f869 	bl	8000298 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80011c6:	f000 fc05 	bl	80019d4 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80011ca:	f000 f905 	bl	80013d8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_4); // Отключаем каналы DMA перед настройкой
 80011ce:	2104      	movs	r1, #4
 80011d0:	4820      	ldr	r0, [pc, #128]	; (8001254 <main+0xa4>)
 80011d2:	f7ff fa1b 	bl	800060c <LL_DMA_DisableChannel>
  LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_5);
 80011d6:	2105      	movs	r1, #5
 80011d8:	481e      	ldr	r0, [pc, #120]	; (8001254 <main+0xa4>)
 80011da:	f7ff fa17 	bl	800060c <LL_DMA_DisableChannel>
  LL_DMA_ClearFlag_TC4(DMA1); // Явно сбрасываем все флаги
 80011de:	481d      	ldr	r0, [pc, #116]	; (8001254 <main+0xa4>)
 80011e0:	f7ff fab3 	bl	800074a <LL_DMA_ClearFlag_TC4>
  LL_DMA_ClearFlag_TE4(DMA1);
 80011e4:	481b      	ldr	r0, [pc, #108]	; (8001254 <main+0xa4>)
 80011e6:	f7ff fabd 	bl	8000764 <LL_DMA_ClearFlag_TE4>
  LL_USART_EnableDMAReq_TX(USART1); // Разрешаем DMA работать с USART1
 80011ea:	481b      	ldr	r0, [pc, #108]	; (8001258 <main+0xa8>)
 80011ec:	f7ff fbd8 	bl	80009a0 <LL_USART_EnableDMAReq_TX>
  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_4); // Разрешаем прерывания DMA на завершение передачи
 80011f0:	2104      	movs	r1, #4
 80011f2:	4818      	ldr	r0, [pc, #96]	; (8001254 <main+0xa4>)
 80011f4:	f7ff fac4 	bl	8000780 <LL_DMA_EnableIT_TC>
  LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_4); // Разрешаем прерывания DMA на ошибку
 80011f8:	2104      	movs	r1, #4
 80011fa:	4816      	ldr	r0, [pc, #88]	; (8001254 <main+0xa4>)
 80011fc:	f7ff fade 	bl	80007bc <LL_DMA_EnableIT_TE>
  LL_DMA_ClearFlag_GI4(DMA1); // Сбрасываем флаги которые могли подняться после предидущих двух строчек
 8001200:	4814      	ldr	r0, [pc, #80]	; (8001254 <main+0xa4>)
 8001202:	f7ff fa95 	bl	8000730 <LL_DMA_ClearFlag_GI4>
  LL_DMA_ClearFlag_TC4(DMA1);
 8001206:	4813      	ldr	r0, [pc, #76]	; (8001254 <main+0xa4>)
 8001208:	f7ff fa9f 	bl	800074a <LL_DMA_ClearFlag_TC4>
  LL_DMA_ClearFlag_TE4(DMA1);
 800120c:	4811      	ldr	r0, [pc, #68]	; (8001254 <main+0xa4>)
 800120e:	f7ff faa9 	bl	8000764 <LL_DMA_ClearFlag_TE4>
  // Дальше даём DMA указатель на буффер из которого пересылать данные
  LL_DMA_ConfigAddresses(DMA1,
 8001212:	4d12      	ldr	r5, [pc, #72]	; (800125c <main+0xac>)
 8001214:	4810      	ldr	r0, [pc, #64]	; (8001258 <main+0xa8>)
 8001216:	f7ff fbd2 	bl	80009be <LL_USART_DMA_GetRegAddr>
 800121a:	4604      	mov	r4, r0
 800121c:	2104      	movs	r1, #4
 800121e:	480d      	ldr	r0, [pc, #52]	; (8001254 <main+0xa4>)
 8001220:	f7ff fa12 	bl	8000648 <LL_DMA_GetDataTransferDirection>
 8001224:	4603      	mov	r3, r0
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	4623      	mov	r3, r4
 800122a:	462a      	mov	r2, r5
 800122c:	2104      	movs	r1, #4
 800122e:	4809      	ldr	r0, [pc, #36]	; (8001254 <main+0xa4>)
 8001230:	f7ff fa44 	bl	80006bc <LL_DMA_ConfigAddresses>
		  	  	  	  	  LL_DMA_CHANNEL_4,
						  &TX_data,
						  LL_USART_DMA_GetRegAddr(USART1),
						  LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_4));
  	int st;
	st = MPU_begin();
 8001234:	f7ff fbce 	bl	80009d4 <MPU_begin>
 8001238:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 800123a:	2064      	movs	r0, #100	; 0x64
 800123c:	f000 fcd0 	bl	8001be0 <HAL_Delay>
	enableDataReadyInterrupt();
 8001240:	f7ff fece 	bl	8000fe0 <enableDataReadyInterrupt>
	HAL_Delay(100);
 8001244:	2064      	movs	r0, #100	; 0x64
 8001246:	f000 fccb 	bl	8001be0 <HAL_Delay>
	setSrd(0);
 800124a:	2000      	movs	r0, #0
 800124c:	f7ff fe58 	bl	8000f00 <setSrd>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001250:	e7fe      	b.n	8001250 <main+0xa0>
 8001252:	bf00      	nop
 8001254:	40020000 	.word	0x40020000
 8001258:	40013800 	.word	0x40013800
 800125c:	200000bc 	.word	0x200000bc

08001260 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8001264:	2002      	movs	r0, #2
 8001266:	f7ff fb7b 	bl	8000960 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 800126a:	bf00      	nop
 800126c:	f7ff fb8c 	bl	8000988 <LL_FLASH_GetLatency>
 8001270:	4603      	mov	r3, r0
 8001272:	2b02      	cmp	r3, #2
 8001274:	d1fa      	bne.n	800126c <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_Enable();
 8001276:	f7ff fabf 	bl	80007f8 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 800127a:	bf00      	nop
 800127c:	f7ff faca 	bl	8000814 <LL_RCC_HSE_IsReady>
 8001280:	4603      	mov	r3, r0
 8001282:	2b01      	cmp	r3, #1
 8001284:	d1fa      	bne.n	800127c <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
 8001286:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 800128a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800128e:	f7ff fb4f 	bl	8000930 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8001292:	f7ff fb2d 	bl	80008f0 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001296:	bf00      	nop
 8001298:	f7ff fb38 	bl	800090c <LL_RCC_PLL_IsReady>
 800129c:	4603      	mov	r3, r0
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d1fa      	bne.n	8001298 <SystemClock_Config+0x38>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80012a2:	2000      	movs	r0, #0
 80012a4:	f7ff fae8 	bl	8000878 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 80012a8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80012ac:	f7ff faf8 	bl	80008a0 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80012b0:	2000      	movs	r0, #0
 80012b2:	f7ff fb09 	bl	80008c8 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80012b6:	2002      	movs	r0, #2
 80012b8:	f7ff fabe 	bl	8000838 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80012bc:	bf00      	nop
 80012be:	f7ff facf 	bl	8000860 <LL_RCC_GetSysClkSource>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b08      	cmp	r3, #8
 80012c6:	d1fa      	bne.n	80012be <SystemClock_Config+0x5e>
  {

  }
  LL_SetSystemCoreClock(72000000);
 80012c8:	4806      	ldr	r0, [pc, #24]	; (80012e4 <SystemClock_Config+0x84>)
 80012ca:	f001 fe4b 	bl	8002f64 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 80012ce:	200f      	movs	r0, #15
 80012d0:	f000 fc3a 	bl	8001b48 <HAL_InitTick>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80012da:	f000 f877 	bl	80013cc <Error_Handler>
  }
}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	044aa200 	.word	0x044aa200

080012e8 <TransmitSensorData>:
	  EulerF[1]=((EulerF[1]-(float)GyroData[1]*0.0000065f)*0.9995f) + (Euler[1]*0.0005f);
	  EulerF[2]=((EulerF[2]-(float)GyroData[2]*0.0000065f)*0.9995f) + (Euler[2]*0.0005f);
}

void TransmitSensorData()
{
 80012e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012ea:	b089      	sub	sp, #36	; 0x24
 80012ec:	af08      	add	r7, sp, #32
	 optimer++;
 80012ee:	4b2a      	ldr	r3, [pc, #168]	; (8001398 <TransmitSensorData+0xb0>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	3301      	adds	r3, #1
 80012f4:	4a28      	ldr	r2, [pc, #160]	; (8001398 <TransmitSensorData+0xb0>)
 80012f6:	6013      	str	r3, [r2, #0]
	 if (optimer>10000) {optimer=0;}
 80012f8:	4b27      	ldr	r3, [pc, #156]	; (8001398 <TransmitSensorData+0xb0>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f242 7210 	movw	r2, #10000	; 0x2710
 8001300:	4293      	cmp	r3, r2
 8001302:	dd02      	ble.n	800130a <TransmitSensorData+0x22>
 8001304:	4b24      	ldr	r3, [pc, #144]	; (8001398 <TransmitSensorData+0xb0>)
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
	 readSensor();
 800130a:	f7ff fe87 	bl	800101c <readSensor>
	 if (optimer%50==0)
 800130e:	4b22      	ldr	r3, [pc, #136]	; (8001398 <TransmitSensorData+0xb0>)
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	4b22      	ldr	r3, [pc, #136]	; (800139c <TransmitSensorData+0xb4>)
 8001314:	fb83 1302 	smull	r1, r3, r3, r2
 8001318:	1119      	asrs	r1, r3, #4
 800131a:	17d3      	asrs	r3, r2, #31
 800131c:	1acb      	subs	r3, r1, r3
 800131e:	2132      	movs	r1, #50	; 0x32
 8001320:	fb01 f303 	mul.w	r3, r1, r3
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	2b00      	cmp	r3, #0
 8001328:	d132      	bne.n	8001390 <TransmitSensorData+0xa8>
	  {
		 //Передача данных в ком порт 20 раз в сек, а сбор по прерыванию 1000 раз в сек
		 sprintf(TX_data,"c = %08d;%08d;%08d;%08d;%08d;%08d;%08d;%08d;%08d\r\n", (int16_t)_axcounts, (int16_t)_aycounts, (int16_t)_azcounts, (int16_t)_hxcounts, (int16_t)_hycounts, (int16_t)_hzcounts, (int16_t)_gxcounts, (int16_t)_gycounts, (int16_t)_gzcounts);
 800132a:	4b1d      	ldr	r3, [pc, #116]	; (80013a0 <TransmitSensorData+0xb8>)
 800132c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001330:	469c      	mov	ip, r3
 8001332:	4b1c      	ldr	r3, [pc, #112]	; (80013a4 <TransmitSensorData+0xbc>)
 8001334:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001338:	469e      	mov	lr, r3
 800133a:	4b1b      	ldr	r3, [pc, #108]	; (80013a8 <TransmitSensorData+0xc0>)
 800133c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001340:	461a      	mov	r2, r3
 8001342:	4b1a      	ldr	r3, [pc, #104]	; (80013ac <TransmitSensorData+0xc4>)
 8001344:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001348:	4619      	mov	r1, r3
 800134a:	4b19      	ldr	r3, [pc, #100]	; (80013b0 <TransmitSensorData+0xc8>)
 800134c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001350:	4618      	mov	r0, r3
 8001352:	4b18      	ldr	r3, [pc, #96]	; (80013b4 <TransmitSensorData+0xcc>)
 8001354:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001358:	461c      	mov	r4, r3
 800135a:	4b17      	ldr	r3, [pc, #92]	; (80013b8 <TransmitSensorData+0xd0>)
 800135c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001360:	461d      	mov	r5, r3
 8001362:	4b16      	ldr	r3, [pc, #88]	; (80013bc <TransmitSensorData+0xd4>)
 8001364:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001368:	461e      	mov	r6, r3
 800136a:	4b15      	ldr	r3, [pc, #84]	; (80013c0 <TransmitSensorData+0xd8>)
 800136c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001370:	9306      	str	r3, [sp, #24]
 8001372:	9605      	str	r6, [sp, #20]
 8001374:	9504      	str	r5, [sp, #16]
 8001376:	9403      	str	r4, [sp, #12]
 8001378:	9002      	str	r0, [sp, #8]
 800137a:	9101      	str	r1, [sp, #4]
 800137c:	9200      	str	r2, [sp, #0]
 800137e:	4673      	mov	r3, lr
 8001380:	4662      	mov	r2, ip
 8001382:	4910      	ldr	r1, [pc, #64]	; (80013c4 <TransmitSensorData+0xdc>)
 8001384:	4810      	ldr	r0, [pc, #64]	; (80013c8 <TransmitSensorData+0xe0>)
 8001386:	f001 fe25 	bl	8002fd4 <siprintf>
		 //CDC_Transmit_FS((unsigned char*)str1, strlen(str1));
		 UART_TX_to_computer_DMA(TX_data);
 800138a:	480f      	ldr	r0, [pc, #60]	; (80013c8 <TransmitSensorData+0xe0>)
 800138c:	f7ff fedc 	bl	8001148 <UART_TX_to_computer_DMA>
	  }
}
 8001390:	bf00      	nop
 8001392:	3704      	adds	r7, #4
 8001394:	46bd      	mov	sp, r7
 8001396:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001398:	20000120 	.word	0x20000120
 800139c:	51eb851f 	.word	0x51eb851f
 80013a0:	200000a6 	.word	0x200000a6
 80013a4:	200000a8 	.word	0x200000a8
 80013a8:	200000aa 	.word	0x200000aa
 80013ac:	200000b2 	.word	0x200000b2
 80013b0:	200000b4 	.word	0x200000b4
 80013b4:	200000b6 	.word	0x200000b6
 80013b8:	200000ac 	.word	0x200000ac
 80013bc:	200000ae 	.word	0x200000ae
 80013c0:	200000b0 	.word	0x200000b0
 80013c4:	08003900 	.word	0x08003900
 80013c8:	200000bc 	.word	0x200000bc

080013cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80013d0:	b672      	cpsid	i
}
 80013d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013d4:	e7fe      	b.n	80013d4 <Error_Handler+0x8>
	...

080013d8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80013dc:	4b17      	ldr	r3, [pc, #92]	; (800143c <MX_SPI1_Init+0x64>)
 80013de:	4a18      	ldr	r2, [pc, #96]	; (8001440 <MX_SPI1_Init+0x68>)
 80013e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013e2:	4b16      	ldr	r3, [pc, #88]	; (800143c <MX_SPI1_Init+0x64>)
 80013e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013ea:	4b14      	ldr	r3, [pc, #80]	; (800143c <MX_SPI1_Init+0x64>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013f0:	4b12      	ldr	r3, [pc, #72]	; (800143c <MX_SPI1_Init+0x64>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013f6:	4b11      	ldr	r3, [pc, #68]	; (800143c <MX_SPI1_Init+0x64>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013fc:	4b0f      	ldr	r3, [pc, #60]	; (800143c <MX_SPI1_Init+0x64>)
 80013fe:	2200      	movs	r2, #0
 8001400:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001402:	4b0e      	ldr	r3, [pc, #56]	; (800143c <MX_SPI1_Init+0x64>)
 8001404:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001408:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800140a:	4b0c      	ldr	r3, [pc, #48]	; (800143c <MX_SPI1_Init+0x64>)
 800140c:	2230      	movs	r2, #48	; 0x30
 800140e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001410:	4b0a      	ldr	r3, [pc, #40]	; (800143c <MX_SPI1_Init+0x64>)
 8001412:	2200      	movs	r2, #0
 8001414:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001416:	4b09      	ldr	r3, [pc, #36]	; (800143c <MX_SPI1_Init+0x64>)
 8001418:	2200      	movs	r2, #0
 800141a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800141c:	4b07      	ldr	r3, [pc, #28]	; (800143c <MX_SPI1_Init+0x64>)
 800141e:	2200      	movs	r2, #0
 8001420:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001422:	4b06      	ldr	r3, [pc, #24]	; (800143c <MX_SPI1_Init+0x64>)
 8001424:	220a      	movs	r2, #10
 8001426:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001428:	4804      	ldr	r0, [pc, #16]	; (800143c <MX_SPI1_Init+0x64>)
 800142a:	f000 fe96 	bl	800215a <HAL_SPI_Init>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001434:	f7ff ffca 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000124 	.word	0x20000124
 8001440:	40013000 	.word	0x40013000

08001444 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b088      	sub	sp, #32
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144c:	f107 0310 	add.w	r3, r7, #16
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a1b      	ldr	r2, [pc, #108]	; (80014cc <HAL_SPI_MspInit+0x88>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d12f      	bne.n	80014c4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001464:	4b1a      	ldr	r3, [pc, #104]	; (80014d0 <HAL_SPI_MspInit+0x8c>)
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	4a19      	ldr	r2, [pc, #100]	; (80014d0 <HAL_SPI_MspInit+0x8c>)
 800146a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800146e:	6193      	str	r3, [r2, #24]
 8001470:	4b17      	ldr	r3, [pc, #92]	; (80014d0 <HAL_SPI_MspInit+0x8c>)
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800147c:	4b14      	ldr	r3, [pc, #80]	; (80014d0 <HAL_SPI_MspInit+0x8c>)
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	4a13      	ldr	r2, [pc, #76]	; (80014d0 <HAL_SPI_MspInit+0x8c>)
 8001482:	f043 0304 	orr.w	r3, r3, #4
 8001486:	6193      	str	r3, [r2, #24]
 8001488:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <HAL_SPI_MspInit+0x8c>)
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	f003 0304 	and.w	r3, r3, #4
 8001490:	60bb      	str	r3, [r7, #8]
 8001492:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001494:	23a0      	movs	r3, #160	; 0xa0
 8001496:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001498:	2302      	movs	r3, #2
 800149a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800149c:	2303      	movs	r3, #3
 800149e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a0:	f107 0310 	add.w	r3, r7, #16
 80014a4:	4619      	mov	r1, r3
 80014a6:	480b      	ldr	r0, [pc, #44]	; (80014d4 <HAL_SPI_MspInit+0x90>)
 80014a8:	f000 fca2 	bl	8001df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80014ac:	2340      	movs	r3, #64	; 0x40
 80014ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b8:	f107 0310 	add.w	r3, r7, #16
 80014bc:	4619      	mov	r1, r3
 80014be:	4805      	ldr	r0, [pc, #20]	; (80014d4 <HAL_SPI_MspInit+0x90>)
 80014c0:	f000 fc96 	bl	8001df0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80014c4:	bf00      	nop
 80014c6:	3720      	adds	r7, #32
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40013000 	.word	0x40013000
 80014d0:	40021000 	.word	0x40021000
 80014d4:	40010800 	.word	0x40010800

080014d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014de:	4b15      	ldr	r3, [pc, #84]	; (8001534 <HAL_MspInit+0x5c>)
 80014e0:	699b      	ldr	r3, [r3, #24]
 80014e2:	4a14      	ldr	r2, [pc, #80]	; (8001534 <HAL_MspInit+0x5c>)
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	6193      	str	r3, [r2, #24]
 80014ea:	4b12      	ldr	r3, [pc, #72]	; (8001534 <HAL_MspInit+0x5c>)
 80014ec:	699b      	ldr	r3, [r3, #24]
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	60bb      	str	r3, [r7, #8]
 80014f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014f6:	4b0f      	ldr	r3, [pc, #60]	; (8001534 <HAL_MspInit+0x5c>)
 80014f8:	69db      	ldr	r3, [r3, #28]
 80014fa:	4a0e      	ldr	r2, [pc, #56]	; (8001534 <HAL_MspInit+0x5c>)
 80014fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001500:	61d3      	str	r3, [r2, #28]
 8001502:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <HAL_MspInit+0x5c>)
 8001504:	69db      	ldr	r3, [r3, #28]
 8001506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800150a:	607b      	str	r3, [r7, #4]
 800150c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800150e:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <HAL_MspInit+0x60>)
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	4a04      	ldr	r2, [pc, #16]	; (8001538 <HAL_MspInit+0x60>)
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800152a:	bf00      	nop
 800152c:	3714      	adds	r7, #20
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr
 8001534:	40021000 	.word	0x40021000
 8001538:	40010000 	.word	0x40010000

0800153c <LL_DMA_DisableChannel>:
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	3b01      	subs	r3, #1
 800154a:	4a0a      	ldr	r2, [pc, #40]	; (8001574 <LL_DMA_DisableChannel+0x38>)
 800154c:	5cd3      	ldrb	r3, [r2, r3]
 800154e:	461a      	mov	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4413      	add	r3, r2
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	683a      	ldr	r2, [r7, #0]
 8001558:	3a01      	subs	r2, #1
 800155a:	4906      	ldr	r1, [pc, #24]	; (8001574 <LL_DMA_DisableChannel+0x38>)
 800155c:	5c8a      	ldrb	r2, [r1, r2]
 800155e:	4611      	mov	r1, r2
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	440a      	add	r2, r1
 8001564:	f023 0301 	bic.w	r3, r3, #1
 8001568:	6013      	str	r3, [r2, #0]
}
 800156a:	bf00      	nop
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	bc80      	pop	{r7}
 8001572:	4770      	bx	lr
 8001574:	0800393c 	.word	0x0800393c

08001578 <LL_DMA_IsActiveFlag_TC4>:
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF4) == (DMA_ISR_TCIF4));
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001588:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800158c:	bf0c      	ite	eq
 800158e:	2301      	moveq	r3, #1
 8001590:	2300      	movne	r3, #0
 8001592:	b2db      	uxtb	r3, r3
}
 8001594:	4618      	mov	r0, r3
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	bc80      	pop	{r7}
 800159c:	4770      	bx	lr

0800159e <LL_DMA_IsActiveFlag_TE4>:
{
 800159e:	b480      	push	{r7}
 80015a0:	b083      	sub	sp, #12
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TEIF4) == (DMA_ISR_TEIF4));
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80015b2:	bf0c      	ite	eq
 80015b4:	2301      	moveq	r3, #1
 80015b6:	2300      	movne	r3, #0
 80015b8:	b2db      	uxtb	r3, r3
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	bc80      	pop	{r7}
 80015c2:	4770      	bx	lr

080015c4 <LL_DMA_ClearFlag_TC4>:
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF4);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015d2:	605a      	str	r2, [r3, #4]
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	bc80      	pop	{r7}
 80015dc:	4770      	bx	lr
	...

080015e0 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 80015e8:	4b07      	ldr	r3, [pc, #28]	; (8001608 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80015ea:	695a      	ldr	r2, [r3, #20]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4013      	ands	r3, r2
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	429a      	cmp	r2, r3
 80015f4:	bf0c      	ite	eq
 80015f6:	2301      	moveq	r3, #1
 80015f8:	2300      	movne	r3, #0
 80015fa:	b2db      	uxtb	r3, r3
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	bc80      	pop	{r7}
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	40010400 	.word	0x40010400

0800160c <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_19
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8001614:	4a03      	ldr	r2, [pc, #12]	; (8001624 <LL_EXTI_ClearFlag_0_31+0x18>)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6153      	str	r3, [r2, #20]
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	bc80      	pop	{r7}
 8001622:	4770      	bx	lr
 8001624:	40010400 	.word	0x40010400

08001628 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800162c:	e7fe      	b.n	800162c <NMI_Handler+0x4>

0800162e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001632:	e7fe      	b.n	8001632 <HardFault_Handler+0x4>

08001634 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001638:	e7fe      	b.n	8001638 <MemManage_Handler+0x4>

0800163a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800163a:	b480      	push	{r7}
 800163c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800163e:	e7fe      	b.n	800163e <BusFault_Handler+0x4>

08001640 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001644:	e7fe      	b.n	8001644 <UsageFault_Handler+0x4>

08001646 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	46bd      	mov	sp, r7
 800164e:	bc80      	pop	{r7}
 8001650:	4770      	bx	lr

08001652 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001652:	b480      	push	{r7}
 8001654:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	46bd      	mov	sp, r7
 800165a:	bc80      	pop	{r7}
 800165c:	4770      	bx	lr

0800165e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	46bd      	mov	sp, r7
 8001666:	bc80      	pop	{r7}
 8001668:	4770      	bx	lr

0800166a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800166e:	f000 fa9b 	bl	8001ba8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
	...

08001678 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

	//HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
	TransmitSensorData();
 800167c:	f7ff fe34 	bl	80012e8 <TransmitSensorData>
	cnt++;
 8001680:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <EXTI1_IRQHandler+0x44>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	3301      	adds	r3, #1
 8001686:	b2da      	uxtb	r2, r3
 8001688:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <EXTI1_IRQHandler+0x44>)
 800168a:	701a      	strb	r2, [r3, #0]
	if (cnt>=250)
 800168c:	4b0b      	ldr	r3, [pc, #44]	; (80016bc <EXTI1_IRQHandler+0x44>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2bf9      	cmp	r3, #249	; 0xf9
 8001692:	d907      	bls.n	80016a4 <EXTI1_IRQHandler+0x2c>
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001694:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001698:	4809      	ldr	r0, [pc, #36]	; (80016c0 <EXTI1_IRQHandler+0x48>)
 800169a:	f000 fd45 	bl	8002128 <HAL_GPIO_TogglePin>
		cnt=0;
 800169e:	4b07      	ldr	r3, [pc, #28]	; (80016bc <EXTI1_IRQHandler+0x44>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END EXTI1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 80016a4:	2002      	movs	r0, #2
 80016a6:	f7ff ff9b 	bl	80015e0 <LL_EXTI_IsActiveFlag_0_31>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d002      	beq.n	80016b6 <EXTI1_IRQHandler+0x3e>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 80016b0:	2002      	movs	r0, #2
 80016b2:	f7ff ffab 	bl	800160c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	2000017d 	.word	0x2000017d
 80016c0:	40011000 	.word	0x40011000

080016c4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */
	  if(LL_DMA_IsActiveFlag_TC4(DMA1))
 80016c8:	480d      	ldr	r0, [pc, #52]	; (8001700 <DMA1_Channel4_IRQHandler+0x3c>)
 80016ca:	f7ff ff55 	bl	8001578 <LL_DMA_IsActiveFlag_TC4>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d005      	beq.n	80016e0 <DMA1_Channel4_IRQHandler+0x1c>
	  {
	    LL_DMA_ClearFlag_TC4(DMA1);
 80016d4:	480a      	ldr	r0, [pc, #40]	; (8001700 <DMA1_Channel4_IRQHandler+0x3c>)
 80016d6:	f7ff ff75 	bl	80015c4 <LL_DMA_ClearFlag_TC4>
	    DMA1_TransmitComplete();
 80016da:	f7ff fd5d 	bl	8001198 <DMA1_TransmitComplete>
  /* USER CODE END DMA1_Channel4_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80016de:	e00d      	b.n	80016fc <DMA1_Channel4_IRQHandler+0x38>
	  else if(LL_DMA_IsActiveFlag_TE4(DMA1)) // Это для обработки ошибок отрубаем DMA
 80016e0:	4807      	ldr	r0, [pc, #28]	; (8001700 <DMA1_Channel4_IRQHandler+0x3c>)
 80016e2:	f7ff ff5c 	bl	800159e <LL_DMA_IsActiveFlag_TE4>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d007      	beq.n	80016fc <DMA1_Channel4_IRQHandler+0x38>
	    LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_4);
 80016ec:	2104      	movs	r1, #4
 80016ee:	4804      	ldr	r0, [pc, #16]	; (8001700 <DMA1_Channel4_IRQHandler+0x3c>)
 80016f0:	f7ff ff24 	bl	800153c <LL_DMA_DisableChannel>
	    LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_5);
 80016f4:	2105      	movs	r1, #5
 80016f6:	4802      	ldr	r0, [pc, #8]	; (8001700 <DMA1_Channel4_IRQHandler+0x3c>)
 80016f8:	f7ff ff20 	bl	800153c <LL_DMA_DisableChannel>
}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	40020000 	.word	0x40020000

08001704 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800170c:	4a14      	ldr	r2, [pc, #80]	; (8001760 <_sbrk+0x5c>)
 800170e:	4b15      	ldr	r3, [pc, #84]	; (8001764 <_sbrk+0x60>)
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001718:	4b13      	ldr	r3, [pc, #76]	; (8001768 <_sbrk+0x64>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d102      	bne.n	8001726 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001720:	4b11      	ldr	r3, [pc, #68]	; (8001768 <_sbrk+0x64>)
 8001722:	4a12      	ldr	r2, [pc, #72]	; (800176c <_sbrk+0x68>)
 8001724:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001726:	4b10      	ldr	r3, [pc, #64]	; (8001768 <_sbrk+0x64>)
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4413      	add	r3, r2
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	429a      	cmp	r2, r3
 8001732:	d207      	bcs.n	8001744 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001734:	f001 fc24 	bl	8002f80 <__errno>
 8001738:	4603      	mov	r3, r0
 800173a:	220c      	movs	r2, #12
 800173c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800173e:	f04f 33ff 	mov.w	r3, #4294967295
 8001742:	e009      	b.n	8001758 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001744:	4b08      	ldr	r3, [pc, #32]	; (8001768 <_sbrk+0x64>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800174a:	4b07      	ldr	r3, [pc, #28]	; (8001768 <_sbrk+0x64>)
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4413      	add	r3, r2
 8001752:	4a05      	ldr	r2, [pc, #20]	; (8001768 <_sbrk+0x64>)
 8001754:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001756:	68fb      	ldr	r3, [r7, #12]
}
 8001758:	4618      	mov	r0, r3
 800175a:	3718      	adds	r7, #24
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	20005000 	.word	0x20005000
 8001764:	00000400 	.word	0x00000400
 8001768:	20000180 	.word	0x20000180
 800176c:	20000198 	.word	0x20000198

08001770 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001774:	bf00      	nop
 8001776:	46bd      	mov	sp, r7
 8001778:	bc80      	pop	{r7}
 800177a:	4770      	bx	lr

0800177c <LL_DMA_SetDataTransferDirection>:
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	3b01      	subs	r3, #1
 800178c:	4a0c      	ldr	r2, [pc, #48]	; (80017c0 <LL_DMA_SetDataTransferDirection+0x44>)
 800178e:	5cd3      	ldrb	r3, [r2, r3]
 8001790:	461a      	mov	r2, r3
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	4413      	add	r3, r2
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800179c:	f023 0310 	bic.w	r3, r3, #16
 80017a0:	68ba      	ldr	r2, [r7, #8]
 80017a2:	3a01      	subs	r2, #1
 80017a4:	4906      	ldr	r1, [pc, #24]	; (80017c0 <LL_DMA_SetDataTransferDirection+0x44>)
 80017a6:	5c8a      	ldrb	r2, [r1, r2]
 80017a8:	4611      	mov	r1, r2
 80017aa:	68fa      	ldr	r2, [r7, #12]
 80017ac:	440a      	add	r2, r1
 80017ae:	4611      	mov	r1, r2
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	600b      	str	r3, [r1, #0]
}
 80017b6:	bf00      	nop
 80017b8:	3714      	adds	r7, #20
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr
 80017c0:	0800395c 	.word	0x0800395c

080017c4 <LL_DMA_SetMode>:
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	3b01      	subs	r3, #1
 80017d4:	4a0b      	ldr	r2, [pc, #44]	; (8001804 <LL_DMA_SetMode+0x40>)
 80017d6:	5cd3      	ldrb	r3, [r2, r3]
 80017d8:	461a      	mov	r2, r3
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	4413      	add	r3, r2
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f023 0220 	bic.w	r2, r3, #32
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	3b01      	subs	r3, #1
 80017e8:	4906      	ldr	r1, [pc, #24]	; (8001804 <LL_DMA_SetMode+0x40>)
 80017ea:	5ccb      	ldrb	r3, [r1, r3]
 80017ec:	4619      	mov	r1, r3
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	440b      	add	r3, r1
 80017f2:	4619      	mov	r1, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	600b      	str	r3, [r1, #0]
}
 80017fa:	bf00      	nop
 80017fc:	3714      	adds	r7, #20
 80017fe:	46bd      	mov	sp, r7
 8001800:	bc80      	pop	{r7}
 8001802:	4770      	bx	lr
 8001804:	0800395c 	.word	0x0800395c

08001808 <LL_DMA_SetPeriphIncMode>:
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	3b01      	subs	r3, #1
 8001818:	4a0b      	ldr	r2, [pc, #44]	; (8001848 <LL_DMA_SetPeriphIncMode+0x40>)
 800181a:	5cd3      	ldrb	r3, [r2, r3]
 800181c:	461a      	mov	r2, r3
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	4413      	add	r3, r2
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	3b01      	subs	r3, #1
 800182c:	4906      	ldr	r1, [pc, #24]	; (8001848 <LL_DMA_SetPeriphIncMode+0x40>)
 800182e:	5ccb      	ldrb	r3, [r1, r3]
 8001830:	4619      	mov	r1, r3
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	440b      	add	r3, r1
 8001836:	4619      	mov	r1, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4313      	orrs	r3, r2
 800183c:	600b      	str	r3, [r1, #0]
}
 800183e:	bf00      	nop
 8001840:	3714      	adds	r7, #20
 8001842:	46bd      	mov	sp, r7
 8001844:	bc80      	pop	{r7}
 8001846:	4770      	bx	lr
 8001848:	0800395c 	.word	0x0800395c

0800184c <LL_DMA_SetMemoryIncMode>:
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	3b01      	subs	r3, #1
 800185c:	4a0b      	ldr	r2, [pc, #44]	; (800188c <LL_DMA_SetMemoryIncMode+0x40>)
 800185e:	5cd3      	ldrb	r3, [r2, r3]
 8001860:	461a      	mov	r2, r3
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	4413      	add	r3, r2
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	3b01      	subs	r3, #1
 8001870:	4906      	ldr	r1, [pc, #24]	; (800188c <LL_DMA_SetMemoryIncMode+0x40>)
 8001872:	5ccb      	ldrb	r3, [r1, r3]
 8001874:	4619      	mov	r1, r3
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	440b      	add	r3, r1
 800187a:	4619      	mov	r1, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	4313      	orrs	r3, r2
 8001880:	600b      	str	r3, [r1, #0]
}
 8001882:	bf00      	nop
 8001884:	3714      	adds	r7, #20
 8001886:	46bd      	mov	sp, r7
 8001888:	bc80      	pop	{r7}
 800188a:	4770      	bx	lr
 800188c:	0800395c 	.word	0x0800395c

08001890 <LL_DMA_SetPeriphSize>:
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	3b01      	subs	r3, #1
 80018a0:	4a0b      	ldr	r2, [pc, #44]	; (80018d0 <LL_DMA_SetPeriphSize+0x40>)
 80018a2:	5cd3      	ldrb	r3, [r2, r3]
 80018a4:	461a      	mov	r2, r3
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	4413      	add	r3, r2
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	3b01      	subs	r3, #1
 80018b4:	4906      	ldr	r1, [pc, #24]	; (80018d0 <LL_DMA_SetPeriphSize+0x40>)
 80018b6:	5ccb      	ldrb	r3, [r1, r3]
 80018b8:	4619      	mov	r1, r3
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	440b      	add	r3, r1
 80018be:	4619      	mov	r1, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	600b      	str	r3, [r1, #0]
}
 80018c6:	bf00      	nop
 80018c8:	3714      	adds	r7, #20
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr
 80018d0:	0800395c 	.word	0x0800395c

080018d4 <LL_DMA_SetMemorySize>:
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	3b01      	subs	r3, #1
 80018e4:	4a0b      	ldr	r2, [pc, #44]	; (8001914 <LL_DMA_SetMemorySize+0x40>)
 80018e6:	5cd3      	ldrb	r3, [r2, r3]
 80018e8:	461a      	mov	r2, r3
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	4413      	add	r3, r2
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	3b01      	subs	r3, #1
 80018f8:	4906      	ldr	r1, [pc, #24]	; (8001914 <LL_DMA_SetMemorySize+0x40>)
 80018fa:	5ccb      	ldrb	r3, [r1, r3]
 80018fc:	4619      	mov	r1, r3
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	440b      	add	r3, r1
 8001902:	4619      	mov	r1, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4313      	orrs	r3, r2
 8001908:	600b      	str	r3, [r1, #0]
}
 800190a:	bf00      	nop
 800190c:	3714      	adds	r7, #20
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr
 8001914:	0800395c 	.word	0x0800395c

08001918 <LL_DMA_SetChannelPriorityLevel>:
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	3b01      	subs	r3, #1
 8001928:	4a0b      	ldr	r2, [pc, #44]	; (8001958 <LL_DMA_SetChannelPriorityLevel+0x40>)
 800192a:	5cd3      	ldrb	r3, [r2, r3]
 800192c:	461a      	mov	r2, r3
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	4413      	add	r3, r2
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	3b01      	subs	r3, #1
 800193c:	4906      	ldr	r1, [pc, #24]	; (8001958 <LL_DMA_SetChannelPriorityLevel+0x40>)
 800193e:	5ccb      	ldrb	r3, [r1, r3]
 8001940:	4619      	mov	r1, r3
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	440b      	add	r3, r1
 8001946:	4619      	mov	r1, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4313      	orrs	r3, r2
 800194c:	600b      	str	r3, [r1, #0]
}
 800194e:	bf00      	nop
 8001950:	3714      	adds	r7, #20
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr
 8001958:	0800395c 	.word	0x0800395c

0800195c <LL_APB2_GRP1_EnableClock>:
{
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001964:	4b08      	ldr	r3, [pc, #32]	; (8001988 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001966:	699a      	ldr	r2, [r3, #24]
 8001968:	4907      	ldr	r1, [pc, #28]	; (8001988 <LL_APB2_GRP1_EnableClock+0x2c>)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4313      	orrs	r3, r2
 800196e:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001970:	4b05      	ldr	r3, [pc, #20]	; (8001988 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001972:	699a      	ldr	r2, [r3, #24]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4013      	ands	r3, r2
 8001978:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800197a:	68fb      	ldr	r3, [r7, #12]
}
 800197c:	bf00      	nop
 800197e:	3714      	adds	r7, #20
 8001980:	46bd      	mov	sp, r7
 8001982:	bc80      	pop	{r7}
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	40021000 	.word	0x40021000

0800198c <LL_USART_Enable>:
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	60da      	str	r2, [r3, #12]
}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bc80      	pop	{r7}
 80019a8:	4770      	bx	lr

080019aa <LL_USART_ConfigAsyncMode>:
{
 80019aa:	b480      	push	{r7}
 80019ac:	b083      	sub	sp, #12
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	691b      	ldr	r3, [r3, #16]
 80019b6:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	615a      	str	r2, [r3, #20]
}
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bc80      	pop	{r7}
 80019d2:	4770      	bx	lr

080019d4 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b08c      	sub	sp, #48	; 0x30
 80019d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80019da:	f107 0314 	add.w	r3, r7, #20
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	605a      	str	r2, [r3, #4]
 80019e4:	609a      	str	r2, [r3, #8]
 80019e6:	60da      	str	r2, [r3, #12]
 80019e8:	611a      	str	r2, [r3, #16]
 80019ea:	615a      	str	r2, [r3, #20]
 80019ec:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ee:	463b      	mov	r3, r7
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	60da      	str	r2, [r3, #12]
 80019fa:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 80019fc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001a00:	f7ff ffac 	bl	800195c <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8001a04:	2004      	movs	r0, #4
 8001a06:	f7ff ffa9 	bl	800195c <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8001a0a:	4b2c      	ldr	r3, [pc, #176]	; (8001abc <MX_USART1_UART_Init+0xe8>)
 8001a0c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001a0e:	2309      	movs	r3, #9
 8001a10:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001a12:	2303      	movs	r3, #3
 8001a14:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a1a:	463b      	mov	r3, r7
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4828      	ldr	r0, [pc, #160]	; (8001ac0 <MX_USART1_UART_Init+0xec>)
 8001a20:	f001 f831 	bl	8002a86 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8001a24:	4b27      	ldr	r3, [pc, #156]	; (8001ac4 <MX_USART1_UART_Init+0xf0>)
 8001a26:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8001a28:	2304      	movs	r3, #4
 8001a2a:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a2c:	463b      	mov	r3, r7
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4823      	ldr	r0, [pc, #140]	; (8001ac0 <MX_USART1_UART_Init+0xec>)
 8001a32:	f001 f828 	bl	8002a86 <LL_GPIO_Init>

  /* USART1 DMA Init */

  /* USART1_TX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_4, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8001a36:	2210      	movs	r2, #16
 8001a38:	2104      	movs	r1, #4
 8001a3a:	4823      	ldr	r0, [pc, #140]	; (8001ac8 <MX_USART1_UART_Init+0xf4>)
 8001a3c:	f7ff fe9e 	bl	800177c <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PRIORITY_LOW);
 8001a40:	2200      	movs	r2, #0
 8001a42:	2104      	movs	r1, #4
 8001a44:	4820      	ldr	r0, [pc, #128]	; (8001ac8 <MX_USART1_UART_Init+0xf4>)
 8001a46:	f7ff ff67 	bl	8001918 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MODE_NORMAL);
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	2104      	movs	r1, #4
 8001a4e:	481e      	ldr	r0, [pc, #120]	; (8001ac8 <MX_USART1_UART_Init+0xf4>)
 8001a50:	f7ff feb8 	bl	80017c4 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PERIPH_NOINCREMENT);
 8001a54:	2200      	movs	r2, #0
 8001a56:	2104      	movs	r1, #4
 8001a58:	481b      	ldr	r0, [pc, #108]	; (8001ac8 <MX_USART1_UART_Init+0xf4>)
 8001a5a:	f7ff fed5 	bl	8001808 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MEMORY_INCREMENT);
 8001a5e:	2280      	movs	r2, #128	; 0x80
 8001a60:	2104      	movs	r1, #4
 8001a62:	4819      	ldr	r0, [pc, #100]	; (8001ac8 <MX_USART1_UART_Init+0xf4>)
 8001a64:	f7ff fef2 	bl	800184c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PDATAALIGN_BYTE);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	2104      	movs	r1, #4
 8001a6c:	4816      	ldr	r0, [pc, #88]	; (8001ac8 <MX_USART1_UART_Init+0xf4>)
 8001a6e:	f7ff ff0f 	bl	8001890 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MDATAALIGN_BYTE);
 8001a72:	2200      	movs	r2, #0
 8001a74:	2104      	movs	r1, #4
 8001a76:	4814      	ldr	r0, [pc, #80]	; (8001ac8 <MX_USART1_UART_Init+0xf4>)
 8001a78:	f7ff ff2c 	bl	80018d4 <LL_DMA_SetMemorySize>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001a7c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001a80:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001a82:	2300      	movs	r3, #0
 8001a84:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001a86:	2300      	movs	r3, #0
 8001a88:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001a8e:	230c      	movs	r3, #12
 8001a90:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001a92:	2300      	movs	r3, #0
 8001a94:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001a96:	2300      	movs	r3, #0
 8001a98:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 8001a9a:	f107 0314 	add.w	r3, r7, #20
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	480a      	ldr	r0, [pc, #40]	; (8001acc <MX_USART1_UART_Init+0xf8>)
 8001aa2:	f001 f9ff 	bl	8002ea4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8001aa6:	4809      	ldr	r0, [pc, #36]	; (8001acc <MX_USART1_UART_Init+0xf8>)
 8001aa8:	f7ff ff7f 	bl	80019aa <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8001aac:	4807      	ldr	r0, [pc, #28]	; (8001acc <MX_USART1_UART_Init+0xf8>)
 8001aae:	f7ff ff6d 	bl	800198c <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ab2:	bf00      	nop
 8001ab4:	3730      	adds	r7, #48	; 0x30
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	04020002 	.word	0x04020002
 8001ac0:	40010800 	.word	0x40010800
 8001ac4:	04040004 	.word	0x04040004
 8001ac8:	40020000 	.word	0x40020000
 8001acc:	40013800 	.word	0x40013800

08001ad0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ad0:	480c      	ldr	r0, [pc, #48]	; (8001b04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ad2:	490d      	ldr	r1, [pc, #52]	; (8001b08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ad4:	4a0d      	ldr	r2, [pc, #52]	; (8001b0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ad6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ad8:	e002      	b.n	8001ae0 <LoopCopyDataInit>

08001ada <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ada:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001adc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ade:	3304      	adds	r3, #4

08001ae0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ae0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ae2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ae4:	d3f9      	bcc.n	8001ada <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ae6:	4a0a      	ldr	r2, [pc, #40]	; (8001b10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ae8:	4c0a      	ldr	r4, [pc, #40]	; (8001b14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001aea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aec:	e001      	b.n	8001af2 <LoopFillZerobss>

08001aee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001af0:	3204      	adds	r2, #4

08001af2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001af2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001af4:	d3fb      	bcc.n	8001aee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001af6:	f7ff fe3b 	bl	8001770 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001afa:	f001 fa47 	bl	8002f8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001afe:	f7ff fb57 	bl	80011b0 <main>
  bx lr
 8001b02:	4770      	bx	lr
  ldr r0, =_sdata
 8001b04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b08:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001b0c:	080039a0 	.word	0x080039a0
  ldr r2, =_sbss
 8001b10:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001b14:	20000198 	.word	0x20000198

08001b18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b18:	e7fe      	b.n	8001b18 <ADC1_2_IRQHandler>
	...

08001b1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b20:	4b08      	ldr	r3, [pc, #32]	; (8001b44 <HAL_Init+0x28>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a07      	ldr	r2, [pc, #28]	; (8001b44 <HAL_Init+0x28>)
 8001b26:	f043 0310 	orr.w	r3, r3, #16
 8001b2a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b2c:	2003      	movs	r0, #3
 8001b2e:	f000 f92b 	bl	8001d88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b32:	200f      	movs	r0, #15
 8001b34:	f000 f808 	bl	8001b48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b38:	f7ff fcce 	bl	80014d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	40022000 	.word	0x40022000

08001b48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b50:	4b12      	ldr	r3, [pc, #72]	; (8001b9c <HAL_InitTick+0x54>)
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	4b12      	ldr	r3, [pc, #72]	; (8001ba0 <HAL_InitTick+0x58>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	4619      	mov	r1, r3
 8001b5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b66:	4618      	mov	r0, r3
 8001b68:	f000 f935 	bl	8001dd6 <HAL_SYSTICK_Config>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e00e      	b.n	8001b94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2b0f      	cmp	r3, #15
 8001b7a:	d80a      	bhi.n	8001b92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	6879      	ldr	r1, [r7, #4]
 8001b80:	f04f 30ff 	mov.w	r0, #4294967295
 8001b84:	f000 f90b 	bl	8001d9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b88:	4a06      	ldr	r2, [pc, #24]	; (8001ba4 <HAL_InitTick+0x5c>)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	e000      	b.n	8001b94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	20000000 	.word	0x20000000
 8001ba0:	20000008 	.word	0x20000008
 8001ba4:	20000004 	.word	0x20000004

08001ba8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bac:	4b05      	ldr	r3, [pc, #20]	; (8001bc4 <HAL_IncTick+0x1c>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	4b05      	ldr	r3, [pc, #20]	; (8001bc8 <HAL_IncTick+0x20>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	4a03      	ldr	r2, [pc, #12]	; (8001bc8 <HAL_IncTick+0x20>)
 8001bba:	6013      	str	r3, [r2, #0]
}
 8001bbc:	bf00      	nop
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr
 8001bc4:	20000008 	.word	0x20000008
 8001bc8:	20000184 	.word	0x20000184

08001bcc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  return uwTick;
 8001bd0:	4b02      	ldr	r3, [pc, #8]	; (8001bdc <HAL_GetTick+0x10>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bc80      	pop	{r7}
 8001bda:	4770      	bx	lr
 8001bdc:	20000184 	.word	0x20000184

08001be0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001be8:	f7ff fff0 	bl	8001bcc <HAL_GetTick>
 8001bec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf8:	d005      	beq.n	8001c06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bfa:	4b0a      	ldr	r3, [pc, #40]	; (8001c24 <HAL_Delay+0x44>)
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	4413      	add	r3, r2
 8001c04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c06:	bf00      	nop
 8001c08:	f7ff ffe0 	bl	8001bcc <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	68fa      	ldr	r2, [r7, #12]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d8f7      	bhi.n	8001c08 <HAL_Delay+0x28>
  {
  }
}
 8001c18:	bf00      	nop
 8001c1a:	bf00      	nop
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20000008 	.word	0x20000008

08001c28 <__NVIC_SetPriorityGrouping>:
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c38:	4b0c      	ldr	r3, [pc, #48]	; (8001c6c <__NVIC_SetPriorityGrouping+0x44>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c3e:	68ba      	ldr	r2, [r7, #8]
 8001c40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c44:	4013      	ands	r3, r2
 8001c46:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c5a:	4a04      	ldr	r2, [pc, #16]	; (8001c6c <__NVIC_SetPriorityGrouping+0x44>)
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	60d3      	str	r3, [r2, #12]
}
 8001c60:	bf00      	nop
 8001c62:	3714      	adds	r7, #20
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bc80      	pop	{r7}
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	e000ed00 	.word	0xe000ed00

08001c70 <__NVIC_GetPriorityGrouping>:
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c74:	4b04      	ldr	r3, [pc, #16]	; (8001c88 <__NVIC_GetPriorityGrouping+0x18>)
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	0a1b      	lsrs	r3, r3, #8
 8001c7a:	f003 0307 	and.w	r3, r3, #7
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bc80      	pop	{r7}
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	e000ed00 	.word	0xe000ed00

08001c8c <__NVIC_SetPriority>:
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	6039      	str	r1, [r7, #0]
 8001c96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	db0a      	blt.n	8001cb6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	b2da      	uxtb	r2, r3
 8001ca4:	490c      	ldr	r1, [pc, #48]	; (8001cd8 <__NVIC_SetPriority+0x4c>)
 8001ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001caa:	0112      	lsls	r2, r2, #4
 8001cac:	b2d2      	uxtb	r2, r2
 8001cae:	440b      	add	r3, r1
 8001cb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001cb4:	e00a      	b.n	8001ccc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	b2da      	uxtb	r2, r3
 8001cba:	4908      	ldr	r1, [pc, #32]	; (8001cdc <__NVIC_SetPriority+0x50>)
 8001cbc:	79fb      	ldrb	r3, [r7, #7]
 8001cbe:	f003 030f 	and.w	r3, r3, #15
 8001cc2:	3b04      	subs	r3, #4
 8001cc4:	0112      	lsls	r2, r2, #4
 8001cc6:	b2d2      	uxtb	r2, r2
 8001cc8:	440b      	add	r3, r1
 8001cca:	761a      	strb	r2, [r3, #24]
}
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bc80      	pop	{r7}
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	e000e100 	.word	0xe000e100
 8001cdc:	e000ed00 	.word	0xe000ed00

08001ce0 <NVIC_EncodePriority>:
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b089      	sub	sp, #36	; 0x24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	f1c3 0307 	rsb	r3, r3, #7
 8001cfa:	2b04      	cmp	r3, #4
 8001cfc:	bf28      	it	cs
 8001cfe:	2304      	movcs	r3, #4
 8001d00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	3304      	adds	r3, #4
 8001d06:	2b06      	cmp	r3, #6
 8001d08:	d902      	bls.n	8001d10 <NVIC_EncodePriority+0x30>
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	3b03      	subs	r3, #3
 8001d0e:	e000      	b.n	8001d12 <NVIC_EncodePriority+0x32>
 8001d10:	2300      	movs	r3, #0
 8001d12:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d14:	f04f 32ff 	mov.w	r2, #4294967295
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	43da      	mvns	r2, r3
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	401a      	ands	r2, r3
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d28:	f04f 31ff 	mov.w	r1, #4294967295
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d32:	43d9      	mvns	r1, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d38:	4313      	orrs	r3, r2
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3724      	adds	r7, #36	; 0x24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr

08001d44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d54:	d301      	bcc.n	8001d5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d56:	2301      	movs	r3, #1
 8001d58:	e00f      	b.n	8001d7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d5a:	4a0a      	ldr	r2, [pc, #40]	; (8001d84 <SysTick_Config+0x40>)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d62:	210f      	movs	r1, #15
 8001d64:	f04f 30ff 	mov.w	r0, #4294967295
 8001d68:	f7ff ff90 	bl	8001c8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d6c:	4b05      	ldr	r3, [pc, #20]	; (8001d84 <SysTick_Config+0x40>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d72:	4b04      	ldr	r3, [pc, #16]	; (8001d84 <SysTick_Config+0x40>)
 8001d74:	2207      	movs	r2, #7
 8001d76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	e000e010 	.word	0xe000e010

08001d88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f7ff ff49 	bl	8001c28 <__NVIC_SetPriorityGrouping>
}
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b086      	sub	sp, #24
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	4603      	mov	r3, r0
 8001da6:	60b9      	str	r1, [r7, #8]
 8001da8:	607a      	str	r2, [r7, #4]
 8001daa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dac:	2300      	movs	r3, #0
 8001dae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001db0:	f7ff ff5e 	bl	8001c70 <__NVIC_GetPriorityGrouping>
 8001db4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	68b9      	ldr	r1, [r7, #8]
 8001dba:	6978      	ldr	r0, [r7, #20]
 8001dbc:	f7ff ff90 	bl	8001ce0 <NVIC_EncodePriority>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dc6:	4611      	mov	r1, r2
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff ff5f 	bl	8001c8c <__NVIC_SetPriority>
}
 8001dce:	bf00      	nop
 8001dd0:	3718      	adds	r7, #24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b082      	sub	sp, #8
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f7ff ffb0 	bl	8001d44 <SysTick_Config>
 8001de4:	4603      	mov	r3, r0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
	...

08001df0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b08b      	sub	sp, #44	; 0x2c
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e02:	e169      	b.n	80020d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e04:	2201      	movs	r2, #1
 8001e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	69fa      	ldr	r2, [r7, #28]
 8001e14:	4013      	ands	r3, r2
 8001e16:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	f040 8158 	bne.w	80020d2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	4a9a      	ldr	r2, [pc, #616]	; (8002090 <HAL_GPIO_Init+0x2a0>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d05e      	beq.n	8001eea <HAL_GPIO_Init+0xfa>
 8001e2c:	4a98      	ldr	r2, [pc, #608]	; (8002090 <HAL_GPIO_Init+0x2a0>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d875      	bhi.n	8001f1e <HAL_GPIO_Init+0x12e>
 8001e32:	4a98      	ldr	r2, [pc, #608]	; (8002094 <HAL_GPIO_Init+0x2a4>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d058      	beq.n	8001eea <HAL_GPIO_Init+0xfa>
 8001e38:	4a96      	ldr	r2, [pc, #600]	; (8002094 <HAL_GPIO_Init+0x2a4>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d86f      	bhi.n	8001f1e <HAL_GPIO_Init+0x12e>
 8001e3e:	4a96      	ldr	r2, [pc, #600]	; (8002098 <HAL_GPIO_Init+0x2a8>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d052      	beq.n	8001eea <HAL_GPIO_Init+0xfa>
 8001e44:	4a94      	ldr	r2, [pc, #592]	; (8002098 <HAL_GPIO_Init+0x2a8>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d869      	bhi.n	8001f1e <HAL_GPIO_Init+0x12e>
 8001e4a:	4a94      	ldr	r2, [pc, #592]	; (800209c <HAL_GPIO_Init+0x2ac>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d04c      	beq.n	8001eea <HAL_GPIO_Init+0xfa>
 8001e50:	4a92      	ldr	r2, [pc, #584]	; (800209c <HAL_GPIO_Init+0x2ac>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d863      	bhi.n	8001f1e <HAL_GPIO_Init+0x12e>
 8001e56:	4a92      	ldr	r2, [pc, #584]	; (80020a0 <HAL_GPIO_Init+0x2b0>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d046      	beq.n	8001eea <HAL_GPIO_Init+0xfa>
 8001e5c:	4a90      	ldr	r2, [pc, #576]	; (80020a0 <HAL_GPIO_Init+0x2b0>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d85d      	bhi.n	8001f1e <HAL_GPIO_Init+0x12e>
 8001e62:	2b12      	cmp	r3, #18
 8001e64:	d82a      	bhi.n	8001ebc <HAL_GPIO_Init+0xcc>
 8001e66:	2b12      	cmp	r3, #18
 8001e68:	d859      	bhi.n	8001f1e <HAL_GPIO_Init+0x12e>
 8001e6a:	a201      	add	r2, pc, #4	; (adr r2, 8001e70 <HAL_GPIO_Init+0x80>)
 8001e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e70:	08001eeb 	.word	0x08001eeb
 8001e74:	08001ec5 	.word	0x08001ec5
 8001e78:	08001ed7 	.word	0x08001ed7
 8001e7c:	08001f19 	.word	0x08001f19
 8001e80:	08001f1f 	.word	0x08001f1f
 8001e84:	08001f1f 	.word	0x08001f1f
 8001e88:	08001f1f 	.word	0x08001f1f
 8001e8c:	08001f1f 	.word	0x08001f1f
 8001e90:	08001f1f 	.word	0x08001f1f
 8001e94:	08001f1f 	.word	0x08001f1f
 8001e98:	08001f1f 	.word	0x08001f1f
 8001e9c:	08001f1f 	.word	0x08001f1f
 8001ea0:	08001f1f 	.word	0x08001f1f
 8001ea4:	08001f1f 	.word	0x08001f1f
 8001ea8:	08001f1f 	.word	0x08001f1f
 8001eac:	08001f1f 	.word	0x08001f1f
 8001eb0:	08001f1f 	.word	0x08001f1f
 8001eb4:	08001ecd 	.word	0x08001ecd
 8001eb8:	08001ee1 	.word	0x08001ee1
 8001ebc:	4a79      	ldr	r2, [pc, #484]	; (80020a4 <HAL_GPIO_Init+0x2b4>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d013      	beq.n	8001eea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ec2:	e02c      	b.n	8001f1e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	623b      	str	r3, [r7, #32]
          break;
 8001eca:	e029      	b.n	8001f20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	3304      	adds	r3, #4
 8001ed2:	623b      	str	r3, [r7, #32]
          break;
 8001ed4:	e024      	b.n	8001f20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	3308      	adds	r3, #8
 8001edc:	623b      	str	r3, [r7, #32]
          break;
 8001ede:	e01f      	b.n	8001f20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	330c      	adds	r3, #12
 8001ee6:	623b      	str	r3, [r7, #32]
          break;
 8001ee8:	e01a      	b.n	8001f20 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d102      	bne.n	8001ef8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ef2:	2304      	movs	r3, #4
 8001ef4:	623b      	str	r3, [r7, #32]
          break;
 8001ef6:	e013      	b.n	8001f20 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d105      	bne.n	8001f0c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f00:	2308      	movs	r3, #8
 8001f02:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	69fa      	ldr	r2, [r7, #28]
 8001f08:	611a      	str	r2, [r3, #16]
          break;
 8001f0a:	e009      	b.n	8001f20 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f0c:	2308      	movs	r3, #8
 8001f0e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	69fa      	ldr	r2, [r7, #28]
 8001f14:	615a      	str	r2, [r3, #20]
          break;
 8001f16:	e003      	b.n	8001f20 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	623b      	str	r3, [r7, #32]
          break;
 8001f1c:	e000      	b.n	8001f20 <HAL_GPIO_Init+0x130>
          break;
 8001f1e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	2bff      	cmp	r3, #255	; 0xff
 8001f24:	d801      	bhi.n	8001f2a <HAL_GPIO_Init+0x13a>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	e001      	b.n	8001f2e <HAL_GPIO_Init+0x13e>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	3304      	adds	r3, #4
 8001f2e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	2bff      	cmp	r3, #255	; 0xff
 8001f34:	d802      	bhi.n	8001f3c <HAL_GPIO_Init+0x14c>
 8001f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	e002      	b.n	8001f42 <HAL_GPIO_Init+0x152>
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3e:	3b08      	subs	r3, #8
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	210f      	movs	r1, #15
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f50:	43db      	mvns	r3, r3
 8001f52:	401a      	ands	r2, r3
 8001f54:	6a39      	ldr	r1, [r7, #32]
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	fa01 f303 	lsl.w	r3, r1, r3
 8001f5c:	431a      	orrs	r2, r3
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	f000 80b1 	beq.w	80020d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f70:	4b4d      	ldr	r3, [pc, #308]	; (80020a8 <HAL_GPIO_Init+0x2b8>)
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	4a4c      	ldr	r2, [pc, #304]	; (80020a8 <HAL_GPIO_Init+0x2b8>)
 8001f76:	f043 0301 	orr.w	r3, r3, #1
 8001f7a:	6193      	str	r3, [r2, #24]
 8001f7c:	4b4a      	ldr	r3, [pc, #296]	; (80020a8 <HAL_GPIO_Init+0x2b8>)
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	60bb      	str	r3, [r7, #8]
 8001f86:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f88:	4a48      	ldr	r2, [pc, #288]	; (80020ac <HAL_GPIO_Init+0x2bc>)
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8c:	089b      	lsrs	r3, r3, #2
 8001f8e:	3302      	adds	r3, #2
 8001f90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f94:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f98:	f003 0303 	and.w	r3, r3, #3
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	220f      	movs	r2, #15
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	68fa      	ldr	r2, [r7, #12]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a40      	ldr	r2, [pc, #256]	; (80020b0 <HAL_GPIO_Init+0x2c0>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d013      	beq.n	8001fdc <HAL_GPIO_Init+0x1ec>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a3f      	ldr	r2, [pc, #252]	; (80020b4 <HAL_GPIO_Init+0x2c4>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d00d      	beq.n	8001fd8 <HAL_GPIO_Init+0x1e8>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a3e      	ldr	r2, [pc, #248]	; (80020b8 <HAL_GPIO_Init+0x2c8>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d007      	beq.n	8001fd4 <HAL_GPIO_Init+0x1e4>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a3d      	ldr	r2, [pc, #244]	; (80020bc <HAL_GPIO_Init+0x2cc>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d101      	bne.n	8001fd0 <HAL_GPIO_Init+0x1e0>
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e006      	b.n	8001fde <HAL_GPIO_Init+0x1ee>
 8001fd0:	2304      	movs	r3, #4
 8001fd2:	e004      	b.n	8001fde <HAL_GPIO_Init+0x1ee>
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	e002      	b.n	8001fde <HAL_GPIO_Init+0x1ee>
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e000      	b.n	8001fde <HAL_GPIO_Init+0x1ee>
 8001fdc:	2300      	movs	r3, #0
 8001fde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fe0:	f002 0203 	and.w	r2, r2, #3
 8001fe4:	0092      	lsls	r2, r2, #2
 8001fe6:	4093      	lsls	r3, r2
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fee:	492f      	ldr	r1, [pc, #188]	; (80020ac <HAL_GPIO_Init+0x2bc>)
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff2:	089b      	lsrs	r3, r3, #2
 8001ff4:	3302      	adds	r3, #2
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d006      	beq.n	8002016 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002008:	4b2d      	ldr	r3, [pc, #180]	; (80020c0 <HAL_GPIO_Init+0x2d0>)
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	492c      	ldr	r1, [pc, #176]	; (80020c0 <HAL_GPIO_Init+0x2d0>)
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	4313      	orrs	r3, r2
 8002012:	600b      	str	r3, [r1, #0]
 8002014:	e006      	b.n	8002024 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002016:	4b2a      	ldr	r3, [pc, #168]	; (80020c0 <HAL_GPIO_Init+0x2d0>)
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	43db      	mvns	r3, r3
 800201e:	4928      	ldr	r1, [pc, #160]	; (80020c0 <HAL_GPIO_Init+0x2d0>)
 8002020:	4013      	ands	r3, r2
 8002022:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d006      	beq.n	800203e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002030:	4b23      	ldr	r3, [pc, #140]	; (80020c0 <HAL_GPIO_Init+0x2d0>)
 8002032:	685a      	ldr	r2, [r3, #4]
 8002034:	4922      	ldr	r1, [pc, #136]	; (80020c0 <HAL_GPIO_Init+0x2d0>)
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	4313      	orrs	r3, r2
 800203a:	604b      	str	r3, [r1, #4]
 800203c:	e006      	b.n	800204c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800203e:	4b20      	ldr	r3, [pc, #128]	; (80020c0 <HAL_GPIO_Init+0x2d0>)
 8002040:	685a      	ldr	r2, [r3, #4]
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	43db      	mvns	r3, r3
 8002046:	491e      	ldr	r1, [pc, #120]	; (80020c0 <HAL_GPIO_Init+0x2d0>)
 8002048:	4013      	ands	r3, r2
 800204a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d006      	beq.n	8002066 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002058:	4b19      	ldr	r3, [pc, #100]	; (80020c0 <HAL_GPIO_Init+0x2d0>)
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	4918      	ldr	r1, [pc, #96]	; (80020c0 <HAL_GPIO_Init+0x2d0>)
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	4313      	orrs	r3, r2
 8002062:	608b      	str	r3, [r1, #8]
 8002064:	e006      	b.n	8002074 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002066:	4b16      	ldr	r3, [pc, #88]	; (80020c0 <HAL_GPIO_Init+0x2d0>)
 8002068:	689a      	ldr	r2, [r3, #8]
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	43db      	mvns	r3, r3
 800206e:	4914      	ldr	r1, [pc, #80]	; (80020c0 <HAL_GPIO_Init+0x2d0>)
 8002070:	4013      	ands	r3, r2
 8002072:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d021      	beq.n	80020c4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002080:	4b0f      	ldr	r3, [pc, #60]	; (80020c0 <HAL_GPIO_Init+0x2d0>)
 8002082:	68da      	ldr	r2, [r3, #12]
 8002084:	490e      	ldr	r1, [pc, #56]	; (80020c0 <HAL_GPIO_Init+0x2d0>)
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	4313      	orrs	r3, r2
 800208a:	60cb      	str	r3, [r1, #12]
 800208c:	e021      	b.n	80020d2 <HAL_GPIO_Init+0x2e2>
 800208e:	bf00      	nop
 8002090:	10320000 	.word	0x10320000
 8002094:	10310000 	.word	0x10310000
 8002098:	10220000 	.word	0x10220000
 800209c:	10210000 	.word	0x10210000
 80020a0:	10120000 	.word	0x10120000
 80020a4:	10110000 	.word	0x10110000
 80020a8:	40021000 	.word	0x40021000
 80020ac:	40010000 	.word	0x40010000
 80020b0:	40010800 	.word	0x40010800
 80020b4:	40010c00 	.word	0x40010c00
 80020b8:	40011000 	.word	0x40011000
 80020bc:	40011400 	.word	0x40011400
 80020c0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020c4:	4b0b      	ldr	r3, [pc, #44]	; (80020f4 <HAL_GPIO_Init+0x304>)
 80020c6:	68da      	ldr	r2, [r3, #12]
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	43db      	mvns	r3, r3
 80020cc:	4909      	ldr	r1, [pc, #36]	; (80020f4 <HAL_GPIO_Init+0x304>)
 80020ce:	4013      	ands	r3, r2
 80020d0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80020d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d4:	3301      	adds	r3, #1
 80020d6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020de:	fa22 f303 	lsr.w	r3, r2, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	f47f ae8e 	bne.w	8001e04 <HAL_GPIO_Init+0x14>
  }
}
 80020e8:	bf00      	nop
 80020ea:	bf00      	nop
 80020ec:	372c      	adds	r7, #44	; 0x2c
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bc80      	pop	{r7}
 80020f2:	4770      	bx	lr
 80020f4:	40010400 	.word	0x40010400

080020f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	460b      	mov	r3, r1
 8002102:	807b      	strh	r3, [r7, #2]
 8002104:	4613      	mov	r3, r2
 8002106:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002108:	787b      	ldrb	r3, [r7, #1]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d003      	beq.n	8002116 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800210e:	887a      	ldrh	r2, [r7, #2]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002114:	e003      	b.n	800211e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002116:	887b      	ldrh	r3, [r7, #2]
 8002118:	041a      	lsls	r2, r3, #16
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	611a      	str	r2, [r3, #16]
}
 800211e:	bf00      	nop
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	bc80      	pop	{r7}
 8002126:	4770      	bx	lr

08002128 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	460b      	mov	r3, r1
 8002132:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800213a:	887a      	ldrh	r2, [r7, #2]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	4013      	ands	r3, r2
 8002140:	041a      	lsls	r2, r3, #16
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	43d9      	mvns	r1, r3
 8002146:	887b      	ldrh	r3, [r7, #2]
 8002148:	400b      	ands	r3, r1
 800214a:	431a      	orrs	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	611a      	str	r2, [r3, #16]
}
 8002150:	bf00      	nop
 8002152:	3714      	adds	r7, #20
 8002154:	46bd      	mov	sp, r7
 8002156:	bc80      	pop	{r7}
 8002158:	4770      	bx	lr

0800215a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b082      	sub	sp, #8
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d101      	bne.n	800216c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e076      	b.n	800225a <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002170:	2b00      	cmp	r3, #0
 8002172:	d108      	bne.n	8002186 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800217c:	d009      	beq.n	8002192 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	61da      	str	r2, [r3, #28]
 8002184:	e005      	b.n	8002192 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d106      	bne.n	80021b2 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f7ff f949 	bl	8001444 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2202      	movs	r2, #2
 80021b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021c8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80021da:	431a      	orrs	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021e4:	431a      	orrs	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	431a      	orrs	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	695b      	ldr	r3, [r3, #20]
 80021f4:	f003 0301 	and.w	r3, r3, #1
 80021f8:	431a      	orrs	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	699b      	ldr	r3, [r3, #24]
 80021fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002202:	431a      	orrs	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	69db      	ldr	r3, [r3, #28]
 8002208:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800220c:	431a      	orrs	r2, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a1b      	ldr	r3, [r3, #32]
 8002212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002216:	ea42 0103 	orr.w	r1, r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	430a      	orrs	r2, r1
 8002228:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	0c1a      	lsrs	r2, r3, #16
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f002 0204 	and.w	r2, r2, #4
 8002238:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	69da      	ldr	r2, [r3, #28]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002248:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	b08c      	sub	sp, #48	; 0x30
 8002266:	af00      	add	r7, sp, #0
 8002268:	60f8      	str	r0, [r7, #12]
 800226a:	60b9      	str	r1, [r7, #8]
 800226c:	607a      	str	r2, [r7, #4]
 800226e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002270:	2301      	movs	r3, #1
 8002272:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002274:	2300      	movs	r3, #0
 8002276:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002280:	2b01      	cmp	r3, #1
 8002282:	d101      	bne.n	8002288 <HAL_SPI_TransmitReceive+0x26>
 8002284:	2302      	movs	r3, #2
 8002286:	e18a      	b.n	800259e <HAL_SPI_TransmitReceive+0x33c>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002290:	f7ff fc9c 	bl	8001bcc <HAL_GetTick>
 8002294:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800229c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80022a6:	887b      	ldrh	r3, [r7, #2]
 80022a8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80022aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d00f      	beq.n	80022d2 <HAL_SPI_TransmitReceive+0x70>
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022b8:	d107      	bne.n	80022ca <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d103      	bne.n	80022ca <HAL_SPI_TransmitReceive+0x68>
 80022c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80022c6:	2b04      	cmp	r3, #4
 80022c8:	d003      	beq.n	80022d2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80022ca:	2302      	movs	r3, #2
 80022cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80022d0:	e15b      	b.n	800258a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d005      	beq.n	80022e4 <HAL_SPI_TransmitReceive+0x82>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d002      	beq.n	80022e4 <HAL_SPI_TransmitReceive+0x82>
 80022de:	887b      	ldrh	r3, [r7, #2]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d103      	bne.n	80022ec <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80022ea:	e14e      	b.n	800258a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2b04      	cmp	r3, #4
 80022f6:	d003      	beq.n	8002300 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2205      	movs	r2, #5
 80022fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2200      	movs	r2, #0
 8002304:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	887a      	ldrh	r2, [r7, #2]
 8002310:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	887a      	ldrh	r2, [r7, #2]
 8002316:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	68ba      	ldr	r2, [r7, #8]
 800231c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	887a      	ldrh	r2, [r7, #2]
 8002322:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	887a      	ldrh	r2, [r7, #2]
 8002328:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2200      	movs	r2, #0
 800232e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2200      	movs	r2, #0
 8002334:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002340:	2b40      	cmp	r3, #64	; 0x40
 8002342:	d007      	beq.n	8002354 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002352:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800235c:	d178      	bne.n	8002450 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d002      	beq.n	800236c <HAL_SPI_TransmitReceive+0x10a>
 8002366:	8b7b      	ldrh	r3, [r7, #26]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d166      	bne.n	800243a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002370:	881a      	ldrh	r2, [r3, #0]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237c:	1c9a      	adds	r2, r3, #2
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002386:	b29b      	uxth	r3, r3
 8002388:	3b01      	subs	r3, #1
 800238a:	b29a      	uxth	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002390:	e053      	b.n	800243a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b02      	cmp	r3, #2
 800239e:	d11b      	bne.n	80023d8 <HAL_SPI_TransmitReceive+0x176>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d016      	beq.n	80023d8 <HAL_SPI_TransmitReceive+0x176>
 80023aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d113      	bne.n	80023d8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b4:	881a      	ldrh	r2, [r3, #0]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c0:	1c9a      	adds	r2, r3, #2
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	3b01      	subs	r3, #1
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80023d4:	2300      	movs	r3, #0
 80023d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d119      	bne.n	800241a <HAL_SPI_TransmitReceive+0x1b8>
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d014      	beq.n	800241a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68da      	ldr	r2, [r3, #12]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023fa:	b292      	uxth	r2, r2
 80023fc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002402:	1c9a      	adds	r2, r3, #2
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800240c:	b29b      	uxth	r3, r3
 800240e:	3b01      	subs	r3, #1
 8002410:	b29a      	uxth	r2, r3
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002416:	2301      	movs	r3, #1
 8002418:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800241a:	f7ff fbd7 	bl	8001bcc <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002426:	429a      	cmp	r2, r3
 8002428:	d807      	bhi.n	800243a <HAL_SPI_TransmitReceive+0x1d8>
 800242a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800242c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002430:	d003      	beq.n	800243a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002438:	e0a7      	b.n	800258a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800243e:	b29b      	uxth	r3, r3
 8002440:	2b00      	cmp	r3, #0
 8002442:	d1a6      	bne.n	8002392 <HAL_SPI_TransmitReceive+0x130>
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002448:	b29b      	uxth	r3, r3
 800244a:	2b00      	cmp	r3, #0
 800244c:	d1a1      	bne.n	8002392 <HAL_SPI_TransmitReceive+0x130>
 800244e:	e07c      	b.n	800254a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d002      	beq.n	800245e <HAL_SPI_TransmitReceive+0x1fc>
 8002458:	8b7b      	ldrh	r3, [r7, #26]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d16b      	bne.n	8002536 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	330c      	adds	r3, #12
 8002468:	7812      	ldrb	r2, [r2, #0]
 800246a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002470:	1c5a      	adds	r2, r3, #1
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800247a:	b29b      	uxth	r3, r3
 800247c:	3b01      	subs	r3, #1
 800247e:	b29a      	uxth	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002484:	e057      	b.n	8002536 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	2b02      	cmp	r3, #2
 8002492:	d11c      	bne.n	80024ce <HAL_SPI_TransmitReceive+0x26c>
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002498:	b29b      	uxth	r3, r3
 800249a:	2b00      	cmp	r3, #0
 800249c:	d017      	beq.n	80024ce <HAL_SPI_TransmitReceive+0x26c>
 800249e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d114      	bne.n	80024ce <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	330c      	adds	r3, #12
 80024ae:	7812      	ldrb	r2, [r2, #0]
 80024b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	1c5a      	adds	r2, r3, #1
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	3b01      	subs	r3, #1
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80024ca:	2300      	movs	r3, #0
 80024cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f003 0301 	and.w	r3, r3, #1
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d119      	bne.n	8002510 <HAL_SPI_TransmitReceive+0x2ae>
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d014      	beq.n	8002510 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68da      	ldr	r2, [r3, #12]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f0:	b2d2      	uxtb	r2, r2
 80024f2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f8:	1c5a      	adds	r2, r3, #1
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002502:	b29b      	uxth	r3, r3
 8002504:	3b01      	subs	r3, #1
 8002506:	b29a      	uxth	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800250c:	2301      	movs	r3, #1
 800250e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002510:	f7ff fb5c 	bl	8001bcc <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800251c:	429a      	cmp	r2, r3
 800251e:	d803      	bhi.n	8002528 <HAL_SPI_TransmitReceive+0x2c6>
 8002520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002526:	d102      	bne.n	800252e <HAL_SPI_TransmitReceive+0x2cc>
 8002528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800252a:	2b00      	cmp	r3, #0
 800252c:	d103      	bne.n	8002536 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002534:	e029      	b.n	800258a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800253a:	b29b      	uxth	r3, r3
 800253c:	2b00      	cmp	r3, #0
 800253e:	d1a2      	bne.n	8002486 <HAL_SPI_TransmitReceive+0x224>
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002544:	b29b      	uxth	r3, r3
 8002546:	2b00      	cmp	r3, #0
 8002548:	d19d      	bne.n	8002486 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800254a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800254c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800254e:	68f8      	ldr	r0, [r7, #12]
 8002550:	f000 f8b2 	bl	80026b8 <SPI_EndRxTxTransaction>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d006      	beq.n	8002568 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2220      	movs	r2, #32
 8002564:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002566:	e010      	b.n	800258a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d10b      	bne.n	8002588 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002570:	2300      	movs	r3, #0
 8002572:	617b      	str	r3, [r7, #20]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	617b      	str	r3, [r7, #20]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	617b      	str	r3, [r7, #20]
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	e000      	b.n	800258a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002588:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2201      	movs	r2, #1
 800258e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800259a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3730      	adds	r7, #48	; 0x30
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
	...

080025a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b088      	sub	sp, #32
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	603b      	str	r3, [r7, #0]
 80025b4:	4613      	mov	r3, r2
 80025b6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80025b8:	f7ff fb08 	bl	8001bcc <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c0:	1a9b      	subs	r3, r3, r2
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	4413      	add	r3, r2
 80025c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80025c8:	f7ff fb00 	bl	8001bcc <HAL_GetTick>
 80025cc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80025ce:	4b39      	ldr	r3, [pc, #228]	; (80026b4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	015b      	lsls	r3, r3, #5
 80025d4:	0d1b      	lsrs	r3, r3, #20
 80025d6:	69fa      	ldr	r2, [r7, #28]
 80025d8:	fb02 f303 	mul.w	r3, r2, r3
 80025dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80025de:	e054      	b.n	800268a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e6:	d050      	beq.n	800268a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80025e8:	f7ff faf0 	bl	8001bcc <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	69fa      	ldr	r2, [r7, #28]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d902      	bls.n	80025fe <SPI_WaitFlagStateUntilTimeout+0x56>
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d13d      	bne.n	800267a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	685a      	ldr	r2, [r3, #4]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800260c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002616:	d111      	bne.n	800263c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002620:	d004      	beq.n	800262c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800262a:	d107      	bne.n	800263c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800263a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002640:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002644:	d10f      	bne.n	8002666 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002664:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2201      	movs	r2, #1
 800266a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e017      	b.n	80026aa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d101      	bne.n	8002684 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002680:	2300      	movs	r3, #0
 8002682:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	3b01      	subs	r3, #1
 8002688:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	689a      	ldr	r2, [r3, #8]
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	4013      	ands	r3, r2
 8002694:	68ba      	ldr	r2, [r7, #8]
 8002696:	429a      	cmp	r2, r3
 8002698:	bf0c      	ite	eq
 800269a:	2301      	moveq	r3, #1
 800269c:	2300      	movne	r3, #0
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	461a      	mov	r2, r3
 80026a2:	79fb      	ldrb	r3, [r7, #7]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d19b      	bne.n	80025e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3720      	adds	r7, #32
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	20000000 	.word	0x20000000

080026b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af02      	add	r7, sp, #8
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	9300      	str	r3, [sp, #0]
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	2200      	movs	r2, #0
 80026cc:	2180      	movs	r1, #128	; 0x80
 80026ce:	68f8      	ldr	r0, [r7, #12]
 80026d0:	f7ff ff6a 	bl	80025a8 <SPI_WaitFlagStateUntilTimeout>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d007      	beq.n	80026ea <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026de:	f043 0220 	orr.w	r2, r3, #32
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e000      	b.n	80026ec <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3710      	adds	r7, #16
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <LL_EXTI_EnableIT_0_31>:
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80026fc:	4b05      	ldr	r3, [pc, #20]	; (8002714 <LL_EXTI_EnableIT_0_31+0x20>)
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	4904      	ldr	r1, [pc, #16]	; (8002714 <LL_EXTI_EnableIT_0_31+0x20>)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4313      	orrs	r3, r2
 8002706:	600b      	str	r3, [r1, #0]
}
 8002708:	bf00      	nop
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	bc80      	pop	{r7}
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	40010400 	.word	0x40010400

08002718 <LL_EXTI_DisableIT_0_31>:
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8002720:	4b05      	ldr	r3, [pc, #20]	; (8002738 <LL_EXTI_DisableIT_0_31+0x20>)
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	43db      	mvns	r3, r3
 8002728:	4903      	ldr	r1, [pc, #12]	; (8002738 <LL_EXTI_DisableIT_0_31+0x20>)
 800272a:	4013      	ands	r3, r2
 800272c:	600b      	str	r3, [r1, #0]
}
 800272e:	bf00      	nop
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	bc80      	pop	{r7}
 8002736:	4770      	bx	lr
 8002738:	40010400 	.word	0x40010400

0800273c <LL_EXTI_EnableEvent_0_31>:
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8002744:	4b05      	ldr	r3, [pc, #20]	; (800275c <LL_EXTI_EnableEvent_0_31+0x20>)
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	4904      	ldr	r1, [pc, #16]	; (800275c <LL_EXTI_EnableEvent_0_31+0x20>)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4313      	orrs	r3, r2
 800274e:	604b      	str	r3, [r1, #4]
}
 8002750:	bf00      	nop
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	bc80      	pop	{r7}
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	40010400 	.word	0x40010400

08002760 <LL_EXTI_DisableEvent_0_31>:
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8002768:	4b05      	ldr	r3, [pc, #20]	; (8002780 <LL_EXTI_DisableEvent_0_31+0x20>)
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	43db      	mvns	r3, r3
 8002770:	4903      	ldr	r1, [pc, #12]	; (8002780 <LL_EXTI_DisableEvent_0_31+0x20>)
 8002772:	4013      	ands	r3, r2
 8002774:	604b      	str	r3, [r1, #4]
}
 8002776:	bf00      	nop
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	bc80      	pop	{r7}
 800277e:	4770      	bx	lr
 8002780:	40010400 	.word	0x40010400

08002784 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 800278c:	4b05      	ldr	r3, [pc, #20]	; (80027a4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800278e:	689a      	ldr	r2, [r3, #8]
 8002790:	4904      	ldr	r1, [pc, #16]	; (80027a4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4313      	orrs	r3, r2
 8002796:	608b      	str	r3, [r1, #8]
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	bc80      	pop	{r7}
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	40010400 	.word	0x40010400

080027a8 <LL_EXTI_DisableRisingTrig_0_31>:
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80027b0:	4b05      	ldr	r3, [pc, #20]	; (80027c8 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	43db      	mvns	r3, r3
 80027b8:	4903      	ldr	r1, [pc, #12]	; (80027c8 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80027ba:	4013      	ands	r3, r2
 80027bc:	608b      	str	r3, [r1, #8]
}
 80027be:	bf00      	nop
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bc80      	pop	{r7}
 80027c6:	4770      	bx	lr
 80027c8:	40010400 	.word	0x40010400

080027cc <LL_EXTI_EnableFallingTrig_0_31>:
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80027d4:	4b05      	ldr	r3, [pc, #20]	; (80027ec <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80027d6:	68da      	ldr	r2, [r3, #12]
 80027d8:	4904      	ldr	r1, [pc, #16]	; (80027ec <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4313      	orrs	r3, r2
 80027de:	60cb      	str	r3, [r1, #12]
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bc80      	pop	{r7}
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	40010400 	.word	0x40010400

080027f0 <LL_EXTI_DisableFallingTrig_0_31>:
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80027f8:	4b05      	ldr	r3, [pc, #20]	; (8002810 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80027fa:	68da      	ldr	r2, [r3, #12]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	43db      	mvns	r3, r3
 8002800:	4903      	ldr	r1, [pc, #12]	; (8002810 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8002802:	4013      	ands	r3, r2
 8002804:	60cb      	str	r3, [r1, #12]
}
 8002806:	bf00      	nop
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	bc80      	pop	{r7}
 800280e:	4770      	bx	lr
 8002810:	40010400 	.word	0x40010400

08002814 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 800281c:	2300      	movs	r3, #0
 800281e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	791b      	ldrb	r3, [r3, #4]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d065      	beq.n	80028f4 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d06c      	beq.n	800290a <LL_EXTI_Init+0xf6>
    {
      switch (EXTI_InitStruct->Mode)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	795b      	ldrb	r3, [r3, #5]
 8002834:	2b02      	cmp	r3, #2
 8002836:	d01c      	beq.n	8002872 <LL_EXTI_Init+0x5e>
 8002838:	2b02      	cmp	r3, #2
 800283a:	dc25      	bgt.n	8002888 <LL_EXTI_Init+0x74>
 800283c:	2b00      	cmp	r3, #0
 800283e:	d002      	beq.n	8002846 <LL_EXTI_Init+0x32>
 8002840:	2b01      	cmp	r3, #1
 8002842:	d00b      	beq.n	800285c <LL_EXTI_Init+0x48>
 8002844:	e020      	b.n	8002888 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4618      	mov	r0, r3
 800284c:	f7ff ff88 	bl	8002760 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4618      	mov	r0, r3
 8002856:	f7ff ff4d 	bl	80026f4 <LL_EXTI_EnableIT_0_31>
          break;
 800285a:	e018      	b.n	800288e <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff ff59 	bl	8002718 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff ff66 	bl	800273c <LL_EXTI_EnableEvent_0_31>
          break;
 8002870:	e00d      	b.n	800288e <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	f7ff ff3c 	bl	80026f4 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4618      	mov	r0, r3
 8002882:	f7ff ff5b 	bl	800273c <LL_EXTI_EnableEvent_0_31>
          break;
 8002886:	e002      	b.n	800288e <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	73fb      	strb	r3, [r7, #15]
          break;
 800288c:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	799b      	ldrb	r3, [r3, #6]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d039      	beq.n	800290a <LL_EXTI_Init+0xf6>
      {
        switch (EXTI_InitStruct->Trigger)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	799b      	ldrb	r3, [r3, #6]
 800289a:	2b03      	cmp	r3, #3
 800289c:	d01c      	beq.n	80028d8 <LL_EXTI_Init+0xc4>
 800289e:	2b03      	cmp	r3, #3
 80028a0:	dc25      	bgt.n	80028ee <LL_EXTI_Init+0xda>
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d002      	beq.n	80028ac <LL_EXTI_Init+0x98>
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d00b      	beq.n	80028c2 <LL_EXTI_Init+0xae>
 80028aa:	e020      	b.n	80028ee <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff ff9d 	bl	80027f0 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7ff ff62 	bl	8002784 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80028c0:	e024      	b.n	800290c <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7ff ff6e 	bl	80027a8 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff ff7b 	bl	80027cc <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80028d6:	e019      	b.n	800290c <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4618      	mov	r0, r3
 80028de:	f7ff ff51 	bl	8002784 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7ff ff70 	bl	80027cc <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80028ec:	e00e      	b.n	800290c <LL_EXTI_Init+0xf8>
          default:
            status = ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	73fb      	strb	r3, [r7, #15]
            break;
 80028f2:	e00b      	b.n	800290c <LL_EXTI_Init+0xf8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7ff ff0d 	bl	8002718 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4618      	mov	r0, r3
 8002904:	f7ff ff2c 	bl	8002760 <LL_EXTI_DisableEvent_0_31>
 8002908:	e000      	b.n	800290c <LL_EXTI_Init+0xf8>
      }
 800290a:	bf00      	nop
  }
  return status;
 800290c:	7bfb      	ldrb	r3, [r7, #15]
}
 800290e:	4618      	mov	r0, r3
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <LL_GPIO_SetPinMode>:
{
 8002916:	b490      	push	{r4, r7}
 8002918:	b088      	sub	sp, #32
 800291a:	af00      	add	r7, sp, #0
 800291c:	60f8      	str	r0, [r7, #12]
 800291e:	60b9      	str	r1, [r7, #8]
 8002920:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	461a      	mov	r2, r3
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	0e1b      	lsrs	r3, r3, #24
 800292a:	4413      	add	r3, r2
 800292c:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 800292e:	6822      	ldr	r2, [r4, #0]
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	fa93 f3a3 	rbit	r3, r3
 800293a:	613b      	str	r3, [r7, #16]
  return result;
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	fab3 f383 	clz	r3, r3
 8002942:	b2db      	uxtb	r3, r3
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	210f      	movs	r1, #15
 8002948:	fa01 f303 	lsl.w	r3, r1, r3
 800294c:	43db      	mvns	r3, r3
 800294e:	401a      	ands	r2, r3
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	fa93 f3a3 	rbit	r3, r3
 800295a:	61bb      	str	r3, [r7, #24]
  return result;
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	fab3 f383 	clz	r3, r3
 8002962:	b2db      	uxtb	r3, r3
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	fa01 f303 	lsl.w	r3, r1, r3
 800296c:	4313      	orrs	r3, r2
 800296e:	6023      	str	r3, [r4, #0]
}
 8002970:	bf00      	nop
 8002972:	3720      	adds	r7, #32
 8002974:	46bd      	mov	sp, r7
 8002976:	bc90      	pop	{r4, r7}
 8002978:	4770      	bx	lr

0800297a <LL_GPIO_SetPinSpeed>:
{
 800297a:	b490      	push	{r4, r7}
 800297c:	b088      	sub	sp, #32
 800297e:	af00      	add	r7, sp, #0
 8002980:	60f8      	str	r0, [r7, #12]
 8002982:	60b9      	str	r1, [r7, #8]
 8002984:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	461a      	mov	r2, r3
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	0e1b      	lsrs	r3, r3, #24
 800298e:	4413      	add	r3, r2
 8002990:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8002992:	6822      	ldr	r2, [r4, #0]
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	fa93 f3a3 	rbit	r3, r3
 800299e:	613b      	str	r3, [r7, #16]
  return result;
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	fab3 f383 	clz	r3, r3
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	2103      	movs	r1, #3
 80029ac:	fa01 f303 	lsl.w	r3, r1, r3
 80029b0:	43db      	mvns	r3, r3
 80029b2:	401a      	ands	r2, r3
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	fa93 f3a3 	rbit	r3, r3
 80029be:	61bb      	str	r3, [r7, #24]
  return result;
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	fab3 f383 	clz	r3, r3
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	6879      	ldr	r1, [r7, #4]
 80029cc:	fa01 f303 	lsl.w	r3, r1, r3
 80029d0:	4313      	orrs	r3, r2
 80029d2:	6023      	str	r3, [r4, #0]
}
 80029d4:	bf00      	nop
 80029d6:	3720      	adds	r7, #32
 80029d8:	46bd      	mov	sp, r7
 80029da:	bc90      	pop	{r4, r7}
 80029dc:	4770      	bx	lr

080029de <LL_GPIO_SetPinOutputType>:
{
 80029de:	b490      	push	{r4, r7}
 80029e0:	b088      	sub	sp, #32
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	60f8      	str	r0, [r7, #12]
 80029e6:	60b9      	str	r1, [r7, #8]
 80029e8:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	461a      	mov	r2, r3
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	0e1b      	lsrs	r3, r3, #24
 80029f2:	4413      	add	r3, r2
 80029f4:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 80029f6:	6822      	ldr	r2, [r4, #0]
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	fa93 f3a3 	rbit	r3, r3
 8002a02:	613b      	str	r3, [r7, #16]
  return result;
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	fab3 f383 	clz	r3, r3
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	2104      	movs	r1, #4
 8002a10:	fa01 f303 	lsl.w	r3, r1, r3
 8002a14:	43db      	mvns	r3, r3
 8002a16:	401a      	ands	r2, r3
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	fa93 f3a3 	rbit	r3, r3
 8002a22:	61bb      	str	r3, [r7, #24]
  return result;
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	fab3 f383 	clz	r3, r3
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	6879      	ldr	r1, [r7, #4]
 8002a30:	fa01 f303 	lsl.w	r3, r1, r3
 8002a34:	4313      	orrs	r3, r2
 8002a36:	6023      	str	r3, [r4, #0]
}
 8002a38:	bf00      	nop
 8002a3a:	3720      	adds	r7, #32
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bc90      	pop	{r4, r7}
 8002a40:	4770      	bx	lr

08002a42 <LL_GPIO_SetPinPull>:
{
 8002a42:	b480      	push	{r7}
 8002a44:	b087      	sub	sp, #28
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	60f8      	str	r0, [r7, #12]
 8002a4a:	60b9      	str	r1, [r7, #8]
 8002a4c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	68da      	ldr	r2, [r3, #12]
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	0a1b      	lsrs	r3, r3, #8
 8002a56:	43db      	mvns	r3, r3
 8002a58:	401a      	ands	r2, r3
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	0a1b      	lsrs	r3, r3, #8
 8002a5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	fa93 f3a3 	rbit	r3, r3
 8002a66:	613b      	str	r3, [r7, #16]
  return result;
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	fab3 f383 	clz	r3, r3
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	4619      	mov	r1, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	408b      	lsls	r3, r1
 8002a76:	431a      	orrs	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	60da      	str	r2, [r3, #12]
}
 8002a7c:	bf00      	nop
 8002a7e:	371c      	adds	r7, #28
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bc80      	pop	{r7}
 8002a84:	4770      	bx	lr

08002a86 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b088      	sub	sp, #32
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
 8002a8e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	021b      	lsls	r3, r3, #8
 8002a96:	0c1b      	lsrs	r3, r3, #16
 8002a98:	617b      	str	r3, [r7, #20]
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	fa93 f3a3 	rbit	r3, r3
 8002aa4:	60fb      	str	r3, [r7, #12]
  return result;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8002aa8:	fab3 f383 	clz	r3, r3
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8002ab0:	e044      	b.n	8002b3c <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	409a      	lsls	r2, r3
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	4013      	ands	r3, r2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d03a      	beq.n	8002b36 <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	2b07      	cmp	r3, #7
 8002ac4:	d806      	bhi.n	8002ad4 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8002ac6:	f240 1201 	movw	r2, #257	; 0x101
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	61bb      	str	r3, [r7, #24]
 8002ad2:	e008      	b.n	8002ae6 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	3b08      	subs	r3, #8
 8002ad8:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ae4:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	2b08      	cmp	r3, #8
 8002aec:	d106      	bne.n	8002afc <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	461a      	mov	r2, r3
 8002af4:	69b9      	ldr	r1, [r7, #24]
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f7ff ffa3 	bl	8002a42 <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	461a      	mov	r2, r3
 8002b02:	69b9      	ldr	r1, [r7, #24]
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f7ff ff06 	bl	8002916 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d003      	beq.n	8002b1a <LL_GPIO_Init+0x94>
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	2b09      	cmp	r3, #9
 8002b18:	d10d      	bne.n	8002b36 <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	461a      	mov	r2, r3
 8002b20:	69b9      	ldr	r1, [r7, #24]
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f7ff ff29 	bl	800297a <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	69b9      	ldr	r1, [r7, #24]
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f7ff ff54 	bl	80029de <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	3301      	adds	r3, #1
 8002b3a:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8002b3c:	697a      	ldr	r2, [r7, #20]
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	fa22 f303 	lsr.w	r3, r2, r3
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d1b4      	bne.n	8002ab2 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3720      	adds	r7, #32
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
	...

08002b54 <LL_RCC_GetSysClkSource>:
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002b58:	4b03      	ldr	r3, [pc, #12]	; (8002b68 <LL_RCC_GetSysClkSource+0x14>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f003 030c 	and.w	r3, r3, #12
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bc80      	pop	{r7}
 8002b66:	4770      	bx	lr
 8002b68:	40021000 	.word	0x40021000

08002b6c <LL_RCC_GetAHBPrescaler>:
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002b70:	4b03      	ldr	r3, [pc, #12]	; (8002b80 <LL_RCC_GetAHBPrescaler+0x14>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bc80      	pop	{r7}
 8002b7e:	4770      	bx	lr
 8002b80:	40021000 	.word	0x40021000

08002b84 <LL_RCC_GetAPB1Prescaler>:
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002b88:	4b03      	ldr	r3, [pc, #12]	; (8002b98 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bc80      	pop	{r7}
 8002b96:	4770      	bx	lr
 8002b98:	40021000 	.word	0x40021000

08002b9c <LL_RCC_GetAPB2Prescaler>:
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002ba0:	4b03      	ldr	r3, [pc, #12]	; (8002bb0 <LL_RCC_GetAPB2Prescaler+0x14>)
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bc80      	pop	{r7}
 8002bae:	4770      	bx	lr
 8002bb0:	40021000 	.word	0x40021000

08002bb4 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8002bb8:	4b03      	ldr	r3, [pc, #12]	; (8002bc8 <LL_RCC_PLL_GetMainSource+0x14>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bc80      	pop	{r7}
 8002bc6:	4770      	bx	lr
 8002bc8:	40021000 	.word	0x40021000

08002bcc <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8002bd0:	4b03      	ldr	r3, [pc, #12]	; (8002be0 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bc80      	pop	{r7}
 8002bde:	4770      	bx	lr
 8002be0:	40021000 	.word	0x40021000

08002be4 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8002be8:	4b04      	ldr	r3, [pc, #16]	; (8002bfc <LL_RCC_PLL_GetPrediv+0x18>)
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	0c5b      	lsrs	r3, r3, #17
 8002bee:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bc80      	pop	{r7}
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	40021000 	.word	0x40021000

08002c00 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002c08:	f000 f820 	bl	8002c4c <RCC_GetSystemClockFreq>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f000 f83e 	bl	8002c98 <RCC_GetHCLKClockFreq>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f000 f84c 	bl	8002cc4 <RCC_GetPCLK1ClockFreq>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f000 f858 	bl	8002cec <RCC_GetPCLK2ClockFreq>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	60da      	str	r2, [r3, #12]
}
 8002c42:	bf00      	nop
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
	...

08002c4c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8002c52:	2300      	movs	r3, #0
 8002c54:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002c56:	f7ff ff7d 	bl	8002b54 <LL_RCC_GetSysClkSource>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b08      	cmp	r3, #8
 8002c5e:	d00c      	beq.n	8002c7a <RCC_GetSystemClockFreq+0x2e>
 8002c60:	2b08      	cmp	r3, #8
 8002c62:	d80e      	bhi.n	8002c82 <RCC_GetSystemClockFreq+0x36>
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d002      	beq.n	8002c6e <RCC_GetSystemClockFreq+0x22>
 8002c68:	2b04      	cmp	r3, #4
 8002c6a:	d003      	beq.n	8002c74 <RCC_GetSystemClockFreq+0x28>
 8002c6c:	e009      	b.n	8002c82 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002c6e:	4b09      	ldr	r3, [pc, #36]	; (8002c94 <RCC_GetSystemClockFreq+0x48>)
 8002c70:	607b      	str	r3, [r7, #4]
      break;
 8002c72:	e009      	b.n	8002c88 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002c74:	4b07      	ldr	r3, [pc, #28]	; (8002c94 <RCC_GetSystemClockFreq+0x48>)
 8002c76:	607b      	str	r3, [r7, #4]
      break;
 8002c78:	e006      	b.n	8002c88 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8002c7a:	f000 f84b 	bl	8002d14 <RCC_PLL_GetFreqDomain_SYS>
 8002c7e:	6078      	str	r0, [r7, #4]
      break;
 8002c80:	e002      	b.n	8002c88 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8002c82:	4b04      	ldr	r3, [pc, #16]	; (8002c94 <RCC_GetSystemClockFreq+0x48>)
 8002c84:	607b      	str	r3, [r7, #4]
      break;
 8002c86:	bf00      	nop
  }

  return frequency;
 8002c88:	687b      	ldr	r3, [r7, #4]
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	007a1200 	.word	0x007a1200

08002c98 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002ca0:	f7ff ff64 	bl	8002b6c <LL_RCC_GetAHBPrescaler>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	091b      	lsrs	r3, r3, #4
 8002ca8:	f003 030f 	and.w	r3, r3, #15
 8002cac:	4a04      	ldr	r2, [pc, #16]	; (8002cc0 <RCC_GetHCLKClockFreq+0x28>)
 8002cae:	5cd3      	ldrb	r3, [r2, r3]
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	40d3      	lsrs	r3, r2
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	08003944 	.word	0x08003944

08002cc4 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002ccc:	f7ff ff5a 	bl	8002b84 <LL_RCC_GetAPB1Prescaler>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	0a1b      	lsrs	r3, r3, #8
 8002cd4:	4a04      	ldr	r2, [pc, #16]	; (8002ce8 <RCC_GetPCLK1ClockFreq+0x24>)
 8002cd6:	5cd3      	ldrb	r3, [r2, r3]
 8002cd8:	461a      	mov	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	40d3      	lsrs	r3, r2
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	08003954 	.word	0x08003954

08002cec <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002cf4:	f7ff ff52 	bl	8002b9c <LL_RCC_GetAPB2Prescaler>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	0adb      	lsrs	r3, r3, #11
 8002cfc:	4a04      	ldr	r2, [pc, #16]	; (8002d10 <RCC_GetPCLK2ClockFreq+0x24>)
 8002cfe:	5cd3      	ldrb	r3, [r2, r3]
 8002d00:	461a      	mov	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	40d3      	lsrs	r3, r2
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	08003954 	.word	0x08003954

08002d14 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	607b      	str	r3, [r7, #4]
 8002d1e:	2300      	movs	r3, #0
 8002d20:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002d22:	f7ff ff47 	bl	8002bb4 <LL_RCC_PLL_GetMainSource>
 8002d26:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d004      	beq.n	8002d38 <RCC_PLL_GetFreqDomain_SYS+0x24>
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d34:	d003      	beq.n	8002d3e <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8002d36:	e00b      	b.n	8002d50 <RCC_PLL_GetFreqDomain_SYS+0x3c>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8002d38:	4b0d      	ldr	r3, [pc, #52]	; (8002d70 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8002d3a:	607b      	str	r3, [r7, #4]
      break;
 8002d3c:	e00b      	b.n	8002d56 <RCC_PLL_GetFreqDomain_SYS+0x42>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 8002d3e:	f7ff ff51 	bl	8002be4 <LL_RCC_PLL_GetPrediv>
 8002d42:	4603      	mov	r3, r0
 8002d44:	3301      	adds	r3, #1
 8002d46:	4a0b      	ldr	r2, [pc, #44]	; (8002d74 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8002d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d4c:	607b      	str	r3, [r7, #4]
      break;
 8002d4e:	e002      	b.n	8002d56 <RCC_PLL_GetFreqDomain_SYS+0x42>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 8002d50:	4b07      	ldr	r3, [pc, #28]	; (8002d70 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8002d52:	607b      	str	r3, [r7, #4]
      break;
 8002d54:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8002d56:	f7ff ff39 	bl	8002bcc <LL_RCC_PLL_GetMultiplicator>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	0c9b      	lsrs	r3, r3, #18
 8002d5e:	3302      	adds	r3, #2
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	fb02 f303 	mul.w	r3, r2, r3
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3708      	adds	r7, #8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	003d0900 	.word	0x003d0900
 8002d74:	007a1200 	.word	0x007a1200

08002d78 <LL_USART_IsEnabled>:
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d8c:	bf0c      	ite	eq
 8002d8e:	2301      	moveq	r3, #1
 8002d90:	2300      	movne	r3, #0
 8002d92:	b2db      	uxtb	r3, r3
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bc80      	pop	{r7}
 8002d9c:	4770      	bx	lr

08002d9e <LL_USART_SetStopBitsLength>:
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b083      	sub	sp, #12
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
 8002da6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	691b      	ldr	r3, [r3, #16]
 8002dac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	431a      	orrs	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	611a      	str	r2, [r3, #16]
}
 8002db8:	bf00      	nop
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bc80      	pop	{r7}
 8002dc0:	4770      	bx	lr

08002dc2 <LL_USART_SetHWFlowCtrl>:
{
 8002dc2:	b480      	push	{r7}
 8002dc4:	b083      	sub	sp, #12
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
 8002dca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	695b      	ldr	r3, [r3, #20]
 8002dd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	431a      	orrs	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	615a      	str	r2, [r3, #20]
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bc80      	pop	{r7}
 8002de4:	4770      	bx	lr
	...

08002de8 <LL_USART_SetBaudRate>:
{
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002df4:	68ba      	ldr	r2, [r7, #8]
 8002df6:	4613      	mov	r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	4413      	add	r3, r2
 8002dfc:	009a      	lsls	r2, r3, #2
 8002dfe:	441a      	add	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e08:	4a25      	ldr	r2, [pc, #148]	; (8002ea0 <LL_USART_SetBaudRate+0xb8>)
 8002e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0e:	095b      	lsrs	r3, r3, #5
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	011b      	lsls	r3, r3, #4
 8002e14:	b299      	uxth	r1, r3
 8002e16:	68ba      	ldr	r2, [r7, #8]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	4413      	add	r3, r2
 8002e1e:	009a      	lsls	r2, r3, #2
 8002e20:	441a      	add	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e2a:	4b1d      	ldr	r3, [pc, #116]	; (8002ea0 <LL_USART_SetBaudRate+0xb8>)
 8002e2c:	fba3 0302 	umull	r0, r3, r3, r2
 8002e30:	095b      	lsrs	r3, r3, #5
 8002e32:	2064      	movs	r0, #100	; 0x64
 8002e34:	fb00 f303 	mul.w	r3, r0, r3
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	011b      	lsls	r3, r3, #4
 8002e3c:	3332      	adds	r3, #50	; 0x32
 8002e3e:	4a18      	ldr	r2, [pc, #96]	; (8002ea0 <LL_USART_SetBaudRate+0xb8>)
 8002e40:	fba2 2303 	umull	r2, r3, r2, r3
 8002e44:	095b      	lsrs	r3, r3, #5
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	440b      	add	r3, r1
 8002e50:	b299      	uxth	r1, r3
 8002e52:	68ba      	ldr	r2, [r7, #8]
 8002e54:	4613      	mov	r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	4413      	add	r3, r2
 8002e5a:	009a      	lsls	r2, r3, #2
 8002e5c:	441a      	add	r2, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e66:	4b0e      	ldr	r3, [pc, #56]	; (8002ea0 <LL_USART_SetBaudRate+0xb8>)
 8002e68:	fba3 0302 	umull	r0, r3, r3, r2
 8002e6c:	095b      	lsrs	r3, r3, #5
 8002e6e:	2064      	movs	r0, #100	; 0x64
 8002e70:	fb00 f303 	mul.w	r3, r0, r3
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	011b      	lsls	r3, r3, #4
 8002e78:	3332      	adds	r3, #50	; 0x32
 8002e7a:	4a09      	ldr	r2, [pc, #36]	; (8002ea0 <LL_USART_SetBaudRate+0xb8>)
 8002e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e80:	095b      	lsrs	r3, r3, #5
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	f003 030f 	and.w	r3, r3, #15
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	440b      	add	r3, r1
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	461a      	mov	r2, r3
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	609a      	str	r2, [r3, #8]
}
 8002e94:	bf00      	nop
 8002e96:	3714      	adds	r7, #20
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bc80      	pop	{r7}
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	51eb851f 	.word	0x51eb851f

08002ea4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b088      	sub	sp, #32
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f7ff ff5e 	bl	8002d78 <LL_USART_IsEnabled>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d145      	bne.n	8002f4e <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002eca:	f023 030c 	bic.w	r3, r3, #12
 8002ece:	683a      	ldr	r2, [r7, #0]
 8002ed0:	6851      	ldr	r1, [r2, #4]
 8002ed2:	683a      	ldr	r2, [r7, #0]
 8002ed4:	68d2      	ldr	r2, [r2, #12]
 8002ed6:	4311      	orrs	r1, r2
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	6912      	ldr	r2, [r2, #16]
 8002edc:	430a      	orrs	r2, r1
 8002ede:	431a      	orrs	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	4619      	mov	r1, r3
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f7ff ff57 	bl	8002d9e <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	695b      	ldr	r3, [r3, #20]
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f7ff ff63 	bl	8002dc2 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8002efc:	f107 0308 	add.w	r3, r7, #8
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7ff fe7d 	bl	8002c00 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a13      	ldr	r2, [pc, #76]	; (8002f58 <LL_USART_Init+0xb4>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d102      	bne.n	8002f14 <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	61bb      	str	r3, [r7, #24]
 8002f12:	e00c      	b.n	8002f2e <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a11      	ldr	r2, [pc, #68]	; (8002f5c <LL_USART_Init+0xb8>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d102      	bne.n	8002f22 <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	61bb      	str	r3, [r7, #24]
 8002f20:	e005      	b.n	8002f2e <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a0e      	ldr	r2, [pc, #56]	; (8002f60 <LL_USART_Init+0xbc>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d101      	bne.n	8002f2e <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00c      	beq.n	8002f4e <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d008      	beq.n	8002f4e <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	461a      	mov	r2, r3
 8002f46:	69b9      	ldr	r1, [r7, #24]
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f7ff ff4d 	bl	8002de8 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002f4e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3720      	adds	r7, #32
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	40013800 	.word	0x40013800
 8002f5c:	40004400 	.word	0x40004400
 8002f60:	40004800 	.word	0x40004800

08002f64 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002f6c:	4a03      	ldr	r2, [pc, #12]	; (8002f7c <LL_SetSystemCoreClock+0x18>)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6013      	str	r3, [r2, #0]
}
 8002f72:	bf00      	nop
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bc80      	pop	{r7}
 8002f7a:	4770      	bx	lr
 8002f7c:	20000000 	.word	0x20000000

08002f80 <__errno>:
 8002f80:	4b01      	ldr	r3, [pc, #4]	; (8002f88 <__errno+0x8>)
 8002f82:	6818      	ldr	r0, [r3, #0]
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	2000000c 	.word	0x2000000c

08002f8c <__libc_init_array>:
 8002f8c:	b570      	push	{r4, r5, r6, lr}
 8002f8e:	2600      	movs	r6, #0
 8002f90:	4d0c      	ldr	r5, [pc, #48]	; (8002fc4 <__libc_init_array+0x38>)
 8002f92:	4c0d      	ldr	r4, [pc, #52]	; (8002fc8 <__libc_init_array+0x3c>)
 8002f94:	1b64      	subs	r4, r4, r5
 8002f96:	10a4      	asrs	r4, r4, #2
 8002f98:	42a6      	cmp	r6, r4
 8002f9a:	d109      	bne.n	8002fb0 <__libc_init_array+0x24>
 8002f9c:	f000 fc94 	bl	80038c8 <_init>
 8002fa0:	2600      	movs	r6, #0
 8002fa2:	4d0a      	ldr	r5, [pc, #40]	; (8002fcc <__libc_init_array+0x40>)
 8002fa4:	4c0a      	ldr	r4, [pc, #40]	; (8002fd0 <__libc_init_array+0x44>)
 8002fa6:	1b64      	subs	r4, r4, r5
 8002fa8:	10a4      	asrs	r4, r4, #2
 8002faa:	42a6      	cmp	r6, r4
 8002fac:	d105      	bne.n	8002fba <__libc_init_array+0x2e>
 8002fae:	bd70      	pop	{r4, r5, r6, pc}
 8002fb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fb4:	4798      	blx	r3
 8002fb6:	3601      	adds	r6, #1
 8002fb8:	e7ee      	b.n	8002f98 <__libc_init_array+0xc>
 8002fba:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fbe:	4798      	blx	r3
 8002fc0:	3601      	adds	r6, #1
 8002fc2:	e7f2      	b.n	8002faa <__libc_init_array+0x1e>
 8002fc4:	08003998 	.word	0x08003998
 8002fc8:	08003998 	.word	0x08003998
 8002fcc:	08003998 	.word	0x08003998
 8002fd0:	0800399c 	.word	0x0800399c

08002fd4 <siprintf>:
 8002fd4:	b40e      	push	{r1, r2, r3}
 8002fd6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002fda:	b500      	push	{lr}
 8002fdc:	b09c      	sub	sp, #112	; 0x70
 8002fde:	ab1d      	add	r3, sp, #116	; 0x74
 8002fe0:	9002      	str	r0, [sp, #8]
 8002fe2:	9006      	str	r0, [sp, #24]
 8002fe4:	9107      	str	r1, [sp, #28]
 8002fe6:	9104      	str	r1, [sp, #16]
 8002fe8:	4808      	ldr	r0, [pc, #32]	; (800300c <siprintf+0x38>)
 8002fea:	4909      	ldr	r1, [pc, #36]	; (8003010 <siprintf+0x3c>)
 8002fec:	f853 2b04 	ldr.w	r2, [r3], #4
 8002ff0:	9105      	str	r1, [sp, #20]
 8002ff2:	6800      	ldr	r0, [r0, #0]
 8002ff4:	a902      	add	r1, sp, #8
 8002ff6:	9301      	str	r3, [sp, #4]
 8002ff8:	f000 f868 	bl	80030cc <_svfiprintf_r>
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	9b02      	ldr	r3, [sp, #8]
 8003000:	701a      	strb	r2, [r3, #0]
 8003002:	b01c      	add	sp, #112	; 0x70
 8003004:	f85d eb04 	ldr.w	lr, [sp], #4
 8003008:	b003      	add	sp, #12
 800300a:	4770      	bx	lr
 800300c:	2000000c 	.word	0x2000000c
 8003010:	ffff0208 	.word	0xffff0208

08003014 <__ssputs_r>:
 8003014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003018:	688e      	ldr	r6, [r1, #8]
 800301a:	4682      	mov	sl, r0
 800301c:	429e      	cmp	r6, r3
 800301e:	460c      	mov	r4, r1
 8003020:	4690      	mov	r8, r2
 8003022:	461f      	mov	r7, r3
 8003024:	d838      	bhi.n	8003098 <__ssputs_r+0x84>
 8003026:	898a      	ldrh	r2, [r1, #12]
 8003028:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800302c:	d032      	beq.n	8003094 <__ssputs_r+0x80>
 800302e:	6825      	ldr	r5, [r4, #0]
 8003030:	6909      	ldr	r1, [r1, #16]
 8003032:	3301      	adds	r3, #1
 8003034:	eba5 0901 	sub.w	r9, r5, r1
 8003038:	6965      	ldr	r5, [r4, #20]
 800303a:	444b      	add	r3, r9
 800303c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003040:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003044:	106d      	asrs	r5, r5, #1
 8003046:	429d      	cmp	r5, r3
 8003048:	bf38      	it	cc
 800304a:	461d      	movcc	r5, r3
 800304c:	0553      	lsls	r3, r2, #21
 800304e:	d531      	bpl.n	80030b4 <__ssputs_r+0xa0>
 8003050:	4629      	mov	r1, r5
 8003052:	f000 fb6f 	bl	8003734 <_malloc_r>
 8003056:	4606      	mov	r6, r0
 8003058:	b950      	cbnz	r0, 8003070 <__ssputs_r+0x5c>
 800305a:	230c      	movs	r3, #12
 800305c:	f04f 30ff 	mov.w	r0, #4294967295
 8003060:	f8ca 3000 	str.w	r3, [sl]
 8003064:	89a3      	ldrh	r3, [r4, #12]
 8003066:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800306a:	81a3      	strh	r3, [r4, #12]
 800306c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003070:	464a      	mov	r2, r9
 8003072:	6921      	ldr	r1, [r4, #16]
 8003074:	f000 face 	bl	8003614 <memcpy>
 8003078:	89a3      	ldrh	r3, [r4, #12]
 800307a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800307e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003082:	81a3      	strh	r3, [r4, #12]
 8003084:	6126      	str	r6, [r4, #16]
 8003086:	444e      	add	r6, r9
 8003088:	6026      	str	r6, [r4, #0]
 800308a:	463e      	mov	r6, r7
 800308c:	6165      	str	r5, [r4, #20]
 800308e:	eba5 0509 	sub.w	r5, r5, r9
 8003092:	60a5      	str	r5, [r4, #8]
 8003094:	42be      	cmp	r6, r7
 8003096:	d900      	bls.n	800309a <__ssputs_r+0x86>
 8003098:	463e      	mov	r6, r7
 800309a:	4632      	mov	r2, r6
 800309c:	4641      	mov	r1, r8
 800309e:	6820      	ldr	r0, [r4, #0]
 80030a0:	f000 fac6 	bl	8003630 <memmove>
 80030a4:	68a3      	ldr	r3, [r4, #8]
 80030a6:	2000      	movs	r0, #0
 80030a8:	1b9b      	subs	r3, r3, r6
 80030aa:	60a3      	str	r3, [r4, #8]
 80030ac:	6823      	ldr	r3, [r4, #0]
 80030ae:	4433      	add	r3, r6
 80030b0:	6023      	str	r3, [r4, #0]
 80030b2:	e7db      	b.n	800306c <__ssputs_r+0x58>
 80030b4:	462a      	mov	r2, r5
 80030b6:	f000 fbb1 	bl	800381c <_realloc_r>
 80030ba:	4606      	mov	r6, r0
 80030bc:	2800      	cmp	r0, #0
 80030be:	d1e1      	bne.n	8003084 <__ssputs_r+0x70>
 80030c0:	4650      	mov	r0, sl
 80030c2:	6921      	ldr	r1, [r4, #16]
 80030c4:	f000 face 	bl	8003664 <_free_r>
 80030c8:	e7c7      	b.n	800305a <__ssputs_r+0x46>
	...

080030cc <_svfiprintf_r>:
 80030cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030d0:	4698      	mov	r8, r3
 80030d2:	898b      	ldrh	r3, [r1, #12]
 80030d4:	4607      	mov	r7, r0
 80030d6:	061b      	lsls	r3, r3, #24
 80030d8:	460d      	mov	r5, r1
 80030da:	4614      	mov	r4, r2
 80030dc:	b09d      	sub	sp, #116	; 0x74
 80030de:	d50e      	bpl.n	80030fe <_svfiprintf_r+0x32>
 80030e0:	690b      	ldr	r3, [r1, #16]
 80030e2:	b963      	cbnz	r3, 80030fe <_svfiprintf_r+0x32>
 80030e4:	2140      	movs	r1, #64	; 0x40
 80030e6:	f000 fb25 	bl	8003734 <_malloc_r>
 80030ea:	6028      	str	r0, [r5, #0]
 80030ec:	6128      	str	r0, [r5, #16]
 80030ee:	b920      	cbnz	r0, 80030fa <_svfiprintf_r+0x2e>
 80030f0:	230c      	movs	r3, #12
 80030f2:	603b      	str	r3, [r7, #0]
 80030f4:	f04f 30ff 	mov.w	r0, #4294967295
 80030f8:	e0d1      	b.n	800329e <_svfiprintf_r+0x1d2>
 80030fa:	2340      	movs	r3, #64	; 0x40
 80030fc:	616b      	str	r3, [r5, #20]
 80030fe:	2300      	movs	r3, #0
 8003100:	9309      	str	r3, [sp, #36]	; 0x24
 8003102:	2320      	movs	r3, #32
 8003104:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003108:	2330      	movs	r3, #48	; 0x30
 800310a:	f04f 0901 	mov.w	r9, #1
 800310e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003112:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80032b8 <_svfiprintf_r+0x1ec>
 8003116:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800311a:	4623      	mov	r3, r4
 800311c:	469a      	mov	sl, r3
 800311e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003122:	b10a      	cbz	r2, 8003128 <_svfiprintf_r+0x5c>
 8003124:	2a25      	cmp	r2, #37	; 0x25
 8003126:	d1f9      	bne.n	800311c <_svfiprintf_r+0x50>
 8003128:	ebba 0b04 	subs.w	fp, sl, r4
 800312c:	d00b      	beq.n	8003146 <_svfiprintf_r+0x7a>
 800312e:	465b      	mov	r3, fp
 8003130:	4622      	mov	r2, r4
 8003132:	4629      	mov	r1, r5
 8003134:	4638      	mov	r0, r7
 8003136:	f7ff ff6d 	bl	8003014 <__ssputs_r>
 800313a:	3001      	adds	r0, #1
 800313c:	f000 80aa 	beq.w	8003294 <_svfiprintf_r+0x1c8>
 8003140:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003142:	445a      	add	r2, fp
 8003144:	9209      	str	r2, [sp, #36]	; 0x24
 8003146:	f89a 3000 	ldrb.w	r3, [sl]
 800314a:	2b00      	cmp	r3, #0
 800314c:	f000 80a2 	beq.w	8003294 <_svfiprintf_r+0x1c8>
 8003150:	2300      	movs	r3, #0
 8003152:	f04f 32ff 	mov.w	r2, #4294967295
 8003156:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800315a:	f10a 0a01 	add.w	sl, sl, #1
 800315e:	9304      	str	r3, [sp, #16]
 8003160:	9307      	str	r3, [sp, #28]
 8003162:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003166:	931a      	str	r3, [sp, #104]	; 0x68
 8003168:	4654      	mov	r4, sl
 800316a:	2205      	movs	r2, #5
 800316c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003170:	4851      	ldr	r0, [pc, #324]	; (80032b8 <_svfiprintf_r+0x1ec>)
 8003172:	f000 fa41 	bl	80035f8 <memchr>
 8003176:	9a04      	ldr	r2, [sp, #16]
 8003178:	b9d8      	cbnz	r0, 80031b2 <_svfiprintf_r+0xe6>
 800317a:	06d0      	lsls	r0, r2, #27
 800317c:	bf44      	itt	mi
 800317e:	2320      	movmi	r3, #32
 8003180:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003184:	0711      	lsls	r1, r2, #28
 8003186:	bf44      	itt	mi
 8003188:	232b      	movmi	r3, #43	; 0x2b
 800318a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800318e:	f89a 3000 	ldrb.w	r3, [sl]
 8003192:	2b2a      	cmp	r3, #42	; 0x2a
 8003194:	d015      	beq.n	80031c2 <_svfiprintf_r+0xf6>
 8003196:	4654      	mov	r4, sl
 8003198:	2000      	movs	r0, #0
 800319a:	f04f 0c0a 	mov.w	ip, #10
 800319e:	9a07      	ldr	r2, [sp, #28]
 80031a0:	4621      	mov	r1, r4
 80031a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80031a6:	3b30      	subs	r3, #48	; 0x30
 80031a8:	2b09      	cmp	r3, #9
 80031aa:	d94e      	bls.n	800324a <_svfiprintf_r+0x17e>
 80031ac:	b1b0      	cbz	r0, 80031dc <_svfiprintf_r+0x110>
 80031ae:	9207      	str	r2, [sp, #28]
 80031b0:	e014      	b.n	80031dc <_svfiprintf_r+0x110>
 80031b2:	eba0 0308 	sub.w	r3, r0, r8
 80031b6:	fa09 f303 	lsl.w	r3, r9, r3
 80031ba:	4313      	orrs	r3, r2
 80031bc:	46a2      	mov	sl, r4
 80031be:	9304      	str	r3, [sp, #16]
 80031c0:	e7d2      	b.n	8003168 <_svfiprintf_r+0x9c>
 80031c2:	9b03      	ldr	r3, [sp, #12]
 80031c4:	1d19      	adds	r1, r3, #4
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	9103      	str	r1, [sp, #12]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	bfbb      	ittet	lt
 80031ce:	425b      	neglt	r3, r3
 80031d0:	f042 0202 	orrlt.w	r2, r2, #2
 80031d4:	9307      	strge	r3, [sp, #28]
 80031d6:	9307      	strlt	r3, [sp, #28]
 80031d8:	bfb8      	it	lt
 80031da:	9204      	strlt	r2, [sp, #16]
 80031dc:	7823      	ldrb	r3, [r4, #0]
 80031de:	2b2e      	cmp	r3, #46	; 0x2e
 80031e0:	d10c      	bne.n	80031fc <_svfiprintf_r+0x130>
 80031e2:	7863      	ldrb	r3, [r4, #1]
 80031e4:	2b2a      	cmp	r3, #42	; 0x2a
 80031e6:	d135      	bne.n	8003254 <_svfiprintf_r+0x188>
 80031e8:	9b03      	ldr	r3, [sp, #12]
 80031ea:	3402      	adds	r4, #2
 80031ec:	1d1a      	adds	r2, r3, #4
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	9203      	str	r2, [sp, #12]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	bfb8      	it	lt
 80031f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80031fa:	9305      	str	r3, [sp, #20]
 80031fc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80032bc <_svfiprintf_r+0x1f0>
 8003200:	2203      	movs	r2, #3
 8003202:	4650      	mov	r0, sl
 8003204:	7821      	ldrb	r1, [r4, #0]
 8003206:	f000 f9f7 	bl	80035f8 <memchr>
 800320a:	b140      	cbz	r0, 800321e <_svfiprintf_r+0x152>
 800320c:	2340      	movs	r3, #64	; 0x40
 800320e:	eba0 000a 	sub.w	r0, r0, sl
 8003212:	fa03 f000 	lsl.w	r0, r3, r0
 8003216:	9b04      	ldr	r3, [sp, #16]
 8003218:	3401      	adds	r4, #1
 800321a:	4303      	orrs	r3, r0
 800321c:	9304      	str	r3, [sp, #16]
 800321e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003222:	2206      	movs	r2, #6
 8003224:	4826      	ldr	r0, [pc, #152]	; (80032c0 <_svfiprintf_r+0x1f4>)
 8003226:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800322a:	f000 f9e5 	bl	80035f8 <memchr>
 800322e:	2800      	cmp	r0, #0
 8003230:	d038      	beq.n	80032a4 <_svfiprintf_r+0x1d8>
 8003232:	4b24      	ldr	r3, [pc, #144]	; (80032c4 <_svfiprintf_r+0x1f8>)
 8003234:	bb1b      	cbnz	r3, 800327e <_svfiprintf_r+0x1b2>
 8003236:	9b03      	ldr	r3, [sp, #12]
 8003238:	3307      	adds	r3, #7
 800323a:	f023 0307 	bic.w	r3, r3, #7
 800323e:	3308      	adds	r3, #8
 8003240:	9303      	str	r3, [sp, #12]
 8003242:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003244:	4433      	add	r3, r6
 8003246:	9309      	str	r3, [sp, #36]	; 0x24
 8003248:	e767      	b.n	800311a <_svfiprintf_r+0x4e>
 800324a:	460c      	mov	r4, r1
 800324c:	2001      	movs	r0, #1
 800324e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003252:	e7a5      	b.n	80031a0 <_svfiprintf_r+0xd4>
 8003254:	2300      	movs	r3, #0
 8003256:	f04f 0c0a 	mov.w	ip, #10
 800325a:	4619      	mov	r1, r3
 800325c:	3401      	adds	r4, #1
 800325e:	9305      	str	r3, [sp, #20]
 8003260:	4620      	mov	r0, r4
 8003262:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003266:	3a30      	subs	r2, #48	; 0x30
 8003268:	2a09      	cmp	r2, #9
 800326a:	d903      	bls.n	8003274 <_svfiprintf_r+0x1a8>
 800326c:	2b00      	cmp	r3, #0
 800326e:	d0c5      	beq.n	80031fc <_svfiprintf_r+0x130>
 8003270:	9105      	str	r1, [sp, #20]
 8003272:	e7c3      	b.n	80031fc <_svfiprintf_r+0x130>
 8003274:	4604      	mov	r4, r0
 8003276:	2301      	movs	r3, #1
 8003278:	fb0c 2101 	mla	r1, ip, r1, r2
 800327c:	e7f0      	b.n	8003260 <_svfiprintf_r+0x194>
 800327e:	ab03      	add	r3, sp, #12
 8003280:	9300      	str	r3, [sp, #0]
 8003282:	462a      	mov	r2, r5
 8003284:	4638      	mov	r0, r7
 8003286:	4b10      	ldr	r3, [pc, #64]	; (80032c8 <_svfiprintf_r+0x1fc>)
 8003288:	a904      	add	r1, sp, #16
 800328a:	f3af 8000 	nop.w
 800328e:	1c42      	adds	r2, r0, #1
 8003290:	4606      	mov	r6, r0
 8003292:	d1d6      	bne.n	8003242 <_svfiprintf_r+0x176>
 8003294:	89ab      	ldrh	r3, [r5, #12]
 8003296:	065b      	lsls	r3, r3, #25
 8003298:	f53f af2c 	bmi.w	80030f4 <_svfiprintf_r+0x28>
 800329c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800329e:	b01d      	add	sp, #116	; 0x74
 80032a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032a4:	ab03      	add	r3, sp, #12
 80032a6:	9300      	str	r3, [sp, #0]
 80032a8:	462a      	mov	r2, r5
 80032aa:	4638      	mov	r0, r7
 80032ac:	4b06      	ldr	r3, [pc, #24]	; (80032c8 <_svfiprintf_r+0x1fc>)
 80032ae:	a904      	add	r1, sp, #16
 80032b0:	f000 f87c 	bl	80033ac <_printf_i>
 80032b4:	e7eb      	b.n	800328e <_svfiprintf_r+0x1c2>
 80032b6:	bf00      	nop
 80032b8:	08003963 	.word	0x08003963
 80032bc:	08003969 	.word	0x08003969
 80032c0:	0800396d 	.word	0x0800396d
 80032c4:	00000000 	.word	0x00000000
 80032c8:	08003015 	.word	0x08003015

080032cc <_printf_common>:
 80032cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032d0:	4616      	mov	r6, r2
 80032d2:	4699      	mov	r9, r3
 80032d4:	688a      	ldr	r2, [r1, #8]
 80032d6:	690b      	ldr	r3, [r1, #16]
 80032d8:	4607      	mov	r7, r0
 80032da:	4293      	cmp	r3, r2
 80032dc:	bfb8      	it	lt
 80032de:	4613      	movlt	r3, r2
 80032e0:	6033      	str	r3, [r6, #0]
 80032e2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80032e6:	460c      	mov	r4, r1
 80032e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80032ec:	b10a      	cbz	r2, 80032f2 <_printf_common+0x26>
 80032ee:	3301      	adds	r3, #1
 80032f0:	6033      	str	r3, [r6, #0]
 80032f2:	6823      	ldr	r3, [r4, #0]
 80032f4:	0699      	lsls	r1, r3, #26
 80032f6:	bf42      	ittt	mi
 80032f8:	6833      	ldrmi	r3, [r6, #0]
 80032fa:	3302      	addmi	r3, #2
 80032fc:	6033      	strmi	r3, [r6, #0]
 80032fe:	6825      	ldr	r5, [r4, #0]
 8003300:	f015 0506 	ands.w	r5, r5, #6
 8003304:	d106      	bne.n	8003314 <_printf_common+0x48>
 8003306:	f104 0a19 	add.w	sl, r4, #25
 800330a:	68e3      	ldr	r3, [r4, #12]
 800330c:	6832      	ldr	r2, [r6, #0]
 800330e:	1a9b      	subs	r3, r3, r2
 8003310:	42ab      	cmp	r3, r5
 8003312:	dc28      	bgt.n	8003366 <_printf_common+0x9a>
 8003314:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003318:	1e13      	subs	r3, r2, #0
 800331a:	6822      	ldr	r2, [r4, #0]
 800331c:	bf18      	it	ne
 800331e:	2301      	movne	r3, #1
 8003320:	0692      	lsls	r2, r2, #26
 8003322:	d42d      	bmi.n	8003380 <_printf_common+0xb4>
 8003324:	4649      	mov	r1, r9
 8003326:	4638      	mov	r0, r7
 8003328:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800332c:	47c0      	blx	r8
 800332e:	3001      	adds	r0, #1
 8003330:	d020      	beq.n	8003374 <_printf_common+0xa8>
 8003332:	6823      	ldr	r3, [r4, #0]
 8003334:	68e5      	ldr	r5, [r4, #12]
 8003336:	f003 0306 	and.w	r3, r3, #6
 800333a:	2b04      	cmp	r3, #4
 800333c:	bf18      	it	ne
 800333e:	2500      	movne	r5, #0
 8003340:	6832      	ldr	r2, [r6, #0]
 8003342:	f04f 0600 	mov.w	r6, #0
 8003346:	68a3      	ldr	r3, [r4, #8]
 8003348:	bf08      	it	eq
 800334a:	1aad      	subeq	r5, r5, r2
 800334c:	6922      	ldr	r2, [r4, #16]
 800334e:	bf08      	it	eq
 8003350:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003354:	4293      	cmp	r3, r2
 8003356:	bfc4      	itt	gt
 8003358:	1a9b      	subgt	r3, r3, r2
 800335a:	18ed      	addgt	r5, r5, r3
 800335c:	341a      	adds	r4, #26
 800335e:	42b5      	cmp	r5, r6
 8003360:	d11a      	bne.n	8003398 <_printf_common+0xcc>
 8003362:	2000      	movs	r0, #0
 8003364:	e008      	b.n	8003378 <_printf_common+0xac>
 8003366:	2301      	movs	r3, #1
 8003368:	4652      	mov	r2, sl
 800336a:	4649      	mov	r1, r9
 800336c:	4638      	mov	r0, r7
 800336e:	47c0      	blx	r8
 8003370:	3001      	adds	r0, #1
 8003372:	d103      	bne.n	800337c <_printf_common+0xb0>
 8003374:	f04f 30ff 	mov.w	r0, #4294967295
 8003378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800337c:	3501      	adds	r5, #1
 800337e:	e7c4      	b.n	800330a <_printf_common+0x3e>
 8003380:	2030      	movs	r0, #48	; 0x30
 8003382:	18e1      	adds	r1, r4, r3
 8003384:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003388:	1c5a      	adds	r2, r3, #1
 800338a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800338e:	4422      	add	r2, r4
 8003390:	3302      	adds	r3, #2
 8003392:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003396:	e7c5      	b.n	8003324 <_printf_common+0x58>
 8003398:	2301      	movs	r3, #1
 800339a:	4622      	mov	r2, r4
 800339c:	4649      	mov	r1, r9
 800339e:	4638      	mov	r0, r7
 80033a0:	47c0      	blx	r8
 80033a2:	3001      	adds	r0, #1
 80033a4:	d0e6      	beq.n	8003374 <_printf_common+0xa8>
 80033a6:	3601      	adds	r6, #1
 80033a8:	e7d9      	b.n	800335e <_printf_common+0x92>
	...

080033ac <_printf_i>:
 80033ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80033b0:	7e0f      	ldrb	r7, [r1, #24]
 80033b2:	4691      	mov	r9, r2
 80033b4:	2f78      	cmp	r7, #120	; 0x78
 80033b6:	4680      	mov	r8, r0
 80033b8:	460c      	mov	r4, r1
 80033ba:	469a      	mov	sl, r3
 80033bc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80033be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80033c2:	d807      	bhi.n	80033d4 <_printf_i+0x28>
 80033c4:	2f62      	cmp	r7, #98	; 0x62
 80033c6:	d80a      	bhi.n	80033de <_printf_i+0x32>
 80033c8:	2f00      	cmp	r7, #0
 80033ca:	f000 80d9 	beq.w	8003580 <_printf_i+0x1d4>
 80033ce:	2f58      	cmp	r7, #88	; 0x58
 80033d0:	f000 80a4 	beq.w	800351c <_printf_i+0x170>
 80033d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80033d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80033dc:	e03a      	b.n	8003454 <_printf_i+0xa8>
 80033de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80033e2:	2b15      	cmp	r3, #21
 80033e4:	d8f6      	bhi.n	80033d4 <_printf_i+0x28>
 80033e6:	a101      	add	r1, pc, #4	; (adr r1, 80033ec <_printf_i+0x40>)
 80033e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80033ec:	08003445 	.word	0x08003445
 80033f0:	08003459 	.word	0x08003459
 80033f4:	080033d5 	.word	0x080033d5
 80033f8:	080033d5 	.word	0x080033d5
 80033fc:	080033d5 	.word	0x080033d5
 8003400:	080033d5 	.word	0x080033d5
 8003404:	08003459 	.word	0x08003459
 8003408:	080033d5 	.word	0x080033d5
 800340c:	080033d5 	.word	0x080033d5
 8003410:	080033d5 	.word	0x080033d5
 8003414:	080033d5 	.word	0x080033d5
 8003418:	08003567 	.word	0x08003567
 800341c:	08003489 	.word	0x08003489
 8003420:	08003549 	.word	0x08003549
 8003424:	080033d5 	.word	0x080033d5
 8003428:	080033d5 	.word	0x080033d5
 800342c:	08003589 	.word	0x08003589
 8003430:	080033d5 	.word	0x080033d5
 8003434:	08003489 	.word	0x08003489
 8003438:	080033d5 	.word	0x080033d5
 800343c:	080033d5 	.word	0x080033d5
 8003440:	08003551 	.word	0x08003551
 8003444:	682b      	ldr	r3, [r5, #0]
 8003446:	1d1a      	adds	r2, r3, #4
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	602a      	str	r2, [r5, #0]
 800344c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003450:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003454:	2301      	movs	r3, #1
 8003456:	e0a4      	b.n	80035a2 <_printf_i+0x1f6>
 8003458:	6820      	ldr	r0, [r4, #0]
 800345a:	6829      	ldr	r1, [r5, #0]
 800345c:	0606      	lsls	r6, r0, #24
 800345e:	f101 0304 	add.w	r3, r1, #4
 8003462:	d50a      	bpl.n	800347a <_printf_i+0xce>
 8003464:	680e      	ldr	r6, [r1, #0]
 8003466:	602b      	str	r3, [r5, #0]
 8003468:	2e00      	cmp	r6, #0
 800346a:	da03      	bge.n	8003474 <_printf_i+0xc8>
 800346c:	232d      	movs	r3, #45	; 0x2d
 800346e:	4276      	negs	r6, r6
 8003470:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003474:	230a      	movs	r3, #10
 8003476:	485e      	ldr	r0, [pc, #376]	; (80035f0 <_printf_i+0x244>)
 8003478:	e019      	b.n	80034ae <_printf_i+0x102>
 800347a:	680e      	ldr	r6, [r1, #0]
 800347c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003480:	602b      	str	r3, [r5, #0]
 8003482:	bf18      	it	ne
 8003484:	b236      	sxthne	r6, r6
 8003486:	e7ef      	b.n	8003468 <_printf_i+0xbc>
 8003488:	682b      	ldr	r3, [r5, #0]
 800348a:	6820      	ldr	r0, [r4, #0]
 800348c:	1d19      	adds	r1, r3, #4
 800348e:	6029      	str	r1, [r5, #0]
 8003490:	0601      	lsls	r1, r0, #24
 8003492:	d501      	bpl.n	8003498 <_printf_i+0xec>
 8003494:	681e      	ldr	r6, [r3, #0]
 8003496:	e002      	b.n	800349e <_printf_i+0xf2>
 8003498:	0646      	lsls	r6, r0, #25
 800349a:	d5fb      	bpl.n	8003494 <_printf_i+0xe8>
 800349c:	881e      	ldrh	r6, [r3, #0]
 800349e:	2f6f      	cmp	r7, #111	; 0x6f
 80034a0:	bf0c      	ite	eq
 80034a2:	2308      	moveq	r3, #8
 80034a4:	230a      	movne	r3, #10
 80034a6:	4852      	ldr	r0, [pc, #328]	; (80035f0 <_printf_i+0x244>)
 80034a8:	2100      	movs	r1, #0
 80034aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80034ae:	6865      	ldr	r5, [r4, #4]
 80034b0:	2d00      	cmp	r5, #0
 80034b2:	bfa8      	it	ge
 80034b4:	6821      	ldrge	r1, [r4, #0]
 80034b6:	60a5      	str	r5, [r4, #8]
 80034b8:	bfa4      	itt	ge
 80034ba:	f021 0104 	bicge.w	r1, r1, #4
 80034be:	6021      	strge	r1, [r4, #0]
 80034c0:	b90e      	cbnz	r6, 80034c6 <_printf_i+0x11a>
 80034c2:	2d00      	cmp	r5, #0
 80034c4:	d04d      	beq.n	8003562 <_printf_i+0x1b6>
 80034c6:	4615      	mov	r5, r2
 80034c8:	fbb6 f1f3 	udiv	r1, r6, r3
 80034cc:	fb03 6711 	mls	r7, r3, r1, r6
 80034d0:	5dc7      	ldrb	r7, [r0, r7]
 80034d2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80034d6:	4637      	mov	r7, r6
 80034d8:	42bb      	cmp	r3, r7
 80034da:	460e      	mov	r6, r1
 80034dc:	d9f4      	bls.n	80034c8 <_printf_i+0x11c>
 80034de:	2b08      	cmp	r3, #8
 80034e0:	d10b      	bne.n	80034fa <_printf_i+0x14e>
 80034e2:	6823      	ldr	r3, [r4, #0]
 80034e4:	07de      	lsls	r6, r3, #31
 80034e6:	d508      	bpl.n	80034fa <_printf_i+0x14e>
 80034e8:	6923      	ldr	r3, [r4, #16]
 80034ea:	6861      	ldr	r1, [r4, #4]
 80034ec:	4299      	cmp	r1, r3
 80034ee:	bfde      	ittt	le
 80034f0:	2330      	movle	r3, #48	; 0x30
 80034f2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80034f6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80034fa:	1b52      	subs	r2, r2, r5
 80034fc:	6122      	str	r2, [r4, #16]
 80034fe:	464b      	mov	r3, r9
 8003500:	4621      	mov	r1, r4
 8003502:	4640      	mov	r0, r8
 8003504:	f8cd a000 	str.w	sl, [sp]
 8003508:	aa03      	add	r2, sp, #12
 800350a:	f7ff fedf 	bl	80032cc <_printf_common>
 800350e:	3001      	adds	r0, #1
 8003510:	d14c      	bne.n	80035ac <_printf_i+0x200>
 8003512:	f04f 30ff 	mov.w	r0, #4294967295
 8003516:	b004      	add	sp, #16
 8003518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800351c:	4834      	ldr	r0, [pc, #208]	; (80035f0 <_printf_i+0x244>)
 800351e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003522:	6829      	ldr	r1, [r5, #0]
 8003524:	6823      	ldr	r3, [r4, #0]
 8003526:	f851 6b04 	ldr.w	r6, [r1], #4
 800352a:	6029      	str	r1, [r5, #0]
 800352c:	061d      	lsls	r5, r3, #24
 800352e:	d514      	bpl.n	800355a <_printf_i+0x1ae>
 8003530:	07df      	lsls	r7, r3, #31
 8003532:	bf44      	itt	mi
 8003534:	f043 0320 	orrmi.w	r3, r3, #32
 8003538:	6023      	strmi	r3, [r4, #0]
 800353a:	b91e      	cbnz	r6, 8003544 <_printf_i+0x198>
 800353c:	6823      	ldr	r3, [r4, #0]
 800353e:	f023 0320 	bic.w	r3, r3, #32
 8003542:	6023      	str	r3, [r4, #0]
 8003544:	2310      	movs	r3, #16
 8003546:	e7af      	b.n	80034a8 <_printf_i+0xfc>
 8003548:	6823      	ldr	r3, [r4, #0]
 800354a:	f043 0320 	orr.w	r3, r3, #32
 800354e:	6023      	str	r3, [r4, #0]
 8003550:	2378      	movs	r3, #120	; 0x78
 8003552:	4828      	ldr	r0, [pc, #160]	; (80035f4 <_printf_i+0x248>)
 8003554:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003558:	e7e3      	b.n	8003522 <_printf_i+0x176>
 800355a:	0659      	lsls	r1, r3, #25
 800355c:	bf48      	it	mi
 800355e:	b2b6      	uxthmi	r6, r6
 8003560:	e7e6      	b.n	8003530 <_printf_i+0x184>
 8003562:	4615      	mov	r5, r2
 8003564:	e7bb      	b.n	80034de <_printf_i+0x132>
 8003566:	682b      	ldr	r3, [r5, #0]
 8003568:	6826      	ldr	r6, [r4, #0]
 800356a:	1d18      	adds	r0, r3, #4
 800356c:	6961      	ldr	r1, [r4, #20]
 800356e:	6028      	str	r0, [r5, #0]
 8003570:	0635      	lsls	r5, r6, #24
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	d501      	bpl.n	800357a <_printf_i+0x1ce>
 8003576:	6019      	str	r1, [r3, #0]
 8003578:	e002      	b.n	8003580 <_printf_i+0x1d4>
 800357a:	0670      	lsls	r0, r6, #25
 800357c:	d5fb      	bpl.n	8003576 <_printf_i+0x1ca>
 800357e:	8019      	strh	r1, [r3, #0]
 8003580:	2300      	movs	r3, #0
 8003582:	4615      	mov	r5, r2
 8003584:	6123      	str	r3, [r4, #16]
 8003586:	e7ba      	b.n	80034fe <_printf_i+0x152>
 8003588:	682b      	ldr	r3, [r5, #0]
 800358a:	2100      	movs	r1, #0
 800358c:	1d1a      	adds	r2, r3, #4
 800358e:	602a      	str	r2, [r5, #0]
 8003590:	681d      	ldr	r5, [r3, #0]
 8003592:	6862      	ldr	r2, [r4, #4]
 8003594:	4628      	mov	r0, r5
 8003596:	f000 f82f 	bl	80035f8 <memchr>
 800359a:	b108      	cbz	r0, 80035a0 <_printf_i+0x1f4>
 800359c:	1b40      	subs	r0, r0, r5
 800359e:	6060      	str	r0, [r4, #4]
 80035a0:	6863      	ldr	r3, [r4, #4]
 80035a2:	6123      	str	r3, [r4, #16]
 80035a4:	2300      	movs	r3, #0
 80035a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035aa:	e7a8      	b.n	80034fe <_printf_i+0x152>
 80035ac:	462a      	mov	r2, r5
 80035ae:	4649      	mov	r1, r9
 80035b0:	4640      	mov	r0, r8
 80035b2:	6923      	ldr	r3, [r4, #16]
 80035b4:	47d0      	blx	sl
 80035b6:	3001      	adds	r0, #1
 80035b8:	d0ab      	beq.n	8003512 <_printf_i+0x166>
 80035ba:	6823      	ldr	r3, [r4, #0]
 80035bc:	079b      	lsls	r3, r3, #30
 80035be:	d413      	bmi.n	80035e8 <_printf_i+0x23c>
 80035c0:	68e0      	ldr	r0, [r4, #12]
 80035c2:	9b03      	ldr	r3, [sp, #12]
 80035c4:	4298      	cmp	r0, r3
 80035c6:	bfb8      	it	lt
 80035c8:	4618      	movlt	r0, r3
 80035ca:	e7a4      	b.n	8003516 <_printf_i+0x16a>
 80035cc:	2301      	movs	r3, #1
 80035ce:	4632      	mov	r2, r6
 80035d0:	4649      	mov	r1, r9
 80035d2:	4640      	mov	r0, r8
 80035d4:	47d0      	blx	sl
 80035d6:	3001      	adds	r0, #1
 80035d8:	d09b      	beq.n	8003512 <_printf_i+0x166>
 80035da:	3501      	adds	r5, #1
 80035dc:	68e3      	ldr	r3, [r4, #12]
 80035de:	9903      	ldr	r1, [sp, #12]
 80035e0:	1a5b      	subs	r3, r3, r1
 80035e2:	42ab      	cmp	r3, r5
 80035e4:	dcf2      	bgt.n	80035cc <_printf_i+0x220>
 80035e6:	e7eb      	b.n	80035c0 <_printf_i+0x214>
 80035e8:	2500      	movs	r5, #0
 80035ea:	f104 0619 	add.w	r6, r4, #25
 80035ee:	e7f5      	b.n	80035dc <_printf_i+0x230>
 80035f0:	08003974 	.word	0x08003974
 80035f4:	08003985 	.word	0x08003985

080035f8 <memchr>:
 80035f8:	4603      	mov	r3, r0
 80035fa:	b510      	push	{r4, lr}
 80035fc:	b2c9      	uxtb	r1, r1
 80035fe:	4402      	add	r2, r0
 8003600:	4293      	cmp	r3, r2
 8003602:	4618      	mov	r0, r3
 8003604:	d101      	bne.n	800360a <memchr+0x12>
 8003606:	2000      	movs	r0, #0
 8003608:	e003      	b.n	8003612 <memchr+0x1a>
 800360a:	7804      	ldrb	r4, [r0, #0]
 800360c:	3301      	adds	r3, #1
 800360e:	428c      	cmp	r4, r1
 8003610:	d1f6      	bne.n	8003600 <memchr+0x8>
 8003612:	bd10      	pop	{r4, pc}

08003614 <memcpy>:
 8003614:	440a      	add	r2, r1
 8003616:	4291      	cmp	r1, r2
 8003618:	f100 33ff 	add.w	r3, r0, #4294967295
 800361c:	d100      	bne.n	8003620 <memcpy+0xc>
 800361e:	4770      	bx	lr
 8003620:	b510      	push	{r4, lr}
 8003622:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003626:	4291      	cmp	r1, r2
 8003628:	f803 4f01 	strb.w	r4, [r3, #1]!
 800362c:	d1f9      	bne.n	8003622 <memcpy+0xe>
 800362e:	bd10      	pop	{r4, pc}

08003630 <memmove>:
 8003630:	4288      	cmp	r0, r1
 8003632:	b510      	push	{r4, lr}
 8003634:	eb01 0402 	add.w	r4, r1, r2
 8003638:	d902      	bls.n	8003640 <memmove+0x10>
 800363a:	4284      	cmp	r4, r0
 800363c:	4623      	mov	r3, r4
 800363e:	d807      	bhi.n	8003650 <memmove+0x20>
 8003640:	1e43      	subs	r3, r0, #1
 8003642:	42a1      	cmp	r1, r4
 8003644:	d008      	beq.n	8003658 <memmove+0x28>
 8003646:	f811 2b01 	ldrb.w	r2, [r1], #1
 800364a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800364e:	e7f8      	b.n	8003642 <memmove+0x12>
 8003650:	4601      	mov	r1, r0
 8003652:	4402      	add	r2, r0
 8003654:	428a      	cmp	r2, r1
 8003656:	d100      	bne.n	800365a <memmove+0x2a>
 8003658:	bd10      	pop	{r4, pc}
 800365a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800365e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003662:	e7f7      	b.n	8003654 <memmove+0x24>

08003664 <_free_r>:
 8003664:	b538      	push	{r3, r4, r5, lr}
 8003666:	4605      	mov	r5, r0
 8003668:	2900      	cmp	r1, #0
 800366a:	d040      	beq.n	80036ee <_free_r+0x8a>
 800366c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003670:	1f0c      	subs	r4, r1, #4
 8003672:	2b00      	cmp	r3, #0
 8003674:	bfb8      	it	lt
 8003676:	18e4      	addlt	r4, r4, r3
 8003678:	f000 f910 	bl	800389c <__malloc_lock>
 800367c:	4a1c      	ldr	r2, [pc, #112]	; (80036f0 <_free_r+0x8c>)
 800367e:	6813      	ldr	r3, [r2, #0]
 8003680:	b933      	cbnz	r3, 8003690 <_free_r+0x2c>
 8003682:	6063      	str	r3, [r4, #4]
 8003684:	6014      	str	r4, [r2, #0]
 8003686:	4628      	mov	r0, r5
 8003688:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800368c:	f000 b90c 	b.w	80038a8 <__malloc_unlock>
 8003690:	42a3      	cmp	r3, r4
 8003692:	d908      	bls.n	80036a6 <_free_r+0x42>
 8003694:	6820      	ldr	r0, [r4, #0]
 8003696:	1821      	adds	r1, r4, r0
 8003698:	428b      	cmp	r3, r1
 800369a:	bf01      	itttt	eq
 800369c:	6819      	ldreq	r1, [r3, #0]
 800369e:	685b      	ldreq	r3, [r3, #4]
 80036a0:	1809      	addeq	r1, r1, r0
 80036a2:	6021      	streq	r1, [r4, #0]
 80036a4:	e7ed      	b.n	8003682 <_free_r+0x1e>
 80036a6:	461a      	mov	r2, r3
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	b10b      	cbz	r3, 80036b0 <_free_r+0x4c>
 80036ac:	42a3      	cmp	r3, r4
 80036ae:	d9fa      	bls.n	80036a6 <_free_r+0x42>
 80036b0:	6811      	ldr	r1, [r2, #0]
 80036b2:	1850      	adds	r0, r2, r1
 80036b4:	42a0      	cmp	r0, r4
 80036b6:	d10b      	bne.n	80036d0 <_free_r+0x6c>
 80036b8:	6820      	ldr	r0, [r4, #0]
 80036ba:	4401      	add	r1, r0
 80036bc:	1850      	adds	r0, r2, r1
 80036be:	4283      	cmp	r3, r0
 80036c0:	6011      	str	r1, [r2, #0]
 80036c2:	d1e0      	bne.n	8003686 <_free_r+0x22>
 80036c4:	6818      	ldr	r0, [r3, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	4401      	add	r1, r0
 80036ca:	6011      	str	r1, [r2, #0]
 80036cc:	6053      	str	r3, [r2, #4]
 80036ce:	e7da      	b.n	8003686 <_free_r+0x22>
 80036d0:	d902      	bls.n	80036d8 <_free_r+0x74>
 80036d2:	230c      	movs	r3, #12
 80036d4:	602b      	str	r3, [r5, #0]
 80036d6:	e7d6      	b.n	8003686 <_free_r+0x22>
 80036d8:	6820      	ldr	r0, [r4, #0]
 80036da:	1821      	adds	r1, r4, r0
 80036dc:	428b      	cmp	r3, r1
 80036de:	bf01      	itttt	eq
 80036e0:	6819      	ldreq	r1, [r3, #0]
 80036e2:	685b      	ldreq	r3, [r3, #4]
 80036e4:	1809      	addeq	r1, r1, r0
 80036e6:	6021      	streq	r1, [r4, #0]
 80036e8:	6063      	str	r3, [r4, #4]
 80036ea:	6054      	str	r4, [r2, #4]
 80036ec:	e7cb      	b.n	8003686 <_free_r+0x22>
 80036ee:	bd38      	pop	{r3, r4, r5, pc}
 80036f0:	20000188 	.word	0x20000188

080036f4 <sbrk_aligned>:
 80036f4:	b570      	push	{r4, r5, r6, lr}
 80036f6:	4e0e      	ldr	r6, [pc, #56]	; (8003730 <sbrk_aligned+0x3c>)
 80036f8:	460c      	mov	r4, r1
 80036fa:	6831      	ldr	r1, [r6, #0]
 80036fc:	4605      	mov	r5, r0
 80036fe:	b911      	cbnz	r1, 8003706 <sbrk_aligned+0x12>
 8003700:	f000 f8bc 	bl	800387c <_sbrk_r>
 8003704:	6030      	str	r0, [r6, #0]
 8003706:	4621      	mov	r1, r4
 8003708:	4628      	mov	r0, r5
 800370a:	f000 f8b7 	bl	800387c <_sbrk_r>
 800370e:	1c43      	adds	r3, r0, #1
 8003710:	d00a      	beq.n	8003728 <sbrk_aligned+0x34>
 8003712:	1cc4      	adds	r4, r0, #3
 8003714:	f024 0403 	bic.w	r4, r4, #3
 8003718:	42a0      	cmp	r0, r4
 800371a:	d007      	beq.n	800372c <sbrk_aligned+0x38>
 800371c:	1a21      	subs	r1, r4, r0
 800371e:	4628      	mov	r0, r5
 8003720:	f000 f8ac 	bl	800387c <_sbrk_r>
 8003724:	3001      	adds	r0, #1
 8003726:	d101      	bne.n	800372c <sbrk_aligned+0x38>
 8003728:	f04f 34ff 	mov.w	r4, #4294967295
 800372c:	4620      	mov	r0, r4
 800372e:	bd70      	pop	{r4, r5, r6, pc}
 8003730:	2000018c 	.word	0x2000018c

08003734 <_malloc_r>:
 8003734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003738:	1ccd      	adds	r5, r1, #3
 800373a:	f025 0503 	bic.w	r5, r5, #3
 800373e:	3508      	adds	r5, #8
 8003740:	2d0c      	cmp	r5, #12
 8003742:	bf38      	it	cc
 8003744:	250c      	movcc	r5, #12
 8003746:	2d00      	cmp	r5, #0
 8003748:	4607      	mov	r7, r0
 800374a:	db01      	blt.n	8003750 <_malloc_r+0x1c>
 800374c:	42a9      	cmp	r1, r5
 800374e:	d905      	bls.n	800375c <_malloc_r+0x28>
 8003750:	230c      	movs	r3, #12
 8003752:	2600      	movs	r6, #0
 8003754:	603b      	str	r3, [r7, #0]
 8003756:	4630      	mov	r0, r6
 8003758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800375c:	4e2e      	ldr	r6, [pc, #184]	; (8003818 <_malloc_r+0xe4>)
 800375e:	f000 f89d 	bl	800389c <__malloc_lock>
 8003762:	6833      	ldr	r3, [r6, #0]
 8003764:	461c      	mov	r4, r3
 8003766:	bb34      	cbnz	r4, 80037b6 <_malloc_r+0x82>
 8003768:	4629      	mov	r1, r5
 800376a:	4638      	mov	r0, r7
 800376c:	f7ff ffc2 	bl	80036f4 <sbrk_aligned>
 8003770:	1c43      	adds	r3, r0, #1
 8003772:	4604      	mov	r4, r0
 8003774:	d14d      	bne.n	8003812 <_malloc_r+0xde>
 8003776:	6834      	ldr	r4, [r6, #0]
 8003778:	4626      	mov	r6, r4
 800377a:	2e00      	cmp	r6, #0
 800377c:	d140      	bne.n	8003800 <_malloc_r+0xcc>
 800377e:	6823      	ldr	r3, [r4, #0]
 8003780:	4631      	mov	r1, r6
 8003782:	4638      	mov	r0, r7
 8003784:	eb04 0803 	add.w	r8, r4, r3
 8003788:	f000 f878 	bl	800387c <_sbrk_r>
 800378c:	4580      	cmp	r8, r0
 800378e:	d13a      	bne.n	8003806 <_malloc_r+0xd2>
 8003790:	6821      	ldr	r1, [r4, #0]
 8003792:	3503      	adds	r5, #3
 8003794:	1a6d      	subs	r5, r5, r1
 8003796:	f025 0503 	bic.w	r5, r5, #3
 800379a:	3508      	adds	r5, #8
 800379c:	2d0c      	cmp	r5, #12
 800379e:	bf38      	it	cc
 80037a0:	250c      	movcc	r5, #12
 80037a2:	4638      	mov	r0, r7
 80037a4:	4629      	mov	r1, r5
 80037a6:	f7ff ffa5 	bl	80036f4 <sbrk_aligned>
 80037aa:	3001      	adds	r0, #1
 80037ac:	d02b      	beq.n	8003806 <_malloc_r+0xd2>
 80037ae:	6823      	ldr	r3, [r4, #0]
 80037b0:	442b      	add	r3, r5
 80037b2:	6023      	str	r3, [r4, #0]
 80037b4:	e00e      	b.n	80037d4 <_malloc_r+0xa0>
 80037b6:	6822      	ldr	r2, [r4, #0]
 80037b8:	1b52      	subs	r2, r2, r5
 80037ba:	d41e      	bmi.n	80037fa <_malloc_r+0xc6>
 80037bc:	2a0b      	cmp	r2, #11
 80037be:	d916      	bls.n	80037ee <_malloc_r+0xba>
 80037c0:	1961      	adds	r1, r4, r5
 80037c2:	42a3      	cmp	r3, r4
 80037c4:	6025      	str	r5, [r4, #0]
 80037c6:	bf18      	it	ne
 80037c8:	6059      	strne	r1, [r3, #4]
 80037ca:	6863      	ldr	r3, [r4, #4]
 80037cc:	bf08      	it	eq
 80037ce:	6031      	streq	r1, [r6, #0]
 80037d0:	5162      	str	r2, [r4, r5]
 80037d2:	604b      	str	r3, [r1, #4]
 80037d4:	4638      	mov	r0, r7
 80037d6:	f104 060b 	add.w	r6, r4, #11
 80037da:	f000 f865 	bl	80038a8 <__malloc_unlock>
 80037de:	f026 0607 	bic.w	r6, r6, #7
 80037e2:	1d23      	adds	r3, r4, #4
 80037e4:	1af2      	subs	r2, r6, r3
 80037e6:	d0b6      	beq.n	8003756 <_malloc_r+0x22>
 80037e8:	1b9b      	subs	r3, r3, r6
 80037ea:	50a3      	str	r3, [r4, r2]
 80037ec:	e7b3      	b.n	8003756 <_malloc_r+0x22>
 80037ee:	6862      	ldr	r2, [r4, #4]
 80037f0:	42a3      	cmp	r3, r4
 80037f2:	bf0c      	ite	eq
 80037f4:	6032      	streq	r2, [r6, #0]
 80037f6:	605a      	strne	r2, [r3, #4]
 80037f8:	e7ec      	b.n	80037d4 <_malloc_r+0xa0>
 80037fa:	4623      	mov	r3, r4
 80037fc:	6864      	ldr	r4, [r4, #4]
 80037fe:	e7b2      	b.n	8003766 <_malloc_r+0x32>
 8003800:	4634      	mov	r4, r6
 8003802:	6876      	ldr	r6, [r6, #4]
 8003804:	e7b9      	b.n	800377a <_malloc_r+0x46>
 8003806:	230c      	movs	r3, #12
 8003808:	4638      	mov	r0, r7
 800380a:	603b      	str	r3, [r7, #0]
 800380c:	f000 f84c 	bl	80038a8 <__malloc_unlock>
 8003810:	e7a1      	b.n	8003756 <_malloc_r+0x22>
 8003812:	6025      	str	r5, [r4, #0]
 8003814:	e7de      	b.n	80037d4 <_malloc_r+0xa0>
 8003816:	bf00      	nop
 8003818:	20000188 	.word	0x20000188

0800381c <_realloc_r>:
 800381c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003820:	4680      	mov	r8, r0
 8003822:	4614      	mov	r4, r2
 8003824:	460e      	mov	r6, r1
 8003826:	b921      	cbnz	r1, 8003832 <_realloc_r+0x16>
 8003828:	4611      	mov	r1, r2
 800382a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800382e:	f7ff bf81 	b.w	8003734 <_malloc_r>
 8003832:	b92a      	cbnz	r2, 8003840 <_realloc_r+0x24>
 8003834:	f7ff ff16 	bl	8003664 <_free_r>
 8003838:	4625      	mov	r5, r4
 800383a:	4628      	mov	r0, r5
 800383c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003840:	f000 f838 	bl	80038b4 <_malloc_usable_size_r>
 8003844:	4284      	cmp	r4, r0
 8003846:	4607      	mov	r7, r0
 8003848:	d802      	bhi.n	8003850 <_realloc_r+0x34>
 800384a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800384e:	d812      	bhi.n	8003876 <_realloc_r+0x5a>
 8003850:	4621      	mov	r1, r4
 8003852:	4640      	mov	r0, r8
 8003854:	f7ff ff6e 	bl	8003734 <_malloc_r>
 8003858:	4605      	mov	r5, r0
 800385a:	2800      	cmp	r0, #0
 800385c:	d0ed      	beq.n	800383a <_realloc_r+0x1e>
 800385e:	42bc      	cmp	r4, r7
 8003860:	4622      	mov	r2, r4
 8003862:	4631      	mov	r1, r6
 8003864:	bf28      	it	cs
 8003866:	463a      	movcs	r2, r7
 8003868:	f7ff fed4 	bl	8003614 <memcpy>
 800386c:	4631      	mov	r1, r6
 800386e:	4640      	mov	r0, r8
 8003870:	f7ff fef8 	bl	8003664 <_free_r>
 8003874:	e7e1      	b.n	800383a <_realloc_r+0x1e>
 8003876:	4635      	mov	r5, r6
 8003878:	e7df      	b.n	800383a <_realloc_r+0x1e>
	...

0800387c <_sbrk_r>:
 800387c:	b538      	push	{r3, r4, r5, lr}
 800387e:	2300      	movs	r3, #0
 8003880:	4d05      	ldr	r5, [pc, #20]	; (8003898 <_sbrk_r+0x1c>)
 8003882:	4604      	mov	r4, r0
 8003884:	4608      	mov	r0, r1
 8003886:	602b      	str	r3, [r5, #0]
 8003888:	f7fd ff3c 	bl	8001704 <_sbrk>
 800388c:	1c43      	adds	r3, r0, #1
 800388e:	d102      	bne.n	8003896 <_sbrk_r+0x1a>
 8003890:	682b      	ldr	r3, [r5, #0]
 8003892:	b103      	cbz	r3, 8003896 <_sbrk_r+0x1a>
 8003894:	6023      	str	r3, [r4, #0]
 8003896:	bd38      	pop	{r3, r4, r5, pc}
 8003898:	20000190 	.word	0x20000190

0800389c <__malloc_lock>:
 800389c:	4801      	ldr	r0, [pc, #4]	; (80038a4 <__malloc_lock+0x8>)
 800389e:	f000 b811 	b.w	80038c4 <__retarget_lock_acquire_recursive>
 80038a2:	bf00      	nop
 80038a4:	20000194 	.word	0x20000194

080038a8 <__malloc_unlock>:
 80038a8:	4801      	ldr	r0, [pc, #4]	; (80038b0 <__malloc_unlock+0x8>)
 80038aa:	f000 b80c 	b.w	80038c6 <__retarget_lock_release_recursive>
 80038ae:	bf00      	nop
 80038b0:	20000194 	.word	0x20000194

080038b4 <_malloc_usable_size_r>:
 80038b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038b8:	1f18      	subs	r0, r3, #4
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	bfbc      	itt	lt
 80038be:	580b      	ldrlt	r3, [r1, r0]
 80038c0:	18c0      	addlt	r0, r0, r3
 80038c2:	4770      	bx	lr

080038c4 <__retarget_lock_acquire_recursive>:
 80038c4:	4770      	bx	lr

080038c6 <__retarget_lock_release_recursive>:
 80038c6:	4770      	bx	lr

080038c8 <_init>:
 80038c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ca:	bf00      	nop
 80038cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ce:	bc08      	pop	{r3}
 80038d0:	469e      	mov	lr, r3
 80038d2:	4770      	bx	lr

080038d4 <_fini>:
 80038d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038d6:	bf00      	nop
 80038d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038da:	bc08      	pop	{r3}
 80038dc:	469e      	mov	lr, r3
 80038de:	4770      	bx	lr
