
UART_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008478  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008600  08008600  00018600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800861c  0800861c  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800861c  0800861c  0001861c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008624  08008624  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008624  08008624  00018624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008628  08008628  00018628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800862c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000808  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000898  20000898  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   000197ac  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000048ef  00000000  00000000  0003986c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001618  00000000  00000000  0003e160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001408  00000000  00000000  0003f778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000270c5  00000000  00000000  00040b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001dad3  00000000  00000000  00067c45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8298  00000000  00000000  00085718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015d9b0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005c34  00000000  00000000  0015da00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080085e8 	.word	0x080085e8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	080085e8 	.word	0x080085e8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80004d4:	4b08      	ldr	r3, [pc, #32]	; (80004f8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80004d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004d8:	4907      	ldr	r1, [pc, #28]	; (80004f8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	4313      	orrs	r3, r2
 80004de:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80004e0:	4b05      	ldr	r3, [pc, #20]	; (80004f8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80004e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	4013      	ands	r3, r2
 80004e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004ea:	68fb      	ldr	r3, [r7, #12]
}
 80004ec:	bf00      	nop
 80004ee:	3714      	adds	r7, #20
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr
 80004f8:	40023800 	.word	0x40023800

080004fc <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b085      	sub	sp, #20
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
 8000504:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8000506:	4a13      	ldr	r2, [pc, #76]	; (8000554 <LL_SYSCFG_SetEXTISource+0x58>)
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	b2db      	uxtb	r3, r3
 800050c:	3302      	adds	r3, #2
 800050e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	0c1b      	lsrs	r3, r3, #16
 8000516:	43db      	mvns	r3, r3
 8000518:	ea02 0103 	and.w	r1, r2, r3
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	0c1b      	lsrs	r3, r3, #16
 8000520:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	fa93 f3a3 	rbit	r3, r3
 8000528:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800052a:	68bb      	ldr	r3, [r7, #8]
 800052c:	fab3 f383 	clz	r3, r3
 8000530:	b2db      	uxtb	r3, r3
 8000532:	461a      	mov	r2, r3
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	fa03 f202 	lsl.w	r2, r3, r2
 800053a:	4806      	ldr	r0, [pc, #24]	; (8000554 <LL_SYSCFG_SetEXTISource+0x58>)
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	b2db      	uxtb	r3, r3
 8000540:	430a      	orrs	r2, r1
 8000542:	3302      	adds	r3, #2
 8000544:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000548:	bf00      	nop
 800054a:	3714      	adds	r7, #20
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr
 8000554:	40013800 	.word	0x40013800

08000558 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000558:	b480      	push	{r7}
 800055a:	b089      	sub	sp, #36	; 0x24
 800055c:	af00      	add	r7, sp, #0
 800055e:	60f8      	str	r0, [r7, #12]
 8000560:	60b9      	str	r1, [r7, #8]
 8000562:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	681a      	ldr	r2, [r3, #0]
 8000568:	68bb      	ldr	r3, [r7, #8]
 800056a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800056c:	697b      	ldr	r3, [r7, #20]
 800056e:	fa93 f3a3 	rbit	r3, r3
 8000572:	613b      	str	r3, [r7, #16]
  return result;
 8000574:	693b      	ldr	r3, [r7, #16]
 8000576:	fab3 f383 	clz	r3, r3
 800057a:	b2db      	uxtb	r3, r3
 800057c:	005b      	lsls	r3, r3, #1
 800057e:	2103      	movs	r1, #3
 8000580:	fa01 f303 	lsl.w	r3, r1, r3
 8000584:	43db      	mvns	r3, r3
 8000586:	401a      	ands	r2, r3
 8000588:	68bb      	ldr	r3, [r7, #8]
 800058a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800058c:	69fb      	ldr	r3, [r7, #28]
 800058e:	fa93 f3a3 	rbit	r3, r3
 8000592:	61bb      	str	r3, [r7, #24]
  return result;
 8000594:	69bb      	ldr	r3, [r7, #24]
 8000596:	fab3 f383 	clz	r3, r3
 800059a:	b2db      	uxtb	r3, r3
 800059c:	005b      	lsls	r3, r3, #1
 800059e:	6879      	ldr	r1, [r7, #4]
 80005a0:	fa01 f303 	lsl.w	r3, r1, r3
 80005a4:	431a      	orrs	r2, r3
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	601a      	str	r2, [r3, #0]
}
 80005aa:	bf00      	nop
 80005ac:	3724      	adds	r7, #36	; 0x24
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr

080005b6 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80005b6:	b480      	push	{r7}
 80005b8:	b089      	sub	sp, #36	; 0x24
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	60f8      	str	r0, [r7, #12]
 80005be:	60b9      	str	r1, [r7, #8]
 80005c0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	68da      	ldr	r2, [r3, #12]
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005ca:	697b      	ldr	r3, [r7, #20]
 80005cc:	fa93 f3a3 	rbit	r3, r3
 80005d0:	613b      	str	r3, [r7, #16]
  return result;
 80005d2:	693b      	ldr	r3, [r7, #16]
 80005d4:	fab3 f383 	clz	r3, r3
 80005d8:	b2db      	uxtb	r3, r3
 80005da:	005b      	lsls	r3, r3, #1
 80005dc:	2103      	movs	r1, #3
 80005de:	fa01 f303 	lsl.w	r3, r1, r3
 80005e2:	43db      	mvns	r3, r3
 80005e4:	401a      	ands	r2, r3
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005ea:	69fb      	ldr	r3, [r7, #28]
 80005ec:	fa93 f3a3 	rbit	r3, r3
 80005f0:	61bb      	str	r3, [r7, #24]
  return result;
 80005f2:	69bb      	ldr	r3, [r7, #24]
 80005f4:	fab3 f383 	clz	r3, r3
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	005b      	lsls	r3, r3, #1
 80005fc:	6879      	ldr	r1, [r7, #4]
 80005fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000602:	431a      	orrs	r2, r3
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	60da      	str	r2, [r3, #12]
}
 8000608:	bf00      	nop
 800060a:	3724      	adds	r7, #36	; 0x24
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr

08000614 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	683a      	ldr	r2, [r7, #0]
 8000622:	619a      	str	r2, [r3, #24]
}
 8000624:	bf00      	nop
 8000626:	370c      	adds	r7, #12
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr

08000630 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
 8000638:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	041a      	lsls	r2, r3, #16
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	619a      	str	r2, [r3, #24]
}
 8000642:	bf00      	nop
 8000644:	370c      	adds	r7, #12
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
	...

08000650 <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b088      	sub	sp, #32
 8000654:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000656:	f107 0318 	add.w	r3, r7, #24
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000660:	463b      	mov	r3, r7
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]
 800066a:	60da      	str	r2, [r3, #12]
 800066c:	611a      	str	r2, [r3, #16]
 800066e:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 8000670:	2010      	movs	r0, #16
 8000672:	f7ff ff2b 	bl	80004cc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000676:	2004      	movs	r0, #4
 8000678:	f7ff ff28 	bl	80004cc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 800067c:	2080      	movs	r0, #128	; 0x80
 800067e:	f7ff ff25 	bl	80004cc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000682:	2001      	movs	r0, #1
 8000684:	f7ff ff22 	bl	80004cc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000688:	2002      	movs	r0, #2
 800068a:	f7ff ff1f 	bl	80004cc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800068e:	2008      	movs	r0, #8
 8000690:	f7ff ff1c 	bl	80004cc <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin);
 8000694:	2108      	movs	r1, #8
 8000696:	4857      	ldr	r0, [pc, #348]	; (80007f4 <MX_GPIO_Init+0x1a4>)
 8000698:	f7ff ffca 	bl	8000630 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800069c:	f24f 0110 	movw	r1, #61456	; 0xf010
 80006a0:	4855      	ldr	r0, [pc, #340]	; (80007f8 <MX_GPIO_Init+0x1a8>)
 80006a2:	f7ff ffc5 	bl	8000630 <LL_GPIO_ResetOutputPin>
                          |Audio_RST_Pin);

  /**/
  LL_GPIO_SetOutputPin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin);
 80006a6:	2101      	movs	r1, #1
 80006a8:	4854      	ldr	r0, [pc, #336]	; (80007fc <MX_GPIO_Init+0x1ac>)
 80006aa:	f7ff ffb3 	bl	8000614 <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80006ae:	2308      	movs	r3, #8
 80006b0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80006b2:	2301      	movs	r3, #1
 80006b4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80006b6:	2300      	movs	r3, #0
 80006b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80006ba:	2300      	movs	r3, #0
 80006bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80006be:	2300      	movs	r3, #0
 80006c0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80006c2:	463b      	mov	r3, r7
 80006c4:	4619      	mov	r1, r3
 80006c6:	484b      	ldr	r0, [pc, #300]	; (80007f4 <MX_GPIO_Init+0x1a4>)
 80006c8:	f003 fece 	bl	8004468 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80006cc:	2301      	movs	r3, #1
 80006ce:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80006d0:	2301      	movs	r3, #1
 80006d2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80006d4:	2300      	movs	r3, #0
 80006d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80006dc:	2300      	movs	r3, #0
 80006de:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80006e0:	463b      	mov	r3, r7
 80006e2:	4619      	mov	r1, r3
 80006e4:	4845      	ldr	r0, [pc, #276]	; (80007fc <MX_GPIO_Init+0x1ac>)
 80006e6:	f003 febf 	bl	8004468 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80006ea:	2308      	movs	r3, #8
 80006ec:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80006ee:	2302      	movs	r3, #2
 80006f0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80006f2:	2300      	movs	r3, #0
 80006f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80006fa:	2300      	movs	r3, #0
 80006fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80006fe:	2305      	movs	r3, #5
 8000700:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000702:	463b      	mov	r3, r7
 8000704:	4619      	mov	r1, r3
 8000706:	483d      	ldr	r0, [pc, #244]	; (80007fc <MX_GPIO_Init+0x1ac>)
 8000708:	f003 feae 	bl	8004468 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800070c:	2304      	movs	r3, #4
 800070e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000710:	2300      	movs	r3, #0
 8000712:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000714:	2300      	movs	r3, #0
 8000716:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000718:	463b      	mov	r3, r7
 800071a:	4619      	mov	r1, r3
 800071c:	4838      	ldr	r0, [pc, #224]	; (8000800 <MX_GPIO_Init+0x1b0>)
 800071e:	f003 fea3 	bl	8004468 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000722:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000726:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000728:	2302      	movs	r3, #2
 800072a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800072c:	2300      	movs	r3, #0
 800072e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000730:	2300      	movs	r3, #0
 8000732:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000734:	2300      	movs	r3, #0
 8000736:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000738:	2305      	movs	r3, #5
 800073a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800073c:	463b      	mov	r3, r7
 800073e:	4619      	mov	r1, r3
 8000740:	482f      	ldr	r0, [pc, #188]	; (8000800 <MX_GPIO_Init+0x1b0>)
 8000742:	f003 fe91 	bl	8004468 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000746:	f24f 0310 	movw	r3, #61456	; 0xf010
 800074a:	603b      	str	r3, [r7, #0]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800074c:	2301      	movs	r3, #1
 800074e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000750:	2300      	movs	r3, #0
 8000752:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000754:	2300      	movs	r3, #0
 8000756:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000758:	2300      	movs	r3, #0
 800075a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800075c:	463b      	mov	r3, r7
 800075e:	4619      	mov	r1, r3
 8000760:	4825      	ldr	r0, [pc, #148]	; (80007f8 <MX_GPIO_Init+0x1a8>)
 8000762:	f003 fe81 	bl	8004468 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000766:	2320      	movs	r3, #32
 8000768:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800076a:	2300      	movs	r3, #0
 800076c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800076e:	2300      	movs	r3, #0
 8000770:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000772:	463b      	mov	r3, r7
 8000774:	4619      	mov	r1, r3
 8000776:	4820      	ldr	r0, [pc, #128]	; (80007f8 <MX_GPIO_Init+0x1a8>)
 8000778:	f003 fe76 	bl	8004468 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE0);
 800077c:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8000780:	2000      	movs	r0, #0
 8000782:	f7ff febb 	bl	80004fc <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTE, LL_SYSCFG_EXTI_LINE1);
 8000786:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 800078a:	2004      	movs	r0, #4
 800078c:	f7ff feb6 	bl	80004fc <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8000790:	2301      	movs	r3, #1
 8000792:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000794:	2301      	movs	r3, #1
 8000796:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_EVENT;
 8000798:	2301      	movs	r3, #1
 800079a:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 800079c:	2301      	movs	r3, #1
 800079e:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 80007a0:	f107 0318 	add.w	r3, r7, #24
 80007a4:	4618      	mov	r0, r3
 80007a6:	f003 fcd9 	bl	800415c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 80007aa:	2302      	movs	r3, #2
 80007ac:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 80007ae:	2301      	movs	r3, #1
 80007b0:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_EVENT;
 80007b2:	2301      	movs	r3, #1
 80007b4:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80007b6:	2301      	movs	r3, #1
 80007b8:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 80007ba:	f107 0318 	add.w	r3, r7, #24
 80007be:	4618      	mov	r0, r3
 80007c0:	f003 fccc 	bl	800415c <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 80007c4:	2200      	movs	r2, #0
 80007c6:	2101      	movs	r1, #1
 80007c8:	480e      	ldr	r0, [pc, #56]	; (8000804 <MX_GPIO_Init+0x1b4>)
 80007ca:	f7ff fef4 	bl	80005b6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(MEMS_INT2_GPIO_Port, MEMS_INT2_Pin, LL_GPIO_PULL_NO);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2102      	movs	r1, #2
 80007d2:	4808      	ldr	r0, [pc, #32]	; (80007f4 <MX_GPIO_Init+0x1a4>)
 80007d4:	f7ff feef 	bl	80005b6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 80007d8:	2200      	movs	r2, #0
 80007da:	2101      	movs	r1, #1
 80007dc:	4809      	ldr	r0, [pc, #36]	; (8000804 <MX_GPIO_Init+0x1b4>)
 80007de:	f7ff febb 	bl	8000558 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(MEMS_INT2_GPIO_Port, MEMS_INT2_Pin, LL_GPIO_MODE_INPUT);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2102      	movs	r1, #2
 80007e6:	4803      	ldr	r0, [pc, #12]	; (80007f4 <MX_GPIO_Init+0x1a4>)
 80007e8:	f7ff feb6 	bl	8000558 <LL_GPIO_SetPinMode>

}
 80007ec:	bf00      	nop
 80007ee:	3720      	adds	r7, #32
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40021000 	.word	0x40021000
 80007f8:	40020c00 	.word	0x40020c00
 80007fc:	40020800 	.word	0x40020800
 8000800:	40020400 	.word	0x40020400
 8000804:	40020000 	.word	0x40020000

08000808 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800080c:	4b12      	ldr	r3, [pc, #72]	; (8000858 <MX_I2C1_Init+0x50>)
 800080e:	4a13      	ldr	r2, [pc, #76]	; (800085c <MX_I2C1_Init+0x54>)
 8000810:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000812:	4b11      	ldr	r3, [pc, #68]	; (8000858 <MX_I2C1_Init+0x50>)
 8000814:	4a12      	ldr	r2, [pc, #72]	; (8000860 <MX_I2C1_Init+0x58>)
 8000816:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000818:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <MX_I2C1_Init+0x50>)
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800081e:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <MX_I2C1_Init+0x50>)
 8000820:	2200      	movs	r2, #0
 8000822:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000824:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <MX_I2C1_Init+0x50>)
 8000826:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800082a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800082c:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <MX_I2C1_Init+0x50>)
 800082e:	2200      	movs	r2, #0
 8000830:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000832:	4b09      	ldr	r3, [pc, #36]	; (8000858 <MX_I2C1_Init+0x50>)
 8000834:	2200      	movs	r2, #0
 8000836:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000838:	4b07      	ldr	r3, [pc, #28]	; (8000858 <MX_I2C1_Init+0x50>)
 800083a:	2200      	movs	r2, #0
 800083c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800083e:	4b06      	ldr	r3, [pc, #24]	; (8000858 <MX_I2C1_Init+0x50>)
 8000840:	2200      	movs	r2, #0
 8000842:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000844:	4804      	ldr	r0, [pc, #16]	; (8000858 <MX_I2C1_Init+0x50>)
 8000846:	f002 fd05 	bl	8003254 <HAL_I2C_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000850:	f000 faff 	bl	8000e52 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}
 8000858:	200000ac 	.word	0x200000ac
 800085c:	40005400 	.word	0x40005400
 8000860:	000186a0 	.word	0x000186a0

08000864 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08a      	sub	sp, #40	; 0x28
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a19      	ldr	r2, [pc, #100]	; (80008e8 <HAL_I2C_MspInit+0x84>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d12c      	bne.n	80008e0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	613b      	str	r3, [r7, #16]
 800088a:	4b18      	ldr	r3, [pc, #96]	; (80008ec <HAL_I2C_MspInit+0x88>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a17      	ldr	r2, [pc, #92]	; (80008ec <HAL_I2C_MspInit+0x88>)
 8000890:	f043 0302 	orr.w	r3, r3, #2
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b15      	ldr	r3, [pc, #84]	; (80008ec <HAL_I2C_MspInit+0x88>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0302 	and.w	r3, r3, #2
 800089e:	613b      	str	r3, [r7, #16]
 80008a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80008a2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80008a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008a8:	2312      	movs	r3, #18
 80008aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008ac:	2301      	movs	r3, #1
 80008ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	2300      	movs	r3, #0
 80008b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008b4:	2304      	movs	r3, #4
 80008b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b8:	f107 0314 	add.w	r3, r7, #20
 80008bc:	4619      	mov	r1, r3
 80008be:	480c      	ldr	r0, [pc, #48]	; (80008f0 <HAL_I2C_MspInit+0x8c>)
 80008c0:	f000 ff08 	bl	80016d4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008c4:	2300      	movs	r3, #0
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	4b08      	ldr	r3, [pc, #32]	; (80008ec <HAL_I2C_MspInit+0x88>)
 80008ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008cc:	4a07      	ldr	r2, [pc, #28]	; (80008ec <HAL_I2C_MspInit+0x88>)
 80008ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008d2:	6413      	str	r3, [r2, #64]	; 0x40
 80008d4:	4b05      	ldr	r3, [pc, #20]	; (80008ec <HAL_I2C_MspInit+0x88>)
 80008d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80008e0:	bf00      	nop
 80008e2:	3728      	adds	r7, #40	; 0x28
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40005400 	.word	0x40005400
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40020400 	.word	0x40020400

080008f4 <LL_RCC_SetI2SClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2SClockSource(uint32_t Source)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
#if defined(RCC_CFGR_I2SSRC)
  MODIFY_REG(RCC->CFGR, RCC_CFGR_I2SSRC, Source);
 80008fc:	4b06      	ldr	r3, [pc, #24]	; (8000918 <LL_RCC_SetI2SClockSource+0x24>)
 80008fe:	689b      	ldr	r3, [r3, #8]
 8000900:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8000904:	4904      	ldr	r1, [pc, #16]	; (8000918 <LL_RCC_SetI2SClockSource+0x24>)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4313      	orrs	r3, r2
 800090a:	608b      	str	r3, [r1, #8]
#else
  MODIFY_REG(RCC->DCKCFGR, (Source & 0xFFFF0000U), (Source << 16U));
#endif /* RCC_CFGR_I2SSRC */
}
 800090c:	bf00      	nop
 800090e:	370c      	adds	r7, #12
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr
 8000918:	40023800 	.word	0x40023800

0800091c <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000920:	4b13      	ldr	r3, [pc, #76]	; (8000970 <MX_I2S3_Init+0x54>)
 8000922:	4a14      	ldr	r2, [pc, #80]	; (8000974 <MX_I2S3_Init+0x58>)
 8000924:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000926:	4b12      	ldr	r3, [pc, #72]	; (8000970 <MX_I2S3_Init+0x54>)
 8000928:	f44f 7200 	mov.w	r2, #512	; 0x200
 800092c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800092e:	4b10      	ldr	r3, [pc, #64]	; (8000970 <MX_I2S3_Init+0x54>)
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000934:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <MX_I2S3_Init+0x54>)
 8000936:	2200      	movs	r2, #0
 8000938:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800093a:	4b0d      	ldr	r3, [pc, #52]	; (8000970 <MX_I2S3_Init+0x54>)
 800093c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000940:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000942:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <MX_I2S3_Init+0x54>)
 8000944:	4a0c      	ldr	r2, [pc, #48]	; (8000978 <MX_I2S3_Init+0x5c>)
 8000946:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000948:	4b09      	ldr	r3, [pc, #36]	; (8000970 <MX_I2S3_Init+0x54>)
 800094a:	2200      	movs	r2, #0
 800094c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800094e:	4b08      	ldr	r3, [pc, #32]	; (8000970 <MX_I2S3_Init+0x54>)
 8000950:	2200      	movs	r2, #0
 8000952:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <MX_I2S3_Init+0x54>)
 8000956:	2200      	movs	r2, #0
 8000958:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800095a:	4805      	ldr	r0, [pc, #20]	; (8000970 <MX_I2S3_Init+0x54>)
 800095c:	f002 fdbe 	bl	80034dc <HAL_I2S_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000966:	f000 fa74 	bl	8000e52 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000100 	.word	0x20000100
 8000974:	40003c00 	.word	0x40003c00
 8000978:	00017700 	.word	0x00017700

0800097c <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08a      	sub	sp, #40	; 0x28
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI3)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a2a      	ldr	r2, [pc, #168]	; (8000a44 <HAL_I2S_MspInit+0xc8>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d14d      	bne.n	8000a3a <HAL_I2S_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    LL_RCC_SetI2SClockSource(LL_RCC_I2S1_CLKSOURCE_PLLI2S);
 800099e:	2000      	movs	r0, #0
 80009a0:	f7ff ffa8 	bl	80008f4 <LL_RCC_SetI2SClockSource>

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80009a4:	2300      	movs	r3, #0
 80009a6:	613b      	str	r3, [r7, #16]
 80009a8:	4b27      	ldr	r3, [pc, #156]	; (8000a48 <HAL_I2S_MspInit+0xcc>)
 80009aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ac:	4a26      	ldr	r2, [pc, #152]	; (8000a48 <HAL_I2S_MspInit+0xcc>)
 80009ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009b2:	6413      	str	r3, [r2, #64]	; 0x40
 80009b4:	4b24      	ldr	r3, [pc, #144]	; (8000a48 <HAL_I2S_MspInit+0xcc>)
 80009b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009bc:	613b      	str	r3, [r7, #16]
 80009be:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c0:	2300      	movs	r3, #0
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	4b20      	ldr	r3, [pc, #128]	; (8000a48 <HAL_I2S_MspInit+0xcc>)
 80009c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c8:	4a1f      	ldr	r2, [pc, #124]	; (8000a48 <HAL_I2S_MspInit+0xcc>)
 80009ca:	f043 0301 	orr.w	r3, r3, #1
 80009ce:	6313      	str	r3, [r2, #48]	; 0x30
 80009d0:	4b1d      	ldr	r3, [pc, #116]	; (8000a48 <HAL_I2S_MspInit+0xcc>)
 80009d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d4:	f003 0301 	and.w	r3, r3, #1
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009dc:	2300      	movs	r3, #0
 80009de:	60bb      	str	r3, [r7, #8]
 80009e0:	4b19      	ldr	r3, [pc, #100]	; (8000a48 <HAL_I2S_MspInit+0xcc>)
 80009e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e4:	4a18      	ldr	r2, [pc, #96]	; (8000a48 <HAL_I2S_MspInit+0xcc>)
 80009e6:	f043 0304 	orr.w	r3, r3, #4
 80009ea:	6313      	str	r3, [r2, #48]	; 0x30
 80009ec:	4b16      	ldr	r3, [pc, #88]	; (8000a48 <HAL_I2S_MspInit+0xcc>)
 80009ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f0:	f003 0304 	and.w	r3, r3, #4
 80009f4:	60bb      	str	r3, [r7, #8]
 80009f6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80009f8:	2310      	movs	r3, #16
 80009fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fc:	2302      	movs	r3, #2
 80009fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a04:	2300      	movs	r3, #0
 8000a06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a08:	2306      	movs	r3, #6
 8000a0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	4619      	mov	r1, r3
 8000a12:	480e      	ldr	r0, [pc, #56]	; (8000a4c <HAL_I2S_MspInit+0xd0>)
 8000a14:	f000 fe5e 	bl	80016d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8000a18:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000a1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a26:	2300      	movs	r3, #0
 8000a28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a2a:	2306      	movs	r3, #6
 8000a2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a2e:	f107 0314 	add.w	r3, r7, #20
 8000a32:	4619      	mov	r1, r3
 8000a34:	4806      	ldr	r0, [pc, #24]	; (8000a50 <HAL_I2S_MspInit+0xd4>)
 8000a36:	f000 fe4d 	bl	80016d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000a3a:	bf00      	nop
 8000a3c:	3728      	adds	r7, #40	; 0x28
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40003c00 	.word	0x40003c00
 8000a48:	40023800 	.word	0x40023800
 8000a4c:	40020000 	.word	0x40020000
 8000a50:	40020800 	.word	0x40020800

08000a54 <LL_RCC_HSE_Enable>:
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000a58:	4b05      	ldr	r3, [pc, #20]	; (8000a70 <LL_RCC_HSE_Enable+0x1c>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a04      	ldr	r2, [pc, #16]	; (8000a70 <LL_RCC_HSE_Enable+0x1c>)
 8000a5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a62:	6013      	str	r3, [r2, #0]
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	40023800 	.word	0x40023800

08000a74 <LL_RCC_HSE_IsReady>:
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000a78:	4b07      	ldr	r3, [pc, #28]	; (8000a98 <LL_RCC_HSE_IsReady+0x24>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000a84:	bf0c      	ite	eq
 8000a86:	2301      	moveq	r3, #1
 8000a88:	2300      	movne	r3, #0
 8000a8a:	b2db      	uxtb	r3, r3
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	40023800 	.word	0x40023800

08000a9c <LL_RCC_SetSysClkSource>:
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000aa4:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <LL_RCC_SetSysClkSource+0x24>)
 8000aa6:	689b      	ldr	r3, [r3, #8]
 8000aa8:	f023 0203 	bic.w	r2, r3, #3
 8000aac:	4904      	ldr	r1, [pc, #16]	; (8000ac0 <LL_RCC_SetSysClkSource+0x24>)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	608b      	str	r3, [r1, #8]
}
 8000ab4:	bf00      	nop
 8000ab6:	370c      	adds	r7, #12
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr
 8000ac0:	40023800 	.word	0x40023800

08000ac4 <LL_RCC_GetSysClkSource>:
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000ac8:	4b04      	ldr	r3, [pc, #16]	; (8000adc <LL_RCC_GetSysClkSource+0x18>)
 8000aca:	689b      	ldr	r3, [r3, #8]
 8000acc:	f003 030c 	and.w	r3, r3, #12
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	40023800 	.word	0x40023800

08000ae0 <LL_RCC_SetAHBPrescaler>:
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <LL_RCC_SetAHBPrescaler+0x24>)
 8000aea:	689b      	ldr	r3, [r3, #8]
 8000aec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000af0:	4904      	ldr	r1, [pc, #16]	; (8000b04 <LL_RCC_SetAHBPrescaler+0x24>)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	608b      	str	r3, [r1, #8]
}
 8000af8:	bf00      	nop
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	40023800 	.word	0x40023800

08000b08 <LL_RCC_SetAPB1Prescaler>:
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000b10:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000b12:	689b      	ldr	r3, [r3, #8]
 8000b14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000b18:	4904      	ldr	r1, [pc, #16]	; (8000b2c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	608b      	str	r3, [r1, #8]
}
 8000b20:	bf00      	nop
 8000b22:	370c      	adds	r7, #12
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	40023800 	.word	0x40023800

08000b30 <LL_RCC_SetAPB2Prescaler>:
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000b38:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000b3a:	689b      	ldr	r3, [r3, #8]
 8000b3c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000b40:	4904      	ldr	r1, [pc, #16]	; (8000b54 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4313      	orrs	r3, r2
 8000b46:	608b      	str	r3, [r1, #8]
}
 8000b48:	bf00      	nop
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	40023800 	.word	0x40023800

08000b58 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000b5c:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <LL_RCC_PLL_Enable+0x1c>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a04      	ldr	r2, [pc, #16]	; (8000b74 <LL_RCC_PLL_Enable+0x1c>)
 8000b62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b66:	6013      	str	r3, [r2, #0]
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	40023800 	.word	0x40023800

08000b78 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000b7c:	4b07      	ldr	r3, [pc, #28]	; (8000b9c <LL_RCC_PLL_IsReady+0x24>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000b88:	bf0c      	ite	eq
 8000b8a:	2301      	moveq	r3, #1
 8000b8c:	2300      	movne	r3, #0
 8000b8e:	b2db      	uxtb	r3, r3
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	40023800 	.word	0x40023800

08000ba0 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60f8      	str	r0, [r7, #12]
 8000ba8:	60b9      	str	r1, [r7, #8]
 8000baa:	607a      	str	r2, [r7, #4]
 8000bac:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8000bae:	4b0d      	ldr	r3, [pc, #52]	; (8000be4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000bb0:	685a      	ldr	r2, [r3, #4]
 8000bb2:	4b0d      	ldr	r3, [pc, #52]	; (8000be8 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	68f9      	ldr	r1, [r7, #12]
 8000bb8:	68ba      	ldr	r2, [r7, #8]
 8000bba:	4311      	orrs	r1, r2
 8000bbc:	687a      	ldr	r2, [r7, #4]
 8000bbe:	0192      	lsls	r2, r2, #6
 8000bc0:	430a      	orrs	r2, r1
 8000bc2:	4908      	ldr	r1, [pc, #32]	; (8000be4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8000bc8:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000bd0:	4904      	ldr	r1, [pc, #16]	; (8000be4 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8000bd8:	bf00      	nop
 8000bda:	3714      	adds	r7, #20
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	40023800 	.word	0x40023800
 8000be8:	ffbf8000 	.word	0xffbf8000

08000bec <LL_RCC_PLL_ConfigDomain_48M>:
  *         @arg @ref LL_RCC_PLLQ_DIV_14
  *         @arg @ref LL_RCC_PLLQ_DIV_15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_48M(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLQ)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
 8000bf8:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLQ,
 8000bfa:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <LL_RCC_PLL_ConfigDomain_48M+0x38>)
 8000bfc:	685a      	ldr	r2, [r3, #4]
 8000bfe:	4b0a      	ldr	r3, [pc, #40]	; (8000c28 <LL_RCC_PLL_ConfigDomain_48M+0x3c>)
 8000c00:	4013      	ands	r3, r2
 8000c02:	68f9      	ldr	r1, [r7, #12]
 8000c04:	68ba      	ldr	r2, [r7, #8]
 8000c06:	4311      	orrs	r1, r2
 8000c08:	687a      	ldr	r2, [r7, #4]
 8000c0a:	0192      	lsls	r2, r2, #6
 8000c0c:	4311      	orrs	r1, r2
 8000c0e:	683a      	ldr	r2, [r7, #0]
 8000c10:	430a      	orrs	r2, r1
 8000c12:	4904      	ldr	r1, [pc, #16]	; (8000c24 <LL_RCC_PLL_ConfigDomain_48M+0x38>)
 8000c14:	4313      	orrs	r3, r2
 8000c16:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos | PLLQ);
}
 8000c18:	bf00      	nop
 8000c1a:	3714      	adds	r7, #20
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	40023800 	.word	0x40023800
 8000c28:	f0bf8000 	.word	0xf0bf8000

08000c2c <LL_RCC_PLLI2S_Enable>:
  * @brief  Enable PLLI2S
  * @rmtoll CR           PLLI2SON     LL_RCC_PLLI2S_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLLI2S_Enable(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8000c30:	4b05      	ldr	r3, [pc, #20]	; (8000c48 <LL_RCC_PLLI2S_Enable+0x1c>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a04      	ldr	r2, [pc, #16]	; (8000c48 <LL_RCC_PLLI2S_Enable+0x1c>)
 8000c36:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000c3a:	6013      	str	r3, [r2, #0]
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	40023800 	.word	0x40023800

08000c4c <LL_RCC_PLLI2S_IsReady>:
  * @brief  Check if PLLI2S Ready
  * @rmtoll CR           PLLI2SRDY    LL_RCC_PLLI2S_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLLI2S_IsReady(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) == (RCC_CR_PLLI2SRDY));
 8000c50:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <LL_RCC_PLLI2S_IsReady+0x24>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000c58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000c5c:	bf0c      	ite	eq
 8000c5e:	2301      	moveq	r3, #1
 8000c60:	2300      	movne	r3, #0
 8000c62:	b2db      	uxtb	r3, r3
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	40023800 	.word	0x40023800

08000c74 <LL_RCC_PLLI2S_ConfigDomain_I2S>:
  *         @arg @ref LL_RCC_PLLI2SR_DIV_6
  *         @arg @ref LL_RCC_PLLI2SR_DIV_7
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLLI2S_ConfigDomain_I2S(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b087      	sub	sp, #28
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
 8000c80:	603b      	str	r3, [r7, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&RCC->PLLCFGR) + (Source & 0x80U)));
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	f003 0280 	and.w	r2, r3, #128	; 0x80
 8000c88:	4b13      	ldr	r3, [pc, #76]	; (8000cd8 <LL_RCC_PLLI2S_ConfigDomain_I2S+0x64>)
 8000c8a:	4413      	add	r3, r2
 8000c8c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*pReg, RCC_PLLCFGR_PLLSRC, (Source & (~0x80U)));
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000c9c:	431a      	orrs	r2, r3
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	601a      	str	r2, [r3, #0]
#if defined(RCC_PLLI2SCFGR_PLLI2SM)
  MODIFY_REG(RCC->PLLI2SCFGR, RCC_PLLI2SCFGR_PLLI2SM, PLLM);
#else
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLM, PLLM);
 8000ca2:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <LL_RCC_PLLI2S_ConfigDomain_I2S+0x68>)
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8000caa:	490c      	ldr	r1, [pc, #48]	; (8000cdc <LL_RCC_PLLI2S_ConfigDomain_I2S+0x68>)
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	604b      	str	r3, [r1, #4]
#endif /* RCC_PLLI2SCFGR_PLLI2SM */
  MODIFY_REG(RCC->PLLI2SCFGR, RCC_PLLI2SCFGR_PLLI2SN | RCC_PLLI2SCFGR_PLLI2SR, PLLN << RCC_PLLI2SCFGR_PLLI2SN_Pos | PLLR);
 8000cb2:	4b0a      	ldr	r3, [pc, #40]	; (8000cdc <LL_RCC_PLLI2S_ConfigDomain_I2S+0x68>)
 8000cb4:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8000cb8:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <LL_RCC_PLLI2S_ConfigDomain_I2S+0x6c>)
 8000cba:	4013      	ands	r3, r2
 8000cbc:	687a      	ldr	r2, [r7, #4]
 8000cbe:	0191      	lsls	r1, r2, #6
 8000cc0:	683a      	ldr	r2, [r7, #0]
 8000cc2:	430a      	orrs	r2, r1
 8000cc4:	4905      	ldr	r1, [pc, #20]	; (8000cdc <LL_RCC_PLLI2S_ConfigDomain_I2S+0x68>)
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
}
 8000ccc:	bf00      	nop
 8000cce:	371c      	adds	r7, #28
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	40023804 	.word	0x40023804
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	8fff803f 	.word	0x8fff803f

08000ce4 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000cec:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <LL_FLASH_SetLatency+0x24>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f023 0207 	bic.w	r2, r3, #7
 8000cf4:	4904      	ldr	r1, [pc, #16]	; (8000d08 <LL_FLASH_SetLatency+0x24>)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	600b      	str	r3, [r1, #0]
}
 8000cfc:	bf00      	nop
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	40023c00 	.word	0x40023c00

08000d0c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000d10:	4b04      	ldr	r3, [pc, #16]	; (8000d24 <LL_FLASH_GetLatency+0x18>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f003 0307 	and.w	r3, r3, #7
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	40023c00 	.word	0x40023c00

08000d28 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000d30:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8000d38:	4904      	ldr	r1, [pc, #16]	; (8000d4c <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	600b      	str	r3, [r1, #0]
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	40007000 	.word	0x40007000

08000d50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d54:	f000 fb16 	bl	8001384 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d58:	f000 f812 	bl	8000d80 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000d5c:	f000 f864 	bl	8000e28 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d60:	f7ff fc76 	bl	8000650 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d64:	f7ff fd50 	bl	8000808 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000d68:	f7ff fdd8 	bl	800091c <MX_I2S3_Init>
  MX_SPI1_Init();
 8000d6c:	f000 f876 	bl	8000e5c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000d70:	f006 fff2 	bl	8007d58 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8000d74:	f000 fa7c 	bl	8001270 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000d78:	f007 f814 	bl	8007da4 <MX_USB_HOST_Process>
 8000d7c:	e7fc      	b.n	8000d78 <main+0x28>
	...

08000d80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 8000d84:	2005      	movs	r0, #5
 8000d86:	f7ff ffad 	bl	8000ce4 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 8000d8a:	bf00      	nop
 8000d8c:	f7ff ffbe 	bl	8000d0c <LL_FLASH_GetLatency>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b05      	cmp	r3, #5
 8000d94:	d1fa      	bne.n	8000d8c <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000d96:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000d9a:	f7ff ffc5 	bl	8000d28 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 8000d9e:	f7ff fe59 	bl	8000a54 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8000da2:	bf00      	nop
 8000da4:	f7ff fe66 	bl	8000a74 <LL_RCC_HSE_IsReady>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d1fa      	bne.n	8000da4 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_8, 336, LL_RCC_PLLP_DIV_2);
 8000dae:	2300      	movs	r3, #0
 8000db0:	f44f 72a8 	mov.w	r2, #336	; 0x150
 8000db4:	2108      	movs	r1, #8
 8000db6:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000dba:	f7ff fef1 	bl	8000ba0 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_ConfigDomain_48M(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_8, 336, LL_RCC_PLLQ_DIV_7);
 8000dbe:	f04f 63e0 	mov.w	r3, #117440512	; 0x7000000
 8000dc2:	f44f 72a8 	mov.w	r2, #336	; 0x150
 8000dc6:	2108      	movs	r1, #8
 8000dc8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000dcc:	f7ff ff0e 	bl	8000bec <LL_RCC_PLL_ConfigDomain_48M>
  LL_RCC_PLL_Enable();
 8000dd0:	f7ff fec2 	bl	8000b58 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000dd4:	bf00      	nop
 8000dd6:	f7ff fecf 	bl	8000b78 <LL_RCC_PLL_IsReady>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d1fa      	bne.n	8000dd6 <SystemClock_Config+0x56>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000de0:	2000      	movs	r0, #0
 8000de2:	f7ff fe7d 	bl	8000ae0 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 8000de6:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8000dea:	f7ff fe8d 	bl	8000b08 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8000dee:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000df2:	f7ff fe9d 	bl	8000b30 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000df6:	2002      	movs	r0, #2
 8000df8:	f7ff fe50 	bl	8000a9c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000dfc:	bf00      	nop
 8000dfe:	f7ff fe61 	bl	8000ac4 <LL_RCC_GetSysClkSource>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b08      	cmp	r3, #8
 8000e06:	d1fa      	bne.n	8000dfe <SystemClock_Config+0x7e>
  {

  }
  LL_SetSystemCoreClock(168000000);
 8000e08:	4806      	ldr	r0, [pc, #24]	; (8000e24 <SystemClock_Config+0xa4>)
 8000e0a:	f004 ffa7 	bl	8005d5c <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8000e0e:	2000      	movs	r0, #0
 8000e10:	f000 fada 	bl	80013c8 <HAL_InitTick>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000e1a:	f000 f81a 	bl	8000e52 <Error_Handler>
  }
}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	0a037a00 	.word	0x0a037a00

08000e28 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  LL_RCC_PLLI2S_ConfigDomain_I2S(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLI2SM_DIV_8, 192, LL_RCC_PLLI2SR_DIV_2);
 8000e2c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000e30:	22c0      	movs	r2, #192	; 0xc0
 8000e32:	2108      	movs	r1, #8
 8000e34:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000e38:	f7ff ff1c 	bl	8000c74 <LL_RCC_PLLI2S_ConfigDomain_I2S>
  LL_RCC_PLLI2S_Enable();
 8000e3c:	f7ff fef6 	bl	8000c2c <LL_RCC_PLLI2S_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLLI2S_IsReady() != 1)
 8000e40:	bf00      	nop
 8000e42:	f7ff ff03 	bl	8000c4c <LL_RCC_PLLI2S_IsReady>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d1fa      	bne.n	8000e42 <PeriphCommonClock_Config+0x1a>
  {

  }
}
 8000e4c:	bf00      	nop
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000e56:	b672      	cpsid	i
}
 8000e58:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e5a:	e7fe      	b.n	8000e5a <Error_Handler+0x8>

08000e5c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000e60:	4b17      	ldr	r3, [pc, #92]	; (8000ec0 <MX_SPI1_Init+0x64>)
 8000e62:	4a18      	ldr	r2, [pc, #96]	; (8000ec4 <MX_SPI1_Init+0x68>)
 8000e64:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e66:	4b16      	ldr	r3, [pc, #88]	; (8000ec0 <MX_SPI1_Init+0x64>)
 8000e68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e6c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e6e:	4b14      	ldr	r3, [pc, #80]	; (8000ec0 <MX_SPI1_Init+0x64>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e74:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <MX_SPI1_Init+0x64>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e7a:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <MX_SPI1_Init+0x64>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e80:	4b0f      	ldr	r3, [pc, #60]	; (8000ec0 <MX_SPI1_Init+0x64>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e86:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <MX_SPI1_Init+0x64>)
 8000e88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e8c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e8e:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <MX_SPI1_Init+0x64>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e94:	4b0a      	ldr	r3, [pc, #40]	; (8000ec0 <MX_SPI1_Init+0x64>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e9a:	4b09      	ldr	r3, [pc, #36]	; (8000ec0 <MX_SPI1_Init+0x64>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ea0:	4b07      	ldr	r3, [pc, #28]	; (8000ec0 <MX_SPI1_Init+0x64>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ea6:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <MX_SPI1_Init+0x64>)
 8000ea8:	220a      	movs	r2, #10
 8000eaa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000eac:	4804      	ldr	r0, [pc, #16]	; (8000ec0 <MX_SPI1_Init+0x64>)
 8000eae:	f003 f833 	bl	8003f18 <HAL_SPI_Init>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000eb8:	f7ff ffcb 	bl	8000e52 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ebc:	bf00      	nop
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20000148 	.word	0x20000148
 8000ec4:	40013000 	.word	0x40013000

08000ec8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08a      	sub	sp, #40	; 0x28
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a19      	ldr	r2, [pc, #100]	; (8000f4c <HAL_SPI_MspInit+0x84>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d12b      	bne.n	8000f42 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	613b      	str	r3, [r7, #16]
 8000eee:	4b18      	ldr	r3, [pc, #96]	; (8000f50 <HAL_SPI_MspInit+0x88>)
 8000ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef2:	4a17      	ldr	r2, [pc, #92]	; (8000f50 <HAL_SPI_MspInit+0x88>)
 8000ef4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ef8:	6453      	str	r3, [r2, #68]	; 0x44
 8000efa:	4b15      	ldr	r3, [pc, #84]	; (8000f50 <HAL_SPI_MspInit+0x88>)
 8000efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f02:	613b      	str	r3, [r7, #16]
 8000f04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <HAL_SPI_MspInit+0x88>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	4a10      	ldr	r2, [pc, #64]	; (8000f50 <HAL_SPI_MspInit+0x88>)
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	6313      	str	r3, [r2, #48]	; 0x30
 8000f16:	4b0e      	ldr	r3, [pc, #56]	; (8000f50 <HAL_SPI_MspInit+0x88>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f22:	23e0      	movs	r3, #224	; 0xe0
 8000f24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f26:	2302      	movs	r3, #2
 8000f28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f32:	2305      	movs	r3, #5
 8000f34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f36:	f107 0314 	add.w	r3, r7, #20
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4805      	ldr	r0, [pc, #20]	; (8000f54 <HAL_SPI_MspInit+0x8c>)
 8000f3e:	f000 fbc9 	bl	80016d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000f42:	bf00      	nop
 8000f44:	3728      	adds	r7, #40	; 0x28
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40013000 	.word	0x40013000
 8000f50:	40023800 	.word	0x40023800
 8000f54:	40020000 	.word	0x40020000

08000f58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	607b      	str	r3, [r7, #4]
 8000f62:	4b10      	ldr	r3, [pc, #64]	; (8000fa4 <HAL_MspInit+0x4c>)
 8000f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f66:	4a0f      	ldr	r2, [pc, #60]	; (8000fa4 <HAL_MspInit+0x4c>)
 8000f68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f6e:	4b0d      	ldr	r3, [pc, #52]	; (8000fa4 <HAL_MspInit+0x4c>)
 8000f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f76:	607b      	str	r3, [r7, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	603b      	str	r3, [r7, #0]
 8000f7e:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <HAL_MspInit+0x4c>)
 8000f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f82:	4a08      	ldr	r2, [pc, #32]	; (8000fa4 <HAL_MspInit+0x4c>)
 8000f84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f88:	6413      	str	r3, [r2, #64]	; 0x40
 8000f8a:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <HAL_MspInit+0x4c>)
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f92:	603b      	str	r3, [r7, #0]
 8000f94:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f96:	2007      	movs	r0, #7
 8000f98:	f000 fb5a 	bl	8001650 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f9c:	bf00      	nop
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40023800 	.word	0x40023800

08000fa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fac:	e7fe      	b.n	8000fac <NMI_Handler+0x4>

08000fae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fb2:	e7fe      	b.n	8000fb2 <HardFault_Handler+0x4>

08000fb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fb8:	e7fe      	b.n	8000fb8 <MemManage_Handler+0x4>

08000fba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fbe:	e7fe      	b.n	8000fbe <BusFault_Handler+0x4>

08000fc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fc4:	e7fe      	b.n	8000fc4 <UsageFault_Handler+0x4>

08000fc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ff4:	f000 fa18 	bl	8001428 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ff8:	bf00      	nop
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0

  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
	...

0800100c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001010:	4802      	ldr	r0, [pc, #8]	; (800101c <OTG_FS_IRQHandler+0x10>)
 8001012:	f000 ff7f 	bl	8001f14 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000584 	.word	0x20000584

08001020 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001028:	4a14      	ldr	r2, [pc, #80]	; (800107c <_sbrk+0x5c>)
 800102a:	4b15      	ldr	r3, [pc, #84]	; (8001080 <_sbrk+0x60>)
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001034:	4b13      	ldr	r3, [pc, #76]	; (8001084 <_sbrk+0x64>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d102      	bne.n	8001042 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800103c:	4b11      	ldr	r3, [pc, #68]	; (8001084 <_sbrk+0x64>)
 800103e:	4a12      	ldr	r2, [pc, #72]	; (8001088 <_sbrk+0x68>)
 8001040:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001042:	4b10      	ldr	r3, [pc, #64]	; (8001084 <_sbrk+0x64>)
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4413      	add	r3, r2
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	429a      	cmp	r2, r3
 800104e:	d207      	bcs.n	8001060 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001050:	f007 f98a 	bl	8008368 <__errno>
 8001054:	4603      	mov	r3, r0
 8001056:	220c      	movs	r2, #12
 8001058:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800105a:	f04f 33ff 	mov.w	r3, #4294967295
 800105e:	e009      	b.n	8001074 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001060:	4b08      	ldr	r3, [pc, #32]	; (8001084 <_sbrk+0x64>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001066:	4b07      	ldr	r3, [pc, #28]	; (8001084 <_sbrk+0x64>)
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4413      	add	r3, r2
 800106e:	4a05      	ldr	r2, [pc, #20]	; (8001084 <_sbrk+0x64>)
 8001070:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001072:	68fb      	ldr	r3, [r7, #12]
}
 8001074:	4618      	mov	r0, r3
 8001076:	3718      	adds	r7, #24
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20020000 	.word	0x20020000
 8001080:	00000400 	.word	0x00000400
 8001084:	200001a0 	.word	0x200001a0
 8001088:	20000898 	.word	0x20000898

0800108c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001090:	4b06      	ldr	r3, [pc, #24]	; (80010ac <SystemInit+0x20>)
 8001092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001096:	4a05      	ldr	r2, [pc, #20]	; (80010ac <SystemInit+0x20>)
 8001098:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800109c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010b4:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <__NVIC_GetPriorityGrouping+0x18>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	0a1b      	lsrs	r3, r3, #8
 80010ba:	f003 0307 	and.w	r3, r3, #7
}
 80010be:	4618      	mov	r0, r3
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	db0b      	blt.n	80010f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	f003 021f 	and.w	r2, r3, #31
 80010e4:	4907      	ldr	r1, [pc, #28]	; (8001104 <__NVIC_EnableIRQ+0x38>)
 80010e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ea:	095b      	lsrs	r3, r3, #5
 80010ec:	2001      	movs	r0, #1
 80010ee:	fa00 f202 	lsl.w	r2, r0, r2
 80010f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	e000e100 	.word	0xe000e100

08001108 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	6039      	str	r1, [r7, #0]
 8001112:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001118:	2b00      	cmp	r3, #0
 800111a:	db0a      	blt.n	8001132 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	b2da      	uxtb	r2, r3
 8001120:	490c      	ldr	r1, [pc, #48]	; (8001154 <__NVIC_SetPriority+0x4c>)
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	0112      	lsls	r2, r2, #4
 8001128:	b2d2      	uxtb	r2, r2
 800112a:	440b      	add	r3, r1
 800112c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001130:	e00a      	b.n	8001148 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	b2da      	uxtb	r2, r3
 8001136:	4908      	ldr	r1, [pc, #32]	; (8001158 <__NVIC_SetPriority+0x50>)
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	f003 030f 	and.w	r3, r3, #15
 800113e:	3b04      	subs	r3, #4
 8001140:	0112      	lsls	r2, r2, #4
 8001142:	b2d2      	uxtb	r2, r2
 8001144:	440b      	add	r3, r1
 8001146:	761a      	strb	r2, [r3, #24]
}
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	e000e100 	.word	0xe000e100
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800115c:	b480      	push	{r7}
 800115e:	b089      	sub	sp, #36	; 0x24
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	f1c3 0307 	rsb	r3, r3, #7
 8001176:	2b04      	cmp	r3, #4
 8001178:	bf28      	it	cs
 800117a:	2304      	movcs	r3, #4
 800117c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	3304      	adds	r3, #4
 8001182:	2b06      	cmp	r3, #6
 8001184:	d902      	bls.n	800118c <NVIC_EncodePriority+0x30>
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	3b03      	subs	r3, #3
 800118a:	e000      	b.n	800118e <NVIC_EncodePriority+0x32>
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001190:	f04f 32ff 	mov.w	r2, #4294967295
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43da      	mvns	r2, r3
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	401a      	ands	r2, r3
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011a4:	f04f 31ff 	mov.w	r1, #4294967295
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	fa01 f303 	lsl.w	r3, r1, r3
 80011ae:	43d9      	mvns	r1, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b4:	4313      	orrs	r3, r2
         );
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3724      	adds	r7, #36	; 0x24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
	...

080011c4 <LL_AHB1_GRP1_EnableClock>:
{
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80011cc:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80011ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011d0:	4907      	ldr	r1, [pc, #28]	; (80011f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80011d8:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80011da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4013      	ands	r3, r2
 80011e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011e2:	68fb      	ldr	r3, [r7, #12]
}
 80011e4:	bf00      	nop
 80011e6:	3714      	adds	r7, #20
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	40023800 	.word	0x40023800

080011f4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80011fc:	4b08      	ldr	r3, [pc, #32]	; (8001220 <LL_APB1_GRP1_EnableClock+0x2c>)
 80011fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001200:	4907      	ldr	r1, [pc, #28]	; (8001220 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4313      	orrs	r3, r2
 8001206:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001208:	4b05      	ldr	r3, [pc, #20]	; (8001220 <LL_APB1_GRP1_EnableClock+0x2c>)
 800120a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4013      	ands	r3, r2
 8001210:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001212:	68fb      	ldr	r3, [r7, #12]
}
 8001214:	bf00      	nop
 8001216:	3714      	adds	r7, #20
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	40023800 	.word	0x40023800

08001224 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	60da      	str	r2, [r3, #12]
}
 8001238:	bf00      	nop
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	691b      	ldr	r3, [r3, #16]
 8001250:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	695b      	ldr	r3, [r3, #20]
 800125c:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	615a      	str	r2, [r3, #20]
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b08e      	sub	sp, #56	; 0x38
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001276:	f107 031c 	add.w	r3, r7, #28
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	609a      	str	r2, [r3, #8]
 8001282:	60da      	str	r2, [r3, #12]
 8001284:	611a      	str	r2, [r3, #16]
 8001286:	615a      	str	r2, [r3, #20]
 8001288:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]
 8001298:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800129a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800129e:	f7ff ffa9 	bl	80011f4 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80012a2:	2001      	movs	r0, #1
 80012a4:	f7ff ff8e 	bl	80011c4 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 80012a8:	230c      	movs	r3, #12
 80012aa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80012ac:	2302      	movs	r3, #2
 80012ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80012b0:	2303      	movs	r3, #3
 80012b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80012bc:	2307      	movs	r3, #7
 80012be:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c0:	1d3b      	adds	r3, r7, #4
 80012c2:	4619      	mov	r1, r3
 80012c4:	4818      	ldr	r0, [pc, #96]	; (8001328 <MX_USART2_UART_Init+0xb8>)
 80012c6:	f003 f8cf 	bl	8004468 <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80012ca:	f7ff fef1 	bl	80010b0 <__NVIC_GetPriorityGrouping>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2200      	movs	r2, #0
 80012d2:	2100      	movs	r1, #0
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff ff41 	bl	800115c <NVIC_EncodePriority>
 80012da:	4603      	mov	r3, r0
 80012dc:	4619      	mov	r1, r3
 80012de:	2026      	movs	r0, #38	; 0x26
 80012e0:	f7ff ff12 	bl	8001108 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 80012e4:	2026      	movs	r0, #38	; 0x26
 80012e6:	f7ff fef1 	bl	80010cc <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80012ea:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80012ee:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80012f0:	2300      	movs	r3, #0
 80012f2:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80012f4:	2300      	movs	r3, #0
 80012f6:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80012f8:	2300      	movs	r3, #0
 80012fa:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80012fc:	230c      	movs	r3, #12
 80012fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001300:	2300      	movs	r3, #0
 8001302:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001304:	2300      	movs	r3, #0
 8001306:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8001308:	f107 031c 	add.w	r3, r7, #28
 800130c:	4619      	mov	r1, r3
 800130e:	4807      	ldr	r0, [pc, #28]	; (800132c <MX_USART2_UART_Init+0xbc>)
 8001310:	f003 fcbe 	bl	8004c90 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8001314:	4805      	ldr	r0, [pc, #20]	; (800132c <MX_USART2_UART_Init+0xbc>)
 8001316:	f7ff ff95 	bl	8001244 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 800131a:	4804      	ldr	r0, [pc, #16]	; (800132c <MX_USART2_UART_Init+0xbc>)
 800131c:	f7ff ff82 	bl	8001224 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001320:	bf00      	nop
 8001322:	3738      	adds	r7, #56	; 0x38
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40020000 	.word	0x40020000
 800132c:	40004400 	.word	0x40004400

08001330 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001330:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001368 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001334:	480d      	ldr	r0, [pc, #52]	; (800136c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001336:	490e      	ldr	r1, [pc, #56]	; (8001370 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001338:	4a0e      	ldr	r2, [pc, #56]	; (8001374 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800133a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800133c:	e002      	b.n	8001344 <LoopCopyDataInit>

0800133e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800133e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001340:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001342:	3304      	adds	r3, #4

08001344 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001344:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001346:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001348:	d3f9      	bcc.n	800133e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800134a:	4a0b      	ldr	r2, [pc, #44]	; (8001378 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800134c:	4c0b      	ldr	r4, [pc, #44]	; (800137c <LoopFillZerobss+0x26>)
  movs r3, #0
 800134e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001350:	e001      	b.n	8001356 <LoopFillZerobss>

08001352 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001352:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001354:	3204      	adds	r2, #4

08001356 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001356:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001358:	d3fb      	bcc.n	8001352 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800135a:	f7ff fe97 	bl	800108c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800135e:	f007 f809 	bl	8008374 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001362:	f7ff fcf5 	bl	8000d50 <main>
  bx  lr    
 8001366:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001368:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800136c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001370:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001374:	0800862c 	.word	0x0800862c
  ldr r2, =_sbss
 8001378:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 800137c:	20000898 	.word	0x20000898

08001380 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001380:	e7fe      	b.n	8001380 <ADC_IRQHandler>
	...

08001384 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001388:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <HAL_Init+0x40>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a0d      	ldr	r2, [pc, #52]	; (80013c4 <HAL_Init+0x40>)
 800138e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001392:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001394:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <HAL_Init+0x40>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a0a      	ldr	r2, [pc, #40]	; (80013c4 <HAL_Init+0x40>)
 800139a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800139e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <HAL_Init+0x40>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a07      	ldr	r2, [pc, #28]	; (80013c4 <HAL_Init+0x40>)
 80013a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ac:	2003      	movs	r0, #3
 80013ae:	f000 f94f 	bl	8001650 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013b2:	2000      	movs	r0, #0
 80013b4:	f000 f808 	bl	80013c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013b8:	f7ff fdce 	bl	8000f58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40023c00 	.word	0x40023c00

080013c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013d0:	4b12      	ldr	r3, [pc, #72]	; (800141c <HAL_InitTick+0x54>)
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	4b12      	ldr	r3, [pc, #72]	; (8001420 <HAL_InitTick+0x58>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	4619      	mov	r1, r3
 80013da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013de:	fbb3 f3f1 	udiv	r3, r3, r1
 80013e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013e6:	4618      	mov	r0, r3
 80013e8:	f000 f967 	bl	80016ba <HAL_SYSTICK_Config>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e00e      	b.n	8001414 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2b0f      	cmp	r3, #15
 80013fa:	d80a      	bhi.n	8001412 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013fc:	2200      	movs	r2, #0
 80013fe:	6879      	ldr	r1, [r7, #4]
 8001400:	f04f 30ff 	mov.w	r0, #4294967295
 8001404:	f000 f92f 	bl	8001666 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001408:	4a06      	ldr	r2, [pc, #24]	; (8001424 <HAL_InitTick+0x5c>)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800140e:	2300      	movs	r3, #0
 8001410:	e000      	b.n	8001414 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
}
 8001414:	4618      	mov	r0, r3
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20000000 	.word	0x20000000
 8001420:	20000008 	.word	0x20000008
 8001424:	20000004 	.word	0x20000004

08001428 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800142c:	4b06      	ldr	r3, [pc, #24]	; (8001448 <HAL_IncTick+0x20>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	461a      	mov	r2, r3
 8001432:	4b06      	ldr	r3, [pc, #24]	; (800144c <HAL_IncTick+0x24>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4413      	add	r3, r2
 8001438:	4a04      	ldr	r2, [pc, #16]	; (800144c <HAL_IncTick+0x24>)
 800143a:	6013      	str	r3, [r2, #0]
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	20000008 	.word	0x20000008
 800144c:	200001a4 	.word	0x200001a4

08001450 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  return uwTick;
 8001454:	4b03      	ldr	r3, [pc, #12]	; (8001464 <HAL_GetTick+0x14>)
 8001456:	681b      	ldr	r3, [r3, #0]
}
 8001458:	4618      	mov	r0, r3
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	200001a4 	.word	0x200001a4

08001468 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001470:	f7ff ffee 	bl	8001450 <HAL_GetTick>
 8001474:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001480:	d005      	beq.n	800148e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001482:	4b0a      	ldr	r3, [pc, #40]	; (80014ac <HAL_Delay+0x44>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	461a      	mov	r2, r3
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	4413      	add	r3, r2
 800148c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800148e:	bf00      	nop
 8001490:	f7ff ffde 	bl	8001450 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	68fa      	ldr	r2, [r7, #12]
 800149c:	429a      	cmp	r2, r3
 800149e:	d8f7      	bhi.n	8001490 <HAL_Delay+0x28>
  {
  }
}
 80014a0:	bf00      	nop
 80014a2:	bf00      	nop
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000008 	.word	0x20000008

080014b0 <__NVIC_SetPriorityGrouping>:
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014c0:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <__NVIC_SetPriorityGrouping+0x44>)
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014c6:	68ba      	ldr	r2, [r7, #8]
 80014c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014cc:	4013      	ands	r3, r2
 80014ce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014e2:	4a04      	ldr	r2, [pc, #16]	; (80014f4 <__NVIC_SetPriorityGrouping+0x44>)
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	60d3      	str	r3, [r2, #12]
}
 80014e8:	bf00      	nop
 80014ea:	3714      	adds	r7, #20
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <__NVIC_GetPriorityGrouping>:
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014fc:	4b04      	ldr	r3, [pc, #16]	; (8001510 <__NVIC_GetPriorityGrouping+0x18>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	0a1b      	lsrs	r3, r3, #8
 8001502:	f003 0307 	and.w	r3, r3, #7
}
 8001506:	4618      	mov	r0, r3
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <__NVIC_EnableIRQ>:
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800151e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001522:	2b00      	cmp	r3, #0
 8001524:	db0b      	blt.n	800153e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	f003 021f 	and.w	r2, r3, #31
 800152c:	4907      	ldr	r1, [pc, #28]	; (800154c <__NVIC_EnableIRQ+0x38>)
 800152e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001532:	095b      	lsrs	r3, r3, #5
 8001534:	2001      	movs	r0, #1
 8001536:	fa00 f202 	lsl.w	r2, r0, r2
 800153a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800153e:	bf00      	nop
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	e000e100 	.word	0xe000e100

08001550 <__NVIC_SetPriority>:
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	6039      	str	r1, [r7, #0]
 800155a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800155c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001560:	2b00      	cmp	r3, #0
 8001562:	db0a      	blt.n	800157a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	b2da      	uxtb	r2, r3
 8001568:	490c      	ldr	r1, [pc, #48]	; (800159c <__NVIC_SetPriority+0x4c>)
 800156a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156e:	0112      	lsls	r2, r2, #4
 8001570:	b2d2      	uxtb	r2, r2
 8001572:	440b      	add	r3, r1
 8001574:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001578:	e00a      	b.n	8001590 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	b2da      	uxtb	r2, r3
 800157e:	4908      	ldr	r1, [pc, #32]	; (80015a0 <__NVIC_SetPriority+0x50>)
 8001580:	79fb      	ldrb	r3, [r7, #7]
 8001582:	f003 030f 	and.w	r3, r3, #15
 8001586:	3b04      	subs	r3, #4
 8001588:	0112      	lsls	r2, r2, #4
 800158a:	b2d2      	uxtb	r2, r2
 800158c:	440b      	add	r3, r1
 800158e:	761a      	strb	r2, [r3, #24]
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	e000e100 	.word	0xe000e100
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <NVIC_EncodePriority>:
{
 80015a4:	b480      	push	{r7}
 80015a6:	b089      	sub	sp, #36	; 0x24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f003 0307 	and.w	r3, r3, #7
 80015b6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	f1c3 0307 	rsb	r3, r3, #7
 80015be:	2b04      	cmp	r3, #4
 80015c0:	bf28      	it	cs
 80015c2:	2304      	movcs	r3, #4
 80015c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	3304      	adds	r3, #4
 80015ca:	2b06      	cmp	r3, #6
 80015cc:	d902      	bls.n	80015d4 <NVIC_EncodePriority+0x30>
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	3b03      	subs	r3, #3
 80015d2:	e000      	b.n	80015d6 <NVIC_EncodePriority+0x32>
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d8:	f04f 32ff 	mov.w	r2, #4294967295
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	43da      	mvns	r2, r3
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	401a      	ands	r2, r3
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015ec:	f04f 31ff 	mov.w	r1, #4294967295
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	fa01 f303 	lsl.w	r3, r1, r3
 80015f6:	43d9      	mvns	r1, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015fc:	4313      	orrs	r3, r2
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3724      	adds	r7, #36	; 0x24
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
	...

0800160c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	3b01      	subs	r3, #1
 8001618:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800161c:	d301      	bcc.n	8001622 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800161e:	2301      	movs	r3, #1
 8001620:	e00f      	b.n	8001642 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001622:	4a0a      	ldr	r2, [pc, #40]	; (800164c <SysTick_Config+0x40>)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3b01      	subs	r3, #1
 8001628:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800162a:	210f      	movs	r1, #15
 800162c:	f04f 30ff 	mov.w	r0, #4294967295
 8001630:	f7ff ff8e 	bl	8001550 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001634:	4b05      	ldr	r3, [pc, #20]	; (800164c <SysTick_Config+0x40>)
 8001636:	2200      	movs	r2, #0
 8001638:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800163a:	4b04      	ldr	r3, [pc, #16]	; (800164c <SysTick_Config+0x40>)
 800163c:	2207      	movs	r2, #7
 800163e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	e000e010 	.word	0xe000e010

08001650 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f7ff ff29 	bl	80014b0 <__NVIC_SetPriorityGrouping>
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001666:	b580      	push	{r7, lr}
 8001668:	b086      	sub	sp, #24
 800166a:	af00      	add	r7, sp, #0
 800166c:	4603      	mov	r3, r0
 800166e:	60b9      	str	r1, [r7, #8]
 8001670:	607a      	str	r2, [r7, #4]
 8001672:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001674:	2300      	movs	r3, #0
 8001676:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001678:	f7ff ff3e 	bl	80014f8 <__NVIC_GetPriorityGrouping>
 800167c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	68b9      	ldr	r1, [r7, #8]
 8001682:	6978      	ldr	r0, [r7, #20]
 8001684:	f7ff ff8e 	bl	80015a4 <NVIC_EncodePriority>
 8001688:	4602      	mov	r2, r0
 800168a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800168e:	4611      	mov	r1, r2
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff ff5d 	bl	8001550 <__NVIC_SetPriority>
}
 8001696:	bf00      	nop
 8001698:	3718      	adds	r7, #24
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b082      	sub	sp, #8
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	4603      	mov	r3, r0
 80016a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff ff31 	bl	8001514 <__NVIC_EnableIRQ>
}
 80016b2:	bf00      	nop
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b082      	sub	sp, #8
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f7ff ffa2 	bl	800160c <SysTick_Config>
 80016c8:	4603      	mov	r3, r0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
	...

080016d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b089      	sub	sp, #36	; 0x24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016de:	2300      	movs	r3, #0
 80016e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016e2:	2300      	movs	r3, #0
 80016e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016e6:	2300      	movs	r3, #0
 80016e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016ea:	2300      	movs	r3, #0
 80016ec:	61fb      	str	r3, [r7, #28]
 80016ee:	e16b      	b.n	80019c8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016f0:	2201      	movs	r2, #1
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	697a      	ldr	r2, [r7, #20]
 8001700:	4013      	ands	r3, r2
 8001702:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001704:	693a      	ldr	r2, [r7, #16]
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	429a      	cmp	r2, r3
 800170a:	f040 815a 	bne.w	80019c2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f003 0303 	and.w	r3, r3, #3
 8001716:	2b01      	cmp	r3, #1
 8001718:	d005      	beq.n	8001726 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001722:	2b02      	cmp	r3, #2
 8001724:	d130      	bne.n	8001788 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	2203      	movs	r2, #3
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	43db      	mvns	r3, r3
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	4013      	ands	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	68da      	ldr	r2, [r3, #12]
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	4313      	orrs	r3, r2
 800174e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800175c:	2201      	movs	r2, #1
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	43db      	mvns	r3, r3
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	4013      	ands	r3, r2
 800176a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	091b      	lsrs	r3, r3, #4
 8001772:	f003 0201 	and.w	r2, r3, #1
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	4313      	orrs	r3, r2
 8001780:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f003 0303 	and.w	r3, r3, #3
 8001790:	2b03      	cmp	r3, #3
 8001792:	d017      	beq.n	80017c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	2203      	movs	r2, #3
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	43db      	mvns	r3, r3
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	4013      	ands	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	689a      	ldr	r2, [r3, #8]
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f003 0303 	and.w	r3, r3, #3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d123      	bne.n	8001818 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	08da      	lsrs	r2, r3, #3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	3208      	adds	r2, #8
 80017d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	f003 0307 	and.w	r3, r3, #7
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	220f      	movs	r2, #15
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	43db      	mvns	r3, r3
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	4013      	ands	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	691a      	ldr	r2, [r3, #16]
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	f003 0307 	and.w	r3, r3, #7
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	4313      	orrs	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	08da      	lsrs	r2, r3, #3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	3208      	adds	r2, #8
 8001812:	69b9      	ldr	r1, [r7, #24]
 8001814:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	2203      	movs	r2, #3
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	43db      	mvns	r3, r3
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	4013      	ands	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f003 0203 	and.w	r2, r3, #3
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	4313      	orrs	r3, r2
 8001844:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001854:	2b00      	cmp	r3, #0
 8001856:	f000 80b4 	beq.w	80019c2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	60fb      	str	r3, [r7, #12]
 800185e:	4b60      	ldr	r3, [pc, #384]	; (80019e0 <HAL_GPIO_Init+0x30c>)
 8001860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001862:	4a5f      	ldr	r2, [pc, #380]	; (80019e0 <HAL_GPIO_Init+0x30c>)
 8001864:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001868:	6453      	str	r3, [r2, #68]	; 0x44
 800186a:	4b5d      	ldr	r3, [pc, #372]	; (80019e0 <HAL_GPIO_Init+0x30c>)
 800186c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001876:	4a5b      	ldr	r2, [pc, #364]	; (80019e4 <HAL_GPIO_Init+0x310>)
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	089b      	lsrs	r3, r3, #2
 800187c:	3302      	adds	r3, #2
 800187e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001882:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	f003 0303 	and.w	r3, r3, #3
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	220f      	movs	r2, #15
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	43db      	mvns	r3, r3
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	4013      	ands	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a52      	ldr	r2, [pc, #328]	; (80019e8 <HAL_GPIO_Init+0x314>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d02b      	beq.n	80018fa <HAL_GPIO_Init+0x226>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a51      	ldr	r2, [pc, #324]	; (80019ec <HAL_GPIO_Init+0x318>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d025      	beq.n	80018f6 <HAL_GPIO_Init+0x222>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a50      	ldr	r2, [pc, #320]	; (80019f0 <HAL_GPIO_Init+0x31c>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d01f      	beq.n	80018f2 <HAL_GPIO_Init+0x21e>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a4f      	ldr	r2, [pc, #316]	; (80019f4 <HAL_GPIO_Init+0x320>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d019      	beq.n	80018ee <HAL_GPIO_Init+0x21a>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a4e      	ldr	r2, [pc, #312]	; (80019f8 <HAL_GPIO_Init+0x324>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d013      	beq.n	80018ea <HAL_GPIO_Init+0x216>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a4d      	ldr	r2, [pc, #308]	; (80019fc <HAL_GPIO_Init+0x328>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d00d      	beq.n	80018e6 <HAL_GPIO_Init+0x212>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a4c      	ldr	r2, [pc, #304]	; (8001a00 <HAL_GPIO_Init+0x32c>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d007      	beq.n	80018e2 <HAL_GPIO_Init+0x20e>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a4b      	ldr	r2, [pc, #300]	; (8001a04 <HAL_GPIO_Init+0x330>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d101      	bne.n	80018de <HAL_GPIO_Init+0x20a>
 80018da:	2307      	movs	r3, #7
 80018dc:	e00e      	b.n	80018fc <HAL_GPIO_Init+0x228>
 80018de:	2308      	movs	r3, #8
 80018e0:	e00c      	b.n	80018fc <HAL_GPIO_Init+0x228>
 80018e2:	2306      	movs	r3, #6
 80018e4:	e00a      	b.n	80018fc <HAL_GPIO_Init+0x228>
 80018e6:	2305      	movs	r3, #5
 80018e8:	e008      	b.n	80018fc <HAL_GPIO_Init+0x228>
 80018ea:	2304      	movs	r3, #4
 80018ec:	e006      	b.n	80018fc <HAL_GPIO_Init+0x228>
 80018ee:	2303      	movs	r3, #3
 80018f0:	e004      	b.n	80018fc <HAL_GPIO_Init+0x228>
 80018f2:	2302      	movs	r3, #2
 80018f4:	e002      	b.n	80018fc <HAL_GPIO_Init+0x228>
 80018f6:	2301      	movs	r3, #1
 80018f8:	e000      	b.n	80018fc <HAL_GPIO_Init+0x228>
 80018fa:	2300      	movs	r3, #0
 80018fc:	69fa      	ldr	r2, [r7, #28]
 80018fe:	f002 0203 	and.w	r2, r2, #3
 8001902:	0092      	lsls	r2, r2, #2
 8001904:	4093      	lsls	r3, r2
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	4313      	orrs	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800190c:	4935      	ldr	r1, [pc, #212]	; (80019e4 <HAL_GPIO_Init+0x310>)
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	089b      	lsrs	r3, r3, #2
 8001912:	3302      	adds	r3, #2
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800191a:	4b3b      	ldr	r3, [pc, #236]	; (8001a08 <HAL_GPIO_Init+0x334>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	43db      	mvns	r3, r3
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	4013      	ands	r3, r2
 8001928:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d003      	beq.n	800193e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	4313      	orrs	r3, r2
 800193c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800193e:	4a32      	ldr	r2, [pc, #200]	; (8001a08 <HAL_GPIO_Init+0x334>)
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001944:	4b30      	ldr	r3, [pc, #192]	; (8001a08 <HAL_GPIO_Init+0x334>)
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	43db      	mvns	r3, r3
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	4013      	ands	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d003      	beq.n	8001968 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	4313      	orrs	r3, r2
 8001966:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001968:	4a27      	ldr	r2, [pc, #156]	; (8001a08 <HAL_GPIO_Init+0x334>)
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800196e:	4b26      	ldr	r3, [pc, #152]	; (8001a08 <HAL_GPIO_Init+0x334>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	43db      	mvns	r3, r3
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	4013      	ands	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d003      	beq.n	8001992 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	4313      	orrs	r3, r2
 8001990:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001992:	4a1d      	ldr	r2, [pc, #116]	; (8001a08 <HAL_GPIO_Init+0x334>)
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001998:	4b1b      	ldr	r3, [pc, #108]	; (8001a08 <HAL_GPIO_Init+0x334>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	43db      	mvns	r3, r3
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	4013      	ands	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d003      	beq.n	80019bc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019bc:	4a12      	ldr	r2, [pc, #72]	; (8001a08 <HAL_GPIO_Init+0x334>)
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	3301      	adds	r3, #1
 80019c6:	61fb      	str	r3, [r7, #28]
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	2b0f      	cmp	r3, #15
 80019cc:	f67f ae90 	bls.w	80016f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019d0:	bf00      	nop
 80019d2:	bf00      	nop
 80019d4:	3724      	adds	r7, #36	; 0x24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	40023800 	.word	0x40023800
 80019e4:	40013800 	.word	0x40013800
 80019e8:	40020000 	.word	0x40020000
 80019ec:	40020400 	.word	0x40020400
 80019f0:	40020800 	.word	0x40020800
 80019f4:	40020c00 	.word	0x40020c00
 80019f8:	40021000 	.word	0x40021000
 80019fc:	40021400 	.word	0x40021400
 8001a00:	40021800 	.word	0x40021800
 8001a04:	40021c00 	.word	0x40021c00
 8001a08:	40013c00 	.word	0x40013c00

08001a0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	460b      	mov	r3, r1
 8001a16:	807b      	strh	r3, [r7, #2]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a1c:	787b      	ldrb	r3, [r7, #1]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d003      	beq.n	8001a2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a22:	887a      	ldrh	r2, [r7, #2]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a28:	e003      	b.n	8001a32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a2a:	887b      	ldrh	r3, [r7, #2]
 8001a2c:	041a      	lsls	r2, r3, #16
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	619a      	str	r2, [r3, #24]
}
 8001a32:	bf00      	nop
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001a3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a40:	b08f      	sub	sp, #60	; 0x3c
 8001a42:	af0a      	add	r7, sp, #40	; 0x28
 8001a44:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d101      	bne.n	8001a50 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e054      	b.n	8001afa <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d106      	bne.n	8001a70 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f006 f9d2 	bl	8007e14 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2203      	movs	r2, #3
 8001a74:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d102      	bne.n	8001a8a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f003 f9f0 	bl	8004e74 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	603b      	str	r3, [r7, #0]
 8001a9a:	687e      	ldr	r6, [r7, #4]
 8001a9c:	466d      	mov	r5, sp
 8001a9e:	f106 0410 	add.w	r4, r6, #16
 8001aa2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aa4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001aa6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aa8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001aaa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001aae:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ab2:	1d33      	adds	r3, r6, #4
 8001ab4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ab6:	6838      	ldr	r0, [r7, #0]
 8001ab8:	f003 f96a 	bl	8004d90 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2101      	movs	r1, #1
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f003 f9e7 	bl	8004e96 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	603b      	str	r3, [r7, #0]
 8001ace:	687e      	ldr	r6, [r7, #4]
 8001ad0:	466d      	mov	r5, sp
 8001ad2:	f106 0410 	add.w	r4, r6, #16
 8001ad6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ad8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ada:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001adc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ade:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ae2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ae6:	1d33      	adds	r3, r6, #4
 8001ae8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001aea:	6838      	ldr	r0, [r7, #0]
 8001aec:	f003 fb70 	bl	80051d0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3714      	adds	r7, #20
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b02 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001b02:	b590      	push	{r4, r7, lr}
 8001b04:	b089      	sub	sp, #36	; 0x24
 8001b06:	af04      	add	r7, sp, #16
 8001b08:	6078      	str	r0, [r7, #4]
 8001b0a:	4608      	mov	r0, r1
 8001b0c:	4611      	mov	r1, r2
 8001b0e:	461a      	mov	r2, r3
 8001b10:	4603      	mov	r3, r0
 8001b12:	70fb      	strb	r3, [r7, #3]
 8001b14:	460b      	mov	r3, r1
 8001b16:	70bb      	strb	r3, [r7, #2]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d101      	bne.n	8001b2a <HAL_HCD_HC_Init+0x28>
 8001b26:	2302      	movs	r3, #2
 8001b28:	e076      	b.n	8001c18 <HAL_HCD_HC_Init+0x116>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001b32:	78fb      	ldrb	r3, [r7, #3]
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	212c      	movs	r1, #44	; 0x2c
 8001b38:	fb01 f303 	mul.w	r3, r1, r3
 8001b3c:	4413      	add	r3, r2
 8001b3e:	333d      	adds	r3, #61	; 0x3d
 8001b40:	2200      	movs	r2, #0
 8001b42:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001b44:	78fb      	ldrb	r3, [r7, #3]
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	212c      	movs	r1, #44	; 0x2c
 8001b4a:	fb01 f303 	mul.w	r3, r1, r3
 8001b4e:	4413      	add	r3, r2
 8001b50:	3338      	adds	r3, #56	; 0x38
 8001b52:	787a      	ldrb	r2, [r7, #1]
 8001b54:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001b56:	78fb      	ldrb	r3, [r7, #3]
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	212c      	movs	r1, #44	; 0x2c
 8001b5c:	fb01 f303 	mul.w	r3, r1, r3
 8001b60:	4413      	add	r3, r2
 8001b62:	3340      	adds	r3, #64	; 0x40
 8001b64:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001b66:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001b68:	78fb      	ldrb	r3, [r7, #3]
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	212c      	movs	r1, #44	; 0x2c
 8001b6e:	fb01 f303 	mul.w	r3, r1, r3
 8001b72:	4413      	add	r3, r2
 8001b74:	3339      	adds	r3, #57	; 0x39
 8001b76:	78fa      	ldrb	r2, [r7, #3]
 8001b78:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001b7a:	78fb      	ldrb	r3, [r7, #3]
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	212c      	movs	r1, #44	; 0x2c
 8001b80:	fb01 f303 	mul.w	r3, r1, r3
 8001b84:	4413      	add	r3, r2
 8001b86:	333f      	adds	r3, #63	; 0x3f
 8001b88:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001b8c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001b8e:	78fb      	ldrb	r3, [r7, #3]
 8001b90:	78ba      	ldrb	r2, [r7, #2]
 8001b92:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001b96:	b2d0      	uxtb	r0, r2
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	212c      	movs	r1, #44	; 0x2c
 8001b9c:	fb01 f303 	mul.w	r3, r1, r3
 8001ba0:	4413      	add	r3, r2
 8001ba2:	333a      	adds	r3, #58	; 0x3a
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001ba8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	da09      	bge.n	8001bc4 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001bb0:	78fb      	ldrb	r3, [r7, #3]
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	212c      	movs	r1, #44	; 0x2c
 8001bb6:	fb01 f303 	mul.w	r3, r1, r3
 8001bba:	4413      	add	r3, r2
 8001bbc:	333b      	adds	r3, #59	; 0x3b
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	701a      	strb	r2, [r3, #0]
 8001bc2:	e008      	b.n	8001bd6 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001bc4:	78fb      	ldrb	r3, [r7, #3]
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	212c      	movs	r1, #44	; 0x2c
 8001bca:	fb01 f303 	mul.w	r3, r1, r3
 8001bce:	4413      	add	r3, r2
 8001bd0:	333b      	adds	r3, #59	; 0x3b
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001bd6:	78fb      	ldrb	r3, [r7, #3]
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	212c      	movs	r1, #44	; 0x2c
 8001bdc:	fb01 f303 	mul.w	r3, r1, r3
 8001be0:	4413      	add	r3, r2
 8001be2:	333c      	adds	r3, #60	; 0x3c
 8001be4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001be8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6818      	ldr	r0, [r3, #0]
 8001bee:	787c      	ldrb	r4, [r7, #1]
 8001bf0:	78ba      	ldrb	r2, [r7, #2]
 8001bf2:	78f9      	ldrb	r1, [r7, #3]
 8001bf4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001bf6:	9302      	str	r3, [sp, #8]
 8001bf8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001bfc:	9301      	str	r3, [sp, #4]
 8001bfe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001c02:	9300      	str	r3, [sp, #0]
 8001c04:	4623      	mov	r3, r4
 8001c06:	f003 fc69 	bl	80054dc <USB_HC_Init>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3714      	adds	r7, #20
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd90      	pop	{r4, r7, pc}

08001c20 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	460b      	mov	r3, r1
 8001c2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d101      	bne.n	8001c3e <HAL_HCD_HC_Halt+0x1e>
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	e00f      	b.n	8001c5e <HAL_HCD_HC_Halt+0x3e>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2201      	movs	r2, #1
 8001c42:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	78fa      	ldrb	r2, [r7, #3]
 8001c4c:	4611      	mov	r1, r2
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f003 feb9 	bl	80059c6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
	...

08001c68 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	4608      	mov	r0, r1
 8001c72:	4611      	mov	r1, r2
 8001c74:	461a      	mov	r2, r3
 8001c76:	4603      	mov	r3, r0
 8001c78:	70fb      	strb	r3, [r7, #3]
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	70bb      	strb	r3, [r7, #2]
 8001c7e:	4613      	mov	r3, r2
 8001c80:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001c82:	78fb      	ldrb	r3, [r7, #3]
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	212c      	movs	r1, #44	; 0x2c
 8001c88:	fb01 f303 	mul.w	r3, r1, r3
 8001c8c:	4413      	add	r3, r2
 8001c8e:	333b      	adds	r3, #59	; 0x3b
 8001c90:	78ba      	ldrb	r2, [r7, #2]
 8001c92:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001c94:	78fb      	ldrb	r3, [r7, #3]
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	212c      	movs	r1, #44	; 0x2c
 8001c9a:	fb01 f303 	mul.w	r3, r1, r3
 8001c9e:	4413      	add	r3, r2
 8001ca0:	333f      	adds	r3, #63	; 0x3f
 8001ca2:	787a      	ldrb	r2, [r7, #1]
 8001ca4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001ca6:	7c3b      	ldrb	r3, [r7, #16]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d112      	bne.n	8001cd2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001cac:	78fb      	ldrb	r3, [r7, #3]
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	212c      	movs	r1, #44	; 0x2c
 8001cb2:	fb01 f303 	mul.w	r3, r1, r3
 8001cb6:	4413      	add	r3, r2
 8001cb8:	3342      	adds	r3, #66	; 0x42
 8001cba:	2203      	movs	r2, #3
 8001cbc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001cbe:	78fb      	ldrb	r3, [r7, #3]
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	212c      	movs	r1, #44	; 0x2c
 8001cc4:	fb01 f303 	mul.w	r3, r1, r3
 8001cc8:	4413      	add	r3, r2
 8001cca:	333d      	adds	r3, #61	; 0x3d
 8001ccc:	7f3a      	ldrb	r2, [r7, #28]
 8001cce:	701a      	strb	r2, [r3, #0]
 8001cd0:	e008      	b.n	8001ce4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cd2:	78fb      	ldrb	r3, [r7, #3]
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	212c      	movs	r1, #44	; 0x2c
 8001cd8:	fb01 f303 	mul.w	r3, r1, r3
 8001cdc:	4413      	add	r3, r2
 8001cde:	3342      	adds	r3, #66	; 0x42
 8001ce0:	2202      	movs	r2, #2
 8001ce2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001ce4:	787b      	ldrb	r3, [r7, #1]
 8001ce6:	2b03      	cmp	r3, #3
 8001ce8:	f200 80c6 	bhi.w	8001e78 <HAL_HCD_HC_SubmitRequest+0x210>
 8001cec:	a201      	add	r2, pc, #4	; (adr r2, 8001cf4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cf2:	bf00      	nop
 8001cf4:	08001d05 	.word	0x08001d05
 8001cf8:	08001e65 	.word	0x08001e65
 8001cfc:	08001d69 	.word	0x08001d69
 8001d00:	08001de7 	.word	0x08001de7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001d04:	7c3b      	ldrb	r3, [r7, #16]
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	f040 80b8 	bne.w	8001e7c <HAL_HCD_HC_SubmitRequest+0x214>
 8001d0c:	78bb      	ldrb	r3, [r7, #2]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f040 80b4 	bne.w	8001e7c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001d14:	8b3b      	ldrh	r3, [r7, #24]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d108      	bne.n	8001d2c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001d1a:	78fb      	ldrb	r3, [r7, #3]
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	212c      	movs	r1, #44	; 0x2c
 8001d20:	fb01 f303 	mul.w	r3, r1, r3
 8001d24:	4413      	add	r3, r2
 8001d26:	3355      	adds	r3, #85	; 0x55
 8001d28:	2201      	movs	r2, #1
 8001d2a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001d2c:	78fb      	ldrb	r3, [r7, #3]
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	212c      	movs	r1, #44	; 0x2c
 8001d32:	fb01 f303 	mul.w	r3, r1, r3
 8001d36:	4413      	add	r3, r2
 8001d38:	3355      	adds	r3, #85	; 0x55
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d109      	bne.n	8001d54 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d40:	78fb      	ldrb	r3, [r7, #3]
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	212c      	movs	r1, #44	; 0x2c
 8001d46:	fb01 f303 	mul.w	r3, r1, r3
 8001d4a:	4413      	add	r3, r2
 8001d4c:	3342      	adds	r3, #66	; 0x42
 8001d4e:	2200      	movs	r2, #0
 8001d50:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001d52:	e093      	b.n	8001e7c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d54:	78fb      	ldrb	r3, [r7, #3]
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	212c      	movs	r1, #44	; 0x2c
 8001d5a:	fb01 f303 	mul.w	r3, r1, r3
 8001d5e:	4413      	add	r3, r2
 8001d60:	3342      	adds	r3, #66	; 0x42
 8001d62:	2202      	movs	r2, #2
 8001d64:	701a      	strb	r2, [r3, #0]
      break;
 8001d66:	e089      	b.n	8001e7c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001d68:	78bb      	ldrb	r3, [r7, #2]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d11d      	bne.n	8001daa <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001d6e:	78fb      	ldrb	r3, [r7, #3]
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	212c      	movs	r1, #44	; 0x2c
 8001d74:	fb01 f303 	mul.w	r3, r1, r3
 8001d78:	4413      	add	r3, r2
 8001d7a:	3355      	adds	r3, #85	; 0x55
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d109      	bne.n	8001d96 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d82:	78fb      	ldrb	r3, [r7, #3]
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	212c      	movs	r1, #44	; 0x2c
 8001d88:	fb01 f303 	mul.w	r3, r1, r3
 8001d8c:	4413      	add	r3, r2
 8001d8e:	3342      	adds	r3, #66	; 0x42
 8001d90:	2200      	movs	r2, #0
 8001d92:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001d94:	e073      	b.n	8001e7e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d96:	78fb      	ldrb	r3, [r7, #3]
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	212c      	movs	r1, #44	; 0x2c
 8001d9c:	fb01 f303 	mul.w	r3, r1, r3
 8001da0:	4413      	add	r3, r2
 8001da2:	3342      	adds	r3, #66	; 0x42
 8001da4:	2202      	movs	r2, #2
 8001da6:	701a      	strb	r2, [r3, #0]
      break;
 8001da8:	e069      	b.n	8001e7e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001daa:	78fb      	ldrb	r3, [r7, #3]
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	212c      	movs	r1, #44	; 0x2c
 8001db0:	fb01 f303 	mul.w	r3, r1, r3
 8001db4:	4413      	add	r3, r2
 8001db6:	3354      	adds	r3, #84	; 0x54
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d109      	bne.n	8001dd2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001dbe:	78fb      	ldrb	r3, [r7, #3]
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	212c      	movs	r1, #44	; 0x2c
 8001dc4:	fb01 f303 	mul.w	r3, r1, r3
 8001dc8:	4413      	add	r3, r2
 8001dca:	3342      	adds	r3, #66	; 0x42
 8001dcc:	2200      	movs	r2, #0
 8001dce:	701a      	strb	r2, [r3, #0]
      break;
 8001dd0:	e055      	b.n	8001e7e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001dd2:	78fb      	ldrb	r3, [r7, #3]
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	212c      	movs	r1, #44	; 0x2c
 8001dd8:	fb01 f303 	mul.w	r3, r1, r3
 8001ddc:	4413      	add	r3, r2
 8001dde:	3342      	adds	r3, #66	; 0x42
 8001de0:	2202      	movs	r2, #2
 8001de2:	701a      	strb	r2, [r3, #0]
      break;
 8001de4:	e04b      	b.n	8001e7e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001de6:	78bb      	ldrb	r3, [r7, #2]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d11d      	bne.n	8001e28 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001dec:	78fb      	ldrb	r3, [r7, #3]
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	212c      	movs	r1, #44	; 0x2c
 8001df2:	fb01 f303 	mul.w	r3, r1, r3
 8001df6:	4413      	add	r3, r2
 8001df8:	3355      	adds	r3, #85	; 0x55
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d109      	bne.n	8001e14 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e00:	78fb      	ldrb	r3, [r7, #3]
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	212c      	movs	r1, #44	; 0x2c
 8001e06:	fb01 f303 	mul.w	r3, r1, r3
 8001e0a:	4413      	add	r3, r2
 8001e0c:	3342      	adds	r3, #66	; 0x42
 8001e0e:	2200      	movs	r2, #0
 8001e10:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001e12:	e034      	b.n	8001e7e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e14:	78fb      	ldrb	r3, [r7, #3]
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	212c      	movs	r1, #44	; 0x2c
 8001e1a:	fb01 f303 	mul.w	r3, r1, r3
 8001e1e:	4413      	add	r3, r2
 8001e20:	3342      	adds	r3, #66	; 0x42
 8001e22:	2202      	movs	r2, #2
 8001e24:	701a      	strb	r2, [r3, #0]
      break;
 8001e26:	e02a      	b.n	8001e7e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001e28:	78fb      	ldrb	r3, [r7, #3]
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	212c      	movs	r1, #44	; 0x2c
 8001e2e:	fb01 f303 	mul.w	r3, r1, r3
 8001e32:	4413      	add	r3, r2
 8001e34:	3354      	adds	r3, #84	; 0x54
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d109      	bne.n	8001e50 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e3c:	78fb      	ldrb	r3, [r7, #3]
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	212c      	movs	r1, #44	; 0x2c
 8001e42:	fb01 f303 	mul.w	r3, r1, r3
 8001e46:	4413      	add	r3, r2
 8001e48:	3342      	adds	r3, #66	; 0x42
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	701a      	strb	r2, [r3, #0]
      break;
 8001e4e:	e016      	b.n	8001e7e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e50:	78fb      	ldrb	r3, [r7, #3]
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	212c      	movs	r1, #44	; 0x2c
 8001e56:	fb01 f303 	mul.w	r3, r1, r3
 8001e5a:	4413      	add	r3, r2
 8001e5c:	3342      	adds	r3, #66	; 0x42
 8001e5e:	2202      	movs	r2, #2
 8001e60:	701a      	strb	r2, [r3, #0]
      break;
 8001e62:	e00c      	b.n	8001e7e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e64:	78fb      	ldrb	r3, [r7, #3]
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	212c      	movs	r1, #44	; 0x2c
 8001e6a:	fb01 f303 	mul.w	r3, r1, r3
 8001e6e:	4413      	add	r3, r2
 8001e70:	3342      	adds	r3, #66	; 0x42
 8001e72:	2200      	movs	r2, #0
 8001e74:	701a      	strb	r2, [r3, #0]
      break;
 8001e76:	e002      	b.n	8001e7e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001e78:	bf00      	nop
 8001e7a:	e000      	b.n	8001e7e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001e7c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001e7e:	78fb      	ldrb	r3, [r7, #3]
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	212c      	movs	r1, #44	; 0x2c
 8001e84:	fb01 f303 	mul.w	r3, r1, r3
 8001e88:	4413      	add	r3, r2
 8001e8a:	3344      	adds	r3, #68	; 0x44
 8001e8c:	697a      	ldr	r2, [r7, #20]
 8001e8e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001e90:	78fb      	ldrb	r3, [r7, #3]
 8001e92:	8b3a      	ldrh	r2, [r7, #24]
 8001e94:	6879      	ldr	r1, [r7, #4]
 8001e96:	202c      	movs	r0, #44	; 0x2c
 8001e98:	fb00 f303 	mul.w	r3, r0, r3
 8001e9c:	440b      	add	r3, r1
 8001e9e:	334c      	adds	r3, #76	; 0x4c
 8001ea0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001ea2:	78fb      	ldrb	r3, [r7, #3]
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	212c      	movs	r1, #44	; 0x2c
 8001ea8:	fb01 f303 	mul.w	r3, r1, r3
 8001eac:	4413      	add	r3, r2
 8001eae:	3360      	adds	r3, #96	; 0x60
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001eb4:	78fb      	ldrb	r3, [r7, #3]
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	212c      	movs	r1, #44	; 0x2c
 8001eba:	fb01 f303 	mul.w	r3, r1, r3
 8001ebe:	4413      	add	r3, r2
 8001ec0:	3350      	adds	r3, #80	; 0x50
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001ec6:	78fb      	ldrb	r3, [r7, #3]
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	212c      	movs	r1, #44	; 0x2c
 8001ecc:	fb01 f303 	mul.w	r3, r1, r3
 8001ed0:	4413      	add	r3, r2
 8001ed2:	3339      	adds	r3, #57	; 0x39
 8001ed4:	78fa      	ldrb	r2, [r7, #3]
 8001ed6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001ed8:	78fb      	ldrb	r3, [r7, #3]
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	212c      	movs	r1, #44	; 0x2c
 8001ede:	fb01 f303 	mul.w	r3, r1, r3
 8001ee2:	4413      	add	r3, r2
 8001ee4:	3361      	adds	r3, #97	; 0x61
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6818      	ldr	r0, [r3, #0]
 8001eee:	78fb      	ldrb	r3, [r7, #3]
 8001ef0:	222c      	movs	r2, #44	; 0x2c
 8001ef2:	fb02 f303 	mul.w	r3, r2, r3
 8001ef6:	3338      	adds	r3, #56	; 0x38
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	18d1      	adds	r1, r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	461a      	mov	r2, r3
 8001f04:	f003 fc0c 	bl	8005720 <USB_HC_StartXfer>
 8001f08:	4603      	mov	r3, r0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop

08001f14 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f003 f90d 	bl	800514a <USB_GetMode>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	f040 80f6 	bne.w	8002124 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f003 f8f1 	bl	8005124 <USB_ReadInterrupts>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	f000 80ec 	beq.w	8002122 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f003 f8e8 	bl	8005124 <USB_ReadInterrupts>
 8001f54:	4603      	mov	r3, r0
 8001f56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001f5e:	d104      	bne.n	8001f6a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001f68:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f003 f8d8 	bl	8005124 <USB_ReadInterrupts>
 8001f74:	4603      	mov	r3, r0
 8001f76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f7e:	d104      	bne.n	8001f8a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001f88:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f003 f8c8 	bl	8005124 <USB_ReadInterrupts>
 8001f94:	4603      	mov	r3, r0
 8001f96:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f9a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001f9e:	d104      	bne.n	8001faa <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001fa8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f003 f8b8 	bl	8005124 <USB_ReadInterrupts>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d103      	bne.n	8001fc6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f003 f8aa 	bl	8005124 <USB_ReadInterrupts>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001fd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001fda:	d11c      	bne.n	8002016 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001fe4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d10f      	bne.n	8002016 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001ff6:	2110      	movs	r1, #16
 8001ff8:	6938      	ldr	r0, [r7, #16]
 8001ffa:	f002 ff99 	bl	8004f30 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001ffe:	6938      	ldr	r0, [r7, #16]
 8002000:	f002 ffca 	bl	8004f98 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2101      	movs	r1, #1
 800200a:	4618      	mov	r0, r3
 800200c:	f003 f9a0 	bl	8005350 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f005 ff7d 	bl	8007f10 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4618      	mov	r0, r3
 800201c:	f003 f882 	bl	8005124 <USB_ReadInterrupts>
 8002020:	4603      	mov	r3, r0
 8002022:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002026:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800202a:	d102      	bne.n	8002032 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f001 f89e 	bl	800316e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4618      	mov	r0, r3
 8002038:	f003 f874 	bl	8005124 <USB_ReadInterrupts>
 800203c:	4603      	mov	r3, r0
 800203e:	f003 0308 	and.w	r3, r3, #8
 8002042:	2b08      	cmp	r3, #8
 8002044:	d106      	bne.n	8002054 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f005 ff46 	bl	8007ed8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2208      	movs	r2, #8
 8002052:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4618      	mov	r0, r3
 800205a:	f003 f863 	bl	8005124 <USB_ReadInterrupts>
 800205e:	4603      	mov	r3, r0
 8002060:	f003 0310 	and.w	r3, r3, #16
 8002064:	2b10      	cmp	r3, #16
 8002066:	d101      	bne.n	800206c <HAL_HCD_IRQHandler+0x158>
 8002068:	2301      	movs	r3, #1
 800206a:	e000      	b.n	800206e <HAL_HCD_IRQHandler+0x15a>
 800206c:	2300      	movs	r3, #0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d012      	beq.n	8002098 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	699a      	ldr	r2, [r3, #24]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 0210 	bic.w	r2, r2, #16
 8002080:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 ffa1 	bl	8002fca <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	699a      	ldr	r2, [r3, #24]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f042 0210 	orr.w	r2, r2, #16
 8002096:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4618      	mov	r0, r3
 800209e:	f003 f841 	bl	8005124 <USB_ReadInterrupts>
 80020a2:	4603      	mov	r3, r0
 80020a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80020ac:	d13a      	bne.n	8002124 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f003 fc76 	bl	80059a4 <USB_HC_ReadInterrupt>
 80020b8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80020ba:	2300      	movs	r3, #0
 80020bc:	617b      	str	r3, [r7, #20]
 80020be:	e025      	b.n	800210c <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	f003 030f 	and.w	r3, r3, #15
 80020c6:	68ba      	ldr	r2, [r7, #8]
 80020c8:	fa22 f303 	lsr.w	r3, r2, r3
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d018      	beq.n	8002106 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	015a      	lsls	r2, r3, #5
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	4413      	add	r3, r2
 80020dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020ea:	d106      	bne.n	80020fa <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	4619      	mov	r1, r3
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 f8ab 	bl	800224e <HCD_HC_IN_IRQHandler>
 80020f8:	e005      	b.n	8002106 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	4619      	mov	r1, r3
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f000 fbf9 	bl	80028f8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	3301      	adds	r3, #1
 800210a:	617b      	str	r3, [r7, #20]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	697a      	ldr	r2, [r7, #20]
 8002112:	429a      	cmp	r2, r3
 8002114:	d3d4      	bcc.n	80020c0 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800211e:	615a      	str	r2, [r3, #20]
 8002120:	e000      	b.n	8002124 <HAL_HCD_IRQHandler+0x210>
      return;
 8002122:	bf00      	nop
    }
  }
}
 8002124:	3718      	adds	r7, #24
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b082      	sub	sp, #8
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002138:	2b01      	cmp	r3, #1
 800213a:	d101      	bne.n	8002140 <HAL_HCD_Start+0x16>
 800213c:	2302      	movs	r3, #2
 800213e:	e013      	b.n	8002168 <HAL_HCD_Start+0x3e>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2101      	movs	r1, #1
 800214e:	4618      	mov	r0, r3
 8002150:	f003 f962 	bl	8005418 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4618      	mov	r0, r3
 800215a:	f002 fe7a 	bl	8004e52 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	3708      	adds	r7, #8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800217e:	2b01      	cmp	r3, #1
 8002180:	d101      	bne.n	8002186 <HAL_HCD_Stop+0x16>
 8002182:	2302      	movs	r3, #2
 8002184:	e00d      	b.n	80021a2 <HAL_HCD_Stop+0x32>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2201      	movs	r2, #1
 800218a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4618      	mov	r0, r3
 8002194:	f003 fd50 	bl	8005c38 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b082      	sub	sp, #8
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f003 f904 	bl	80053c4 <USB_ResetPort>
 80021bc:	4603      	mov	r3, r0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b083      	sub	sp, #12
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
 80021ce:	460b      	mov	r3, r1
 80021d0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80021d2:	78fb      	ldrb	r3, [r7, #3]
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	212c      	movs	r1, #44	; 0x2c
 80021d8:	fb01 f303 	mul.w	r3, r1, r3
 80021dc:	4413      	add	r3, r2
 80021de:	3360      	adds	r3, #96	; 0x60
 80021e0:	781b      	ldrb	r3, [r3, #0]
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr

080021ee <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80021ee:	b480      	push	{r7}
 80021f0:	b083      	sub	sp, #12
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
 80021f6:	460b      	mov	r3, r1
 80021f8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80021fa:	78fb      	ldrb	r3, [r7, #3]
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	212c      	movs	r1, #44	; 0x2c
 8002200:	fb01 f303 	mul.w	r3, r1, r3
 8002204:	4413      	add	r3, r2
 8002206:	3350      	adds	r3, #80	; 0x50
 8002208:	681b      	ldr	r3, [r3, #0]
}
 800220a:	4618      	mov	r0, r3
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr

08002216 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b082      	sub	sp, #8
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4618      	mov	r0, r3
 8002224:	f003 f948 	bl	80054b8 <USB_GetCurrentFrame>
 8002228:	4603      	mov	r3, r0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b082      	sub	sp, #8
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4618      	mov	r0, r3
 8002240:	f003 f923 	bl	800548a <USB_GetHostSpeed>
 8002244:	4603      	mov	r3, r0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b086      	sub	sp, #24
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
 8002256:	460b      	mov	r3, r1
 8002258:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002264:	78fb      	ldrb	r3, [r7, #3]
 8002266:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	015a      	lsls	r2, r3, #5
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	4413      	add	r3, r2
 8002270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f003 0304 	and.w	r3, r3, #4
 800227a:	2b04      	cmp	r3, #4
 800227c:	d11a      	bne.n	80022b4 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	015a      	lsls	r2, r3, #5
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	4413      	add	r3, r2
 8002286:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800228a:	461a      	mov	r2, r3
 800228c:	2304      	movs	r3, #4
 800228e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	212c      	movs	r1, #44	; 0x2c
 8002296:	fb01 f303 	mul.w	r3, r1, r3
 800229a:	4413      	add	r3, r2
 800229c:	3361      	adds	r3, #97	; 0x61
 800229e:	2206      	movs	r2, #6
 80022a0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	b2d2      	uxtb	r2, r2
 80022aa:	4611      	mov	r1, r2
 80022ac:	4618      	mov	r0, r3
 80022ae:	f003 fb8a 	bl	80059c6 <USB_HC_Halt>
 80022b2:	e0af      	b.n	8002414 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	015a      	lsls	r2, r3, #5
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	4413      	add	r3, r2
 80022bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022ca:	d11b      	bne.n	8002304 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	015a      	lsls	r2, r3, #5
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	4413      	add	r3, r2
 80022d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022d8:	461a      	mov	r2, r3
 80022da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022de:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	212c      	movs	r1, #44	; 0x2c
 80022e6:	fb01 f303 	mul.w	r3, r1, r3
 80022ea:	4413      	add	r3, r2
 80022ec:	3361      	adds	r3, #97	; 0x61
 80022ee:	2207      	movs	r2, #7
 80022f0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	b2d2      	uxtb	r2, r2
 80022fa:	4611      	mov	r1, r2
 80022fc:	4618      	mov	r0, r3
 80022fe:	f003 fb62 	bl	80059c6 <USB_HC_Halt>
 8002302:	e087      	b.n	8002414 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	015a      	lsls	r2, r3, #5
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	4413      	add	r3, r2
 800230c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f003 0320 	and.w	r3, r3, #32
 8002316:	2b20      	cmp	r3, #32
 8002318:	d109      	bne.n	800232e <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	015a      	lsls	r2, r3, #5
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	4413      	add	r3, r2
 8002322:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002326:	461a      	mov	r2, r3
 8002328:	2320      	movs	r3, #32
 800232a:	6093      	str	r3, [r2, #8]
 800232c:	e072      	b.n	8002414 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	015a      	lsls	r2, r3, #5
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	4413      	add	r3, r2
 8002336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f003 0308 	and.w	r3, r3, #8
 8002340:	2b08      	cmp	r3, #8
 8002342:	d11a      	bne.n	800237a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	015a      	lsls	r2, r3, #5
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	4413      	add	r3, r2
 800234c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002350:	461a      	mov	r2, r3
 8002352:	2308      	movs	r3, #8
 8002354:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	212c      	movs	r1, #44	; 0x2c
 800235c:	fb01 f303 	mul.w	r3, r1, r3
 8002360:	4413      	add	r3, r2
 8002362:	3361      	adds	r3, #97	; 0x61
 8002364:	2205      	movs	r2, #5
 8002366:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	b2d2      	uxtb	r2, r2
 8002370:	4611      	mov	r1, r2
 8002372:	4618      	mov	r0, r3
 8002374:	f003 fb27 	bl	80059c6 <USB_HC_Halt>
 8002378:	e04c      	b.n	8002414 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	015a      	lsls	r2, r3, #5
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	4413      	add	r3, r2
 8002382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800238c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002390:	d11b      	bne.n	80023ca <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	015a      	lsls	r2, r3, #5
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	4413      	add	r3, r2
 800239a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800239e:	461a      	mov	r2, r3
 80023a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023a4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	212c      	movs	r1, #44	; 0x2c
 80023ac:	fb01 f303 	mul.w	r3, r1, r3
 80023b0:	4413      	add	r3, r2
 80023b2:	3361      	adds	r3, #97	; 0x61
 80023b4:	2208      	movs	r2, #8
 80023b6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	68fa      	ldr	r2, [r7, #12]
 80023be:	b2d2      	uxtb	r2, r2
 80023c0:	4611      	mov	r1, r2
 80023c2:	4618      	mov	r0, r3
 80023c4:	f003 faff 	bl	80059c6 <USB_HC_Halt>
 80023c8:	e024      	b.n	8002414 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	015a      	lsls	r2, r3, #5
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	4413      	add	r3, r2
 80023d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023dc:	2b80      	cmp	r3, #128	; 0x80
 80023de:	d119      	bne.n	8002414 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	015a      	lsls	r2, r3, #5
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	4413      	add	r3, r2
 80023e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ec:	461a      	mov	r2, r3
 80023ee:	2380      	movs	r3, #128	; 0x80
 80023f0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	212c      	movs	r1, #44	; 0x2c
 80023f8:	fb01 f303 	mul.w	r3, r1, r3
 80023fc:	4413      	add	r3, r2
 80023fe:	3361      	adds	r3, #97	; 0x61
 8002400:	2206      	movs	r2, #6
 8002402:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	b2d2      	uxtb	r2, r2
 800240c:	4611      	mov	r1, r2
 800240e:	4618      	mov	r0, r3
 8002410:	f003 fad9 	bl	80059c6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	015a      	lsls	r2, r3, #5
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	4413      	add	r3, r2
 800241c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002426:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800242a:	d112      	bne.n	8002452 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68fa      	ldr	r2, [r7, #12]
 8002432:	b2d2      	uxtb	r2, r2
 8002434:	4611      	mov	r1, r2
 8002436:	4618      	mov	r0, r3
 8002438:	f003 fac5 	bl	80059c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	015a      	lsls	r2, r3, #5
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	4413      	add	r3, r2
 8002444:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002448:	461a      	mov	r2, r3
 800244a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800244e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002450:	e24e      	b.n	80028f0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	015a      	lsls	r2, r3, #5
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	4413      	add	r3, r2
 800245a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f003 0301 	and.w	r3, r3, #1
 8002464:	2b01      	cmp	r3, #1
 8002466:	f040 80df 	bne.w	8002628 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d019      	beq.n	80024a6 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	212c      	movs	r1, #44	; 0x2c
 8002478:	fb01 f303 	mul.w	r3, r1, r3
 800247c:	4413      	add	r3, r2
 800247e:	3348      	adds	r3, #72	; 0x48
 8002480:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	0159      	lsls	r1, r3, #5
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	440b      	add	r3, r1
 800248a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002494:	1ad2      	subs	r2, r2, r3
 8002496:	6879      	ldr	r1, [r7, #4]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	202c      	movs	r0, #44	; 0x2c
 800249c:	fb00 f303 	mul.w	r3, r0, r3
 80024a0:	440b      	add	r3, r1
 80024a2:	3350      	adds	r3, #80	; 0x50
 80024a4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	212c      	movs	r1, #44	; 0x2c
 80024ac:	fb01 f303 	mul.w	r3, r1, r3
 80024b0:	4413      	add	r3, r2
 80024b2:	3361      	adds	r3, #97	; 0x61
 80024b4:	2201      	movs	r2, #1
 80024b6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	212c      	movs	r1, #44	; 0x2c
 80024be:	fb01 f303 	mul.w	r3, r1, r3
 80024c2:	4413      	add	r3, r2
 80024c4:	335c      	adds	r3, #92	; 0x5c
 80024c6:	2200      	movs	r2, #0
 80024c8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	015a      	lsls	r2, r3, #5
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	4413      	add	r3, r2
 80024d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024d6:	461a      	mov	r2, r3
 80024d8:	2301      	movs	r3, #1
 80024da:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	212c      	movs	r1, #44	; 0x2c
 80024e2:	fb01 f303 	mul.w	r3, r1, r3
 80024e6:	4413      	add	r3, r2
 80024e8:	333f      	adds	r3, #63	; 0x3f
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d009      	beq.n	8002504 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	212c      	movs	r1, #44	; 0x2c
 80024f6:	fb01 f303 	mul.w	r3, r1, r3
 80024fa:	4413      	add	r3, r2
 80024fc:	333f      	adds	r3, #63	; 0x3f
 80024fe:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002500:	2b02      	cmp	r3, #2
 8002502:	d111      	bne.n	8002528 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68fa      	ldr	r2, [r7, #12]
 800250a:	b2d2      	uxtb	r2, r2
 800250c:	4611      	mov	r1, r2
 800250e:	4618      	mov	r0, r3
 8002510:	f003 fa59 	bl	80059c6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	015a      	lsls	r2, r3, #5
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	4413      	add	r3, r2
 800251c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002520:	461a      	mov	r2, r3
 8002522:	2310      	movs	r3, #16
 8002524:	6093      	str	r3, [r2, #8]
 8002526:	e03a      	b.n	800259e <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	212c      	movs	r1, #44	; 0x2c
 800252e:	fb01 f303 	mul.w	r3, r1, r3
 8002532:	4413      	add	r3, r2
 8002534:	333f      	adds	r3, #63	; 0x3f
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	2b03      	cmp	r3, #3
 800253a:	d009      	beq.n	8002550 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	212c      	movs	r1, #44	; 0x2c
 8002542:	fb01 f303 	mul.w	r3, r1, r3
 8002546:	4413      	add	r3, r2
 8002548:	333f      	adds	r3, #63	; 0x3f
 800254a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800254c:	2b01      	cmp	r3, #1
 800254e:	d126      	bne.n	800259e <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	015a      	lsls	r2, r3, #5
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	4413      	add	r3, r2
 8002558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	0151      	lsls	r1, r2, #5
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	440a      	add	r2, r1
 8002566:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800256a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800256e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	212c      	movs	r1, #44	; 0x2c
 8002576:	fb01 f303 	mul.w	r3, r1, r3
 800257a:	4413      	add	r3, r2
 800257c:	3360      	adds	r3, #96	; 0x60
 800257e:	2201      	movs	r2, #1
 8002580:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	b2d9      	uxtb	r1, r3
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	202c      	movs	r0, #44	; 0x2c
 800258c:	fb00 f303 	mul.w	r3, r0, r3
 8002590:	4413      	add	r3, r2
 8002592:	3360      	adds	r3, #96	; 0x60
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	461a      	mov	r2, r3
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f005 fcc7 	bl	8007f2c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d12b      	bne.n	80025fe <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	212c      	movs	r1, #44	; 0x2c
 80025ac:	fb01 f303 	mul.w	r3, r1, r3
 80025b0:	4413      	add	r3, r2
 80025b2:	3348      	adds	r3, #72	; 0x48
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6879      	ldr	r1, [r7, #4]
 80025b8:	68fa      	ldr	r2, [r7, #12]
 80025ba:	202c      	movs	r0, #44	; 0x2c
 80025bc:	fb00 f202 	mul.w	r2, r0, r2
 80025c0:	440a      	add	r2, r1
 80025c2:	3240      	adds	r2, #64	; 0x40
 80025c4:	8812      	ldrh	r2, [r2, #0]
 80025c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f000 818e 	beq.w	80028f0 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	212c      	movs	r1, #44	; 0x2c
 80025da:	fb01 f303 	mul.w	r3, r1, r3
 80025de:	4413      	add	r3, r2
 80025e0:	3354      	adds	r3, #84	; 0x54
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	f083 0301 	eor.w	r3, r3, #1
 80025e8:	b2d8      	uxtb	r0, r3
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	212c      	movs	r1, #44	; 0x2c
 80025f0:	fb01 f303 	mul.w	r3, r1, r3
 80025f4:	4413      	add	r3, r2
 80025f6:	3354      	adds	r3, #84	; 0x54
 80025f8:	4602      	mov	r2, r0
 80025fa:	701a      	strb	r2, [r3, #0]
}
 80025fc:	e178      	b.n	80028f0 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	212c      	movs	r1, #44	; 0x2c
 8002604:	fb01 f303 	mul.w	r3, r1, r3
 8002608:	4413      	add	r3, r2
 800260a:	3354      	adds	r3, #84	; 0x54
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	f083 0301 	eor.w	r3, r3, #1
 8002612:	b2d8      	uxtb	r0, r3
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	212c      	movs	r1, #44	; 0x2c
 800261a:	fb01 f303 	mul.w	r3, r1, r3
 800261e:	4413      	add	r3, r2
 8002620:	3354      	adds	r3, #84	; 0x54
 8002622:	4602      	mov	r2, r0
 8002624:	701a      	strb	r2, [r3, #0]
}
 8002626:	e163      	b.n	80028f0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	015a      	lsls	r2, r3, #5
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	4413      	add	r3, r2
 8002630:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b02      	cmp	r3, #2
 800263c:	f040 80f6 	bne.w	800282c <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	212c      	movs	r1, #44	; 0x2c
 8002646:	fb01 f303 	mul.w	r3, r1, r3
 800264a:	4413      	add	r3, r2
 800264c:	3361      	adds	r3, #97	; 0x61
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	2b01      	cmp	r3, #1
 8002652:	d109      	bne.n	8002668 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	212c      	movs	r1, #44	; 0x2c
 800265a:	fb01 f303 	mul.w	r3, r1, r3
 800265e:	4413      	add	r3, r2
 8002660:	3360      	adds	r3, #96	; 0x60
 8002662:	2201      	movs	r2, #1
 8002664:	701a      	strb	r2, [r3, #0]
 8002666:	e0c9      	b.n	80027fc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	212c      	movs	r1, #44	; 0x2c
 800266e:	fb01 f303 	mul.w	r3, r1, r3
 8002672:	4413      	add	r3, r2
 8002674:	3361      	adds	r3, #97	; 0x61
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	2b05      	cmp	r3, #5
 800267a:	d109      	bne.n	8002690 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	212c      	movs	r1, #44	; 0x2c
 8002682:	fb01 f303 	mul.w	r3, r1, r3
 8002686:	4413      	add	r3, r2
 8002688:	3360      	adds	r3, #96	; 0x60
 800268a:	2205      	movs	r2, #5
 800268c:	701a      	strb	r2, [r3, #0]
 800268e:	e0b5      	b.n	80027fc <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	212c      	movs	r1, #44	; 0x2c
 8002696:	fb01 f303 	mul.w	r3, r1, r3
 800269a:	4413      	add	r3, r2
 800269c:	3361      	adds	r3, #97	; 0x61
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	2b06      	cmp	r3, #6
 80026a2:	d009      	beq.n	80026b8 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	212c      	movs	r1, #44	; 0x2c
 80026aa:	fb01 f303 	mul.w	r3, r1, r3
 80026ae:	4413      	add	r3, r2
 80026b0:	3361      	adds	r3, #97	; 0x61
 80026b2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80026b4:	2b08      	cmp	r3, #8
 80026b6:	d150      	bne.n	800275a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	212c      	movs	r1, #44	; 0x2c
 80026be:	fb01 f303 	mul.w	r3, r1, r3
 80026c2:	4413      	add	r3, r2
 80026c4:	335c      	adds	r3, #92	; 0x5c
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	1c5a      	adds	r2, r3, #1
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	202c      	movs	r0, #44	; 0x2c
 80026d0:	fb00 f303 	mul.w	r3, r0, r3
 80026d4:	440b      	add	r3, r1
 80026d6:	335c      	adds	r3, #92	; 0x5c
 80026d8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	212c      	movs	r1, #44	; 0x2c
 80026e0:	fb01 f303 	mul.w	r3, r1, r3
 80026e4:	4413      	add	r3, r2
 80026e6:	335c      	adds	r3, #92	; 0x5c
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d912      	bls.n	8002714 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	212c      	movs	r1, #44	; 0x2c
 80026f4:	fb01 f303 	mul.w	r3, r1, r3
 80026f8:	4413      	add	r3, r2
 80026fa:	335c      	adds	r3, #92	; 0x5c
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	212c      	movs	r1, #44	; 0x2c
 8002706:	fb01 f303 	mul.w	r3, r1, r3
 800270a:	4413      	add	r3, r2
 800270c:	3360      	adds	r3, #96	; 0x60
 800270e:	2204      	movs	r2, #4
 8002710:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002712:	e073      	b.n	80027fc <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	212c      	movs	r1, #44	; 0x2c
 800271a:	fb01 f303 	mul.w	r3, r1, r3
 800271e:	4413      	add	r3, r2
 8002720:	3360      	adds	r3, #96	; 0x60
 8002722:	2202      	movs	r2, #2
 8002724:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	015a      	lsls	r2, r3, #5
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	4413      	add	r3, r2
 800272e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800273c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002744:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	015a      	lsls	r2, r3, #5
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	4413      	add	r3, r2
 800274e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002752:	461a      	mov	r2, r3
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002758:	e050      	b.n	80027fc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	212c      	movs	r1, #44	; 0x2c
 8002760:	fb01 f303 	mul.w	r3, r1, r3
 8002764:	4413      	add	r3, r2
 8002766:	3361      	adds	r3, #97	; 0x61
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	2b03      	cmp	r3, #3
 800276c:	d122      	bne.n	80027b4 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	212c      	movs	r1, #44	; 0x2c
 8002774:	fb01 f303 	mul.w	r3, r1, r3
 8002778:	4413      	add	r3, r2
 800277a:	3360      	adds	r3, #96	; 0x60
 800277c:	2202      	movs	r2, #2
 800277e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	015a      	lsls	r2, r3, #5
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	4413      	add	r3, r2
 8002788:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002796:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800279e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	015a      	lsls	r2, r3, #5
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	4413      	add	r3, r2
 80027a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ac:	461a      	mov	r2, r3
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	6013      	str	r3, [r2, #0]
 80027b2:	e023      	b.n	80027fc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	212c      	movs	r1, #44	; 0x2c
 80027ba:	fb01 f303 	mul.w	r3, r1, r3
 80027be:	4413      	add	r3, r2
 80027c0:	3361      	adds	r3, #97	; 0x61
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	2b07      	cmp	r3, #7
 80027c6:	d119      	bne.n	80027fc <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	212c      	movs	r1, #44	; 0x2c
 80027ce:	fb01 f303 	mul.w	r3, r1, r3
 80027d2:	4413      	add	r3, r2
 80027d4:	335c      	adds	r3, #92	; 0x5c
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	1c5a      	adds	r2, r3, #1
 80027da:	6879      	ldr	r1, [r7, #4]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	202c      	movs	r0, #44	; 0x2c
 80027e0:	fb00 f303 	mul.w	r3, r0, r3
 80027e4:	440b      	add	r3, r1
 80027e6:	335c      	adds	r3, #92	; 0x5c
 80027e8:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	212c      	movs	r1, #44	; 0x2c
 80027f0:	fb01 f303 	mul.w	r3, r1, r3
 80027f4:	4413      	add	r3, r2
 80027f6:	3360      	adds	r3, #96	; 0x60
 80027f8:	2204      	movs	r2, #4
 80027fa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	015a      	lsls	r2, r3, #5
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	4413      	add	r3, r2
 8002804:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002808:	461a      	mov	r2, r3
 800280a:	2302      	movs	r3, #2
 800280c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	b2d9      	uxtb	r1, r3
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	202c      	movs	r0, #44	; 0x2c
 8002818:	fb00 f303 	mul.w	r3, r0, r3
 800281c:	4413      	add	r3, r2
 800281e:	3360      	adds	r3, #96	; 0x60
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	461a      	mov	r2, r3
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f005 fb81 	bl	8007f2c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800282a:	e061      	b.n	80028f0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	015a      	lsls	r2, r3, #5
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	4413      	add	r3, r2
 8002834:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 0310 	and.w	r3, r3, #16
 800283e:	2b10      	cmp	r3, #16
 8002840:	d156      	bne.n	80028f0 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	212c      	movs	r1, #44	; 0x2c
 8002848:	fb01 f303 	mul.w	r3, r1, r3
 800284c:	4413      	add	r3, r2
 800284e:	333f      	adds	r3, #63	; 0x3f
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	2b03      	cmp	r3, #3
 8002854:	d111      	bne.n	800287a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	212c      	movs	r1, #44	; 0x2c
 800285c:	fb01 f303 	mul.w	r3, r1, r3
 8002860:	4413      	add	r3, r2
 8002862:	335c      	adds	r3, #92	; 0x5c
 8002864:	2200      	movs	r2, #0
 8002866:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	b2d2      	uxtb	r2, r2
 8002870:	4611      	mov	r1, r2
 8002872:	4618      	mov	r0, r3
 8002874:	f003 f8a7 	bl	80059c6 <USB_HC_Halt>
 8002878:	e031      	b.n	80028de <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	212c      	movs	r1, #44	; 0x2c
 8002880:	fb01 f303 	mul.w	r3, r1, r3
 8002884:	4413      	add	r3, r2
 8002886:	333f      	adds	r3, #63	; 0x3f
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d009      	beq.n	80028a2 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	212c      	movs	r1, #44	; 0x2c
 8002894:	fb01 f303 	mul.w	r3, r1, r3
 8002898:	4413      	add	r3, r2
 800289a:	333f      	adds	r3, #63	; 0x3f
 800289c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d11d      	bne.n	80028de <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	212c      	movs	r1, #44	; 0x2c
 80028a8:	fb01 f303 	mul.w	r3, r1, r3
 80028ac:	4413      	add	r3, r2
 80028ae:	335c      	adds	r3, #92	; 0x5c
 80028b0:	2200      	movs	r2, #0
 80028b2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d110      	bne.n	80028de <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	212c      	movs	r1, #44	; 0x2c
 80028c2:	fb01 f303 	mul.w	r3, r1, r3
 80028c6:	4413      	add	r3, r2
 80028c8:	3361      	adds	r3, #97	; 0x61
 80028ca:	2203      	movs	r2, #3
 80028cc:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	b2d2      	uxtb	r2, r2
 80028d6:	4611      	mov	r1, r2
 80028d8:	4618      	mov	r0, r3
 80028da:	f003 f874 	bl	80059c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	015a      	lsls	r2, r3, #5
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	4413      	add	r3, r2
 80028e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ea:	461a      	mov	r2, r3
 80028ec:	2310      	movs	r3, #16
 80028ee:	6093      	str	r3, [r2, #8]
}
 80028f0:	bf00      	nop
 80028f2:	3718      	adds	r7, #24
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b088      	sub	sp, #32
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	460b      	mov	r3, r1
 8002902:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800290e:	78fb      	ldrb	r3, [r7, #3]
 8002910:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	015a      	lsls	r2, r3, #5
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	4413      	add	r3, r2
 800291a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f003 0304 	and.w	r3, r3, #4
 8002924:	2b04      	cmp	r3, #4
 8002926:	d11a      	bne.n	800295e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	015a      	lsls	r2, r3, #5
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	4413      	add	r3, r2
 8002930:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002934:	461a      	mov	r2, r3
 8002936:	2304      	movs	r3, #4
 8002938:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	212c      	movs	r1, #44	; 0x2c
 8002940:	fb01 f303 	mul.w	r3, r1, r3
 8002944:	4413      	add	r3, r2
 8002946:	3361      	adds	r3, #97	; 0x61
 8002948:	2206      	movs	r2, #6
 800294a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	697a      	ldr	r2, [r7, #20]
 8002952:	b2d2      	uxtb	r2, r2
 8002954:	4611      	mov	r1, r2
 8002956:	4618      	mov	r0, r3
 8002958:	f003 f835 	bl	80059c6 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 800295c:	e331      	b.n	8002fc2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	015a      	lsls	r2, r3, #5
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	4413      	add	r3, r2
 8002966:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f003 0320 	and.w	r3, r3, #32
 8002970:	2b20      	cmp	r3, #32
 8002972:	d12e      	bne.n	80029d2 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	015a      	lsls	r2, r3, #5
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	4413      	add	r3, r2
 800297c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002980:	461a      	mov	r2, r3
 8002982:	2320      	movs	r3, #32
 8002984:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	212c      	movs	r1, #44	; 0x2c
 800298c:	fb01 f303 	mul.w	r3, r1, r3
 8002990:	4413      	add	r3, r2
 8002992:	333d      	adds	r3, #61	; 0x3d
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	2b01      	cmp	r3, #1
 8002998:	f040 8313 	bne.w	8002fc2 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	212c      	movs	r1, #44	; 0x2c
 80029a2:	fb01 f303 	mul.w	r3, r1, r3
 80029a6:	4413      	add	r3, r2
 80029a8:	333d      	adds	r3, #61	; 0x3d
 80029aa:	2200      	movs	r2, #0
 80029ac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	212c      	movs	r1, #44	; 0x2c
 80029b4:	fb01 f303 	mul.w	r3, r1, r3
 80029b8:	4413      	add	r3, r2
 80029ba:	3360      	adds	r3, #96	; 0x60
 80029bc:	2202      	movs	r2, #2
 80029be:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	697a      	ldr	r2, [r7, #20]
 80029c6:	b2d2      	uxtb	r2, r2
 80029c8:	4611      	mov	r1, r2
 80029ca:	4618      	mov	r0, r3
 80029cc:	f002 fffb 	bl	80059c6 <USB_HC_Halt>
}
 80029d0:	e2f7      	b.n	8002fc2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	015a      	lsls	r2, r3, #5
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	4413      	add	r3, r2
 80029da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029e8:	d112      	bne.n	8002a10 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	015a      	lsls	r2, r3, #5
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	4413      	add	r3, r2
 80029f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f6:	461a      	mov	r2, r3
 80029f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029fc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	697a      	ldr	r2, [r7, #20]
 8002a04:	b2d2      	uxtb	r2, r2
 8002a06:	4611      	mov	r1, r2
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f002 ffdc 	bl	80059c6 <USB_HC_Halt>
}
 8002a0e:	e2d8      	b.n	8002fc2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	015a      	lsls	r2, r3, #5
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	4413      	add	r3, r2
 8002a18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d140      	bne.n	8002aa8 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	212c      	movs	r1, #44	; 0x2c
 8002a2c:	fb01 f303 	mul.w	r3, r1, r3
 8002a30:	4413      	add	r3, r2
 8002a32:	335c      	adds	r3, #92	; 0x5c
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	015a      	lsls	r2, r3, #5
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	4413      	add	r3, r2
 8002a40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a4a:	2b40      	cmp	r3, #64	; 0x40
 8002a4c:	d111      	bne.n	8002a72 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	212c      	movs	r1, #44	; 0x2c
 8002a54:	fb01 f303 	mul.w	r3, r1, r3
 8002a58:	4413      	add	r3, r2
 8002a5a:	333d      	adds	r3, #61	; 0x3d
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	015a      	lsls	r2, r3, #5
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	4413      	add	r3, r2
 8002a68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	2340      	movs	r3, #64	; 0x40
 8002a70:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	015a      	lsls	r2, r3, #5
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	4413      	add	r3, r2
 8002a7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a7e:	461a      	mov	r2, r3
 8002a80:	2301      	movs	r3, #1
 8002a82:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	212c      	movs	r1, #44	; 0x2c
 8002a8a:	fb01 f303 	mul.w	r3, r1, r3
 8002a8e:	4413      	add	r3, r2
 8002a90:	3361      	adds	r3, #97	; 0x61
 8002a92:	2201      	movs	r2, #1
 8002a94:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	697a      	ldr	r2, [r7, #20]
 8002a9c:	b2d2      	uxtb	r2, r2
 8002a9e:	4611      	mov	r1, r2
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f002 ff90 	bl	80059c6 <USB_HC_Halt>
}
 8002aa6:	e28c      	b.n	8002fc2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	015a      	lsls	r2, r3, #5
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	4413      	add	r3, r2
 8002ab0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aba:	2b40      	cmp	r3, #64	; 0x40
 8002abc:	d12c      	bne.n	8002b18 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	212c      	movs	r1, #44	; 0x2c
 8002ac4:	fb01 f303 	mul.w	r3, r1, r3
 8002ac8:	4413      	add	r3, r2
 8002aca:	3361      	adds	r3, #97	; 0x61
 8002acc:	2204      	movs	r2, #4
 8002ace:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	212c      	movs	r1, #44	; 0x2c
 8002ad6:	fb01 f303 	mul.w	r3, r1, r3
 8002ada:	4413      	add	r3, r2
 8002adc:	333d      	adds	r3, #61	; 0x3d
 8002ade:	2201      	movs	r2, #1
 8002ae0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	212c      	movs	r1, #44	; 0x2c
 8002ae8:	fb01 f303 	mul.w	r3, r1, r3
 8002aec:	4413      	add	r3, r2
 8002aee:	335c      	adds	r3, #92	; 0x5c
 8002af0:	2200      	movs	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	697a      	ldr	r2, [r7, #20]
 8002afa:	b2d2      	uxtb	r2, r2
 8002afc:	4611      	mov	r1, r2
 8002afe:	4618      	mov	r0, r3
 8002b00:	f002 ff61 	bl	80059c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	015a      	lsls	r2, r3, #5
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b10:	461a      	mov	r2, r3
 8002b12:	2340      	movs	r3, #64	; 0x40
 8002b14:	6093      	str	r3, [r2, #8]
}
 8002b16:	e254      	b.n	8002fc2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	015a      	lsls	r2, r3, #5
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	4413      	add	r3, r2
 8002b20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f003 0308 	and.w	r3, r3, #8
 8002b2a:	2b08      	cmp	r3, #8
 8002b2c:	d11a      	bne.n	8002b64 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	015a      	lsls	r2, r3, #5
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	4413      	add	r3, r2
 8002b36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	2308      	movs	r3, #8
 8002b3e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	212c      	movs	r1, #44	; 0x2c
 8002b46:	fb01 f303 	mul.w	r3, r1, r3
 8002b4a:	4413      	add	r3, r2
 8002b4c:	3361      	adds	r3, #97	; 0x61
 8002b4e:	2205      	movs	r2, #5
 8002b50:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	b2d2      	uxtb	r2, r2
 8002b5a:	4611      	mov	r1, r2
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f002 ff32 	bl	80059c6 <USB_HC_Halt>
}
 8002b62:	e22e      	b.n	8002fc2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	015a      	lsls	r2, r3, #5
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f003 0310 	and.w	r3, r3, #16
 8002b76:	2b10      	cmp	r3, #16
 8002b78:	d140      	bne.n	8002bfc <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	212c      	movs	r1, #44	; 0x2c
 8002b80:	fb01 f303 	mul.w	r3, r1, r3
 8002b84:	4413      	add	r3, r2
 8002b86:	335c      	adds	r3, #92	; 0x5c
 8002b88:	2200      	movs	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	212c      	movs	r1, #44	; 0x2c
 8002b92:	fb01 f303 	mul.w	r3, r1, r3
 8002b96:	4413      	add	r3, r2
 8002b98:	3361      	adds	r3, #97	; 0x61
 8002b9a:	2203      	movs	r2, #3
 8002b9c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	212c      	movs	r1, #44	; 0x2c
 8002ba4:	fb01 f303 	mul.w	r3, r1, r3
 8002ba8:	4413      	add	r3, r2
 8002baa:	333d      	adds	r3, #61	; 0x3d
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d112      	bne.n	8002bd8 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	212c      	movs	r1, #44	; 0x2c
 8002bb8:	fb01 f303 	mul.w	r3, r1, r3
 8002bbc:	4413      	add	r3, r2
 8002bbe:	333c      	adds	r3, #60	; 0x3c
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d108      	bne.n	8002bd8 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	212c      	movs	r1, #44	; 0x2c
 8002bcc:	fb01 f303 	mul.w	r3, r1, r3
 8002bd0:	4413      	add	r3, r2
 8002bd2:	333d      	adds	r3, #61	; 0x3d
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	697a      	ldr	r2, [r7, #20]
 8002bde:	b2d2      	uxtb	r2, r2
 8002be0:	4611      	mov	r1, r2
 8002be2:	4618      	mov	r0, r3
 8002be4:	f002 feef 	bl	80059c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	015a      	lsls	r2, r3, #5
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	4413      	add	r3, r2
 8002bf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	2310      	movs	r3, #16
 8002bf8:	6093      	str	r3, [r2, #8]
}
 8002bfa:	e1e2      	b.n	8002fc2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	015a      	lsls	r2, r3, #5
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	4413      	add	r3, r2
 8002c04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c0e:	2b80      	cmp	r3, #128	; 0x80
 8002c10:	d164      	bne.n	8002cdc <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d111      	bne.n	8002c3e <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	212c      	movs	r1, #44	; 0x2c
 8002c20:	fb01 f303 	mul.w	r3, r1, r3
 8002c24:	4413      	add	r3, r2
 8002c26:	3361      	adds	r3, #97	; 0x61
 8002c28:	2206      	movs	r2, #6
 8002c2a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	697a      	ldr	r2, [r7, #20]
 8002c32:	b2d2      	uxtb	r2, r2
 8002c34:	4611      	mov	r1, r2
 8002c36:	4618      	mov	r0, r3
 8002c38:	f002 fec5 	bl	80059c6 <USB_HC_Halt>
 8002c3c:	e044      	b.n	8002cc8 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	212c      	movs	r1, #44	; 0x2c
 8002c44:	fb01 f303 	mul.w	r3, r1, r3
 8002c48:	4413      	add	r3, r2
 8002c4a:	335c      	adds	r3, #92	; 0x5c
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	1c5a      	adds	r2, r3, #1
 8002c50:	6879      	ldr	r1, [r7, #4]
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	202c      	movs	r0, #44	; 0x2c
 8002c56:	fb00 f303 	mul.w	r3, r0, r3
 8002c5a:	440b      	add	r3, r1
 8002c5c:	335c      	adds	r3, #92	; 0x5c
 8002c5e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	212c      	movs	r1, #44	; 0x2c
 8002c66:	fb01 f303 	mul.w	r3, r1, r3
 8002c6a:	4413      	add	r3, r2
 8002c6c:	335c      	adds	r3, #92	; 0x5c
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d920      	bls.n	8002cb6 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	212c      	movs	r1, #44	; 0x2c
 8002c7a:	fb01 f303 	mul.w	r3, r1, r3
 8002c7e:	4413      	add	r3, r2
 8002c80:	335c      	adds	r3, #92	; 0x5c
 8002c82:	2200      	movs	r2, #0
 8002c84:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	212c      	movs	r1, #44	; 0x2c
 8002c8c:	fb01 f303 	mul.w	r3, r1, r3
 8002c90:	4413      	add	r3, r2
 8002c92:	3360      	adds	r3, #96	; 0x60
 8002c94:	2204      	movs	r2, #4
 8002c96:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	b2d9      	uxtb	r1, r3
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	202c      	movs	r0, #44	; 0x2c
 8002ca2:	fb00 f303 	mul.w	r3, r0, r3
 8002ca6:	4413      	add	r3, r2
 8002ca8:	3360      	adds	r3, #96	; 0x60
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	461a      	mov	r2, r3
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f005 f93c 	bl	8007f2c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002cb4:	e008      	b.n	8002cc8 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	212c      	movs	r1, #44	; 0x2c
 8002cbc:	fb01 f303 	mul.w	r3, r1, r3
 8002cc0:	4413      	add	r3, r2
 8002cc2:	3360      	adds	r3, #96	; 0x60
 8002cc4:	2202      	movs	r2, #2
 8002cc6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	015a      	lsls	r2, r3, #5
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	4413      	add	r3, r2
 8002cd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	2380      	movs	r3, #128	; 0x80
 8002cd8:	6093      	str	r3, [r2, #8]
}
 8002cda:	e172      	b.n	8002fc2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	015a      	lsls	r2, r3, #5
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cf2:	d11b      	bne.n	8002d2c <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	212c      	movs	r1, #44	; 0x2c
 8002cfa:	fb01 f303 	mul.w	r3, r1, r3
 8002cfe:	4413      	add	r3, r2
 8002d00:	3361      	adds	r3, #97	; 0x61
 8002d02:	2208      	movs	r2, #8
 8002d04:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	697a      	ldr	r2, [r7, #20]
 8002d0c:	b2d2      	uxtb	r2, r2
 8002d0e:	4611      	mov	r1, r2
 8002d10:	4618      	mov	r0, r3
 8002d12:	f002 fe58 	bl	80059c6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	015a      	lsls	r2, r3, #5
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d22:	461a      	mov	r2, r3
 8002d24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d28:	6093      	str	r3, [r2, #8]
}
 8002d2a:	e14a      	b.n	8002fc2 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	015a      	lsls	r2, r3, #5
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	4413      	add	r3, r2
 8002d34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	f040 813f 	bne.w	8002fc2 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	212c      	movs	r1, #44	; 0x2c
 8002d4a:	fb01 f303 	mul.w	r3, r1, r3
 8002d4e:	4413      	add	r3, r2
 8002d50:	3361      	adds	r3, #97	; 0x61
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d17d      	bne.n	8002e54 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	212c      	movs	r1, #44	; 0x2c
 8002d5e:	fb01 f303 	mul.w	r3, r1, r3
 8002d62:	4413      	add	r3, r2
 8002d64:	3360      	adds	r3, #96	; 0x60
 8002d66:	2201      	movs	r2, #1
 8002d68:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	212c      	movs	r1, #44	; 0x2c
 8002d70:	fb01 f303 	mul.w	r3, r1, r3
 8002d74:	4413      	add	r3, r2
 8002d76:	333f      	adds	r3, #63	; 0x3f
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d00a      	beq.n	8002d94 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	212c      	movs	r1, #44	; 0x2c
 8002d84:	fb01 f303 	mul.w	r3, r1, r3
 8002d88:	4413      	add	r3, r2
 8002d8a:	333f      	adds	r3, #63	; 0x3f
 8002d8c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002d8e:	2b03      	cmp	r3, #3
 8002d90:	f040 8100 	bne.w	8002f94 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d113      	bne.n	8002dc4 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	212c      	movs	r1, #44	; 0x2c
 8002da2:	fb01 f303 	mul.w	r3, r1, r3
 8002da6:	4413      	add	r3, r2
 8002da8:	3355      	adds	r3, #85	; 0x55
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	f083 0301 	eor.w	r3, r3, #1
 8002db0:	b2d8      	uxtb	r0, r3
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	212c      	movs	r1, #44	; 0x2c
 8002db8:	fb01 f303 	mul.w	r3, r1, r3
 8002dbc:	4413      	add	r3, r2
 8002dbe:	3355      	adds	r3, #85	; 0x55
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	691b      	ldr	r3, [r3, #16]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	f040 80e3 	bne.w	8002f94 <HCD_HC_OUT_IRQHandler+0x69c>
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	212c      	movs	r1, #44	; 0x2c
 8002dd4:	fb01 f303 	mul.w	r3, r1, r3
 8002dd8:	4413      	add	r3, r2
 8002dda:	334c      	adds	r3, #76	; 0x4c
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f000 80d8 	beq.w	8002f94 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	212c      	movs	r1, #44	; 0x2c
 8002dea:	fb01 f303 	mul.w	r3, r1, r3
 8002dee:	4413      	add	r3, r2
 8002df0:	334c      	adds	r3, #76	; 0x4c
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	6879      	ldr	r1, [r7, #4]
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	202c      	movs	r0, #44	; 0x2c
 8002dfa:	fb00 f202 	mul.w	r2, r0, r2
 8002dfe:	440a      	add	r2, r1
 8002e00:	3240      	adds	r2, #64	; 0x40
 8002e02:	8812      	ldrh	r2, [r2, #0]
 8002e04:	4413      	add	r3, r2
 8002e06:	3b01      	subs	r3, #1
 8002e08:	6879      	ldr	r1, [r7, #4]
 8002e0a:	697a      	ldr	r2, [r7, #20]
 8002e0c:	202c      	movs	r0, #44	; 0x2c
 8002e0e:	fb00 f202 	mul.w	r2, r0, r2
 8002e12:	440a      	add	r2, r1
 8002e14:	3240      	adds	r2, #64	; 0x40
 8002e16:	8812      	ldrh	r2, [r2, #0]
 8002e18:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e1c:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f003 0301 	and.w	r3, r3, #1
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f000 80b5 	beq.w	8002f94 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	212c      	movs	r1, #44	; 0x2c
 8002e30:	fb01 f303 	mul.w	r3, r1, r3
 8002e34:	4413      	add	r3, r2
 8002e36:	3355      	adds	r3, #85	; 0x55
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	f083 0301 	eor.w	r3, r3, #1
 8002e3e:	b2d8      	uxtb	r0, r3
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	212c      	movs	r1, #44	; 0x2c
 8002e46:	fb01 f303 	mul.w	r3, r1, r3
 8002e4a:	4413      	add	r3, r2
 8002e4c:	3355      	adds	r3, #85	; 0x55
 8002e4e:	4602      	mov	r2, r0
 8002e50:	701a      	strb	r2, [r3, #0]
 8002e52:	e09f      	b.n	8002f94 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	212c      	movs	r1, #44	; 0x2c
 8002e5a:	fb01 f303 	mul.w	r3, r1, r3
 8002e5e:	4413      	add	r3, r2
 8002e60:	3361      	adds	r3, #97	; 0x61
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	2b03      	cmp	r3, #3
 8002e66:	d109      	bne.n	8002e7c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	212c      	movs	r1, #44	; 0x2c
 8002e6e:	fb01 f303 	mul.w	r3, r1, r3
 8002e72:	4413      	add	r3, r2
 8002e74:	3360      	adds	r3, #96	; 0x60
 8002e76:	2202      	movs	r2, #2
 8002e78:	701a      	strb	r2, [r3, #0]
 8002e7a:	e08b      	b.n	8002f94 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	212c      	movs	r1, #44	; 0x2c
 8002e82:	fb01 f303 	mul.w	r3, r1, r3
 8002e86:	4413      	add	r3, r2
 8002e88:	3361      	adds	r3, #97	; 0x61
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	2b04      	cmp	r3, #4
 8002e8e:	d109      	bne.n	8002ea4 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	212c      	movs	r1, #44	; 0x2c
 8002e96:	fb01 f303 	mul.w	r3, r1, r3
 8002e9a:	4413      	add	r3, r2
 8002e9c:	3360      	adds	r3, #96	; 0x60
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	701a      	strb	r2, [r3, #0]
 8002ea2:	e077      	b.n	8002f94 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	212c      	movs	r1, #44	; 0x2c
 8002eaa:	fb01 f303 	mul.w	r3, r1, r3
 8002eae:	4413      	add	r3, r2
 8002eb0:	3361      	adds	r3, #97	; 0x61
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	2b05      	cmp	r3, #5
 8002eb6:	d109      	bne.n	8002ecc <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	212c      	movs	r1, #44	; 0x2c
 8002ebe:	fb01 f303 	mul.w	r3, r1, r3
 8002ec2:	4413      	add	r3, r2
 8002ec4:	3360      	adds	r3, #96	; 0x60
 8002ec6:	2205      	movs	r2, #5
 8002ec8:	701a      	strb	r2, [r3, #0]
 8002eca:	e063      	b.n	8002f94 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	212c      	movs	r1, #44	; 0x2c
 8002ed2:	fb01 f303 	mul.w	r3, r1, r3
 8002ed6:	4413      	add	r3, r2
 8002ed8:	3361      	adds	r3, #97	; 0x61
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	2b06      	cmp	r3, #6
 8002ede:	d009      	beq.n	8002ef4 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	212c      	movs	r1, #44	; 0x2c
 8002ee6:	fb01 f303 	mul.w	r3, r1, r3
 8002eea:	4413      	add	r3, r2
 8002eec:	3361      	adds	r3, #97	; 0x61
 8002eee:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ef0:	2b08      	cmp	r3, #8
 8002ef2:	d14f      	bne.n	8002f94 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	212c      	movs	r1, #44	; 0x2c
 8002efa:	fb01 f303 	mul.w	r3, r1, r3
 8002efe:	4413      	add	r3, r2
 8002f00:	335c      	adds	r3, #92	; 0x5c
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	1c5a      	adds	r2, r3, #1
 8002f06:	6879      	ldr	r1, [r7, #4]
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	202c      	movs	r0, #44	; 0x2c
 8002f0c:	fb00 f303 	mul.w	r3, r0, r3
 8002f10:	440b      	add	r3, r1
 8002f12:	335c      	adds	r3, #92	; 0x5c
 8002f14:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	212c      	movs	r1, #44	; 0x2c
 8002f1c:	fb01 f303 	mul.w	r3, r1, r3
 8002f20:	4413      	add	r3, r2
 8002f22:	335c      	adds	r3, #92	; 0x5c
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d912      	bls.n	8002f50 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	212c      	movs	r1, #44	; 0x2c
 8002f30:	fb01 f303 	mul.w	r3, r1, r3
 8002f34:	4413      	add	r3, r2
 8002f36:	335c      	adds	r3, #92	; 0x5c
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	212c      	movs	r1, #44	; 0x2c
 8002f42:	fb01 f303 	mul.w	r3, r1, r3
 8002f46:	4413      	add	r3, r2
 8002f48:	3360      	adds	r3, #96	; 0x60
 8002f4a:	2204      	movs	r2, #4
 8002f4c:	701a      	strb	r2, [r3, #0]
 8002f4e:	e021      	b.n	8002f94 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	212c      	movs	r1, #44	; 0x2c
 8002f56:	fb01 f303 	mul.w	r3, r1, r3
 8002f5a:	4413      	add	r3, r2
 8002f5c:	3360      	adds	r3, #96	; 0x60
 8002f5e:	2202      	movs	r2, #2
 8002f60:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	015a      	lsls	r2, r3, #5
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	4413      	add	r3, r2
 8002f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f78:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f80:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	015a      	lsls	r2, r3, #5
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	4413      	add	r3, r2
 8002f8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f8e:	461a      	mov	r2, r3
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	015a      	lsls	r2, r3, #5
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	b2d9      	uxtb	r1, r3
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	202c      	movs	r0, #44	; 0x2c
 8002fb0:	fb00 f303 	mul.w	r3, r0, r3
 8002fb4:	4413      	add	r3, r2
 8002fb6:	3360      	adds	r3, #96	; 0x60
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	461a      	mov	r2, r3
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f004 ffb5 	bl	8007f2c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002fc2:	bf00      	nop
 8002fc4:	3720      	adds	r7, #32
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b08a      	sub	sp, #40	; 0x28
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fda:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
 8002fe2:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	f003 030f 	and.w	r3, r3, #15
 8002fea:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	0c5b      	lsrs	r3, r3, #17
 8002ff0:	f003 030f 	and.w	r3, r3, #15
 8002ff4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	091b      	lsrs	r3, r3, #4
 8002ffa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ffe:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	2b02      	cmp	r3, #2
 8003004:	d004      	beq.n	8003010 <HCD_RXQLVL_IRQHandler+0x46>
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	2b05      	cmp	r3, #5
 800300a:	f000 80a9 	beq.w	8003160 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800300e:	e0aa      	b.n	8003166 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	2b00      	cmp	r3, #0
 8003014:	f000 80a6 	beq.w	8003164 <HCD_RXQLVL_IRQHandler+0x19a>
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	212c      	movs	r1, #44	; 0x2c
 800301e:	fb01 f303 	mul.w	r3, r1, r3
 8003022:	4413      	add	r3, r2
 8003024:	3344      	adds	r3, #68	; 0x44
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	f000 809b 	beq.w	8003164 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	212c      	movs	r1, #44	; 0x2c
 8003034:	fb01 f303 	mul.w	r3, r1, r3
 8003038:	4413      	add	r3, r2
 800303a:	3350      	adds	r3, #80	; 0x50
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	441a      	add	r2, r3
 8003042:	6879      	ldr	r1, [r7, #4]
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	202c      	movs	r0, #44	; 0x2c
 8003048:	fb00 f303 	mul.w	r3, r0, r3
 800304c:	440b      	add	r3, r1
 800304e:	334c      	adds	r3, #76	; 0x4c
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	429a      	cmp	r2, r3
 8003054:	d87a      	bhi.n	800314c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6818      	ldr	r0, [r3, #0]
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	212c      	movs	r1, #44	; 0x2c
 8003060:	fb01 f303 	mul.w	r3, r1, r3
 8003064:	4413      	add	r3, r2
 8003066:	3344      	adds	r3, #68	; 0x44
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	693a      	ldr	r2, [r7, #16]
 800306c:	b292      	uxth	r2, r2
 800306e:	4619      	mov	r1, r3
 8003070:	f002 f800 	bl	8005074 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	212c      	movs	r1, #44	; 0x2c
 800307a:	fb01 f303 	mul.w	r3, r1, r3
 800307e:	4413      	add	r3, r2
 8003080:	3344      	adds	r3, #68	; 0x44
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	441a      	add	r2, r3
 8003088:	6879      	ldr	r1, [r7, #4]
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	202c      	movs	r0, #44	; 0x2c
 800308e:	fb00 f303 	mul.w	r3, r0, r3
 8003092:	440b      	add	r3, r1
 8003094:	3344      	adds	r3, #68	; 0x44
 8003096:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	212c      	movs	r1, #44	; 0x2c
 800309e:	fb01 f303 	mul.w	r3, r1, r3
 80030a2:	4413      	add	r3, r2
 80030a4:	3350      	adds	r3, #80	; 0x50
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	441a      	add	r2, r3
 80030ac:	6879      	ldr	r1, [r7, #4]
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	202c      	movs	r0, #44	; 0x2c
 80030b2:	fb00 f303 	mul.w	r3, r0, r3
 80030b6:	440b      	add	r3, r1
 80030b8:	3350      	adds	r3, #80	; 0x50
 80030ba:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	015a      	lsls	r2, r3, #5
 80030c0:	6a3b      	ldr	r3, [r7, #32]
 80030c2:	4413      	add	r3, r2
 80030c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	0cdb      	lsrs	r3, r3, #19
 80030cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030d0:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	212c      	movs	r1, #44	; 0x2c
 80030d8:	fb01 f303 	mul.w	r3, r1, r3
 80030dc:	4413      	add	r3, r2
 80030de:	3340      	adds	r3, #64	; 0x40
 80030e0:	881b      	ldrh	r3, [r3, #0]
 80030e2:	461a      	mov	r2, r3
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d13c      	bne.n	8003164 <HCD_RXQLVL_IRQHandler+0x19a>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d039      	beq.n	8003164 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	015a      	lsls	r2, r3, #5
 80030f4:	6a3b      	ldr	r3, [r7, #32]
 80030f6:	4413      	add	r3, r2
 80030f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003106:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800310e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	015a      	lsls	r2, r3, #5
 8003114:	6a3b      	ldr	r3, [r7, #32]
 8003116:	4413      	add	r3, r2
 8003118:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800311c:	461a      	mov	r2, r3
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	212c      	movs	r1, #44	; 0x2c
 8003128:	fb01 f303 	mul.w	r3, r1, r3
 800312c:	4413      	add	r3, r2
 800312e:	3354      	adds	r3, #84	; 0x54
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	f083 0301 	eor.w	r3, r3, #1
 8003136:	b2d8      	uxtb	r0, r3
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	212c      	movs	r1, #44	; 0x2c
 800313e:	fb01 f303 	mul.w	r3, r1, r3
 8003142:	4413      	add	r3, r2
 8003144:	3354      	adds	r3, #84	; 0x54
 8003146:	4602      	mov	r2, r0
 8003148:	701a      	strb	r2, [r3, #0]
      break;
 800314a:	e00b      	b.n	8003164 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	212c      	movs	r1, #44	; 0x2c
 8003152:	fb01 f303 	mul.w	r3, r1, r3
 8003156:	4413      	add	r3, r2
 8003158:	3360      	adds	r3, #96	; 0x60
 800315a:	2204      	movs	r2, #4
 800315c:	701a      	strb	r2, [r3, #0]
      break;
 800315e:	e001      	b.n	8003164 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003160:	bf00      	nop
 8003162:	e000      	b.n	8003166 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003164:	bf00      	nop
  }
}
 8003166:	bf00      	nop
 8003168:	3728      	adds	r7, #40	; 0x28
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}

0800316e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800316e:	b580      	push	{r7, lr}
 8003170:	b086      	sub	sp, #24
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800319a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d10b      	bne.n	80031be <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f003 0301 	and.w	r3, r3, #1
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d102      	bne.n	80031b6 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f004 fe9f 	bl	8007ef4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	f043 0302 	orr.w	r3, r3, #2
 80031bc:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f003 0308 	and.w	r3, r3, #8
 80031c4:	2b08      	cmp	r3, #8
 80031c6:	d132      	bne.n	800322e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	f043 0308 	orr.w	r3, r3, #8
 80031ce:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f003 0304 	and.w	r3, r3, #4
 80031d6:	2b04      	cmp	r3, #4
 80031d8:	d126      	bne.n	8003228 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d113      	bne.n	800320a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80031e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80031ec:	d106      	bne.n	80031fc <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2102      	movs	r1, #2
 80031f4:	4618      	mov	r0, r3
 80031f6:	f002 f8ab 	bl	8005350 <USB_InitFSLSPClkSel>
 80031fa:	e011      	b.n	8003220 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2101      	movs	r1, #1
 8003202:	4618      	mov	r0, r3
 8003204:	f002 f8a4 	bl	8005350 <USB_InitFSLSPClkSel>
 8003208:	e00a      	b.n	8003220 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d106      	bne.n	8003220 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003218:	461a      	mov	r2, r3
 800321a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800321e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f004 fe91 	bl	8007f48 <HAL_HCD_PortEnabled_Callback>
 8003226:	e002      	b.n	800322e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f004 fe9b 	bl	8007f64 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f003 0320 	and.w	r3, r3, #32
 8003234:	2b20      	cmp	r3, #32
 8003236:	d103      	bne.n	8003240 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	f043 0320 	orr.w	r3, r3, #32
 800323e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003246:	461a      	mov	r2, r3
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	6013      	str	r3, [r2, #0]
}
 800324c:	bf00      	nop
 800324e:	3718      	adds	r7, #24
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e12b      	b.n	80034be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800326c:	b2db      	uxtb	r3, r3
 800326e:	2b00      	cmp	r3, #0
 8003270:	d106      	bne.n	8003280 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f7fd faf2 	bl	8000864 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2224      	movs	r2, #36	; 0x24
 8003284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f022 0201 	bic.w	r2, r2, #1
 8003296:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032b8:	f000 fdbc 	bl	8003e34 <HAL_RCC_GetPCLK1Freq>
 80032bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	4a81      	ldr	r2, [pc, #516]	; (80034c8 <HAL_I2C_Init+0x274>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d807      	bhi.n	80032d8 <HAL_I2C_Init+0x84>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	4a80      	ldr	r2, [pc, #512]	; (80034cc <HAL_I2C_Init+0x278>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	bf94      	ite	ls
 80032d0:	2301      	movls	r3, #1
 80032d2:	2300      	movhi	r3, #0
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	e006      	b.n	80032e6 <HAL_I2C_Init+0x92>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	4a7d      	ldr	r2, [pc, #500]	; (80034d0 <HAL_I2C_Init+0x27c>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	bf94      	ite	ls
 80032e0:	2301      	movls	r3, #1
 80032e2:	2300      	movhi	r3, #0
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e0e7      	b.n	80034be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	4a78      	ldr	r2, [pc, #480]	; (80034d4 <HAL_I2C_Init+0x280>)
 80032f2:	fba2 2303 	umull	r2, r3, r2, r3
 80032f6:	0c9b      	lsrs	r3, r3, #18
 80032f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68ba      	ldr	r2, [r7, #8]
 800330a:	430a      	orrs	r2, r1
 800330c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	6a1b      	ldr	r3, [r3, #32]
 8003314:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	4a6a      	ldr	r2, [pc, #424]	; (80034c8 <HAL_I2C_Init+0x274>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d802      	bhi.n	8003328 <HAL_I2C_Init+0xd4>
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	3301      	adds	r3, #1
 8003326:	e009      	b.n	800333c <HAL_I2C_Init+0xe8>
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800332e:	fb02 f303 	mul.w	r3, r2, r3
 8003332:	4a69      	ldr	r2, [pc, #420]	; (80034d8 <HAL_I2C_Init+0x284>)
 8003334:	fba2 2303 	umull	r2, r3, r2, r3
 8003338:	099b      	lsrs	r3, r3, #6
 800333a:	3301      	adds	r3, #1
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	6812      	ldr	r2, [r2, #0]
 8003340:	430b      	orrs	r3, r1
 8003342:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	69db      	ldr	r3, [r3, #28]
 800334a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800334e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	495c      	ldr	r1, [pc, #368]	; (80034c8 <HAL_I2C_Init+0x274>)
 8003358:	428b      	cmp	r3, r1
 800335a:	d819      	bhi.n	8003390 <HAL_I2C_Init+0x13c>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	1e59      	subs	r1, r3, #1
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	fbb1 f3f3 	udiv	r3, r1, r3
 800336a:	1c59      	adds	r1, r3, #1
 800336c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003370:	400b      	ands	r3, r1
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00a      	beq.n	800338c <HAL_I2C_Init+0x138>
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	1e59      	subs	r1, r3, #1
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	005b      	lsls	r3, r3, #1
 8003380:	fbb1 f3f3 	udiv	r3, r1, r3
 8003384:	3301      	adds	r3, #1
 8003386:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800338a:	e051      	b.n	8003430 <HAL_I2C_Init+0x1dc>
 800338c:	2304      	movs	r3, #4
 800338e:	e04f      	b.n	8003430 <HAL_I2C_Init+0x1dc>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d111      	bne.n	80033bc <HAL_I2C_Init+0x168>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	1e58      	subs	r0, r3, #1
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6859      	ldr	r1, [r3, #4]
 80033a0:	460b      	mov	r3, r1
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	440b      	add	r3, r1
 80033a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80033aa:	3301      	adds	r3, #1
 80033ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	bf0c      	ite	eq
 80033b4:	2301      	moveq	r3, #1
 80033b6:	2300      	movne	r3, #0
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	e012      	b.n	80033e2 <HAL_I2C_Init+0x18e>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	1e58      	subs	r0, r3, #1
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6859      	ldr	r1, [r3, #4]
 80033c4:	460b      	mov	r3, r1
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	440b      	add	r3, r1
 80033ca:	0099      	lsls	r1, r3, #2
 80033cc:	440b      	add	r3, r1
 80033ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80033d2:	3301      	adds	r3, #1
 80033d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033d8:	2b00      	cmp	r3, #0
 80033da:	bf0c      	ite	eq
 80033dc:	2301      	moveq	r3, #1
 80033de:	2300      	movne	r3, #0
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <HAL_I2C_Init+0x196>
 80033e6:	2301      	movs	r3, #1
 80033e8:	e022      	b.n	8003430 <HAL_I2C_Init+0x1dc>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d10e      	bne.n	8003410 <HAL_I2C_Init+0x1bc>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	1e58      	subs	r0, r3, #1
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6859      	ldr	r1, [r3, #4]
 80033fa:	460b      	mov	r3, r1
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	440b      	add	r3, r1
 8003400:	fbb0 f3f3 	udiv	r3, r0, r3
 8003404:	3301      	adds	r3, #1
 8003406:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800340a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800340e:	e00f      	b.n	8003430 <HAL_I2C_Init+0x1dc>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	1e58      	subs	r0, r3, #1
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6859      	ldr	r1, [r3, #4]
 8003418:	460b      	mov	r3, r1
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	440b      	add	r3, r1
 800341e:	0099      	lsls	r1, r3, #2
 8003420:	440b      	add	r3, r1
 8003422:	fbb0 f3f3 	udiv	r3, r0, r3
 8003426:	3301      	adds	r3, #1
 8003428:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800342c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003430:	6879      	ldr	r1, [r7, #4]
 8003432:	6809      	ldr	r1, [r1, #0]
 8003434:	4313      	orrs	r3, r2
 8003436:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	69da      	ldr	r2, [r3, #28]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	431a      	orrs	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	430a      	orrs	r2, r1
 8003452:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800345e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	6911      	ldr	r1, [r2, #16]
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	68d2      	ldr	r2, [r2, #12]
 800346a:	4311      	orrs	r1, r2
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	6812      	ldr	r2, [r2, #0]
 8003470:	430b      	orrs	r3, r1
 8003472:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	695a      	ldr	r2, [r3, #20]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	431a      	orrs	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	430a      	orrs	r2, r1
 800348e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f042 0201 	orr.w	r2, r2, #1
 800349e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2220      	movs	r2, #32
 80034aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	000186a0 	.word	0x000186a0
 80034cc:	001e847f 	.word	0x001e847f
 80034d0:	003d08ff 	.word	0x003d08ff
 80034d4:	431bde83 	.word	0x431bde83
 80034d8:	10624dd3 	.word	0x10624dd3

080034dc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b088      	sub	sp, #32
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d101      	bne.n	80034ee <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e128      	b.n	8003740 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d109      	bne.n	800350e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a90      	ldr	r2, [pc, #576]	; (8003748 <HAL_I2S_Init+0x26c>)
 8003506:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f7fd fa37 	bl	800097c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2202      	movs	r2, #2
 8003512:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	69db      	ldr	r3, [r3, #28]
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	6812      	ldr	r2, [r2, #0]
 8003520:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003524:	f023 030f 	bic.w	r3, r3, #15
 8003528:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2202      	movs	r2, #2
 8003530:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	2b02      	cmp	r3, #2
 8003538:	d060      	beq.n	80035fc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d102      	bne.n	8003548 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003542:	2310      	movs	r3, #16
 8003544:	617b      	str	r3, [r7, #20]
 8003546:	e001      	b.n	800354c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003548:	2320      	movs	r3, #32
 800354a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	2b20      	cmp	r3, #32
 8003552:	d802      	bhi.n	800355a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	005b      	lsls	r3, r3, #1
 8003558:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800355a:	2001      	movs	r0, #1
 800355c:	f000 fc7e 	bl	8003e5c <HAL_RCCEx_GetPeriphCLKFreq>
 8003560:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800356a:	d125      	bne.n	80035b8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d010      	beq.n	8003596 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	fbb2 f2f3 	udiv	r2, r2, r3
 800357e:	4613      	mov	r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	4413      	add	r3, r2
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	461a      	mov	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	695b      	ldr	r3, [r3, #20]
 800358c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003590:	3305      	adds	r3, #5
 8003592:	613b      	str	r3, [r7, #16]
 8003594:	e01f      	b.n	80035d6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	00db      	lsls	r3, r3, #3
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	fbb2 f2f3 	udiv	r2, r2, r3
 80035a0:	4613      	mov	r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	4413      	add	r3, r2
 80035a6:	005b      	lsls	r3, r3, #1
 80035a8:	461a      	mov	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	695b      	ldr	r3, [r3, #20]
 80035ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b2:	3305      	adds	r3, #5
 80035b4:	613b      	str	r3, [r7, #16]
 80035b6:	e00e      	b.n	80035d6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80035b8:	68fa      	ldr	r2, [r7, #12]
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80035c0:	4613      	mov	r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	4413      	add	r3, r2
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	461a      	mov	r2, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d2:	3305      	adds	r3, #5
 80035d4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	4a5c      	ldr	r2, [pc, #368]	; (800374c <HAL_I2S_Init+0x270>)
 80035da:	fba2 2303 	umull	r2, r3, r2, r3
 80035de:	08db      	lsrs	r3, r3, #3
 80035e0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	f003 0301 	and.w	r3, r3, #1
 80035e8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80035ea:	693a      	ldr	r2, [r7, #16]
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	085b      	lsrs	r3, r3, #1
 80035f2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	021b      	lsls	r3, r3, #8
 80035f8:	61bb      	str	r3, [r7, #24]
 80035fa:	e003      	b.n	8003604 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80035fc:	2302      	movs	r3, #2
 80035fe:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003600:	2300      	movs	r3, #0
 8003602:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	2b01      	cmp	r3, #1
 8003608:	d902      	bls.n	8003610 <HAL_I2S_Init+0x134>
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	2bff      	cmp	r3, #255	; 0xff
 800360e:	d907      	bls.n	8003620 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003614:	f043 0210 	orr.w	r2, r3, #16
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e08f      	b.n	8003740 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	691a      	ldr	r2, [r3, #16]
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	ea42 0103 	orr.w	r1, r2, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	69fa      	ldr	r2, [r7, #28]
 8003630:	430a      	orrs	r2, r1
 8003632:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	69db      	ldr	r3, [r3, #28]
 800363a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800363e:	f023 030f 	bic.w	r3, r3, #15
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	6851      	ldr	r1, [r2, #4]
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	6892      	ldr	r2, [r2, #8]
 800364a:	4311      	orrs	r1, r2
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	68d2      	ldr	r2, [r2, #12]
 8003650:	4311      	orrs	r1, r2
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	6992      	ldr	r2, [r2, #24]
 8003656:	430a      	orrs	r2, r1
 8003658:	431a      	orrs	r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003662:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a1b      	ldr	r3, [r3, #32]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d161      	bne.n	8003730 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a38      	ldr	r2, [pc, #224]	; (8003750 <HAL_I2S_Init+0x274>)
 8003670:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a37      	ldr	r2, [pc, #220]	; (8003754 <HAL_I2S_Init+0x278>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d101      	bne.n	8003680 <HAL_I2S_Init+0x1a4>
 800367c:	4b36      	ldr	r3, [pc, #216]	; (8003758 <HAL_I2S_Init+0x27c>)
 800367e:	e001      	b.n	8003684 <HAL_I2S_Init+0x1a8>
 8003680:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003684:	69db      	ldr	r3, [r3, #28]
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	6812      	ldr	r2, [r2, #0]
 800368a:	4932      	ldr	r1, [pc, #200]	; (8003754 <HAL_I2S_Init+0x278>)
 800368c:	428a      	cmp	r2, r1
 800368e:	d101      	bne.n	8003694 <HAL_I2S_Init+0x1b8>
 8003690:	4a31      	ldr	r2, [pc, #196]	; (8003758 <HAL_I2S_Init+0x27c>)
 8003692:	e001      	b.n	8003698 <HAL_I2S_Init+0x1bc>
 8003694:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003698:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800369c:	f023 030f 	bic.w	r3, r3, #15
 80036a0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a2b      	ldr	r2, [pc, #172]	; (8003754 <HAL_I2S_Init+0x278>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d101      	bne.n	80036b0 <HAL_I2S_Init+0x1d4>
 80036ac:	4b2a      	ldr	r3, [pc, #168]	; (8003758 <HAL_I2S_Init+0x27c>)
 80036ae:	e001      	b.n	80036b4 <HAL_I2S_Init+0x1d8>
 80036b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036b4:	2202      	movs	r2, #2
 80036b6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a25      	ldr	r2, [pc, #148]	; (8003754 <HAL_I2S_Init+0x278>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d101      	bne.n	80036c6 <HAL_I2S_Init+0x1ea>
 80036c2:	4b25      	ldr	r3, [pc, #148]	; (8003758 <HAL_I2S_Init+0x27c>)
 80036c4:	e001      	b.n	80036ca <HAL_I2S_Init+0x1ee>
 80036c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036ca:	69db      	ldr	r3, [r3, #28]
 80036cc:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036d6:	d003      	beq.n	80036e0 <HAL_I2S_Init+0x204>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d103      	bne.n	80036e8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80036e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036e4:	613b      	str	r3, [r7, #16]
 80036e6:	e001      	b.n	80036ec <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80036e8:	2300      	movs	r3, #0
 80036ea:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80036f6:	4313      	orrs	r3, r2
 80036f8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003700:	4313      	orrs	r3, r2
 8003702:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800370a:	4313      	orrs	r3, r2
 800370c:	b29a      	uxth	r2, r3
 800370e:	897b      	ldrh	r3, [r7, #10]
 8003710:	4313      	orrs	r3, r2
 8003712:	b29b      	uxth	r3, r3
 8003714:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003718:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a0d      	ldr	r2, [pc, #52]	; (8003754 <HAL_I2S_Init+0x278>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d101      	bne.n	8003728 <HAL_I2S_Init+0x24c>
 8003724:	4b0c      	ldr	r3, [pc, #48]	; (8003758 <HAL_I2S_Init+0x27c>)
 8003726:	e001      	b.n	800372c <HAL_I2S_Init+0x250>
 8003728:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800372c:	897a      	ldrh	r2, [r7, #10]
 800372e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	3720      	adds	r7, #32
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	08003853 	.word	0x08003853
 800374c:	cccccccd 	.word	0xcccccccd
 8003750:	08003969 	.word	0x08003969
 8003754:	40003800 	.word	0x40003800
 8003758:	40003400 	.word	0x40003400

0800375c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003764:	bf00      	nop
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003778:	bf00      	nop
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a4:	881a      	ldrh	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b0:	1c9a      	adds	r2, r3, #2
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	3b01      	subs	r3, #1
 80037be:	b29a      	uxth	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10e      	bne.n	80037ec <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	685a      	ldr	r2, [r3, #4]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037dc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f7ff ffb8 	bl	800375c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80037ec:	bf00      	nop
 80037ee:	3708      	adds	r7, #8
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68da      	ldr	r2, [r3, #12]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003806:	b292      	uxth	r2, r2
 8003808:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380e:	1c9a      	adds	r2, r3, #2
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003818:	b29b      	uxth	r3, r3
 800381a:	3b01      	subs	r3, #1
 800381c:	b29a      	uxth	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003826:	b29b      	uxth	r3, r3
 8003828:	2b00      	cmp	r3, #0
 800382a:	d10e      	bne.n	800384a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	685a      	ldr	r2, [r3, #4]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800383a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f7ff ff93 	bl	8003770 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800384a:	bf00      	nop
 800384c:	3708      	adds	r7, #8
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003852:	b580      	push	{r7, lr}
 8003854:	b086      	sub	sp, #24
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b04      	cmp	r3, #4
 800386c:	d13a      	bne.n	80038e4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	f003 0301 	and.w	r3, r3, #1
 8003874:	2b01      	cmp	r3, #1
 8003876:	d109      	bne.n	800388c <I2S_IRQHandler+0x3a>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003882:	2b40      	cmp	r3, #64	; 0x40
 8003884:	d102      	bne.n	800388c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f7ff ffb4 	bl	80037f4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003892:	2b40      	cmp	r3, #64	; 0x40
 8003894:	d126      	bne.n	80038e4 <I2S_IRQHandler+0x92>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f003 0320 	and.w	r3, r3, #32
 80038a0:	2b20      	cmp	r3, #32
 80038a2:	d11f      	bne.n	80038e4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	685a      	ldr	r2, [r3, #4]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038b2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80038b4:	2300      	movs	r3, #0
 80038b6:	613b      	str	r3, [r7, #16]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	613b      	str	r3, [r7, #16]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	613b      	str	r3, [r7, #16]
 80038c8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d6:	f043 0202 	orr.w	r2, r3, #2
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f7ff ff50 	bl	8003784 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	2b03      	cmp	r3, #3
 80038ee:	d136      	bne.n	800395e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d109      	bne.n	800390e <I2S_IRQHandler+0xbc>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003904:	2b80      	cmp	r3, #128	; 0x80
 8003906:	d102      	bne.n	800390e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f7ff ff45 	bl	8003798 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	f003 0308 	and.w	r3, r3, #8
 8003914:	2b08      	cmp	r3, #8
 8003916:	d122      	bne.n	800395e <I2S_IRQHandler+0x10c>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f003 0320 	and.w	r3, r3, #32
 8003922:	2b20      	cmp	r3, #32
 8003924:	d11b      	bne.n	800395e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	685a      	ldr	r2, [r3, #4]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003934:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003936:	2300      	movs	r3, #0
 8003938:	60fb      	str	r3, [r7, #12]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	60fb      	str	r3, [r7, #12]
 8003942:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003950:	f043 0204 	orr.w	r2, r3, #4
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f7ff ff13 	bl	8003784 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800395e:	bf00      	nop
 8003960:	3718      	adds	r7, #24
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
	...

08003968 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b088      	sub	sp, #32
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a92      	ldr	r2, [pc, #584]	; (8003bc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d101      	bne.n	8003986 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003982:	4b92      	ldr	r3, [pc, #584]	; (8003bcc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003984:	e001      	b.n	800398a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003986:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a8b      	ldr	r2, [pc, #556]	; (8003bc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d101      	bne.n	80039a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80039a0:	4b8a      	ldr	r3, [pc, #552]	; (8003bcc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80039a2:	e001      	b.n	80039a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80039a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039b4:	d004      	beq.n	80039c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	f040 8099 	bne.w	8003af2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d107      	bne.n	80039da <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d002      	beq.n	80039da <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f000 f925 	bl	8003c24 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	f003 0301 	and.w	r3, r3, #1
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d107      	bne.n	80039f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d002      	beq.n	80039f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 f9c8 	bl	8003d84 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039fa:	2b40      	cmp	r3, #64	; 0x40
 80039fc:	d13a      	bne.n	8003a74 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	f003 0320 	and.w	r3, r3, #32
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d035      	beq.n	8003a74 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a6e      	ldr	r2, [pc, #440]	; (8003bc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d101      	bne.n	8003a16 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003a12:	4b6e      	ldr	r3, [pc, #440]	; (8003bcc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a14:	e001      	b.n	8003a1a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003a16:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a1a:	685a      	ldr	r2, [r3, #4]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4969      	ldr	r1, [pc, #420]	; (8003bc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a22:	428b      	cmp	r3, r1
 8003a24:	d101      	bne.n	8003a2a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003a26:	4b69      	ldr	r3, [pc, #420]	; (8003bcc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a28:	e001      	b.n	8003a2e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003a2a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a2e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a32:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	685a      	ldr	r2, [r3, #4]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a42:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003a44:	2300      	movs	r3, #0
 8003a46:	60fb      	str	r3, [r7, #12]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	60fb      	str	r3, [r7, #12]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	60fb      	str	r3, [r7, #12]
 8003a58:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a66:	f043 0202 	orr.w	r2, r3, #2
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f7ff fe88 	bl	8003784 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	f003 0308 	and.w	r3, r3, #8
 8003a7a:	2b08      	cmp	r3, #8
 8003a7c:	f040 80c3 	bne.w	8003c06 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	f003 0320 	and.w	r3, r3, #32
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f000 80bd 	beq.w	8003c06 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	685a      	ldr	r2, [r3, #4]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a9a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a49      	ldr	r2, [pc, #292]	; (8003bc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d101      	bne.n	8003aaa <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003aa6:	4b49      	ldr	r3, [pc, #292]	; (8003bcc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003aa8:	e001      	b.n	8003aae <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003aaa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003aae:	685a      	ldr	r2, [r3, #4]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4944      	ldr	r1, [pc, #272]	; (8003bc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ab6:	428b      	cmp	r3, r1
 8003ab8:	d101      	bne.n	8003abe <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003aba:	4b44      	ldr	r3, [pc, #272]	; (8003bcc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003abc:	e001      	b.n	8003ac2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003abe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ac2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ac6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003ac8:	2300      	movs	r3, #0
 8003aca:	60bb      	str	r3, [r7, #8]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	60bb      	str	r3, [r7, #8]
 8003ad4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae2:	f043 0204 	orr.w	r2, r3, #4
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f7ff fe4a 	bl	8003784 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003af0:	e089      	b.n	8003c06 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d107      	bne.n	8003b0c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d002      	beq.n	8003b0c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f8be 	bl	8003c88 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d107      	bne.n	8003b26 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d002      	beq.n	8003b26 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f000 f8fd 	bl	8003d20 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b2c:	2b40      	cmp	r3, #64	; 0x40
 8003b2e:	d12f      	bne.n	8003b90 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	f003 0320 	and.w	r3, r3, #32
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d02a      	beq.n	8003b90 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	685a      	ldr	r2, [r3, #4]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b48:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a1e      	ldr	r2, [pc, #120]	; (8003bc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d101      	bne.n	8003b58 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003b54:	4b1d      	ldr	r3, [pc, #116]	; (8003bcc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b56:	e001      	b.n	8003b5c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003b58:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b5c:	685a      	ldr	r2, [r3, #4]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4919      	ldr	r1, [pc, #100]	; (8003bc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b64:	428b      	cmp	r3, r1
 8003b66:	d101      	bne.n	8003b6c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003b68:	4b18      	ldr	r3, [pc, #96]	; (8003bcc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b6a:	e001      	b.n	8003b70 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003b6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b70:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b74:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b82:	f043 0202 	orr.w	r2, r3, #2
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f7ff fdfa 	bl	8003784 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	f003 0308 	and.w	r3, r3, #8
 8003b96:	2b08      	cmp	r3, #8
 8003b98:	d136      	bne.n	8003c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	f003 0320 	and.w	r3, r3, #32
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d031      	beq.n	8003c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a07      	ldr	r2, [pc, #28]	; (8003bc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d101      	bne.n	8003bb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003bae:	4b07      	ldr	r3, [pc, #28]	; (8003bcc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003bb0:	e001      	b.n	8003bb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003bb2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bb6:	685a      	ldr	r2, [r3, #4]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4902      	ldr	r1, [pc, #8]	; (8003bc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003bbe:	428b      	cmp	r3, r1
 8003bc0:	d106      	bne.n	8003bd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003bc2:	4b02      	ldr	r3, [pc, #8]	; (8003bcc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003bc4:	e006      	b.n	8003bd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003bc6:	bf00      	nop
 8003bc8:	40003800 	.word	0x40003800
 8003bcc:	40003400 	.word	0x40003400
 8003bd0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bd4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003bd8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	685a      	ldr	r2, [r3, #4]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003be8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2201      	movs	r2, #1
 8003bee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf6:	f043 0204 	orr.w	r2, r3, #4
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f7ff fdc0 	bl	8003784 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c04:	e000      	b.n	8003c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003c06:	bf00      	nop
}
 8003c08:	bf00      	nop
 8003c0a:	3720      	adds	r7, #32
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003c18:	bf00      	nop
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c30:	1c99      	adds	r1, r3, #2
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	6251      	str	r1, [r2, #36]	; 0x24
 8003c36:	881a      	ldrh	r2, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	3b01      	subs	r3, #1
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d113      	bne.n	8003c7e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	685a      	ldr	r2, [r3, #4]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c64:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d106      	bne.n	8003c7e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f7ff ffc9 	bl	8003c10 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c7e:	bf00      	nop
 8003c80:	3708      	adds	r7, #8
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
	...

08003c88 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c94:	1c99      	adds	r1, r3, #2
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	6251      	str	r1, [r2, #36]	; 0x24
 8003c9a:	8819      	ldrh	r1, [r3, #0]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a1d      	ldr	r2, [pc, #116]	; (8003d18 <I2SEx_TxISR_I2SExt+0x90>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d101      	bne.n	8003caa <I2SEx_TxISR_I2SExt+0x22>
 8003ca6:	4b1d      	ldr	r3, [pc, #116]	; (8003d1c <I2SEx_TxISR_I2SExt+0x94>)
 8003ca8:	e001      	b.n	8003cae <I2SEx_TxISR_I2SExt+0x26>
 8003caa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cae:	460a      	mov	r2, r1
 8003cb0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	3b01      	subs	r3, #1
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d121      	bne.n	8003d0e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a12      	ldr	r2, [pc, #72]	; (8003d18 <I2SEx_TxISR_I2SExt+0x90>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d101      	bne.n	8003cd8 <I2SEx_TxISR_I2SExt+0x50>
 8003cd4:	4b11      	ldr	r3, [pc, #68]	; (8003d1c <I2SEx_TxISR_I2SExt+0x94>)
 8003cd6:	e001      	b.n	8003cdc <I2SEx_TxISR_I2SExt+0x54>
 8003cd8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cdc:	685a      	ldr	r2, [r3, #4]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	490d      	ldr	r1, [pc, #52]	; (8003d18 <I2SEx_TxISR_I2SExt+0x90>)
 8003ce4:	428b      	cmp	r3, r1
 8003ce6:	d101      	bne.n	8003cec <I2SEx_TxISR_I2SExt+0x64>
 8003ce8:	4b0c      	ldr	r3, [pc, #48]	; (8003d1c <I2SEx_TxISR_I2SExt+0x94>)
 8003cea:	e001      	b.n	8003cf0 <I2SEx_TxISR_I2SExt+0x68>
 8003cec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cf0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003cf4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d106      	bne.n	8003d0e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f7ff ff81 	bl	8003c10 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d0e:	bf00      	nop
 8003d10:	3708      	adds	r7, #8
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	40003800 	.word	0x40003800
 8003d1c:	40003400 	.word	0x40003400

08003d20 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68d8      	ldr	r0, [r3, #12]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d32:	1c99      	adds	r1, r3, #2
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003d38:	b282      	uxth	r2, r0
 8003d3a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	3b01      	subs	r3, #1
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d113      	bne.n	8003d7c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	685a      	ldr	r2, [r3, #4]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d62:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d106      	bne.n	8003d7c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f7ff ff4a 	bl	8003c10 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d7c:	bf00      	nop
 8003d7e:	3708      	adds	r7, #8
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a20      	ldr	r2, [pc, #128]	; (8003e14 <I2SEx_RxISR_I2SExt+0x90>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d101      	bne.n	8003d9a <I2SEx_RxISR_I2SExt+0x16>
 8003d96:	4b20      	ldr	r3, [pc, #128]	; (8003e18 <I2SEx_RxISR_I2SExt+0x94>)
 8003d98:	e001      	b.n	8003d9e <I2SEx_RxISR_I2SExt+0x1a>
 8003d9a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d9e:	68d8      	ldr	r0, [r3, #12]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da4:	1c99      	adds	r1, r3, #2
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003daa:	b282      	uxth	r2, r0
 8003dac:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	3b01      	subs	r3, #1
 8003db6:	b29a      	uxth	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d121      	bne.n	8003e0a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a12      	ldr	r2, [pc, #72]	; (8003e14 <I2SEx_RxISR_I2SExt+0x90>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d101      	bne.n	8003dd4 <I2SEx_RxISR_I2SExt+0x50>
 8003dd0:	4b11      	ldr	r3, [pc, #68]	; (8003e18 <I2SEx_RxISR_I2SExt+0x94>)
 8003dd2:	e001      	b.n	8003dd8 <I2SEx_RxISR_I2SExt+0x54>
 8003dd4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dd8:	685a      	ldr	r2, [r3, #4]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	490d      	ldr	r1, [pc, #52]	; (8003e14 <I2SEx_RxISR_I2SExt+0x90>)
 8003de0:	428b      	cmp	r3, r1
 8003de2:	d101      	bne.n	8003de8 <I2SEx_RxISR_I2SExt+0x64>
 8003de4:	4b0c      	ldr	r3, [pc, #48]	; (8003e18 <I2SEx_RxISR_I2SExt+0x94>)
 8003de6:	e001      	b.n	8003dec <I2SEx_RxISR_I2SExt+0x68>
 8003de8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003df0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d106      	bne.n	8003e0a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f7ff ff03 	bl	8003c10 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e0a:	bf00      	nop
 8003e0c:	3708      	adds	r7, #8
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	40003800 	.word	0x40003800
 8003e18:	40003400 	.word	0x40003400

08003e1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e20:	4b03      	ldr	r3, [pc, #12]	; (8003e30 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e22:	681b      	ldr	r3, [r3, #0]
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	20000000 	.word	0x20000000

08003e34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e38:	f7ff fff0 	bl	8003e1c <HAL_RCC_GetHCLKFreq>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	4b05      	ldr	r3, [pc, #20]	; (8003e54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	0a9b      	lsrs	r3, r3, #10
 8003e44:	f003 0307 	and.w	r3, r3, #7
 8003e48:	4903      	ldr	r1, [pc, #12]	; (8003e58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e4a:	5ccb      	ldrb	r3, [r1, r3]
 8003e4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	40023800 	.word	0x40023800
 8003e58:	08008614 	.word	0x08008614

08003e5c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b087      	sub	sp, #28
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003e64:	2300      	movs	r3, #0
 8003e66:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003e70:	2300      	movs	r3, #0
 8003e72:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d13e      	bne.n	8003ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003e7a:	4b23      	ldr	r3, [pc, #140]	; (8003f08 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e82:	60fb      	str	r3, [r7, #12]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d005      	beq.n	8003e96 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d12f      	bne.n	8003ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003e90:	4b1e      	ldr	r3, [pc, #120]	; (8003f0c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003e92:	617b      	str	r3, [r7, #20]
          break;
 8003e94:	e02f      	b.n	8003ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003e96:	4b1c      	ldr	r3, [pc, #112]	; (8003f08 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ea2:	d108      	bne.n	8003eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003ea4:	4b18      	ldr	r3, [pc, #96]	; (8003f08 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003eac:	4a18      	ldr	r2, [pc, #96]	; (8003f10 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb2:	613b      	str	r3, [r7, #16]
 8003eb4:	e007      	b.n	8003ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003eb6:	4b14      	ldr	r3, [pc, #80]	; (8003f08 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ebe:	4a15      	ldr	r2, [pc, #84]	; (8003f14 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec4:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003ec6:	4b10      	ldr	r3, [pc, #64]	; (8003f08 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003ec8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ecc:	099b      	lsrs	r3, r3, #6
 8003ece:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	fb02 f303 	mul.w	r3, r2, r3
 8003ed8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003eda:	4b0b      	ldr	r3, [pc, #44]	; (8003f08 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003edc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ee0:	0f1b      	lsrs	r3, r3, #28
 8003ee2:	f003 0307 	and.w	r3, r3, #7
 8003ee6:	68ba      	ldr	r2, [r7, #8]
 8003ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eec:	617b      	str	r3, [r7, #20]
          break;
 8003eee:	e002      	b.n	8003ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	617b      	str	r3, [r7, #20]
          break;
 8003ef4:	bf00      	nop
        }
      }
      break;
 8003ef6:	bf00      	nop
    }
  }
  return frequency;
 8003ef8:	697b      	ldr	r3, [r7, #20]
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	371c      	adds	r7, #28
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	40023800 	.word	0x40023800
 8003f0c:	00bb8000 	.word	0x00bb8000
 8003f10:	007a1200 	.word	0x007a1200
 8003f14:	00f42400 	.word	0x00f42400

08003f18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d101      	bne.n	8003f2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e07b      	b.n	8004022 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d108      	bne.n	8003f44 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f3a:	d009      	beq.n	8003f50 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	61da      	str	r2, [r3, #28]
 8003f42:	e005      	b.n	8003f50 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d106      	bne.n	8003f70 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f7fc ffac 	bl	8000ec8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2202      	movs	r2, #2
 8003f74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f86:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f98:	431a      	orrs	r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fa2:	431a      	orrs	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	431a      	orrs	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fc0:	431a      	orrs	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	69db      	ldr	r3, [r3, #28]
 8003fc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fca:	431a      	orrs	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a1b      	ldr	r3, [r3, #32]
 8003fd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd4:	ea42 0103 	orr.w	r1, r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fdc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	699b      	ldr	r3, [r3, #24]
 8003fec:	0c1b      	lsrs	r3, r3, #16
 8003fee:	f003 0104 	and.w	r1, r3, #4
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff6:	f003 0210 	and.w	r2, r3, #16
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	430a      	orrs	r2, r1
 8004000:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	69da      	ldr	r2, [r3, #28]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004010:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3708      	adds	r7, #8
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
	...

0800402c <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8004034:	4b05      	ldr	r3, [pc, #20]	; (800404c <LL_EXTI_EnableIT_0_31+0x20>)
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	4904      	ldr	r1, [pc, #16]	; (800404c <LL_EXTI_EnableIT_0_31+0x20>)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4313      	orrs	r3, r2
 800403e:	600b      	str	r3, [r1, #0]
}
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr
 800404c:	40013c00 	.word	0x40013c00

08004050 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8004058:	4b06      	ldr	r3, [pc, #24]	; (8004074 <LL_EXTI_DisableIT_0_31+0x24>)
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	43db      	mvns	r3, r3
 8004060:	4904      	ldr	r1, [pc, #16]	; (8004074 <LL_EXTI_DisableIT_0_31+0x24>)
 8004062:	4013      	ands	r3, r2
 8004064:	600b      	str	r3, [r1, #0]
}
 8004066:	bf00      	nop
 8004068:	370c      	adds	r7, #12
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	40013c00 	.word	0x40013c00

08004078 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8004080:	4b05      	ldr	r3, [pc, #20]	; (8004098 <LL_EXTI_EnableEvent_0_31+0x20>)
 8004082:	685a      	ldr	r2, [r3, #4]
 8004084:	4904      	ldr	r1, [pc, #16]	; (8004098 <LL_EXTI_EnableEvent_0_31+0x20>)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4313      	orrs	r3, r2
 800408a:	604b      	str	r3, [r1, #4]

}
 800408c:	bf00      	nop
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr
 8004098:	40013c00 	.word	0x40013c00

0800409c <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80040a4:	4b06      	ldr	r3, [pc, #24]	; (80040c0 <LL_EXTI_DisableEvent_0_31+0x24>)
 80040a6:	685a      	ldr	r2, [r3, #4]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	43db      	mvns	r3, r3
 80040ac:	4904      	ldr	r1, [pc, #16]	; (80040c0 <LL_EXTI_DisableEvent_0_31+0x24>)
 80040ae:	4013      	ands	r3, r2
 80040b0:	604b      	str	r3, [r1, #4]
}
 80040b2:	bf00      	nop
 80040b4:	370c      	adds	r7, #12
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	40013c00 	.word	0x40013c00

080040c4 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 80040cc:	4b05      	ldr	r3, [pc, #20]	; (80040e4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80040ce:	689a      	ldr	r2, [r3, #8]
 80040d0:	4904      	ldr	r1, [pc, #16]	; (80040e4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	608b      	str	r3, [r1, #8]

}
 80040d8:	bf00      	nop
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr
 80040e4:	40013c00 	.word	0x40013c00

080040e8 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80040f0:	4b06      	ldr	r3, [pc, #24]	; (800410c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80040f2:	689a      	ldr	r2, [r3, #8]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	43db      	mvns	r3, r3
 80040f8:	4904      	ldr	r1, [pc, #16]	; (800410c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80040fa:	4013      	ands	r3, r2
 80040fc:	608b      	str	r3, [r1, #8]

}
 80040fe:	bf00      	nop
 8004100:	370c      	adds	r7, #12
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	40013c00 	.word	0x40013c00

08004110 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8004118:	4b05      	ldr	r3, [pc, #20]	; (8004130 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800411a:	68da      	ldr	r2, [r3, #12]
 800411c:	4904      	ldr	r1, [pc, #16]	; (8004130 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4313      	orrs	r3, r2
 8004122:	60cb      	str	r3, [r1, #12]
}
 8004124:	bf00      	nop
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr
 8004130:	40013c00 	.word	0x40013c00

08004134 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 800413c:	4b06      	ldr	r3, [pc, #24]	; (8004158 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800413e:	68da      	ldr	r2, [r3, #12]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	43db      	mvns	r3, r3
 8004144:	4904      	ldr	r1, [pc, #16]	; (8004158 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8004146:	4013      	ands	r3, r2
 8004148:	60cb      	str	r3, [r1, #12]
}
 800414a:	bf00      	nop
 800414c:	370c      	adds	r7, #12
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	40013c00 	.word	0x40013c00

0800415c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8004164:	2300      	movs	r3, #0
 8004166:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	791b      	ldrb	r3, [r3, #4]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d065      	beq.n	800423c <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d06c      	beq.n	8004252 <LL_EXTI_Init+0xf6>
    {
      switch (EXTI_InitStruct->Mode)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	795b      	ldrb	r3, [r3, #5]
 800417c:	2b02      	cmp	r3, #2
 800417e:	d01c      	beq.n	80041ba <LL_EXTI_Init+0x5e>
 8004180:	2b02      	cmp	r3, #2
 8004182:	dc25      	bgt.n	80041d0 <LL_EXTI_Init+0x74>
 8004184:	2b00      	cmp	r3, #0
 8004186:	d002      	beq.n	800418e <LL_EXTI_Init+0x32>
 8004188:	2b01      	cmp	r3, #1
 800418a:	d00b      	beq.n	80041a4 <LL_EXTI_Init+0x48>
 800418c:	e020      	b.n	80041d0 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4618      	mov	r0, r3
 8004194:	f7ff ff82 	bl	800409c <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4618      	mov	r0, r3
 800419e:	f7ff ff45 	bl	800402c <LL_EXTI_EnableIT_0_31>
          break;
 80041a2:	e018      	b.n	80041d6 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4618      	mov	r0, r3
 80041aa:	f7ff ff51 	bl	8004050 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7ff ff60 	bl	8004078 <LL_EXTI_EnableEvent_0_31>
          break;
 80041b8:	e00d      	b.n	80041d6 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4618      	mov	r0, r3
 80041c0:	f7ff ff34 	bl	800402c <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4618      	mov	r0, r3
 80041ca:	f7ff ff55 	bl	8004078 <LL_EXTI_EnableEvent_0_31>
          break;
 80041ce:	e002      	b.n	80041d6 <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	73fb      	strb	r3, [r7, #15]
          break;
 80041d4:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	799b      	ldrb	r3, [r3, #6]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d039      	beq.n	8004252 <LL_EXTI_Init+0xf6>
      {
        switch (EXTI_InitStruct->Trigger)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	799b      	ldrb	r3, [r3, #6]
 80041e2:	2b03      	cmp	r3, #3
 80041e4:	d01c      	beq.n	8004220 <LL_EXTI_Init+0xc4>
 80041e6:	2b03      	cmp	r3, #3
 80041e8:	dc25      	bgt.n	8004236 <LL_EXTI_Init+0xda>
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d002      	beq.n	80041f4 <LL_EXTI_Init+0x98>
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d00b      	beq.n	800420a <LL_EXTI_Init+0xae>
 80041f2:	e020      	b.n	8004236 <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4618      	mov	r0, r3
 80041fa:	f7ff ff9b 	bl	8004134 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4618      	mov	r0, r3
 8004204:	f7ff ff5e 	bl	80040c4 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8004208:	e024      	b.n	8004254 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4618      	mov	r0, r3
 8004210:	f7ff ff6a 	bl	80040e8 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4618      	mov	r0, r3
 800421a:	f7ff ff79 	bl	8004110 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800421e:	e019      	b.n	8004254 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4618      	mov	r0, r3
 8004226:	f7ff ff4d 	bl	80040c4 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4618      	mov	r0, r3
 8004230:	f7ff ff6e 	bl	8004110 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8004234:	e00e      	b.n	8004254 <LL_EXTI_Init+0xf8>
          default:
            status = ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	73fb      	strb	r3, [r7, #15]
            break;
 800423a:	e00b      	b.n	8004254 <LL_EXTI_Init+0xf8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4618      	mov	r0, r3
 8004242:	f7ff ff05 	bl	8004050 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4618      	mov	r0, r3
 800424c:	f7ff ff26 	bl	800409c <LL_EXTI_DisableEvent_0_31>
 8004250:	e000      	b.n	8004254 <LL_EXTI_Init+0xf8>
      }
 8004252:	bf00      	nop
  }
  return status;
 8004254:	7bfb      	ldrb	r3, [r7, #15]
}
 8004256:	4618      	mov	r0, r3
 8004258:	3710      	adds	r7, #16
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}

0800425e <LL_GPIO_SetPinMode>:
{
 800425e:	b480      	push	{r7}
 8004260:	b089      	sub	sp, #36	; 0x24
 8004262:	af00      	add	r7, sp, #0
 8004264:	60f8      	str	r0, [r7, #12]
 8004266:	60b9      	str	r1, [r7, #8]
 8004268:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	fa93 f3a3 	rbit	r3, r3
 8004278:	613b      	str	r3, [r7, #16]
  return result;
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	fab3 f383 	clz	r3, r3
 8004280:	b2db      	uxtb	r3, r3
 8004282:	005b      	lsls	r3, r3, #1
 8004284:	2103      	movs	r1, #3
 8004286:	fa01 f303 	lsl.w	r3, r1, r3
 800428a:	43db      	mvns	r3, r3
 800428c:	401a      	ands	r2, r3
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	fa93 f3a3 	rbit	r3, r3
 8004298:	61bb      	str	r3, [r7, #24]
  return result;
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	fab3 f383 	clz	r3, r3
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	005b      	lsls	r3, r3, #1
 80042a4:	6879      	ldr	r1, [r7, #4]
 80042a6:	fa01 f303 	lsl.w	r3, r1, r3
 80042aa:	431a      	orrs	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	601a      	str	r2, [r3, #0]
}
 80042b0:	bf00      	nop
 80042b2:	3724      	adds	r7, #36	; 0x24
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <LL_GPIO_SetPinOutputType>:
{
 80042bc:	b480      	push	{r7}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	685a      	ldr	r2, [r3, #4]
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	43db      	mvns	r3, r3
 80042d0:	401a      	ands	r2, r3
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	6879      	ldr	r1, [r7, #4]
 80042d6:	fb01 f303 	mul.w	r3, r1, r3
 80042da:	431a      	orrs	r2, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	605a      	str	r2, [r3, #4]
}
 80042e0:	bf00      	nop
 80042e2:	3714      	adds	r7, #20
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <LL_GPIO_SetPinSpeed>:
{
 80042ec:	b480      	push	{r7}
 80042ee:	b089      	sub	sp, #36	; 0x24
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	689a      	ldr	r2, [r3, #8]
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	fa93 f3a3 	rbit	r3, r3
 8004306:	613b      	str	r3, [r7, #16]
  return result;
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	fab3 f383 	clz	r3, r3
 800430e:	b2db      	uxtb	r3, r3
 8004310:	005b      	lsls	r3, r3, #1
 8004312:	2103      	movs	r1, #3
 8004314:	fa01 f303 	lsl.w	r3, r1, r3
 8004318:	43db      	mvns	r3, r3
 800431a:	401a      	ands	r2, r3
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	fa93 f3a3 	rbit	r3, r3
 8004326:	61bb      	str	r3, [r7, #24]
  return result;
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	fab3 f383 	clz	r3, r3
 800432e:	b2db      	uxtb	r3, r3
 8004330:	005b      	lsls	r3, r3, #1
 8004332:	6879      	ldr	r1, [r7, #4]
 8004334:	fa01 f303 	lsl.w	r3, r1, r3
 8004338:	431a      	orrs	r2, r3
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	609a      	str	r2, [r3, #8]
}
 800433e:	bf00      	nop
 8004340:	3724      	adds	r7, #36	; 0x24
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr

0800434a <LL_GPIO_SetPinPull>:
{
 800434a:	b480      	push	{r7}
 800434c:	b089      	sub	sp, #36	; 0x24
 800434e:	af00      	add	r7, sp, #0
 8004350:	60f8      	str	r0, [r7, #12]
 8004352:	60b9      	str	r1, [r7, #8]
 8004354:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	68da      	ldr	r2, [r3, #12]
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	fa93 f3a3 	rbit	r3, r3
 8004364:	613b      	str	r3, [r7, #16]
  return result;
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	fab3 f383 	clz	r3, r3
 800436c:	b2db      	uxtb	r3, r3
 800436e:	005b      	lsls	r3, r3, #1
 8004370:	2103      	movs	r1, #3
 8004372:	fa01 f303 	lsl.w	r3, r1, r3
 8004376:	43db      	mvns	r3, r3
 8004378:	401a      	ands	r2, r3
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	fa93 f3a3 	rbit	r3, r3
 8004384:	61bb      	str	r3, [r7, #24]
  return result;
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	fab3 f383 	clz	r3, r3
 800438c:	b2db      	uxtb	r3, r3
 800438e:	005b      	lsls	r3, r3, #1
 8004390:	6879      	ldr	r1, [r7, #4]
 8004392:	fa01 f303 	lsl.w	r3, r1, r3
 8004396:	431a      	orrs	r2, r3
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	60da      	str	r2, [r3, #12]
}
 800439c:	bf00      	nop
 800439e:	3724      	adds	r7, #36	; 0x24
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <LL_GPIO_SetAFPin_0_7>:
{
 80043a8:	b480      	push	{r7}
 80043aa:	b089      	sub	sp, #36	; 0x24
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6a1a      	ldr	r2, [r3, #32]
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	fa93 f3a3 	rbit	r3, r3
 80043c2:	613b      	str	r3, [r7, #16]
  return result;
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	fab3 f383 	clz	r3, r3
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	210f      	movs	r1, #15
 80043d0:	fa01 f303 	lsl.w	r3, r1, r3
 80043d4:	43db      	mvns	r3, r3
 80043d6:	401a      	ands	r2, r3
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	fa93 f3a3 	rbit	r3, r3
 80043e2:	61bb      	str	r3, [r7, #24]
  return result;
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	fab3 f383 	clz	r3, r3
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	6879      	ldr	r1, [r7, #4]
 80043f0:	fa01 f303 	lsl.w	r3, r1, r3
 80043f4:	431a      	orrs	r2, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	621a      	str	r2, [r3, #32]
}
 80043fa:	bf00      	nop
 80043fc:	3724      	adds	r7, #36	; 0x24
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr

08004406 <LL_GPIO_SetAFPin_8_15>:
{
 8004406:	b480      	push	{r7}
 8004408:	b089      	sub	sp, #36	; 0x24
 800440a:	af00      	add	r7, sp, #0
 800440c:	60f8      	str	r0, [r7, #12]
 800440e:	60b9      	str	r1, [r7, #8]
 8004410:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	0a1b      	lsrs	r3, r3, #8
 800441a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	fa93 f3a3 	rbit	r3, r3
 8004422:	613b      	str	r3, [r7, #16]
  return result;
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	fab3 f383 	clz	r3, r3
 800442a:	b2db      	uxtb	r3, r3
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	210f      	movs	r1, #15
 8004430:	fa01 f303 	lsl.w	r3, r1, r3
 8004434:	43db      	mvns	r3, r3
 8004436:	401a      	ands	r2, r3
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	0a1b      	lsrs	r3, r3, #8
 800443c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	fa93 f3a3 	rbit	r3, r3
 8004444:	61bb      	str	r3, [r7, #24]
  return result;
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	fab3 f383 	clz	r3, r3
 800444c:	b2db      	uxtb	r3, r3
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	6879      	ldr	r1, [r7, #4]
 8004452:	fa01 f303 	lsl.w	r3, r1, r3
 8004456:	431a      	orrs	r2, r3
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800445c:	bf00      	nop
 800445e:	3724      	adds	r7, #36	; 0x24
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b088      	sub	sp, #32
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8004472:	2300      	movs	r3, #0
 8004474:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8004476:	2300      	movs	r3, #0
 8004478:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	fa93 f3a3 	rbit	r3, r3
 8004486:	613b      	str	r3, [r7, #16]
  return result;
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	fab3 f383 	clz	r3, r3
 800448e:	b2db      	uxtb	r3, r3
 8004490:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004492:	e050      	b.n	8004536 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	2101      	movs	r1, #1
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	fa01 f303 	lsl.w	r3, r1, r3
 80044a0:	4013      	ands	r3, r2
 80044a2:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d042      	beq.n	8004530 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d003      	beq.n	80044ba <LL_GPIO_Init+0x52>
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d10d      	bne.n	80044d6 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	461a      	mov	r2, r3
 80044c0:	69b9      	ldr	r1, [r7, #24]
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f7ff ff12 	bl	80042ec <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	461a      	mov	r2, r3
 80044ce:	69b9      	ldr	r1, [r7, #24]
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f7ff fef3 	bl	80042bc <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	461a      	mov	r2, r3
 80044dc:	69b9      	ldr	r1, [r7, #24]
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f7ff ff33 	bl	800434a <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d11a      	bne.n	8004522 <LL_GPIO_Init+0xba>
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	fa93 f3a3 	rbit	r3, r3
 80044f6:	60bb      	str	r3, [r7, #8]
  return result;
 80044f8:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80044fa:	fab3 f383 	clz	r3, r3
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	2b07      	cmp	r3, #7
 8004502:	d807      	bhi.n	8004514 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	695b      	ldr	r3, [r3, #20]
 8004508:	461a      	mov	r2, r3
 800450a:	69b9      	ldr	r1, [r7, #24]
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f7ff ff4b 	bl	80043a8 <LL_GPIO_SetAFPin_0_7>
 8004512:	e006      	b.n	8004522 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	695b      	ldr	r3, [r3, #20]
 8004518:	461a      	mov	r2, r3
 800451a:	69b9      	ldr	r1, [r7, #24]
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f7ff ff72 	bl	8004406 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	461a      	mov	r2, r3
 8004528:	69b9      	ldr	r1, [r7, #24]
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f7ff fe97 	bl	800425e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	3301      	adds	r3, #1
 8004534:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	fa22 f303 	lsr.w	r3, r2, r3
 8004540:	2b00      	cmp	r3, #0
 8004542:	d1a7      	bne.n	8004494 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3720      	adds	r7, #32
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
	...

08004550 <LL_RCC_GetSysClkSource>:
{
 8004550:	b480      	push	{r7}
 8004552:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004554:	4b04      	ldr	r3, [pc, #16]	; (8004568 <LL_RCC_GetSysClkSource+0x18>)
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f003 030c 	and.w	r3, r3, #12
}
 800455c:	4618      	mov	r0, r3
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	40023800 	.word	0x40023800

0800456c <LL_RCC_GetAHBPrescaler>:
{
 800456c:	b480      	push	{r7}
 800456e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004570:	4b04      	ldr	r3, [pc, #16]	; (8004584 <LL_RCC_GetAHBPrescaler+0x18>)
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004578:	4618      	mov	r0, r3
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	40023800 	.word	0x40023800

08004588 <LL_RCC_GetAPB1Prescaler>:
{
 8004588:	b480      	push	{r7}
 800458a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800458c:	4b04      	ldr	r3, [pc, #16]	; (80045a0 <LL_RCC_GetAPB1Prescaler+0x18>)
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8004594:	4618      	mov	r0, r3
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	40023800 	.word	0x40023800

080045a4 <LL_RCC_GetAPB2Prescaler>:
{
 80045a4:	b480      	push	{r7}
 80045a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80045a8:	4b04      	ldr	r3, [pc, #16]	; (80045bc <LL_RCC_GetAPB2Prescaler+0x18>)
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	40023800 	.word	0x40023800

080045c0 <LL_RCC_PLL_GetMainSource>:
{
 80045c0:	b480      	push	{r7}
 80045c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80045c4:	4b04      	ldr	r3, [pc, #16]	; (80045d8 <LL_RCC_PLL_GetMainSource+0x18>)
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	40023800 	.word	0x40023800

080045dc <LL_RCC_PLL_GetN>:
{
 80045dc:	b480      	push	{r7}
 80045de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80045e0:	4b04      	ldr	r3, [pc, #16]	; (80045f4 <LL_RCC_PLL_GetN+0x18>)
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	099b      	lsrs	r3, r3, #6
 80045e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr
 80045f4:	40023800 	.word	0x40023800

080045f8 <LL_RCC_PLL_GetP>:
{
 80045f8:	b480      	push	{r7}
 80045fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80045fc:	4b04      	ldr	r3, [pc, #16]	; (8004610 <LL_RCC_PLL_GetP+0x18>)
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8004604:	4618      	mov	r0, r3
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	40023800 	.word	0x40023800

08004614 <LL_RCC_PLL_GetDivider>:
{
 8004614:	b480      	push	{r7}
 8004616:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004618:	4b04      	ldr	r3, [pc, #16]	; (800462c <LL_RCC_PLL_GetDivider+0x18>)
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8004620:	4618      	mov	r0, r3
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop
 800462c:	40023800 	.word	0x40023800

08004630 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8004638:	f000 f820 	bl	800467c <RCC_GetSystemClockFreq>
 800463c:	4602      	mov	r2, r0
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4618      	mov	r0, r3
 8004648:	f000 f840 	bl	80046cc <RCC_GetHCLKClockFreq>
 800464c:	4602      	mov	r2, r0
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	4618      	mov	r0, r3
 8004658:	f000 f84e 	bl	80046f8 <RCC_GetPCLK1ClockFreq>
 800465c:	4602      	mov	r2, r0
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	4618      	mov	r0, r3
 8004668:	f000 f85a 	bl	8004720 <RCC_GetPCLK2ClockFreq>
 800466c:	4602      	mov	r2, r0
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	60da      	str	r2, [r3, #12]
}
 8004672:	bf00      	nop
 8004674:	3708      	adds	r7, #8
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
	...

0800467c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8004682:	2300      	movs	r3, #0
 8004684:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8004686:	f7ff ff63 	bl	8004550 <LL_RCC_GetSysClkSource>
 800468a:	4603      	mov	r3, r0
 800468c:	2b08      	cmp	r3, #8
 800468e:	d00c      	beq.n	80046aa <RCC_GetSystemClockFreq+0x2e>
 8004690:	2b08      	cmp	r3, #8
 8004692:	d80f      	bhi.n	80046b4 <RCC_GetSystemClockFreq+0x38>
 8004694:	2b00      	cmp	r3, #0
 8004696:	d002      	beq.n	800469e <RCC_GetSystemClockFreq+0x22>
 8004698:	2b04      	cmp	r3, #4
 800469a:	d003      	beq.n	80046a4 <RCC_GetSystemClockFreq+0x28>
 800469c:	e00a      	b.n	80046b4 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800469e:	4b09      	ldr	r3, [pc, #36]	; (80046c4 <RCC_GetSystemClockFreq+0x48>)
 80046a0:	607b      	str	r3, [r7, #4]
      break;
 80046a2:	e00a      	b.n	80046ba <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80046a4:	4b08      	ldr	r3, [pc, #32]	; (80046c8 <RCC_GetSystemClockFreq+0x4c>)
 80046a6:	607b      	str	r3, [r7, #4]
      break;
 80046a8:	e007      	b.n	80046ba <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80046aa:	2008      	movs	r0, #8
 80046ac:	f000 f84c 	bl	8004748 <RCC_PLL_GetFreqDomain_SYS>
 80046b0:	6078      	str	r0, [r7, #4]
      break;
 80046b2:	e002      	b.n	80046ba <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80046b4:	4b03      	ldr	r3, [pc, #12]	; (80046c4 <RCC_GetSystemClockFreq+0x48>)
 80046b6:	607b      	str	r3, [r7, #4]
      break;
 80046b8:	bf00      	nop
  }

  return frequency;
 80046ba:	687b      	ldr	r3, [r7, #4]
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3708      	adds	r7, #8
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	00f42400 	.word	0x00f42400
 80046c8:	007a1200 	.word	0x007a1200

080046cc <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80046d4:	f7ff ff4a 	bl	800456c <LL_RCC_GetAHBPrescaler>
 80046d8:	4603      	mov	r3, r0
 80046da:	091b      	lsrs	r3, r3, #4
 80046dc:	f003 030f 	and.w	r3, r3, #15
 80046e0:	4a04      	ldr	r2, [pc, #16]	; (80046f4 <RCC_GetHCLKClockFreq+0x28>)
 80046e2:	5cd3      	ldrb	r3, [r2, r3]
 80046e4:	461a      	mov	r2, r3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	40d3      	lsrs	r3, r2
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3708      	adds	r7, #8
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	08008604 	.word	0x08008604

080046f8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8004700:	f7ff ff42 	bl	8004588 <LL_RCC_GetAPB1Prescaler>
 8004704:	4603      	mov	r3, r0
 8004706:	0a9b      	lsrs	r3, r3, #10
 8004708:	4a04      	ldr	r2, [pc, #16]	; (800471c <RCC_GetPCLK1ClockFreq+0x24>)
 800470a:	5cd3      	ldrb	r3, [r2, r3]
 800470c:	461a      	mov	r2, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	40d3      	lsrs	r3, r2
}
 8004712:	4618      	mov	r0, r3
 8004714:	3708      	adds	r7, #8
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	08008614 	.word	0x08008614

08004720 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b082      	sub	sp, #8
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8004728:	f7ff ff3c 	bl	80045a4 <LL_RCC_GetAPB2Prescaler>
 800472c:	4603      	mov	r3, r0
 800472e:	0b5b      	lsrs	r3, r3, #13
 8004730:	4a04      	ldr	r2, [pc, #16]	; (8004744 <RCC_GetPCLK2ClockFreq+0x24>)
 8004732:	5cd3      	ldrb	r3, [r2, r3]
 8004734:	461a      	mov	r2, r3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	40d3      	lsrs	r3, r2
}
 800473a:	4618      	mov	r0, r3
 800473c:	3708      	adds	r7, #8
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	08008614 	.word	0x08008614

08004748 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8004748:	b590      	push	{r4, r7, lr}
 800474a:	b087      	sub	sp, #28
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8004750:	2300      	movs	r3, #0
 8004752:	617b      	str	r3, [r7, #20]
 8004754:	2300      	movs	r3, #0
 8004756:	60fb      	str	r3, [r7, #12]
 8004758:	2300      	movs	r3, #0
 800475a:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800475c:	f7ff ff30 	bl	80045c0 <LL_RCC_PLL_GetMainSource>
 8004760:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d004      	beq.n	8004772 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800476e:	d003      	beq.n	8004778 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8004770:	e005      	b.n	800477e <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8004772:	4b12      	ldr	r3, [pc, #72]	; (80047bc <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8004774:	617b      	str	r3, [r7, #20]
      break;
 8004776:	e005      	b.n	8004784 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8004778:	4b11      	ldr	r3, [pc, #68]	; (80047c0 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 800477a:	617b      	str	r3, [r7, #20]
      break;
 800477c:	e002      	b.n	8004784 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 800477e:	4b0f      	ldr	r3, [pc, #60]	; (80047bc <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8004780:	617b      	str	r3, [r7, #20]
      break;
 8004782:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2b08      	cmp	r3, #8
 8004788:	d113      	bne.n	80047b2 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800478a:	f7ff ff43 	bl	8004614 <LL_RCC_PLL_GetDivider>
 800478e:	4602      	mov	r2, r0
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	fbb3 f4f2 	udiv	r4, r3, r2
 8004796:	f7ff ff21 	bl	80045dc <LL_RCC_PLL_GetN>
 800479a:	4603      	mov	r3, r0
 800479c:	fb03 f404 	mul.w	r4, r3, r4
 80047a0:	f7ff ff2a 	bl	80045f8 <LL_RCC_PLL_GetP>
 80047a4:	4603      	mov	r3, r0
 80047a6:	0c1b      	lsrs	r3, r3, #16
 80047a8:	3301      	adds	r3, #1
 80047aa:	005b      	lsls	r3, r3, #1
 80047ac:	fbb4 f3f3 	udiv	r3, r4, r3
 80047b0:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 80047b2:	693b      	ldr	r3, [r7, #16]
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	371c      	adds	r7, #28
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd90      	pop	{r4, r7, pc}
 80047bc:	00f42400 	.word	0x00f42400
 80047c0:	007a1200 	.word	0x007a1200

080047c4 <LL_USART_IsEnabled>:
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047d8:	bf0c      	ite	eq
 80047da:	2301      	moveq	r3, #1
 80047dc:	2300      	movne	r3, #0
 80047de:	b2db      	uxtb	r3, r3
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <LL_USART_SetStopBitsLength>:
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	431a      	orrs	r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	611a      	str	r2, [r3, #16]
}
 8004806:	bf00      	nop
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr

08004812 <LL_USART_SetHWFlowCtrl>:
{
 8004812:	b480      	push	{r7}
 8004814:	b083      	sub	sp, #12
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
 800481a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	695b      	ldr	r3, [r3, #20]
 8004820:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	431a      	orrs	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	615a      	str	r2, [r3, #20]
}
 800482c:	bf00      	nop
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <LL_USART_SetBaudRate>:
{
 8004838:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800483c:	b0c0      	sub	sp, #256	; 0x100
 800483e:	af00      	add	r7, sp, #0
 8004840:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004844:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8004848:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800484c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8004850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004854:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004858:	f040 810c 	bne.w	8004a74 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800485c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004860:	2200      	movs	r2, #0
 8004862:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004866:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800486a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800486e:	4622      	mov	r2, r4
 8004870:	462b      	mov	r3, r5
 8004872:	1891      	adds	r1, r2, r2
 8004874:	6639      	str	r1, [r7, #96]	; 0x60
 8004876:	415b      	adcs	r3, r3
 8004878:	667b      	str	r3, [r7, #100]	; 0x64
 800487a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800487e:	4621      	mov	r1, r4
 8004880:	eb12 0801 	adds.w	r8, r2, r1
 8004884:	4629      	mov	r1, r5
 8004886:	eb43 0901 	adc.w	r9, r3, r1
 800488a:	f04f 0200 	mov.w	r2, #0
 800488e:	f04f 0300 	mov.w	r3, #0
 8004892:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004896:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800489a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800489e:	4690      	mov	r8, r2
 80048a0:	4699      	mov	r9, r3
 80048a2:	4623      	mov	r3, r4
 80048a4:	eb18 0303 	adds.w	r3, r8, r3
 80048a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80048ac:	462b      	mov	r3, r5
 80048ae:	eb49 0303 	adc.w	r3, r9, r3
 80048b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80048b6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80048ba:	2200      	movs	r2, #0
 80048bc:	469a      	mov	sl, r3
 80048be:	4693      	mov	fp, r2
 80048c0:	eb1a 030a 	adds.w	r3, sl, sl
 80048c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80048c6:	eb4b 030b 	adc.w	r3, fp, fp
 80048ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048cc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80048d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80048d4:	f7fb fc78 	bl	80001c8 <__aeabi_uldivmod>
 80048d8:	4602      	mov	r2, r0
 80048da:	460b      	mov	r3, r1
 80048dc:	4b64      	ldr	r3, [pc, #400]	; (8004a70 <LL_USART_SetBaudRate+0x238>)
 80048de:	fba3 2302 	umull	r2, r3, r3, r2
 80048e2:	095b      	lsrs	r3, r3, #5
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	011b      	lsls	r3, r3, #4
 80048e8:	b29c      	uxth	r4, r3
 80048ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80048ee:	2200      	movs	r2, #0
 80048f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80048f4:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80048f8:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 80048fc:	4642      	mov	r2, r8
 80048fe:	464b      	mov	r3, r9
 8004900:	1891      	adds	r1, r2, r2
 8004902:	6539      	str	r1, [r7, #80]	; 0x50
 8004904:	415b      	adcs	r3, r3
 8004906:	657b      	str	r3, [r7, #84]	; 0x54
 8004908:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800490c:	4641      	mov	r1, r8
 800490e:	1851      	adds	r1, r2, r1
 8004910:	64b9      	str	r1, [r7, #72]	; 0x48
 8004912:	4649      	mov	r1, r9
 8004914:	414b      	adcs	r3, r1
 8004916:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004918:	f04f 0200 	mov.w	r2, #0
 800491c:	f04f 0300 	mov.w	r3, #0
 8004920:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8004924:	4659      	mov	r1, fp
 8004926:	00cb      	lsls	r3, r1, #3
 8004928:	4651      	mov	r1, sl
 800492a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800492e:	4651      	mov	r1, sl
 8004930:	00ca      	lsls	r2, r1, #3
 8004932:	4610      	mov	r0, r2
 8004934:	4619      	mov	r1, r3
 8004936:	4603      	mov	r3, r0
 8004938:	4642      	mov	r2, r8
 800493a:	189b      	adds	r3, r3, r2
 800493c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004940:	464b      	mov	r3, r9
 8004942:	460a      	mov	r2, r1
 8004944:	eb42 0303 	adc.w	r3, r2, r3
 8004948:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800494c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004950:	2200      	movs	r2, #0
 8004952:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004956:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800495a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800495e:	460b      	mov	r3, r1
 8004960:	18db      	adds	r3, r3, r3
 8004962:	643b      	str	r3, [r7, #64]	; 0x40
 8004964:	4613      	mov	r3, r2
 8004966:	eb42 0303 	adc.w	r3, r2, r3
 800496a:	647b      	str	r3, [r7, #68]	; 0x44
 800496c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004970:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004974:	f7fb fc28 	bl	80001c8 <__aeabi_uldivmod>
 8004978:	4602      	mov	r2, r0
 800497a:	460b      	mov	r3, r1
 800497c:	4611      	mov	r1, r2
 800497e:	4b3c      	ldr	r3, [pc, #240]	; (8004a70 <LL_USART_SetBaudRate+0x238>)
 8004980:	fba3 2301 	umull	r2, r3, r3, r1
 8004984:	095b      	lsrs	r3, r3, #5
 8004986:	2264      	movs	r2, #100	; 0x64
 8004988:	fb02 f303 	mul.w	r3, r2, r3
 800498c:	1acb      	subs	r3, r1, r3
 800498e:	00db      	lsls	r3, r3, #3
 8004990:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004994:	4b36      	ldr	r3, [pc, #216]	; (8004a70 <LL_USART_SetBaudRate+0x238>)
 8004996:	fba3 2302 	umull	r2, r3, r3, r2
 800499a:	095b      	lsrs	r3, r3, #5
 800499c:	b29b      	uxth	r3, r3
 800499e:	005b      	lsls	r3, r3, #1
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	4423      	add	r3, r4
 80049aa:	b29c      	uxth	r4, r3
 80049ac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80049b0:	2200      	movs	r2, #0
 80049b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80049b6:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80049ba:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 80049be:	4642      	mov	r2, r8
 80049c0:	464b      	mov	r3, r9
 80049c2:	1891      	adds	r1, r2, r2
 80049c4:	63b9      	str	r1, [r7, #56]	; 0x38
 80049c6:	415b      	adcs	r3, r3
 80049c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049ca:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80049ce:	4641      	mov	r1, r8
 80049d0:	1851      	adds	r1, r2, r1
 80049d2:	6339      	str	r1, [r7, #48]	; 0x30
 80049d4:	4649      	mov	r1, r9
 80049d6:	414b      	adcs	r3, r1
 80049d8:	637b      	str	r3, [r7, #52]	; 0x34
 80049da:	f04f 0200 	mov.w	r2, #0
 80049de:	f04f 0300 	mov.w	r3, #0
 80049e2:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80049e6:	4659      	mov	r1, fp
 80049e8:	00cb      	lsls	r3, r1, #3
 80049ea:	4651      	mov	r1, sl
 80049ec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049f0:	4651      	mov	r1, sl
 80049f2:	00ca      	lsls	r2, r1, #3
 80049f4:	4610      	mov	r0, r2
 80049f6:	4619      	mov	r1, r3
 80049f8:	4603      	mov	r3, r0
 80049fa:	4642      	mov	r2, r8
 80049fc:	189b      	adds	r3, r3, r2
 80049fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a02:	464b      	mov	r3, r9
 8004a04:	460a      	mov	r2, r1
 8004a06:	eb42 0303 	adc.w	r3, r2, r3
 8004a0a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004a0e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004a12:	2200      	movs	r2, #0
 8004a14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a18:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8004a1c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004a20:	460b      	mov	r3, r1
 8004a22:	18db      	adds	r3, r3, r3
 8004a24:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a26:	4613      	mov	r3, r2
 8004a28:	eb42 0303 	adc.w	r3, r2, r3
 8004a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a32:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8004a36:	f7fb fbc7 	bl	80001c8 <__aeabi_uldivmod>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	4b0c      	ldr	r3, [pc, #48]	; (8004a70 <LL_USART_SetBaudRate+0x238>)
 8004a40:	fba3 1302 	umull	r1, r3, r3, r2
 8004a44:	095b      	lsrs	r3, r3, #5
 8004a46:	2164      	movs	r1, #100	; 0x64
 8004a48:	fb01 f303 	mul.w	r3, r1, r3
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	00db      	lsls	r3, r3, #3
 8004a50:	3332      	adds	r3, #50	; 0x32
 8004a52:	4a07      	ldr	r2, [pc, #28]	; (8004a70 <LL_USART_SetBaudRate+0x238>)
 8004a54:	fba2 2303 	umull	r2, r3, r2, r3
 8004a58:	095b      	lsrs	r3, r3, #5
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	f003 0307 	and.w	r3, r3, #7
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	4423      	add	r3, r4
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	461a      	mov	r2, r3
 8004a68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a6c:	609a      	str	r2, [r3, #8]
}
 8004a6e:	e107      	b.n	8004c80 <LL_USART_SetBaudRate+0x448>
 8004a70:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004a74:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004a7e:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004a82:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8004a86:	4642      	mov	r2, r8
 8004a88:	464b      	mov	r3, r9
 8004a8a:	1891      	adds	r1, r2, r2
 8004a8c:	6239      	str	r1, [r7, #32]
 8004a8e:	415b      	adcs	r3, r3
 8004a90:	627b      	str	r3, [r7, #36]	; 0x24
 8004a92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a96:	4641      	mov	r1, r8
 8004a98:	1854      	adds	r4, r2, r1
 8004a9a:	4649      	mov	r1, r9
 8004a9c:	eb43 0501 	adc.w	r5, r3, r1
 8004aa0:	f04f 0200 	mov.w	r2, #0
 8004aa4:	f04f 0300 	mov.w	r3, #0
 8004aa8:	00eb      	lsls	r3, r5, #3
 8004aaa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004aae:	00e2      	lsls	r2, r4, #3
 8004ab0:	4614      	mov	r4, r2
 8004ab2:	461d      	mov	r5, r3
 8004ab4:	4643      	mov	r3, r8
 8004ab6:	18e3      	adds	r3, r4, r3
 8004ab8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004abc:	464b      	mov	r3, r9
 8004abe:	eb45 0303 	adc.w	r3, r5, r3
 8004ac2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004ac6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004aca:	2200      	movs	r2, #0
 8004acc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004ad0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004ad4:	f04f 0200 	mov.w	r2, #0
 8004ad8:	f04f 0300 	mov.w	r3, #0
 8004adc:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8004ae0:	4629      	mov	r1, r5
 8004ae2:	008b      	lsls	r3, r1, #2
 8004ae4:	4621      	mov	r1, r4
 8004ae6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004aea:	4621      	mov	r1, r4
 8004aec:	008a      	lsls	r2, r1, #2
 8004aee:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8004af2:	f7fb fb69 	bl	80001c8 <__aeabi_uldivmod>
 8004af6:	4602      	mov	r2, r0
 8004af8:	460b      	mov	r3, r1
 8004afa:	4b64      	ldr	r3, [pc, #400]	; (8004c8c <LL_USART_SetBaudRate+0x454>)
 8004afc:	fba3 2302 	umull	r2, r3, r3, r2
 8004b00:	095b      	lsrs	r3, r3, #5
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	011b      	lsls	r3, r3, #4
 8004b06:	b29c      	uxth	r4, r3
 8004b08:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004b12:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004b16:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8004b1a:	4642      	mov	r2, r8
 8004b1c:	464b      	mov	r3, r9
 8004b1e:	1891      	adds	r1, r2, r2
 8004b20:	61b9      	str	r1, [r7, #24]
 8004b22:	415b      	adcs	r3, r3
 8004b24:	61fb      	str	r3, [r7, #28]
 8004b26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b2a:	4641      	mov	r1, r8
 8004b2c:	1851      	adds	r1, r2, r1
 8004b2e:	6139      	str	r1, [r7, #16]
 8004b30:	4649      	mov	r1, r9
 8004b32:	414b      	adcs	r3, r1
 8004b34:	617b      	str	r3, [r7, #20]
 8004b36:	f04f 0200 	mov.w	r2, #0
 8004b3a:	f04f 0300 	mov.w	r3, #0
 8004b3e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b42:	4659      	mov	r1, fp
 8004b44:	00cb      	lsls	r3, r1, #3
 8004b46:	4651      	mov	r1, sl
 8004b48:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b4c:	4651      	mov	r1, sl
 8004b4e:	00ca      	lsls	r2, r1, #3
 8004b50:	4610      	mov	r0, r2
 8004b52:	4619      	mov	r1, r3
 8004b54:	4603      	mov	r3, r0
 8004b56:	4642      	mov	r2, r8
 8004b58:	189b      	adds	r3, r3, r2
 8004b5a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004b5e:	464b      	mov	r3, r9
 8004b60:	460a      	mov	r2, r1
 8004b62:	eb42 0303 	adc.w	r3, r2, r3
 8004b66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004b6a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b74:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004b78:	f04f 0200 	mov.w	r2, #0
 8004b7c:	f04f 0300 	mov.w	r3, #0
 8004b80:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8004b84:	4649      	mov	r1, r9
 8004b86:	008b      	lsls	r3, r1, #2
 8004b88:	4641      	mov	r1, r8
 8004b8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b8e:	4641      	mov	r1, r8
 8004b90:	008a      	lsls	r2, r1, #2
 8004b92:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8004b96:	f7fb fb17 	bl	80001c8 <__aeabi_uldivmod>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	4b3b      	ldr	r3, [pc, #236]	; (8004c8c <LL_USART_SetBaudRate+0x454>)
 8004ba0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ba4:	095b      	lsrs	r3, r3, #5
 8004ba6:	2164      	movs	r1, #100	; 0x64
 8004ba8:	fb01 f303 	mul.w	r3, r1, r3
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	011b      	lsls	r3, r3, #4
 8004bb0:	3332      	adds	r3, #50	; 0x32
 8004bb2:	4a36      	ldr	r2, [pc, #216]	; (8004c8c <LL_USART_SetBaudRate+0x454>)
 8004bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb8:	095b      	lsrs	r3, r3, #5
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	4423      	add	r3, r4
 8004bc4:	b29c      	uxth	r4, r3
 8004bc6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004bca:	2200      	movs	r2, #0
 8004bcc:	67bb      	str	r3, [r7, #120]	; 0x78
 8004bce:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004bd0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004bd4:	4642      	mov	r2, r8
 8004bd6:	464b      	mov	r3, r9
 8004bd8:	1891      	adds	r1, r2, r2
 8004bda:	60b9      	str	r1, [r7, #8]
 8004bdc:	415b      	adcs	r3, r3
 8004bde:	60fb      	str	r3, [r7, #12]
 8004be0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004be4:	4641      	mov	r1, r8
 8004be6:	1851      	adds	r1, r2, r1
 8004be8:	6039      	str	r1, [r7, #0]
 8004bea:	4649      	mov	r1, r9
 8004bec:	414b      	adcs	r3, r1
 8004bee:	607b      	str	r3, [r7, #4]
 8004bf0:	f04f 0200 	mov.w	r2, #0
 8004bf4:	f04f 0300 	mov.w	r3, #0
 8004bf8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004bfc:	4659      	mov	r1, fp
 8004bfe:	00cb      	lsls	r3, r1, #3
 8004c00:	4651      	mov	r1, sl
 8004c02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c06:	4651      	mov	r1, sl
 8004c08:	00ca      	lsls	r2, r1, #3
 8004c0a:	4610      	mov	r0, r2
 8004c0c:	4619      	mov	r1, r3
 8004c0e:	4603      	mov	r3, r0
 8004c10:	4642      	mov	r2, r8
 8004c12:	189b      	adds	r3, r3, r2
 8004c14:	673b      	str	r3, [r7, #112]	; 0x70
 8004c16:	464b      	mov	r3, r9
 8004c18:	460a      	mov	r2, r1
 8004c1a:	eb42 0303 	adc.w	r3, r2, r3
 8004c1e:	677b      	str	r3, [r7, #116]	; 0x74
 8004c20:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004c24:	2200      	movs	r2, #0
 8004c26:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c28:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004c2a:	f04f 0200 	mov.w	r2, #0
 8004c2e:	f04f 0300 	mov.w	r3, #0
 8004c32:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8004c36:	4649      	mov	r1, r9
 8004c38:	008b      	lsls	r3, r1, #2
 8004c3a:	4641      	mov	r1, r8
 8004c3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c40:	4641      	mov	r1, r8
 8004c42:	008a      	lsls	r2, r1, #2
 8004c44:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8004c48:	f7fb fabe 	bl	80001c8 <__aeabi_uldivmod>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	460b      	mov	r3, r1
 8004c50:	4b0e      	ldr	r3, [pc, #56]	; (8004c8c <LL_USART_SetBaudRate+0x454>)
 8004c52:	fba3 1302 	umull	r1, r3, r3, r2
 8004c56:	095b      	lsrs	r3, r3, #5
 8004c58:	2164      	movs	r1, #100	; 0x64
 8004c5a:	fb01 f303 	mul.w	r3, r1, r3
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	011b      	lsls	r3, r3, #4
 8004c62:	3332      	adds	r3, #50	; 0x32
 8004c64:	4a09      	ldr	r2, [pc, #36]	; (8004c8c <LL_USART_SetBaudRate+0x454>)
 8004c66:	fba2 2303 	umull	r2, r3, r2, r3
 8004c6a:	095b      	lsrs	r3, r3, #5
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	f003 030f 	and.w	r3, r3, #15
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	4423      	add	r3, r4
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	461a      	mov	r2, r3
 8004c7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c7e:	609a      	str	r2, [r3, #8]
}
 8004c80:	bf00      	nop
 8004c82:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004c86:	46bd      	mov	sp, r7
 8004c88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c8c:	51eb851f 	.word	0x51eb851f

08004c90 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b088      	sub	sp, #32
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f7ff fd8e 	bl	80047c4 <LL_USART_IsEnabled>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d15e      	bne.n	8004d6c <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004cb6:	f023 030c 	bic.w	r3, r3, #12
 8004cba:	683a      	ldr	r2, [r7, #0]
 8004cbc:	6851      	ldr	r1, [r2, #4]
 8004cbe:	683a      	ldr	r2, [r7, #0]
 8004cc0:	68d2      	ldr	r2, [r2, #12]
 8004cc2:	4311      	orrs	r1, r2
 8004cc4:	683a      	ldr	r2, [r7, #0]
 8004cc6:	6912      	ldr	r2, [r2, #16]
 8004cc8:	4311      	orrs	r1, r2
 8004cca:	683a      	ldr	r2, [r7, #0]
 8004ccc:	6992      	ldr	r2, [r2, #24]
 8004cce:	430a      	orrs	r2, r1
 8004cd0:	431a      	orrs	r2, r3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	4619      	mov	r1, r3
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f7ff fd85 	bl	80047ec <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f7ff fd92 	bl	8004812 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8004cee:	f107 0308 	add.w	r3, r7, #8
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f7ff fc9c 	bl	8004630 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a1f      	ldr	r2, [pc, #124]	; (8004d78 <LL_USART_Init+0xe8>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d102      	bne.n	8004d06 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	61bb      	str	r3, [r7, #24]
 8004d04:	e021      	b.n	8004d4a <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a1c      	ldr	r2, [pc, #112]	; (8004d7c <LL_USART_Init+0xec>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d102      	bne.n	8004d14 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	61bb      	str	r3, [r7, #24]
 8004d12:	e01a      	b.n	8004d4a <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a1a      	ldr	r2, [pc, #104]	; (8004d80 <LL_USART_Init+0xf0>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d102      	bne.n	8004d22 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	61bb      	str	r3, [r7, #24]
 8004d20:	e013      	b.n	8004d4a <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4a17      	ldr	r2, [pc, #92]	; (8004d84 <LL_USART_Init+0xf4>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d102      	bne.n	8004d30 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	61bb      	str	r3, [r7, #24]
 8004d2e:	e00c      	b.n	8004d4a <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a15      	ldr	r2, [pc, #84]	; (8004d88 <LL_USART_Init+0xf8>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d102      	bne.n	8004d3e <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	61bb      	str	r3, [r7, #24]
 8004d3c:	e005      	b.n	8004d4a <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a12      	ldr	r2, [pc, #72]	; (8004d8c <LL_USART_Init+0xfc>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d101      	bne.n	8004d4a <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d00d      	beq.n	8004d6c <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d009      	beq.n	8004d6c <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	699a      	ldr	r2, [r3, #24]
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	69b9      	ldr	r1, [r7, #24]
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f7ff fd66 	bl	8004838 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8004d6c:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3720      	adds	r7, #32
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	40011000 	.word	0x40011000
 8004d7c:	40004400 	.word	0x40004400
 8004d80:	40004800 	.word	0x40004800
 8004d84:	40011400 	.word	0x40011400
 8004d88:	40004c00 	.word	0x40004c00
 8004d8c:	40005000 	.word	0x40005000

08004d90 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d90:	b084      	sub	sp, #16
 8004d92:	b580      	push	{r7, lr}
 8004d94:	b084      	sub	sp, #16
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
 8004d9a:	f107 001c 	add.w	r0, r7, #28
 8004d9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d122      	bne.n	8004dee <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004dbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004dd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d105      	bne.n	8004de2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 f9c0 	bl	8005168 <USB_CoreReset>
 8004de8:	4603      	mov	r3, r0
 8004dea:	73fb      	strb	r3, [r7, #15]
 8004dec:	e01a      	b.n	8004e24 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 f9b4 	bl	8005168 <USB_CoreReset>
 8004e00:	4603      	mov	r3, r0
 8004e02:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004e04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d106      	bne.n	8004e18 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e0e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	639a      	str	r2, [r3, #56]	; 0x38
 8004e16:	e005      	b.n	8004e24 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d10b      	bne.n	8004e42 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	f043 0206 	orr.w	r2, r3, #6
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	f043 0220 	orr.w	r2, r3, #32
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3710      	adds	r7, #16
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e4e:	b004      	add	sp, #16
 8004e50:	4770      	bx	lr

08004e52 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e52:	b480      	push	{r7}
 8004e54:	b083      	sub	sp, #12
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f043 0201 	orr.w	r2, r3, #1
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	f023 0201 	bic.w	r2, r3, #1
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	370c      	adds	r7, #12
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr

08004e96 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004e96:	b580      	push	{r7, lr}
 8004e98:	b084      	sub	sp, #16
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004eb2:	78fb      	ldrb	r3, [r7, #3]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d115      	bne.n	8004ee4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004ec4:	2001      	movs	r0, #1
 8004ec6:	f7fc facf 	bl	8001468 <HAL_Delay>
      ms++;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	3301      	adds	r3, #1
 8004ece:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f000 f93a 	bl	800514a <USB_GetMode>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d01e      	beq.n	8004f1a <USB_SetCurrentMode+0x84>
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2b31      	cmp	r3, #49	; 0x31
 8004ee0:	d9f0      	bls.n	8004ec4 <USB_SetCurrentMode+0x2e>
 8004ee2:	e01a      	b.n	8004f1a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004ee4:	78fb      	ldrb	r3, [r7, #3]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d115      	bne.n	8004f16 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004ef6:	2001      	movs	r0, #1
 8004ef8:	f7fc fab6 	bl	8001468 <HAL_Delay>
      ms++;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	3301      	adds	r3, #1
 8004f00:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 f921 	bl	800514a <USB_GetMode>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d005      	beq.n	8004f1a <USB_SetCurrentMode+0x84>
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2b31      	cmp	r3, #49	; 0x31
 8004f12:	d9f0      	bls.n	8004ef6 <USB_SetCurrentMode+0x60>
 8004f14:	e001      	b.n	8004f1a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e005      	b.n	8004f26 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2b32      	cmp	r3, #50	; 0x32
 8004f1e:	d101      	bne.n	8004f24 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e000      	b.n	8004f26 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3710      	adds	r7, #16
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
	...

08004f30 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b085      	sub	sp, #20
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	3301      	adds	r3, #1
 8004f42:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	4a13      	ldr	r2, [pc, #76]	; (8004f94 <USB_FlushTxFifo+0x64>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d901      	bls.n	8004f50 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	e01b      	b.n	8004f88 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	daf2      	bge.n	8004f3e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	019b      	lsls	r3, r3, #6
 8004f60:	f043 0220 	orr.w	r2, r3, #32
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	4a08      	ldr	r2, [pc, #32]	; (8004f94 <USB_FlushTxFifo+0x64>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d901      	bls.n	8004f7a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e006      	b.n	8004f88 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	f003 0320 	and.w	r3, r3, #32
 8004f82:	2b20      	cmp	r3, #32
 8004f84:	d0f0      	beq.n	8004f68 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004f86:	2300      	movs	r3, #0
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3714      	adds	r7, #20
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr
 8004f94:	00030d40 	.word	0x00030d40

08004f98 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	4a11      	ldr	r2, [pc, #68]	; (8004ff4 <USB_FlushRxFifo+0x5c>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d901      	bls.n	8004fb6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e018      	b.n	8004fe8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	daf2      	bge.n	8004fa4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2210      	movs	r2, #16
 8004fc6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	3301      	adds	r3, #1
 8004fcc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	4a08      	ldr	r2, [pc, #32]	; (8004ff4 <USB_FlushRxFifo+0x5c>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d901      	bls.n	8004fda <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e006      	b.n	8004fe8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	f003 0310 	and.w	r3, r3, #16
 8004fe2:	2b10      	cmp	r3, #16
 8004fe4:	d0f0      	beq.n	8004fc8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3714      	adds	r7, #20
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr
 8004ff4:	00030d40 	.word	0x00030d40

08004ff8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b089      	sub	sp, #36	; 0x24
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	60b9      	str	r1, [r7, #8]
 8005002:	4611      	mov	r1, r2
 8005004:	461a      	mov	r2, r3
 8005006:	460b      	mov	r3, r1
 8005008:	71fb      	strb	r3, [r7, #7]
 800500a:	4613      	mov	r3, r2
 800500c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005016:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800501a:	2b00      	cmp	r3, #0
 800501c:	d123      	bne.n	8005066 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800501e:	88bb      	ldrh	r3, [r7, #4]
 8005020:	3303      	adds	r3, #3
 8005022:	089b      	lsrs	r3, r3, #2
 8005024:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005026:	2300      	movs	r3, #0
 8005028:	61bb      	str	r3, [r7, #24]
 800502a:	e018      	b.n	800505e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800502c:	79fb      	ldrb	r3, [r7, #7]
 800502e:	031a      	lsls	r2, r3, #12
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	4413      	add	r3, r2
 8005034:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005038:	461a      	mov	r2, r3
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	3301      	adds	r3, #1
 8005044:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	3301      	adds	r3, #1
 800504a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	3301      	adds	r3, #1
 8005050:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	3301      	adds	r3, #1
 8005056:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	3301      	adds	r3, #1
 800505c:	61bb      	str	r3, [r7, #24]
 800505e:	69ba      	ldr	r2, [r7, #24]
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	429a      	cmp	r2, r3
 8005064:	d3e2      	bcc.n	800502c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005066:	2300      	movs	r3, #0
}
 8005068:	4618      	mov	r0, r3
 800506a:	3724      	adds	r7, #36	; 0x24
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005074:	b480      	push	{r7}
 8005076:	b08b      	sub	sp, #44	; 0x2c
 8005078:	af00      	add	r7, sp, #0
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	4613      	mov	r3, r2
 8005080:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800508a:	88fb      	ldrh	r3, [r7, #6]
 800508c:	089b      	lsrs	r3, r3, #2
 800508e:	b29b      	uxth	r3, r3
 8005090:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005092:	88fb      	ldrh	r3, [r7, #6]
 8005094:	f003 0303 	and.w	r3, r3, #3
 8005098:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800509a:	2300      	movs	r3, #0
 800509c:	623b      	str	r3, [r7, #32]
 800509e:	e014      	b.n	80050ca <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050aa:	601a      	str	r2, [r3, #0]
    pDest++;
 80050ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ae:	3301      	adds	r3, #1
 80050b0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80050b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b4:	3301      	adds	r3, #1
 80050b6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80050b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ba:	3301      	adds	r3, #1
 80050bc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80050be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c0:	3301      	adds	r3, #1
 80050c2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80050c4:	6a3b      	ldr	r3, [r7, #32]
 80050c6:	3301      	adds	r3, #1
 80050c8:	623b      	str	r3, [r7, #32]
 80050ca:	6a3a      	ldr	r2, [r7, #32]
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d3e6      	bcc.n	80050a0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80050d2:	8bfb      	ldrh	r3, [r7, #30]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d01e      	beq.n	8005116 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80050d8:	2300      	movs	r3, #0
 80050da:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050e2:	461a      	mov	r2, r3
 80050e4:	f107 0310 	add.w	r3, r7, #16
 80050e8:	6812      	ldr	r2, [r2, #0]
 80050ea:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80050ec:	693a      	ldr	r2, [r7, #16]
 80050ee:	6a3b      	ldr	r3, [r7, #32]
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	00db      	lsls	r3, r3, #3
 80050f4:	fa22 f303 	lsr.w	r3, r2, r3
 80050f8:	b2da      	uxtb	r2, r3
 80050fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fc:	701a      	strb	r2, [r3, #0]
      i++;
 80050fe:	6a3b      	ldr	r3, [r7, #32]
 8005100:	3301      	adds	r3, #1
 8005102:	623b      	str	r3, [r7, #32]
      pDest++;
 8005104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005106:	3301      	adds	r3, #1
 8005108:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800510a:	8bfb      	ldrh	r3, [r7, #30]
 800510c:	3b01      	subs	r3, #1
 800510e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005110:	8bfb      	ldrh	r3, [r7, #30]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1ea      	bne.n	80050ec <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005118:	4618      	mov	r0, r3
 800511a:	372c      	adds	r7, #44	; 0x2c
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr

08005124 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005124:	b480      	push	{r7}
 8005126:	b085      	sub	sp, #20
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	695b      	ldr	r3, [r3, #20]
 8005130:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	699b      	ldr	r3, [r3, #24]
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	4013      	ands	r3, r2
 800513a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800513c:	68fb      	ldr	r3, [r7, #12]
}
 800513e:	4618      	mov	r0, r3
 8005140:	3714      	adds	r7, #20
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr

0800514a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800514a:	b480      	push	{r7}
 800514c:	b083      	sub	sp, #12
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	695b      	ldr	r3, [r3, #20]
 8005156:	f003 0301 	and.w	r3, r3, #1
}
 800515a:	4618      	mov	r0, r3
 800515c:	370c      	adds	r7, #12
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
	...

08005168 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005168:	b480      	push	{r7}
 800516a:	b085      	sub	sp, #20
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005170:	2300      	movs	r3, #0
 8005172:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	3301      	adds	r3, #1
 8005178:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	4a13      	ldr	r2, [pc, #76]	; (80051cc <USB_CoreReset+0x64>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d901      	bls.n	8005186 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005182:	2303      	movs	r3, #3
 8005184:	e01b      	b.n	80051be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	2b00      	cmp	r3, #0
 800518c:	daf2      	bge.n	8005174 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800518e:	2300      	movs	r3, #0
 8005190:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	f043 0201 	orr.w	r2, r3, #1
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	3301      	adds	r3, #1
 80051a2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	4a09      	ldr	r2, [pc, #36]	; (80051cc <USB_CoreReset+0x64>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d901      	bls.n	80051b0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	e006      	b.n	80051be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	f003 0301 	and.w	r3, r3, #1
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d0f0      	beq.n	800519e <USB_CoreReset+0x36>

  return HAL_OK;
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3714      	adds	r7, #20
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	00030d40 	.word	0x00030d40

080051d0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80051d0:	b084      	sub	sp, #16
 80051d2:	b580      	push	{r7, lr}
 80051d4:	b086      	sub	sp, #24
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
 80051da:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80051de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80051e2:	2300      	movs	r3, #0
 80051e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80051f0:	461a      	mov	r2, r3
 80051f2:	2300      	movs	r3, #0
 80051f4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051fa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005206:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005212:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800521e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005222:	2b00      	cmp	r3, #0
 8005224:	d018      	beq.n	8005258 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005228:	2b01      	cmp	r3, #1
 800522a:	d10a      	bne.n	8005242 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800523a:	f043 0304 	orr.w	r3, r3, #4
 800523e:	6013      	str	r3, [r2, #0]
 8005240:	e014      	b.n	800526c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005250:	f023 0304 	bic.w	r3, r3, #4
 8005254:	6013      	str	r3, [r2, #0]
 8005256:	e009      	b.n	800526c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005266:	f023 0304 	bic.w	r3, r3, #4
 800526a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800526c:	2110      	movs	r1, #16
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f7ff fe5e 	bl	8004f30 <USB_FlushTxFifo>
 8005274:	4603      	mov	r3, r0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d001      	beq.n	800527e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f7ff fe8a 	bl	8004f98 <USB_FlushRxFifo>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d001      	beq.n	800528e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800528e:	2300      	movs	r3, #0
 8005290:	613b      	str	r3, [r7, #16]
 8005292:	e015      	b.n	80052c0 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	015a      	lsls	r2, r3, #5
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	4413      	add	r3, r2
 800529c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052a0:	461a      	mov	r2, r3
 80052a2:	f04f 33ff 	mov.w	r3, #4294967295
 80052a6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	015a      	lsls	r2, r3, #5
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	4413      	add	r3, r2
 80052b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052b4:	461a      	mov	r2, r3
 80052b6:	2300      	movs	r3, #0
 80052b8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	3301      	adds	r3, #1
 80052be:	613b      	str	r3, [r7, #16]
 80052c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c2:	693a      	ldr	r2, [r7, #16]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d3e5      	bcc.n	8005294 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f04f 32ff 	mov.w	r2, #4294967295
 80052d4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d00b      	beq.n	80052fa <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052e8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a13      	ldr	r2, [pc, #76]	; (800533c <USB_HostInit+0x16c>)
 80052ee:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4a13      	ldr	r2, [pc, #76]	; (8005340 <USB_HostInit+0x170>)
 80052f4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80052f8:	e009      	b.n	800530e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2280      	movs	r2, #128	; 0x80
 80052fe:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4a10      	ldr	r2, [pc, #64]	; (8005344 <USB_HostInit+0x174>)
 8005304:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a0f      	ldr	r2, [pc, #60]	; (8005348 <USB_HostInit+0x178>)
 800530a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800530e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005310:	2b00      	cmp	r3, #0
 8005312:	d105      	bne.n	8005320 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	699b      	ldr	r3, [r3, #24]
 8005318:	f043 0210 	orr.w	r2, r3, #16
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	699a      	ldr	r2, [r3, #24]
 8005324:	4b09      	ldr	r3, [pc, #36]	; (800534c <USB_HostInit+0x17c>)
 8005326:	4313      	orrs	r3, r2
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800532c:	7dfb      	ldrb	r3, [r7, #23]
}
 800532e:	4618      	mov	r0, r3
 8005330:	3718      	adds	r7, #24
 8005332:	46bd      	mov	sp, r7
 8005334:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005338:	b004      	add	sp, #16
 800533a:	4770      	bx	lr
 800533c:	01000200 	.word	0x01000200
 8005340:	00e00300 	.word	0x00e00300
 8005344:	00600080 	.word	0x00600080
 8005348:	004000e0 	.word	0x004000e0
 800534c:	a3200008 	.word	0xa3200008

08005350 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005350:	b480      	push	{r7}
 8005352:	b085      	sub	sp, #20
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	460b      	mov	r3, r1
 800535a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	68fa      	ldr	r2, [r7, #12]
 800536a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800536e:	f023 0303 	bic.w	r3, r3, #3
 8005372:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	78fb      	ldrb	r3, [r7, #3]
 800537e:	f003 0303 	and.w	r3, r3, #3
 8005382:	68f9      	ldr	r1, [r7, #12]
 8005384:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005388:	4313      	orrs	r3, r2
 800538a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800538c:	78fb      	ldrb	r3, [r7, #3]
 800538e:	2b01      	cmp	r3, #1
 8005390:	d107      	bne.n	80053a2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005398:	461a      	mov	r2, r3
 800539a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800539e:	6053      	str	r3, [r2, #4]
 80053a0:	e009      	b.n	80053b6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80053a2:	78fb      	ldrb	r3, [r7, #3]
 80053a4:	2b02      	cmp	r3, #2
 80053a6:	d106      	bne.n	80053b6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053ae:	461a      	mov	r2, r3
 80053b0:	f241 7370 	movw	r3, #6000	; 0x1770
 80053b4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80053b6:	2300      	movs	r3, #0
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3714      	adds	r7, #20
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b084      	sub	sp, #16
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80053d0:	2300      	movs	r3, #0
 80053d2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80053e4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80053ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053f2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80053f4:	2064      	movs	r0, #100	; 0x64
 80053f6:	f7fc f837 	bl	8001468 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	68fa      	ldr	r2, [r7, #12]
 80053fe:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005402:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005406:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005408:	200a      	movs	r0, #10
 800540a:	f7fc f82d 	bl	8001468 <HAL_Delay>

  return HAL_OK;
 800540e:	2300      	movs	r3, #0
}
 8005410:	4618      	mov	r0, r3
 8005412:	3710      	adds	r7, #16
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005418:	b480      	push	{r7}
 800541a:	b085      	sub	sp, #20
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	460b      	mov	r3, r1
 8005422:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005428:	2300      	movs	r3, #0
 800542a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800543c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005444:	2b00      	cmp	r3, #0
 8005446:	d109      	bne.n	800545c <USB_DriveVbus+0x44>
 8005448:	78fb      	ldrb	r3, [r7, #3]
 800544a:	2b01      	cmp	r3, #1
 800544c:	d106      	bne.n	800545c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005456:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800545a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005462:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005466:	d109      	bne.n	800547c <USB_DriveVbus+0x64>
 8005468:	78fb      	ldrb	r3, [r7, #3]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d106      	bne.n	800547c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	68fa      	ldr	r2, [r7, #12]
 8005472:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005476:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800547a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	3714      	adds	r7, #20
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr

0800548a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800548a:	b480      	push	{r7}
 800548c:	b085      	sub	sp, #20
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005496:	2300      	movs	r3, #0
 8005498:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	0c5b      	lsrs	r3, r3, #17
 80054a8:	f003 0303 	and.w	r3, r3, #3
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3714      	adds	r7, #20
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b085      	sub	sp, #20
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	b29b      	uxth	r3, r3
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3714      	adds	r7, #20
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr
	...

080054dc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b088      	sub	sp, #32
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	4608      	mov	r0, r1
 80054e6:	4611      	mov	r1, r2
 80054e8:	461a      	mov	r2, r3
 80054ea:	4603      	mov	r3, r0
 80054ec:	70fb      	strb	r3, [r7, #3]
 80054ee:	460b      	mov	r3, r1
 80054f0:	70bb      	strb	r3, [r7, #2]
 80054f2:	4613      	mov	r3, r2
 80054f4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80054f6:	2300      	movs	r3, #0
 80054f8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80054fe:	78fb      	ldrb	r3, [r7, #3]
 8005500:	015a      	lsls	r2, r3, #5
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	4413      	add	r3, r2
 8005506:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800550a:	461a      	mov	r2, r3
 800550c:	f04f 33ff 	mov.w	r3, #4294967295
 8005510:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005512:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005516:	2b03      	cmp	r3, #3
 8005518:	d87e      	bhi.n	8005618 <USB_HC_Init+0x13c>
 800551a:	a201      	add	r2, pc, #4	; (adr r2, 8005520 <USB_HC_Init+0x44>)
 800551c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005520:	08005531 	.word	0x08005531
 8005524:	080055db 	.word	0x080055db
 8005528:	08005531 	.word	0x08005531
 800552c:	0800559d 	.word	0x0800559d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005530:	78fb      	ldrb	r3, [r7, #3]
 8005532:	015a      	lsls	r2, r3, #5
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	4413      	add	r3, r2
 8005538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800553c:	461a      	mov	r2, r3
 800553e:	f240 439d 	movw	r3, #1181	; 0x49d
 8005542:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005544:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005548:	2b00      	cmp	r3, #0
 800554a:	da10      	bge.n	800556e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800554c:	78fb      	ldrb	r3, [r7, #3]
 800554e:	015a      	lsls	r2, r3, #5
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	4413      	add	r3, r2
 8005554:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	78fa      	ldrb	r2, [r7, #3]
 800555c:	0151      	lsls	r1, r2, #5
 800555e:	693a      	ldr	r2, [r7, #16]
 8005560:	440a      	add	r2, r1
 8005562:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005566:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800556a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800556c:	e057      	b.n	800561e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005576:	2b00      	cmp	r3, #0
 8005578:	d051      	beq.n	800561e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800557a:	78fb      	ldrb	r3, [r7, #3]
 800557c:	015a      	lsls	r2, r3, #5
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	4413      	add	r3, r2
 8005582:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	78fa      	ldrb	r2, [r7, #3]
 800558a:	0151      	lsls	r1, r2, #5
 800558c:	693a      	ldr	r2, [r7, #16]
 800558e:	440a      	add	r2, r1
 8005590:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005594:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005598:	60d3      	str	r3, [r2, #12]
      break;
 800559a:	e040      	b.n	800561e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800559c:	78fb      	ldrb	r3, [r7, #3]
 800559e:	015a      	lsls	r2, r3, #5
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	4413      	add	r3, r2
 80055a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055a8:	461a      	mov	r2, r3
 80055aa:	f240 639d 	movw	r3, #1693	; 0x69d
 80055ae:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80055b0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	da34      	bge.n	8005622 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80055b8:	78fb      	ldrb	r3, [r7, #3]
 80055ba:	015a      	lsls	r2, r3, #5
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	4413      	add	r3, r2
 80055c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	78fa      	ldrb	r2, [r7, #3]
 80055c8:	0151      	lsls	r1, r2, #5
 80055ca:	693a      	ldr	r2, [r7, #16]
 80055cc:	440a      	add	r2, r1
 80055ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055d6:	60d3      	str	r3, [r2, #12]
      }

      break;
 80055d8:	e023      	b.n	8005622 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80055da:	78fb      	ldrb	r3, [r7, #3]
 80055dc:	015a      	lsls	r2, r3, #5
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	4413      	add	r3, r2
 80055e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055e6:	461a      	mov	r2, r3
 80055e8:	f240 2325 	movw	r3, #549	; 0x225
 80055ec:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80055ee:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	da17      	bge.n	8005626 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80055f6:	78fb      	ldrb	r3, [r7, #3]
 80055f8:	015a      	lsls	r2, r3, #5
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	4413      	add	r3, r2
 80055fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	78fa      	ldrb	r2, [r7, #3]
 8005606:	0151      	lsls	r1, r2, #5
 8005608:	693a      	ldr	r2, [r7, #16]
 800560a:	440a      	add	r2, r1
 800560c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005610:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005614:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005616:	e006      	b.n	8005626 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	77fb      	strb	r3, [r7, #31]
      break;
 800561c:	e004      	b.n	8005628 <USB_HC_Init+0x14c>
      break;
 800561e:	bf00      	nop
 8005620:	e002      	b.n	8005628 <USB_HC_Init+0x14c>
      break;
 8005622:	bf00      	nop
 8005624:	e000      	b.n	8005628 <USB_HC_Init+0x14c>
      break;
 8005626:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005628:	78fb      	ldrb	r3, [r7, #3]
 800562a:	015a      	lsls	r2, r3, #5
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	4413      	add	r3, r2
 8005630:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	78fa      	ldrb	r2, [r7, #3]
 8005638:	0151      	lsls	r1, r2, #5
 800563a:	693a      	ldr	r2, [r7, #16]
 800563c:	440a      	add	r2, r1
 800563e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005642:	f043 0302 	orr.w	r3, r3, #2
 8005646:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800564e:	699a      	ldr	r2, [r3, #24]
 8005650:	78fb      	ldrb	r3, [r7, #3]
 8005652:	f003 030f 	and.w	r3, r3, #15
 8005656:	2101      	movs	r1, #1
 8005658:	fa01 f303 	lsl.w	r3, r1, r3
 800565c:	6939      	ldr	r1, [r7, #16]
 800565e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005662:	4313      	orrs	r3, r2
 8005664:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	699b      	ldr	r3, [r3, #24]
 800566a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005672:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005676:	2b00      	cmp	r3, #0
 8005678:	da03      	bge.n	8005682 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800567a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800567e:	61bb      	str	r3, [r7, #24]
 8005680:	e001      	b.n	8005686 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8005682:	2300      	movs	r3, #0
 8005684:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f7ff feff 	bl	800548a <USB_GetHostSpeed>
 800568c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800568e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005692:	2b02      	cmp	r3, #2
 8005694:	d106      	bne.n	80056a4 <USB_HC_Init+0x1c8>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2b02      	cmp	r3, #2
 800569a:	d003      	beq.n	80056a4 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800569c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80056a0:	617b      	str	r3, [r7, #20]
 80056a2:	e001      	b.n	80056a8 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80056a4:	2300      	movs	r3, #0
 80056a6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80056a8:	787b      	ldrb	r3, [r7, #1]
 80056aa:	059b      	lsls	r3, r3, #22
 80056ac:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80056b0:	78bb      	ldrb	r3, [r7, #2]
 80056b2:	02db      	lsls	r3, r3, #11
 80056b4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80056b8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80056ba:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80056be:	049b      	lsls	r3, r3, #18
 80056c0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80056c4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80056c6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80056c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80056cc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80056ce:	69bb      	ldr	r3, [r7, #24]
 80056d0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80056d2:	78fb      	ldrb	r3, [r7, #3]
 80056d4:	0159      	lsls	r1, r3, #5
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	440b      	add	r3, r1
 80056da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056de:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80056e4:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80056e6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80056ea:	2b03      	cmp	r3, #3
 80056ec:	d003      	beq.n	80056f6 <USB_HC_Init+0x21a>
 80056ee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d10f      	bne.n	8005716 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80056f6:	78fb      	ldrb	r3, [r7, #3]
 80056f8:	015a      	lsls	r2, r3, #5
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	4413      	add	r3, r2
 80056fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	78fa      	ldrb	r2, [r7, #3]
 8005706:	0151      	lsls	r1, r2, #5
 8005708:	693a      	ldr	r2, [r7, #16]
 800570a:	440a      	add	r2, r1
 800570c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005710:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005714:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005716:	7ffb      	ldrb	r3, [r7, #31]
}
 8005718:	4618      	mov	r0, r3
 800571a:	3720      	adds	r7, #32
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b08c      	sub	sp, #48	; 0x30
 8005724:	af02      	add	r7, sp, #8
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	4613      	mov	r3, r2
 800572c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	785b      	ldrb	r3, [r3, #1]
 8005736:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005738:	f44f 7380 	mov.w	r3, #256	; 0x100
 800573c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005746:	2b00      	cmp	r3, #0
 8005748:	d02d      	beq.n	80057a6 <USB_HC_StartXfer+0x86>
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	791b      	ldrb	r3, [r3, #4]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d129      	bne.n	80057a6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005752:	79fb      	ldrb	r3, [r7, #7]
 8005754:	2b01      	cmp	r3, #1
 8005756:	d117      	bne.n	8005788 <USB_HC_StartXfer+0x68>
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	79db      	ldrb	r3, [r3, #7]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d003      	beq.n	8005768 <USB_HC_StartXfer+0x48>
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	79db      	ldrb	r3, [r3, #7]
 8005764:	2b02      	cmp	r3, #2
 8005766:	d10f      	bne.n	8005788 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	015a      	lsls	r2, r3, #5
 800576c:	6a3b      	ldr	r3, [r7, #32]
 800576e:	4413      	add	r3, r2
 8005770:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	69fa      	ldr	r2, [r7, #28]
 8005778:	0151      	lsls	r1, r2, #5
 800577a:	6a3a      	ldr	r2, [r7, #32]
 800577c:	440a      	add	r2, r1
 800577e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005786:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005788:	79fb      	ldrb	r3, [r7, #7]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d10b      	bne.n	80057a6 <USB_HC_StartXfer+0x86>
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	795b      	ldrb	r3, [r3, #5]
 8005792:	2b01      	cmp	r3, #1
 8005794:	d107      	bne.n	80057a6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	785b      	ldrb	r3, [r3, #1]
 800579a:	4619      	mov	r1, r3
 800579c:	68f8      	ldr	r0, [r7, #12]
 800579e:	f000 fa0f 	bl	8005bc0 <USB_DoPing>
      return HAL_OK;
 80057a2:	2300      	movs	r3, #0
 80057a4:	e0f8      	b.n	8005998 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	695b      	ldr	r3, [r3, #20]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d018      	beq.n	80057e0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	695b      	ldr	r3, [r3, #20]
 80057b2:	68ba      	ldr	r2, [r7, #8]
 80057b4:	8912      	ldrh	r2, [r2, #8]
 80057b6:	4413      	add	r3, r2
 80057b8:	3b01      	subs	r3, #1
 80057ba:	68ba      	ldr	r2, [r7, #8]
 80057bc:	8912      	ldrh	r2, [r2, #8]
 80057be:	fbb3 f3f2 	udiv	r3, r3, r2
 80057c2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80057c4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80057c6:	8b7b      	ldrh	r3, [r7, #26]
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d90b      	bls.n	80057e4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80057cc:	8b7b      	ldrh	r3, [r7, #26]
 80057ce:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80057d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80057d2:	68ba      	ldr	r2, [r7, #8]
 80057d4:	8912      	ldrh	r2, [r2, #8]
 80057d6:	fb03 f202 	mul.w	r2, r3, r2
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	611a      	str	r2, [r3, #16]
 80057de:	e001      	b.n	80057e4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80057e0:	2301      	movs	r3, #1
 80057e2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	78db      	ldrb	r3, [r3, #3]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d007      	beq.n	80057fc <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80057ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80057ee:	68ba      	ldr	r2, [r7, #8]
 80057f0:	8912      	ldrh	r2, [r2, #8]
 80057f2:	fb03 f202 	mul.w	r2, r3, r2
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	611a      	str	r2, [r3, #16]
 80057fa:	e003      	b.n	8005804 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	695a      	ldr	r2, [r3, #20]
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	691b      	ldr	r3, [r3, #16]
 8005808:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800580c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800580e:	04d9      	lsls	r1, r3, #19
 8005810:	4b63      	ldr	r3, [pc, #396]	; (80059a0 <USB_HC_StartXfer+0x280>)
 8005812:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005814:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	7a9b      	ldrb	r3, [r3, #10]
 800581a:	075b      	lsls	r3, r3, #29
 800581c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005820:	69f9      	ldr	r1, [r7, #28]
 8005822:	0148      	lsls	r0, r1, #5
 8005824:	6a39      	ldr	r1, [r7, #32]
 8005826:	4401      	add	r1, r0
 8005828:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800582c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800582e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005830:	79fb      	ldrb	r3, [r7, #7]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d009      	beq.n	800584a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	68d9      	ldr	r1, [r3, #12]
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	015a      	lsls	r2, r3, #5
 800583e:	6a3b      	ldr	r3, [r7, #32]
 8005840:	4413      	add	r3, r2
 8005842:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005846:	460a      	mov	r2, r1
 8005848:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800584a:	6a3b      	ldr	r3, [r7, #32]
 800584c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	f003 0301 	and.w	r3, r3, #1
 8005856:	2b00      	cmp	r3, #0
 8005858:	bf0c      	ite	eq
 800585a:	2301      	moveq	r3, #1
 800585c:	2300      	movne	r3, #0
 800585e:	b2db      	uxtb	r3, r3
 8005860:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	015a      	lsls	r2, r3, #5
 8005866:	6a3b      	ldr	r3, [r7, #32]
 8005868:	4413      	add	r3, r2
 800586a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	69fa      	ldr	r2, [r7, #28]
 8005872:	0151      	lsls	r1, r2, #5
 8005874:	6a3a      	ldr	r2, [r7, #32]
 8005876:	440a      	add	r2, r1
 8005878:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800587c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005880:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	015a      	lsls	r2, r3, #5
 8005886:	6a3b      	ldr	r3, [r7, #32]
 8005888:	4413      	add	r3, r2
 800588a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	7e7b      	ldrb	r3, [r7, #25]
 8005892:	075b      	lsls	r3, r3, #29
 8005894:	69f9      	ldr	r1, [r7, #28]
 8005896:	0148      	lsls	r0, r1, #5
 8005898:	6a39      	ldr	r1, [r7, #32]
 800589a:	4401      	add	r1, r0
 800589c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80058a0:	4313      	orrs	r3, r2
 80058a2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	015a      	lsls	r2, r3, #5
 80058a8:	6a3b      	ldr	r3, [r7, #32]
 80058aa:	4413      	add	r3, r2
 80058ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80058ba:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	78db      	ldrb	r3, [r3, #3]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d004      	beq.n	80058ce <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058ca:	613b      	str	r3, [r7, #16]
 80058cc:	e003      	b.n	80058d6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80058d4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80058dc:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	015a      	lsls	r2, r3, #5
 80058e2:	6a3b      	ldr	r3, [r7, #32]
 80058e4:	4413      	add	r3, r2
 80058e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058ea:	461a      	mov	r2, r3
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80058f0:	79fb      	ldrb	r3, [r7, #7]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d001      	beq.n	80058fa <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80058f6:	2300      	movs	r3, #0
 80058f8:	e04e      	b.n	8005998 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	78db      	ldrb	r3, [r3, #3]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d149      	bne.n	8005996 <USB_HC_StartXfer+0x276>
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	695b      	ldr	r3, [r3, #20]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d045      	beq.n	8005996 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	79db      	ldrb	r3, [r3, #7]
 800590e:	2b03      	cmp	r3, #3
 8005910:	d830      	bhi.n	8005974 <USB_HC_StartXfer+0x254>
 8005912:	a201      	add	r2, pc, #4	; (adr r2, 8005918 <USB_HC_StartXfer+0x1f8>)
 8005914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005918:	08005929 	.word	0x08005929
 800591c:	0800594d 	.word	0x0800594d
 8005920:	08005929 	.word	0x08005929
 8005924:	0800594d 	.word	0x0800594d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	695b      	ldr	r3, [r3, #20]
 800592c:	3303      	adds	r3, #3
 800592e:	089b      	lsrs	r3, r3, #2
 8005930:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005932:	8afa      	ldrh	r2, [r7, #22]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005938:	b29b      	uxth	r3, r3
 800593a:	429a      	cmp	r2, r3
 800593c:	d91c      	bls.n	8005978 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	699b      	ldr	r3, [r3, #24]
 8005942:	f043 0220 	orr.w	r2, r3, #32
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	619a      	str	r2, [r3, #24]
        }
        break;
 800594a:	e015      	b.n	8005978 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	695b      	ldr	r3, [r3, #20]
 8005950:	3303      	adds	r3, #3
 8005952:	089b      	lsrs	r3, r3, #2
 8005954:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005956:	8afa      	ldrh	r2, [r7, #22]
 8005958:	6a3b      	ldr	r3, [r7, #32]
 800595a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800595e:	691b      	ldr	r3, [r3, #16]
 8005960:	b29b      	uxth	r3, r3
 8005962:	429a      	cmp	r2, r3
 8005964:	d90a      	bls.n	800597c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	699b      	ldr	r3, [r3, #24]
 800596a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	619a      	str	r2, [r3, #24]
        }
        break;
 8005972:	e003      	b.n	800597c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005974:	bf00      	nop
 8005976:	e002      	b.n	800597e <USB_HC_StartXfer+0x25e>
        break;
 8005978:	bf00      	nop
 800597a:	e000      	b.n	800597e <USB_HC_StartXfer+0x25e>
        break;
 800597c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	68d9      	ldr	r1, [r3, #12]
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	785a      	ldrb	r2, [r3, #1]
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	695b      	ldr	r3, [r3, #20]
 800598a:	b29b      	uxth	r3, r3
 800598c:	2000      	movs	r0, #0
 800598e:	9000      	str	r0, [sp, #0]
 8005990:	68f8      	ldr	r0, [r7, #12]
 8005992:	f7ff fb31 	bl	8004ff8 <USB_WritePacket>
  }

  return HAL_OK;
 8005996:	2300      	movs	r3, #0
}
 8005998:	4618      	mov	r0, r3
 800599a:	3728      	adds	r7, #40	; 0x28
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	1ff80000 	.word	0x1ff80000

080059a4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b085      	sub	sp, #20
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059b6:	695b      	ldr	r3, [r3, #20]
 80059b8:	b29b      	uxth	r3, r3
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3714      	adds	r7, #20
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr

080059c6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80059c6:	b480      	push	{r7}
 80059c8:	b089      	sub	sp, #36	; 0x24
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
 80059ce:	460b      	mov	r3, r1
 80059d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80059d6:	78fb      	ldrb	r3, [r7, #3]
 80059d8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80059da:	2300      	movs	r3, #0
 80059dc:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	015a      	lsls	r2, r3, #5
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	4413      	add	r3, r2
 80059e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	0c9b      	lsrs	r3, r3, #18
 80059ee:	f003 0303 	and.w	r3, r3, #3
 80059f2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	015a      	lsls	r2, r3, #5
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	4413      	add	r3, r2
 80059fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	0fdb      	lsrs	r3, r3, #31
 8005a04:	f003 0301 	and.w	r3, r3, #1
 8005a08:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	f003 0320 	and.w	r3, r3, #32
 8005a12:	2b20      	cmp	r3, #32
 8005a14:	d104      	bne.n	8005a20 <USB_HC_Halt+0x5a>
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d101      	bne.n	8005a20 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	e0c8      	b.n	8005bb2 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d002      	beq.n	8005a2c <USB_HC_Halt+0x66>
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	2b02      	cmp	r3, #2
 8005a2a:	d163      	bne.n	8005af4 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005a2c:	69bb      	ldr	r3, [r7, #24]
 8005a2e:	015a      	lsls	r2, r3, #5
 8005a30:	69fb      	ldr	r3, [r7, #28]
 8005a32:	4413      	add	r3, r2
 8005a34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	69ba      	ldr	r2, [r7, #24]
 8005a3c:	0151      	lsls	r1, r2, #5
 8005a3e:	69fa      	ldr	r2, [r7, #28]
 8005a40:	440a      	add	r2, r1
 8005a42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a46:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a4a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	f003 0320 	and.w	r3, r3, #32
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	f040 80ab 	bne.w	8005bb0 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a5e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d133      	bne.n	8005ace <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	015a      	lsls	r2, r3, #5
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	4413      	add	r3, r2
 8005a6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	69ba      	ldr	r2, [r7, #24]
 8005a76:	0151      	lsls	r1, r2, #5
 8005a78:	69fa      	ldr	r2, [r7, #28]
 8005a7a:	440a      	add	r2, r1
 8005a7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a80:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a84:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005a86:	69bb      	ldr	r3, [r7, #24]
 8005a88:	015a      	lsls	r2, r3, #5
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	4413      	add	r3, r2
 8005a8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	69ba      	ldr	r2, [r7, #24]
 8005a96:	0151      	lsls	r1, r2, #5
 8005a98:	69fa      	ldr	r2, [r7, #28]
 8005a9a:	440a      	add	r2, r1
 8005a9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005aa0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005aa4:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ab2:	d81d      	bhi.n	8005af0 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	015a      	lsls	r2, r3, #5
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	4413      	add	r3, r2
 8005abc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ac6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005aca:	d0ec      	beq.n	8005aa6 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005acc:	e070      	b.n	8005bb0 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	015a      	lsls	r2, r3, #5
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	69ba      	ldr	r2, [r7, #24]
 8005ade:	0151      	lsls	r1, r2, #5
 8005ae0:	69fa      	ldr	r2, [r7, #28]
 8005ae2:	440a      	add	r2, r1
 8005ae4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ae8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005aec:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005aee:	e05f      	b.n	8005bb0 <USB_HC_Halt+0x1ea>
            break;
 8005af0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005af2:	e05d      	b.n	8005bb0 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	015a      	lsls	r2, r3, #5
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	4413      	add	r3, r2
 8005afc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	69ba      	ldr	r2, [r7, #24]
 8005b04:	0151      	lsls	r1, r2, #5
 8005b06:	69fa      	ldr	r2, [r7, #28]
 8005b08:	440a      	add	r2, r1
 8005b0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b12:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b1a:	691b      	ldr	r3, [r3, #16]
 8005b1c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d133      	bne.n	8005b8c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005b24:	69bb      	ldr	r3, [r7, #24]
 8005b26:	015a      	lsls	r2, r3, #5
 8005b28:	69fb      	ldr	r3, [r7, #28]
 8005b2a:	4413      	add	r3, r2
 8005b2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	69ba      	ldr	r2, [r7, #24]
 8005b34:	0151      	lsls	r1, r2, #5
 8005b36:	69fa      	ldr	r2, [r7, #28]
 8005b38:	440a      	add	r2, r1
 8005b3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b42:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005b44:	69bb      	ldr	r3, [r7, #24]
 8005b46:	015a      	lsls	r2, r3, #5
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	4413      	add	r3, r2
 8005b4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	69ba      	ldr	r2, [r7, #24]
 8005b54:	0151      	lsls	r1, r2, #5
 8005b56:	69fa      	ldr	r2, [r7, #28]
 8005b58:	440a      	add	r2, r1
 8005b5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b62:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	3301      	adds	r3, #1
 8005b68:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b70:	d81d      	bhi.n	8005bae <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	015a      	lsls	r2, r3, #5
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	4413      	add	r3, r2
 8005b7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b88:	d0ec      	beq.n	8005b64 <USB_HC_Halt+0x19e>
 8005b8a:	e011      	b.n	8005bb0 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	015a      	lsls	r2, r3, #5
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	4413      	add	r3, r2
 8005b94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	69ba      	ldr	r2, [r7, #24]
 8005b9c:	0151      	lsls	r1, r2, #5
 8005b9e:	69fa      	ldr	r2, [r7, #28]
 8005ba0:	440a      	add	r2, r1
 8005ba2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ba6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005baa:	6013      	str	r3, [r2, #0]
 8005bac:	e000      	b.n	8005bb0 <USB_HC_Halt+0x1ea>
          break;
 8005bae:	bf00      	nop
    }
  }

  return HAL_OK;
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3724      	adds	r7, #36	; 0x24
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
	...

08005bc0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b087      	sub	sp, #28
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	460b      	mov	r3, r1
 8005bca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005bd0:	78fb      	ldrb	r3, [r7, #3]
 8005bd2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	04da      	lsls	r2, r3, #19
 8005bdc:	4b15      	ldr	r3, [pc, #84]	; (8005c34 <USB_DoPing+0x74>)
 8005bde:	4013      	ands	r3, r2
 8005be0:	693a      	ldr	r2, [r7, #16]
 8005be2:	0151      	lsls	r1, r2, #5
 8005be4:	697a      	ldr	r2, [r7, #20]
 8005be6:	440a      	add	r2, r1
 8005be8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005bf0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	015a      	lsls	r2, r3, #5
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	4413      	add	r3, r2
 8005bfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005c08:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c10:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	015a      	lsls	r2, r3, #5
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	4413      	add	r3, r2
 8005c1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c1e:	461a      	mov	r2, r3
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005c24:	2300      	movs	r3, #0
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	371c      	adds	r7, #28
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c30:	4770      	bx	lr
 8005c32:	bf00      	nop
 8005c34:	1ff80000 	.word	0x1ff80000

08005c38 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b088      	sub	sp, #32
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005c40:	2300      	movs	r3, #0
 8005c42:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f7ff f911 	bl	8004e74 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005c52:	2110      	movs	r1, #16
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f7ff f96b 	bl	8004f30 <USB_FlushTxFifo>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d001      	beq.n	8005c64 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f7ff f997 	bl	8004f98 <USB_FlushRxFifo>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d001      	beq.n	8005c74 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005c74:	2300      	movs	r3, #0
 8005c76:	61bb      	str	r3, [r7, #24]
 8005c78:	e01f      	b.n	8005cba <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	015a      	lsls	r2, r3, #5
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	4413      	add	r3, r2
 8005c82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c90:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c98:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ca0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	015a      	lsls	r2, r3, #5
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	4413      	add	r3, r2
 8005caa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cae:	461a      	mov	r2, r3
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005cb4:	69bb      	ldr	r3, [r7, #24]
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	61bb      	str	r3, [r7, #24]
 8005cba:	69bb      	ldr	r3, [r7, #24]
 8005cbc:	2b0f      	cmp	r3, #15
 8005cbe:	d9dc      	bls.n	8005c7a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	61bb      	str	r3, [r7, #24]
 8005cc4:	e034      	b.n	8005d30 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	015a      	lsls	r2, r3, #5
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	4413      	add	r3, r2
 8005cce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005cdc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ce4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005cec:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	015a      	lsls	r2, r3, #5
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	3301      	adds	r3, #1
 8005d04:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d0c:	d80c      	bhi.n	8005d28 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	015a      	lsls	r2, r3, #5
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	4413      	add	r3, r2
 8005d16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d24:	d0ec      	beq.n	8005d00 <USB_StopHost+0xc8>
 8005d26:	e000      	b.n	8005d2a <USB_StopHost+0xf2>
        break;
 8005d28:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005d2a:	69bb      	ldr	r3, [r7, #24]
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	61bb      	str	r3, [r7, #24]
 8005d30:	69bb      	ldr	r3, [r7, #24]
 8005d32:	2b0f      	cmp	r3, #15
 8005d34:	d9c7      	bls.n	8005cc6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8005d42:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f04f 32ff 	mov.w	r2, #4294967295
 8005d4a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f7ff f880 	bl	8004e52 <USB_EnableGlobalInt>

  return ret;
 8005d52:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3720      	adds	r7, #32
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b083      	sub	sp, #12
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8005d64:	4a04      	ldr	r2, [pc, #16]	; (8005d78 <LL_SetSystemCoreClock+0x1c>)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6013      	str	r3, [r2, #0]
}
 8005d6a:	bf00      	nop
 8005d6c:	370c      	adds	r7, #12
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop
 8005d78:	20000000 	.word	0x20000000

08005d7c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005d7c:	b590      	push	{r4, r7, lr}
 8005d7e:	b089      	sub	sp, #36	; 0x24
 8005d80:	af04      	add	r7, sp, #16
 8005d82:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005d84:	2301      	movs	r3, #1
 8005d86:	2202      	movs	r2, #2
 8005d88:	2102      	movs	r1, #2
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 fc66 	bl	800665c <USBH_FindInterface>
 8005d90:	4603      	mov	r3, r0
 8005d92:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005d94:	7bfb      	ldrb	r3, [r7, #15]
 8005d96:	2bff      	cmp	r3, #255	; 0xff
 8005d98:	d002      	beq.n	8005da0 <USBH_CDC_InterfaceInit+0x24>
 8005d9a:	7bfb      	ldrb	r3, [r7, #15]
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d901      	bls.n	8005da4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005da0:	2302      	movs	r3, #2
 8005da2:	e13d      	b.n	8006020 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005da4:	7bfb      	ldrb	r3, [r7, #15]
 8005da6:	4619      	mov	r1, r3
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f000 fc3b 	bl	8006624 <USBH_SelectInterface>
 8005dae:	4603      	mov	r3, r0
 8005db0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005db2:	7bbb      	ldrb	r3, [r7, #14]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d001      	beq.n	8005dbc <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005db8:	2302      	movs	r3, #2
 8005dba:	e131      	b.n	8006020 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005dc2:	2050      	movs	r0, #80	; 0x50
 8005dc4:	f002 fafa 	bl	80083bc <malloc>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005dd2:	69db      	ldr	r3, [r3, #28]
 8005dd4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d101      	bne.n	8005de0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005ddc:	2302      	movs	r3, #2
 8005dde:	e11f      	b.n	8006020 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005de0:	2250      	movs	r2, #80	; 0x50
 8005de2:	2100      	movs	r1, #0
 8005de4:	68b8      	ldr	r0, [r7, #8]
 8005de6:	f002 faf9 	bl	80083dc <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005dea:	7bfb      	ldrb	r3, [r7, #15]
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	211a      	movs	r1, #26
 8005df0:	fb01 f303 	mul.w	r3, r1, r3
 8005df4:	4413      	add	r3, r2
 8005df6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	b25b      	sxtb	r3, r3
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	da15      	bge.n	8005e2e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005e02:	7bfb      	ldrb	r3, [r7, #15]
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	211a      	movs	r1, #26
 8005e08:	fb01 f303 	mul.w	r3, r1, r3
 8005e0c:	4413      	add	r3, r2
 8005e0e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005e12:	781a      	ldrb	r2, [r3, #0]
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005e18:	7bfb      	ldrb	r3, [r7, #15]
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	211a      	movs	r1, #26
 8005e1e:	fb01 f303 	mul.w	r3, r1, r3
 8005e22:	4413      	add	r3, r2
 8005e24:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005e28:	881a      	ldrh	r2, [r3, #0]
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	785b      	ldrb	r3, [r3, #1]
 8005e32:	4619      	mov	r1, r3
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f001 ff2c 	bl	8007c92 <USBH_AllocPipe>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	7819      	ldrb	r1, [r3, #0]
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	7858      	ldrb	r0, [r3, #1]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005e56:	68ba      	ldr	r2, [r7, #8]
 8005e58:	8952      	ldrh	r2, [r2, #10]
 8005e5a:	9202      	str	r2, [sp, #8]
 8005e5c:	2203      	movs	r2, #3
 8005e5e:	9201      	str	r2, [sp, #4]
 8005e60:	9300      	str	r3, [sp, #0]
 8005e62:	4623      	mov	r3, r4
 8005e64:	4602      	mov	r2, r0
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f001 fee4 	bl	8007c34 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	2200      	movs	r2, #0
 8005e72:	4619      	mov	r1, r3
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f002 f9f3 	bl	8008260 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	210a      	movs	r1, #10
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 fbeb 	bl	800665c <USBH_FindInterface>
 8005e86:	4603      	mov	r3, r0
 8005e88:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005e8a:	7bfb      	ldrb	r3, [r7, #15]
 8005e8c:	2bff      	cmp	r3, #255	; 0xff
 8005e8e:	d002      	beq.n	8005e96 <USBH_CDC_InterfaceInit+0x11a>
 8005e90:	7bfb      	ldrb	r3, [r7, #15]
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d901      	bls.n	8005e9a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005e96:	2302      	movs	r3, #2
 8005e98:	e0c2      	b.n	8006020 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005e9a:	7bfb      	ldrb	r3, [r7, #15]
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	211a      	movs	r1, #26
 8005ea0:	fb01 f303 	mul.w	r3, r1, r3
 8005ea4:	4413      	add	r3, r2
 8005ea6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	b25b      	sxtb	r3, r3
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	da16      	bge.n	8005ee0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005eb2:	7bfb      	ldrb	r3, [r7, #15]
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	211a      	movs	r1, #26
 8005eb8:	fb01 f303 	mul.w	r3, r1, r3
 8005ebc:	4413      	add	r3, r2
 8005ebe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005ec2:	781a      	ldrb	r2, [r3, #0]
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005ec8:	7bfb      	ldrb	r3, [r7, #15]
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	211a      	movs	r1, #26
 8005ece:	fb01 f303 	mul.w	r3, r1, r3
 8005ed2:	4413      	add	r3, r2
 8005ed4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005ed8:	881a      	ldrh	r2, [r3, #0]
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	835a      	strh	r2, [r3, #26]
 8005ede:	e015      	b.n	8005f0c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005ee0:	7bfb      	ldrb	r3, [r7, #15]
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	211a      	movs	r1, #26
 8005ee6:	fb01 f303 	mul.w	r3, r1, r3
 8005eea:	4413      	add	r3, r2
 8005eec:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005ef0:	781a      	ldrb	r2, [r3, #0]
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005ef6:	7bfb      	ldrb	r3, [r7, #15]
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	211a      	movs	r1, #26
 8005efc:	fb01 f303 	mul.w	r3, r1, r3
 8005f00:	4413      	add	r3, r2
 8005f02:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005f06:	881a      	ldrh	r2, [r3, #0]
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8005f0c:	7bfb      	ldrb	r3, [r7, #15]
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	211a      	movs	r1, #26
 8005f12:	fb01 f303 	mul.w	r3, r1, r3
 8005f16:	4413      	add	r3, r2
 8005f18:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	b25b      	sxtb	r3, r3
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	da16      	bge.n	8005f52 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005f24:	7bfb      	ldrb	r3, [r7, #15]
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	211a      	movs	r1, #26
 8005f2a:	fb01 f303 	mul.w	r3, r1, r3
 8005f2e:	4413      	add	r3, r2
 8005f30:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005f34:	781a      	ldrb	r2, [r3, #0]
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005f3a:	7bfb      	ldrb	r3, [r7, #15]
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	211a      	movs	r1, #26
 8005f40:	fb01 f303 	mul.w	r3, r1, r3
 8005f44:	4413      	add	r3, r2
 8005f46:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005f4a:	881a      	ldrh	r2, [r3, #0]
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	835a      	strh	r2, [r3, #26]
 8005f50:	e015      	b.n	8005f7e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005f52:	7bfb      	ldrb	r3, [r7, #15]
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	211a      	movs	r1, #26
 8005f58:	fb01 f303 	mul.w	r3, r1, r3
 8005f5c:	4413      	add	r3, r2
 8005f5e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005f62:	781a      	ldrb	r2, [r3, #0]
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005f68:	7bfb      	ldrb	r3, [r7, #15]
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	211a      	movs	r1, #26
 8005f6e:	fb01 f303 	mul.w	r3, r1, r3
 8005f72:	4413      	add	r3, r2
 8005f74:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005f78:	881a      	ldrh	r2, [r3, #0]
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	7b9b      	ldrb	r3, [r3, #14]
 8005f82:	4619      	mov	r1, r3
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f001 fe84 	bl	8007c92 <USBH_AllocPipe>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	7bdb      	ldrb	r3, [r3, #15]
 8005f96:	4619      	mov	r1, r3
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f001 fe7a 	bl	8007c92 <USBH_AllocPipe>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	7b59      	ldrb	r1, [r3, #13]
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	7b98      	ldrb	r0, [r3, #14]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005fba:	68ba      	ldr	r2, [r7, #8]
 8005fbc:	8b12      	ldrh	r2, [r2, #24]
 8005fbe:	9202      	str	r2, [sp, #8]
 8005fc0:	2202      	movs	r2, #2
 8005fc2:	9201      	str	r2, [sp, #4]
 8005fc4:	9300      	str	r3, [sp, #0]
 8005fc6:	4623      	mov	r3, r4
 8005fc8:	4602      	mov	r2, r0
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f001 fe32 	bl	8007c34 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	7b19      	ldrb	r1, [r3, #12]
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	7bd8      	ldrb	r0, [r3, #15]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005fe4:	68ba      	ldr	r2, [r7, #8]
 8005fe6:	8b52      	ldrh	r2, [r2, #26]
 8005fe8:	9202      	str	r2, [sp, #8]
 8005fea:	2202      	movs	r2, #2
 8005fec:	9201      	str	r2, [sp, #4]
 8005fee:	9300      	str	r3, [sp, #0]
 8005ff0:	4623      	mov	r3, r4
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f001 fe1d 	bl	8007c34 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	7b5b      	ldrb	r3, [r3, #13]
 8006006:	2200      	movs	r2, #0
 8006008:	4619      	mov	r1, r3
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f002 f928 	bl	8008260 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	7b1b      	ldrb	r3, [r3, #12]
 8006014:	2200      	movs	r2, #0
 8006016:	4619      	mov	r1, r3
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f002 f921 	bl	8008260 <USBH_LL_SetToggle>

  return USBH_OK;
 800601e:	2300      	movs	r3, #0
}
 8006020:	4618      	mov	r0, r3
 8006022:	3714      	adds	r7, #20
 8006024:	46bd      	mov	sp, r7
 8006026:	bd90      	pop	{r4, r7, pc}

08006028 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006036:	69db      	ldr	r3, [r3, #28]
 8006038:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d00e      	beq.n	8006060 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	4619      	mov	r1, r3
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f001 fe12 	bl	8007c72 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	4619      	mov	r1, r3
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f001 fe3d 	bl	8007cd4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2200      	movs	r2, #0
 800605e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	7b1b      	ldrb	r3, [r3, #12]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d00e      	beq.n	8006086 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	7b1b      	ldrb	r3, [r3, #12]
 800606c:	4619      	mov	r1, r3
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f001 fdff 	bl	8007c72 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	7b1b      	ldrb	r3, [r3, #12]
 8006078:	4619      	mov	r1, r3
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f001 fe2a 	bl	8007cd4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2200      	movs	r2, #0
 8006084:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	7b5b      	ldrb	r3, [r3, #13]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00e      	beq.n	80060ac <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	7b5b      	ldrb	r3, [r3, #13]
 8006092:	4619      	mov	r1, r3
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f001 fdec 	bl	8007c72 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	7b5b      	ldrb	r3, [r3, #13]
 800609e:	4619      	mov	r1, r3
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f001 fe17 	bl	8007cd4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2200      	movs	r2, #0
 80060aa:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060b2:	69db      	ldr	r3, [r3, #28]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d00b      	beq.n	80060d0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060be:	69db      	ldr	r3, [r3, #28]
 80060c0:	4618      	mov	r0, r3
 80060c2:	f002 f983 	bl	80083cc <free>
    phost->pActiveClass->pData = 0U;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060cc:	2200      	movs	r2, #0
 80060ce:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3710      	adds	r7, #16
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}

080060da <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80060da:	b580      	push	{r7, lr}
 80060dc:	b084      	sub	sp, #16
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060e8:	69db      	ldr	r3, [r3, #28]
 80060ea:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	3340      	adds	r3, #64	; 0x40
 80060f0:	4619      	mov	r1, r3
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 f8b1 	bl	800625a <GetLineCoding>
 80060f8:	4603      	mov	r3, r0
 80060fa:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80060fc:	7afb      	ldrb	r3, [r7, #11]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d105      	bne.n	800610e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006108:	2102      	movs	r1, #2
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800610e:	7afb      	ldrb	r3, [r7, #11]
}
 8006110:	4618      	mov	r0, r3
 8006112:	3710      	adds	r7, #16
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006120:	2301      	movs	r3, #1
 8006122:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006124:	2300      	movs	r3, #0
 8006126:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800612e:	69db      	ldr	r3, [r3, #28]
 8006130:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006138:	2b04      	cmp	r3, #4
 800613a:	d877      	bhi.n	800622c <USBH_CDC_Process+0x114>
 800613c:	a201      	add	r2, pc, #4	; (adr r2, 8006144 <USBH_CDC_Process+0x2c>)
 800613e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006142:	bf00      	nop
 8006144:	08006159 	.word	0x08006159
 8006148:	0800615f 	.word	0x0800615f
 800614c:	0800618f 	.word	0x0800618f
 8006150:	08006203 	.word	0x08006203
 8006154:	08006211 	.word	0x08006211
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006158:	2300      	movs	r3, #0
 800615a:	73fb      	strb	r3, [r7, #15]
      break;
 800615c:	e06d      	b.n	800623a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006162:	4619      	mov	r1, r3
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f000 f897 	bl	8006298 <SetLineCoding>
 800616a:	4603      	mov	r3, r0
 800616c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800616e:	7bbb      	ldrb	r3, [r7, #14]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d104      	bne.n	800617e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	2202      	movs	r2, #2
 8006178:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800617c:	e058      	b.n	8006230 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800617e:	7bbb      	ldrb	r3, [r7, #14]
 8006180:	2b01      	cmp	r3, #1
 8006182:	d055      	beq.n	8006230 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	2204      	movs	r2, #4
 8006188:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800618c:	e050      	b.n	8006230 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	3340      	adds	r3, #64	; 0x40
 8006192:	4619      	mov	r1, r3
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f000 f860 	bl	800625a <GetLineCoding>
 800619a:	4603      	mov	r3, r0
 800619c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800619e:	7bbb      	ldrb	r3, [r7, #14]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d126      	bne.n	80061f2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	2200      	movs	r2, #0
 80061a8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061b6:	791b      	ldrb	r3, [r3, #4]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d13b      	bne.n	8006234 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061c6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d133      	bne.n	8006234 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061d6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80061d8:	429a      	cmp	r2, r3
 80061da:	d12b      	bne.n	8006234 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061e4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d124      	bne.n	8006234 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 f958 	bl	80064a0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80061f0:	e020      	b.n	8006234 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80061f2:	7bbb      	ldrb	r3, [r7, #14]
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d01d      	beq.n	8006234 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	2204      	movs	r2, #4
 80061fc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006200:	e018      	b.n	8006234 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 f867 	bl	80062d6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f000 f8da 	bl	80063c2 <CDC_ProcessReception>
      break;
 800620e:	e014      	b.n	800623a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006210:	2100      	movs	r1, #0
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 ffef 	bl	80071f6 <USBH_ClrFeature>
 8006218:	4603      	mov	r3, r0
 800621a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800621c:	7bbb      	ldrb	r3, [r7, #14]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d10a      	bne.n	8006238 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	2200      	movs	r2, #0
 8006226:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800622a:	e005      	b.n	8006238 <USBH_CDC_Process+0x120>

    default:
      break;
 800622c:	bf00      	nop
 800622e:	e004      	b.n	800623a <USBH_CDC_Process+0x122>
      break;
 8006230:	bf00      	nop
 8006232:	e002      	b.n	800623a <USBH_CDC_Process+0x122>
      break;
 8006234:	bf00      	nop
 8006236:	e000      	b.n	800623a <USBH_CDC_Process+0x122>
      break;
 8006238:	bf00      	nop

  }

  return status;
 800623a:	7bfb      	ldrb	r3, [r7, #15]
}
 800623c:	4618      	mov	r0, r3
 800623e:	3710      	adds	r7, #16
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800624c:	2300      	movs	r3, #0
}
 800624e:	4618      	mov	r0, r3
 8006250:	370c      	adds	r7, #12
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr

0800625a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800625a:	b580      	push	{r7, lr}
 800625c:	b082      	sub	sp, #8
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
 8006262:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	22a1      	movs	r2, #161	; 0xa1
 8006268:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2221      	movs	r2, #33	; 0x21
 800626e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2200      	movs	r2, #0
 800627a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2207      	movs	r2, #7
 8006280:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	2207      	movs	r2, #7
 8006286:	4619      	mov	r1, r3
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f001 fa81 	bl	8007790 <USBH_CtlReq>
 800628e:	4603      	mov	r3, r0
}
 8006290:	4618      	mov	r0, r3
 8006292:	3708      	adds	r7, #8
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b082      	sub	sp, #8
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2221      	movs	r2, #33	; 0x21
 80062a6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2220      	movs	r2, #32
 80062ac:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2207      	movs	r2, #7
 80062be:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	2207      	movs	r2, #7
 80062c4:	4619      	mov	r1, r3
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f001 fa62 	bl	8007790 <USBH_CtlReq>
 80062cc:	4603      	mov	r3, r0
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3708      	adds	r7, #8
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}

080062d6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80062d6:	b580      	push	{r7, lr}
 80062d8:	b086      	sub	sp, #24
 80062da:	af02      	add	r7, sp, #8
 80062dc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062e4:	69db      	ldr	r3, [r3, #28]
 80062e6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80062e8:	2300      	movs	r3, #0
 80062ea:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d002      	beq.n	80062fc <CDC_ProcessTransmission+0x26>
 80062f6:	2b02      	cmp	r3, #2
 80062f8:	d023      	beq.n	8006342 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80062fa:	e05e      	b.n	80063ba <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	8b12      	ldrh	r2, [r2, #24]
 8006304:	4293      	cmp	r3, r2
 8006306:	d90b      	bls.n	8006320 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	69d9      	ldr	r1, [r3, #28]
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	8b1a      	ldrh	r2, [r3, #24]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	7b5b      	ldrb	r3, [r3, #13]
 8006314:	2001      	movs	r0, #1
 8006316:	9000      	str	r0, [sp, #0]
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f001 fc48 	bl	8007bae <USBH_BulkSendData>
 800631e:	e00b      	b.n	8006338 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006328:	b29a      	uxth	r2, r3
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	7b5b      	ldrb	r3, [r3, #13]
 800632e:	2001      	movs	r0, #1
 8006330:	9000      	str	r0, [sp, #0]
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f001 fc3b 	bl	8007bae <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2202      	movs	r2, #2
 800633c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006340:	e03b      	b.n	80063ba <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	7b5b      	ldrb	r3, [r3, #13]
 8006346:	4619      	mov	r1, r3
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f001 ff5f 	bl	800820c <USBH_LL_GetURBState>
 800634e:	4603      	mov	r3, r0
 8006350:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006352:	7afb      	ldrb	r3, [r7, #11]
 8006354:	2b01      	cmp	r3, #1
 8006356:	d128      	bne.n	80063aa <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	8b12      	ldrh	r2, [r2, #24]
 8006360:	4293      	cmp	r3, r2
 8006362:	d90e      	bls.n	8006382 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006368:	68fa      	ldr	r2, [r7, #12]
 800636a:	8b12      	ldrh	r2, [r2, #24]
 800636c:	1a9a      	subs	r2, r3, r2
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	69db      	ldr	r3, [r3, #28]
 8006376:	68fa      	ldr	r2, [r7, #12]
 8006378:	8b12      	ldrh	r2, [r2, #24]
 800637a:	441a      	add	r2, r3
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	61da      	str	r2, [r3, #28]
 8006380:	e002      	b.n	8006388 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2200      	movs	r2, #0
 8006386:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638c:	2b00      	cmp	r3, #0
 800638e:	d004      	beq.n	800639a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2201      	movs	r2, #1
 8006394:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006398:	e00e      	b.n	80063b8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2200      	movs	r2, #0
 800639e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 f868 	bl	8006478 <USBH_CDC_TransmitCallback>
      break;
 80063a8:	e006      	b.n	80063b8 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80063aa:	7afb      	ldrb	r3, [r7, #11]
 80063ac:	2b02      	cmp	r3, #2
 80063ae:	d103      	bne.n	80063b8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2201      	movs	r2, #1
 80063b4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80063b8:	bf00      	nop
  }
}
 80063ba:	bf00      	nop
 80063bc:	3710      	adds	r7, #16
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}

080063c2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80063c2:	b580      	push	{r7, lr}
 80063c4:	b086      	sub	sp, #24
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80063d0:	69db      	ldr	r3, [r3, #28]
 80063d2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80063d4:	2300      	movs	r3, #0
 80063d6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80063de:	2b03      	cmp	r3, #3
 80063e0:	d002      	beq.n	80063e8 <CDC_ProcessReception+0x26>
 80063e2:	2b04      	cmp	r3, #4
 80063e4:	d00e      	beq.n	8006404 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80063e6:	e043      	b.n	8006470 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	6a19      	ldr	r1, [r3, #32]
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	8b5a      	ldrh	r2, [r3, #26]
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	7b1b      	ldrb	r3, [r3, #12]
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f001 fbff 	bl	8007bf8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	2204      	movs	r2, #4
 80063fe:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006402:	e035      	b.n	8006470 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	7b1b      	ldrb	r3, [r3, #12]
 8006408:	4619      	mov	r1, r3
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f001 fefe 	bl	800820c <USBH_LL_GetURBState>
 8006410:	4603      	mov	r3, r0
 8006412:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006414:	7cfb      	ldrb	r3, [r7, #19]
 8006416:	2b01      	cmp	r3, #1
 8006418:	d129      	bne.n	800646e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	7b1b      	ldrb	r3, [r3, #12]
 800641e:	4619      	mov	r1, r3
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f001 fe61 	bl	80080e8 <USBH_LL_GetLastXferSize>
 8006426:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800642c:	68fa      	ldr	r2, [r7, #12]
 800642e:	429a      	cmp	r2, r3
 8006430:	d016      	beq.n	8006460 <CDC_ProcessReception+0x9e>
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	8b5b      	ldrh	r3, [r3, #26]
 8006436:	461a      	mov	r2, r3
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	4293      	cmp	r3, r2
 800643c:	d910      	bls.n	8006460 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	1ad2      	subs	r2, r2, r3
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	6a1a      	ldr	r2, [r3, #32]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	441a      	add	r2, r3
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	2203      	movs	r2, #3
 800645a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800645e:	e006      	b.n	800646e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	2200      	movs	r2, #0
 8006464:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 f80f 	bl	800648c <USBH_CDC_ReceiveCallback>
      break;
 800646e:	bf00      	nop
  }
}
 8006470:	bf00      	nop
 8006472:	3718      	adds	r7, #24
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006480:	bf00      	nop
 8006482:	370c      	adds	r7, #12
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr

0800648c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800648c:	b480      	push	{r7}
 800648e:	b083      	sub	sp, #12
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006494:	bf00      	nop
 8006496:	370c      	adds	r7, #12
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr

080064a0 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b083      	sub	sp, #12
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80064a8:	bf00      	nop
 80064aa:	370c      	adds	r7, #12
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b084      	sub	sp, #16
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	60b9      	str	r1, [r7, #8]
 80064be:	4613      	mov	r3, r2
 80064c0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d101      	bne.n	80064cc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80064c8:	2302      	movs	r3, #2
 80064ca:	e029      	b.n	8006520 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	79fa      	ldrb	r2, [r7, #7]
 80064d0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2200      	movs	r2, #0
 80064d8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2200      	movs	r2, #0
 80064e0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80064e4:	68f8      	ldr	r0, [r7, #12]
 80064e6:	f000 f81f 	bl	8006528 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2200      	movs	r2, #0
 80064fe:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2200      	movs	r2, #0
 8006506:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d003      	beq.n	8006518 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	68ba      	ldr	r2, [r7, #8]
 8006514:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006518:	68f8      	ldr	r0, [r7, #12]
 800651a:	f001 fd31 	bl	8007f80 <USBH_LL_Init>

  return USBH_OK;
 800651e:	2300      	movs	r3, #0
}
 8006520:	4618      	mov	r0, r3
 8006522:	3710      	adds	r7, #16
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006528:	b480      	push	{r7}
 800652a:	b085      	sub	sp, #20
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006530:	2300      	movs	r3, #0
 8006532:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006534:	2300      	movs	r3, #0
 8006536:	60fb      	str	r3, [r7, #12]
 8006538:	e009      	b.n	800654e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	33e0      	adds	r3, #224	; 0xe0
 8006540:	009b      	lsls	r3, r3, #2
 8006542:	4413      	add	r3, r2
 8006544:	2200      	movs	r2, #0
 8006546:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	3301      	adds	r3, #1
 800654c:	60fb      	str	r3, [r7, #12]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2b0f      	cmp	r3, #15
 8006552:	d9f2      	bls.n	800653a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006554:	2300      	movs	r3, #0
 8006556:	60fb      	str	r3, [r7, #12]
 8006558:	e009      	b.n	800656e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	4413      	add	r3, r2
 8006560:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006564:	2200      	movs	r2, #0
 8006566:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	3301      	adds	r3, #1
 800656c:	60fb      	str	r3, [r7, #12]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006574:	d3f1      	bcc.n	800655a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2200      	movs	r2, #0
 8006580:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2201      	movs	r2, #1
 8006586:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2201      	movs	r2, #1
 8006594:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2240      	movs	r2, #64	; 0x40
 800659a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2200      	movs	r2, #0
 80065a0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2201      	movs	r2, #1
 80065ae:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2200      	movs	r2, #0
 80065b6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2200      	movs	r2, #0
 80065be:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3714      	adds	r7, #20
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b085      	sub	sp, #20
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
 80065d8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80065da:	2300      	movs	r3, #0
 80065dc:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d016      	beq.n	8006612 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d10e      	bne.n	800660c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80065f4:	1c59      	adds	r1, r3, #1
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	33de      	adds	r3, #222	; 0xde
 8006600:	6839      	ldr	r1, [r7, #0]
 8006602:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006606:	2300      	movs	r3, #0
 8006608:	73fb      	strb	r3, [r7, #15]
 800660a:	e004      	b.n	8006616 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800660c:	2302      	movs	r3, #2
 800660e:	73fb      	strb	r3, [r7, #15]
 8006610:	e001      	b.n	8006616 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006612:	2302      	movs	r3, #2
 8006614:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006616:	7bfb      	ldrb	r3, [r7, #15]
}
 8006618:	4618      	mov	r0, r3
 800661a:	3714      	adds	r7, #20
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr

08006624 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006624:	b480      	push	{r7}
 8006626:	b085      	sub	sp, #20
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	460b      	mov	r3, r1
 800662e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006630:	2300      	movs	r3, #0
 8006632:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800663a:	78fa      	ldrb	r2, [r7, #3]
 800663c:	429a      	cmp	r2, r3
 800663e:	d204      	bcs.n	800664a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	78fa      	ldrb	r2, [r7, #3]
 8006644:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006648:	e001      	b.n	800664e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800664a:	2302      	movs	r3, #2
 800664c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800664e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006650:	4618      	mov	r0, r3
 8006652:	3714      	adds	r7, #20
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr

0800665c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800665c:	b480      	push	{r7}
 800665e:	b087      	sub	sp, #28
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	4608      	mov	r0, r1
 8006666:	4611      	mov	r1, r2
 8006668:	461a      	mov	r2, r3
 800666a:	4603      	mov	r3, r0
 800666c:	70fb      	strb	r3, [r7, #3]
 800666e:	460b      	mov	r3, r1
 8006670:	70bb      	strb	r3, [r7, #2]
 8006672:	4613      	mov	r3, r2
 8006674:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006676:	2300      	movs	r3, #0
 8006678:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800667a:	2300      	movs	r3, #0
 800667c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006684:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006686:	e025      	b.n	80066d4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006688:	7dfb      	ldrb	r3, [r7, #23]
 800668a:	221a      	movs	r2, #26
 800668c:	fb02 f303 	mul.w	r3, r2, r3
 8006690:	3308      	adds	r3, #8
 8006692:	68fa      	ldr	r2, [r7, #12]
 8006694:	4413      	add	r3, r2
 8006696:	3302      	adds	r3, #2
 8006698:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	795b      	ldrb	r3, [r3, #5]
 800669e:	78fa      	ldrb	r2, [r7, #3]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d002      	beq.n	80066aa <USBH_FindInterface+0x4e>
 80066a4:	78fb      	ldrb	r3, [r7, #3]
 80066a6:	2bff      	cmp	r3, #255	; 0xff
 80066a8:	d111      	bne.n	80066ce <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80066ae:	78ba      	ldrb	r2, [r7, #2]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d002      	beq.n	80066ba <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80066b4:	78bb      	ldrb	r3, [r7, #2]
 80066b6:	2bff      	cmp	r3, #255	; 0xff
 80066b8:	d109      	bne.n	80066ce <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80066be:	787a      	ldrb	r2, [r7, #1]
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d002      	beq.n	80066ca <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80066c4:	787b      	ldrb	r3, [r7, #1]
 80066c6:	2bff      	cmp	r3, #255	; 0xff
 80066c8:	d101      	bne.n	80066ce <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80066ca:	7dfb      	ldrb	r3, [r7, #23]
 80066cc:	e006      	b.n	80066dc <USBH_FindInterface+0x80>
    }
    if_ix++;
 80066ce:	7dfb      	ldrb	r3, [r7, #23]
 80066d0:	3301      	adds	r3, #1
 80066d2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80066d4:	7dfb      	ldrb	r3, [r7, #23]
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d9d6      	bls.n	8006688 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80066da:	23ff      	movs	r3, #255	; 0xff
}
 80066dc:	4618      	mov	r0, r3
 80066de:	371c      	adds	r7, #28
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr

080066e8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b082      	sub	sp, #8
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f001 fc81 	bl	8007ff8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80066f6:	2101      	movs	r1, #1
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f001 fd9a 	bl	8008232 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80066fe:	2300      	movs	r3, #0
}
 8006700:	4618      	mov	r0, r3
 8006702:	3708      	adds	r7, #8
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}

08006708 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b088      	sub	sp, #32
 800670c:	af04      	add	r7, sp, #16
 800670e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006710:	2302      	movs	r3, #2
 8006712:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006714:	2300      	movs	r3, #0
 8006716:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800671e:	b2db      	uxtb	r3, r3
 8006720:	2b01      	cmp	r3, #1
 8006722:	d102      	bne.n	800672a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2203      	movs	r2, #3
 8006728:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	b2db      	uxtb	r3, r3
 8006730:	2b0b      	cmp	r3, #11
 8006732:	f200 81be 	bhi.w	8006ab2 <USBH_Process+0x3aa>
 8006736:	a201      	add	r2, pc, #4	; (adr r2, 800673c <USBH_Process+0x34>)
 8006738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800673c:	0800676d 	.word	0x0800676d
 8006740:	0800679f 	.word	0x0800679f
 8006744:	08006807 	.word	0x08006807
 8006748:	08006a4d 	.word	0x08006a4d
 800674c:	08006ab3 	.word	0x08006ab3
 8006750:	080068ab 	.word	0x080068ab
 8006754:	080069f3 	.word	0x080069f3
 8006758:	080068e1 	.word	0x080068e1
 800675c:	08006901 	.word	0x08006901
 8006760:	08006921 	.word	0x08006921
 8006764:	08006965 	.word	0x08006965
 8006768:	08006a35 	.word	0x08006a35
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006772:	b2db      	uxtb	r3, r3
 8006774:	2b00      	cmp	r3, #0
 8006776:	f000 819e 	beq.w	8006ab6 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2201      	movs	r2, #1
 800677e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006780:	20c8      	movs	r0, #200	; 0xc8
 8006782:	f001 fd9d 	bl	80082c0 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f001 fc93 	bl	80080b2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800679c:	e18b      	b.n	8006ab6 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d107      	bne.n	80067b8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2202      	movs	r2, #2
 80067b4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80067b6:	e18d      	b.n	8006ad4 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80067be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067c2:	d914      	bls.n	80067ee <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80067ca:	3301      	adds	r3, #1
 80067cc:	b2da      	uxtb	r2, r3
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80067da:	2b03      	cmp	r3, #3
 80067dc:	d903      	bls.n	80067e6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	220d      	movs	r2, #13
 80067e2:	701a      	strb	r2, [r3, #0]
      break;
 80067e4:	e176      	b.n	8006ad4 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2200      	movs	r2, #0
 80067ea:	701a      	strb	r2, [r3, #0]
      break;
 80067ec:	e172      	b.n	8006ad4 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80067f4:	f103 020a 	add.w	r2, r3, #10
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80067fe:	200a      	movs	r0, #10
 8006800:	f001 fd5e 	bl	80082c0 <USBH_Delay>
      break;
 8006804:	e166      	b.n	8006ad4 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800680c:	2b00      	cmp	r3, #0
 800680e:	d005      	beq.n	800681c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006816:	2104      	movs	r1, #4
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800681c:	2064      	movs	r0, #100	; 0x64
 800681e:	f001 fd4f 	bl	80082c0 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f001 fc1e 	bl	8008064 <USBH_LL_GetSpeed>
 8006828:	4603      	mov	r3, r0
 800682a:	461a      	mov	r2, r3
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2205      	movs	r2, #5
 8006836:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006838:	2100      	movs	r1, #0
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f001 fa29 	bl	8007c92 <USBH_AllocPipe>
 8006840:	4603      	mov	r3, r0
 8006842:	461a      	mov	r2, r3
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006848:	2180      	movs	r1, #128	; 0x80
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f001 fa21 	bl	8007c92 <USBH_AllocPipe>
 8006850:	4603      	mov	r3, r0
 8006852:	461a      	mov	r2, r3
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	7919      	ldrb	r1, [r3, #4]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006868:	687a      	ldr	r2, [r7, #4]
 800686a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800686c:	b292      	uxth	r2, r2
 800686e:	9202      	str	r2, [sp, #8]
 8006870:	2200      	movs	r2, #0
 8006872:	9201      	str	r2, [sp, #4]
 8006874:	9300      	str	r3, [sp, #0]
 8006876:	4603      	mov	r3, r0
 8006878:	2280      	movs	r2, #128	; 0x80
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f001 f9da 	bl	8007c34 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	7959      	ldrb	r1, [r3, #5]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006894:	b292      	uxth	r2, r2
 8006896:	9202      	str	r2, [sp, #8]
 8006898:	2200      	movs	r2, #0
 800689a:	9201      	str	r2, [sp, #4]
 800689c:	9300      	str	r3, [sp, #0]
 800689e:	4603      	mov	r3, r0
 80068a0:	2200      	movs	r2, #0
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f001 f9c6 	bl	8007c34 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80068a8:	e114      	b.n	8006ad4 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 f918 	bl	8006ae0 <USBH_HandleEnum>
 80068b0:	4603      	mov	r3, r0
 80068b2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80068b4:	7bbb      	ldrb	r3, [r7, #14]
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	f040 80fe 	bne.w	8006aba <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d103      	bne.n	80068d8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2208      	movs	r2, #8
 80068d4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80068d6:	e0f0      	b.n	8006aba <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2207      	movs	r2, #7
 80068dc:	701a      	strb	r2, [r3, #0]
      break;
 80068de:	e0ec      	b.n	8006aba <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	f000 80e9 	beq.w	8006abe <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80068f2:	2101      	movs	r1, #1
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2208      	movs	r2, #8
 80068fc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80068fe:	e0de      	b.n	8006abe <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006906:	b29b      	uxth	r3, r3
 8006908:	4619      	mov	r1, r3
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 fc2c 	bl	8007168 <USBH_SetCfg>
 8006910:	4603      	mov	r3, r0
 8006912:	2b00      	cmp	r3, #0
 8006914:	f040 80d5 	bne.w	8006ac2 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2209      	movs	r2, #9
 800691c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800691e:	e0d0      	b.n	8006ac2 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006926:	f003 0320 	and.w	r3, r3, #32
 800692a:	2b00      	cmp	r3, #0
 800692c:	d016      	beq.n	800695c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800692e:	2101      	movs	r1, #1
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f000 fc3c 	bl	80071ae <USBH_SetFeature>
 8006936:	4603      	mov	r3, r0
 8006938:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800693a:	7bbb      	ldrb	r3, [r7, #14]
 800693c:	b2db      	uxtb	r3, r3
 800693e:	2b00      	cmp	r3, #0
 8006940:	d103      	bne.n	800694a <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	220a      	movs	r2, #10
 8006946:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006948:	e0bd      	b.n	8006ac6 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800694a:	7bbb      	ldrb	r3, [r7, #14]
 800694c:	b2db      	uxtb	r3, r3
 800694e:	2b03      	cmp	r3, #3
 8006950:	f040 80b9 	bne.w	8006ac6 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	220a      	movs	r2, #10
 8006958:	701a      	strb	r2, [r3, #0]
      break;
 800695a:	e0b4      	b.n	8006ac6 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	220a      	movs	r2, #10
 8006960:	701a      	strb	r2, [r3, #0]
      break;
 8006962:	e0b0      	b.n	8006ac6 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800696a:	2b00      	cmp	r3, #0
 800696c:	f000 80ad 	beq.w	8006aca <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006978:	2300      	movs	r3, #0
 800697a:	73fb      	strb	r3, [r7, #15]
 800697c:	e016      	b.n	80069ac <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800697e:	7bfa      	ldrb	r2, [r7, #15]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	32de      	adds	r2, #222	; 0xde
 8006984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006988:	791a      	ldrb	r2, [r3, #4]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006990:	429a      	cmp	r2, r3
 8006992:	d108      	bne.n	80069a6 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006994:	7bfa      	ldrb	r2, [r7, #15]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	32de      	adds	r2, #222	; 0xde
 800699a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80069a4:	e005      	b.n	80069b2 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80069a6:	7bfb      	ldrb	r3, [r7, #15]
 80069a8:	3301      	adds	r3, #1
 80069aa:	73fb      	strb	r3, [r7, #15]
 80069ac:	7bfb      	ldrb	r3, [r7, #15]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d0e5      	beq.n	800697e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d016      	beq.n	80069ea <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	4798      	blx	r3
 80069c8:	4603      	mov	r3, r0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d109      	bne.n	80069e2 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2206      	movs	r2, #6
 80069d2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80069da:	2103      	movs	r1, #3
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80069e0:	e073      	b.n	8006aca <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	220d      	movs	r2, #13
 80069e6:	701a      	strb	r2, [r3, #0]
      break;
 80069e8:	e06f      	b.n	8006aca <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	220d      	movs	r2, #13
 80069ee:	701a      	strb	r2, [r3, #0]
      break;
 80069f0:	e06b      	b.n	8006aca <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d017      	beq.n	8006a2c <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a02:	691b      	ldr	r3, [r3, #16]
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	4798      	blx	r3
 8006a08:	4603      	mov	r3, r0
 8006a0a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006a0c:	7bbb      	ldrb	r3, [r7, #14]
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d103      	bne.n	8006a1c <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	220b      	movs	r2, #11
 8006a18:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006a1a:	e058      	b.n	8006ace <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8006a1c:	7bbb      	ldrb	r3, [r7, #14]
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	2b02      	cmp	r3, #2
 8006a22:	d154      	bne.n	8006ace <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	220d      	movs	r2, #13
 8006a28:	701a      	strb	r2, [r3, #0]
      break;
 8006a2a:	e050      	b.n	8006ace <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	220d      	movs	r2, #13
 8006a30:	701a      	strb	r2, [r3, #0]
      break;
 8006a32:	e04c      	b.n	8006ace <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d049      	beq.n	8006ad2 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a44:	695b      	ldr	r3, [r3, #20]
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	4798      	blx	r3
      }
      break;
 8006a4a:	e042      	b.n	8006ad2 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f7ff fd67 	bl	8006528 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d009      	beq.n	8006a78 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a6a:	68db      	ldr	r3, [r3, #12]
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d005      	beq.n	8006a8e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006a88:	2105      	movs	r1, #5
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d107      	bne.n	8006aaa <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f7ff fe20 	bl	80066e8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006aa8:	e014      	b.n	8006ad4 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f001 faa4 	bl	8007ff8 <USBH_LL_Start>
      break;
 8006ab0:	e010      	b.n	8006ad4 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8006ab2:	bf00      	nop
 8006ab4:	e00e      	b.n	8006ad4 <USBH_Process+0x3cc>
      break;
 8006ab6:	bf00      	nop
 8006ab8:	e00c      	b.n	8006ad4 <USBH_Process+0x3cc>
      break;
 8006aba:	bf00      	nop
 8006abc:	e00a      	b.n	8006ad4 <USBH_Process+0x3cc>
    break;
 8006abe:	bf00      	nop
 8006ac0:	e008      	b.n	8006ad4 <USBH_Process+0x3cc>
      break;
 8006ac2:	bf00      	nop
 8006ac4:	e006      	b.n	8006ad4 <USBH_Process+0x3cc>
      break;
 8006ac6:	bf00      	nop
 8006ac8:	e004      	b.n	8006ad4 <USBH_Process+0x3cc>
      break;
 8006aca:	bf00      	nop
 8006acc:	e002      	b.n	8006ad4 <USBH_Process+0x3cc>
      break;
 8006ace:	bf00      	nop
 8006ad0:	e000      	b.n	8006ad4 <USBH_Process+0x3cc>
      break;
 8006ad2:	bf00      	nop
  }
  return USBH_OK;
 8006ad4:	2300      	movs	r3, #0
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3710      	adds	r7, #16
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	bf00      	nop

08006ae0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b088      	sub	sp, #32
 8006ae4:	af04      	add	r7, sp, #16
 8006ae6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006aec:	2301      	movs	r3, #1
 8006aee:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	785b      	ldrb	r3, [r3, #1]
 8006af4:	2b07      	cmp	r3, #7
 8006af6:	f200 81c1 	bhi.w	8006e7c <USBH_HandleEnum+0x39c>
 8006afa:	a201      	add	r2, pc, #4	; (adr r2, 8006b00 <USBH_HandleEnum+0x20>)
 8006afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b00:	08006b21 	.word	0x08006b21
 8006b04:	08006bdf 	.word	0x08006bdf
 8006b08:	08006c49 	.word	0x08006c49
 8006b0c:	08006cd7 	.word	0x08006cd7
 8006b10:	08006d41 	.word	0x08006d41
 8006b14:	08006db1 	.word	0x08006db1
 8006b18:	08006df7 	.word	0x08006df7
 8006b1c:	08006e3d 	.word	0x08006e3d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006b20:	2108      	movs	r1, #8
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 fa50 	bl	8006fc8 <USBH_Get_DevDesc>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006b2c:	7bbb      	ldrb	r3, [r7, #14]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d130      	bne.n	8006b94 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	7919      	ldrb	r1, [r3, #4]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006b56:	b292      	uxth	r2, r2
 8006b58:	9202      	str	r2, [sp, #8]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	9201      	str	r2, [sp, #4]
 8006b5e:	9300      	str	r3, [sp, #0]
 8006b60:	4603      	mov	r3, r0
 8006b62:	2280      	movs	r2, #128	; 0x80
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f001 f865 	bl	8007c34 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	7959      	ldrb	r1, [r3, #5]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006b7e:	b292      	uxth	r2, r2
 8006b80:	9202      	str	r2, [sp, #8]
 8006b82:	2200      	movs	r2, #0
 8006b84:	9201      	str	r2, [sp, #4]
 8006b86:	9300      	str	r3, [sp, #0]
 8006b88:	4603      	mov	r3, r0
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f001 f851 	bl	8007c34 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006b92:	e175      	b.n	8006e80 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006b94:	7bbb      	ldrb	r3, [r7, #14]
 8006b96:	2b03      	cmp	r3, #3
 8006b98:	f040 8172 	bne.w	8006e80 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006ba2:	3301      	adds	r3, #1
 8006ba4:	b2da      	uxtb	r2, r3
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006bb2:	2b03      	cmp	r3, #3
 8006bb4:	d903      	bls.n	8006bbe <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	220d      	movs	r2, #13
 8006bba:	701a      	strb	r2, [r3, #0]
      break;
 8006bbc:	e160      	b.n	8006e80 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	795b      	ldrb	r3, [r3, #5]
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f001 f885 	bl	8007cd4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	791b      	ldrb	r3, [r3, #4]
 8006bce:	4619      	mov	r1, r3
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f001 f87f 	bl	8007cd4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	701a      	strb	r2, [r3, #0]
      break;
 8006bdc:	e150      	b.n	8006e80 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006bde:	2112      	movs	r1, #18
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f000 f9f1 	bl	8006fc8 <USBH_Get_DevDesc>
 8006be6:	4603      	mov	r3, r0
 8006be8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006bea:	7bbb      	ldrb	r3, [r7, #14]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d103      	bne.n	8006bf8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2202      	movs	r2, #2
 8006bf4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006bf6:	e145      	b.n	8006e84 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006bf8:	7bbb      	ldrb	r3, [r7, #14]
 8006bfa:	2b03      	cmp	r3, #3
 8006bfc:	f040 8142 	bne.w	8006e84 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c06:	3301      	adds	r3, #1
 8006c08:	b2da      	uxtb	r2, r3
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c16:	2b03      	cmp	r3, #3
 8006c18:	d903      	bls.n	8006c22 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	220d      	movs	r2, #13
 8006c1e:	701a      	strb	r2, [r3, #0]
      break;
 8006c20:	e130      	b.n	8006e84 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	795b      	ldrb	r3, [r3, #5]
 8006c26:	4619      	mov	r1, r3
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f001 f853 	bl	8007cd4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	791b      	ldrb	r3, [r3, #4]
 8006c32:	4619      	mov	r1, r3
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f001 f84d 	bl	8007cd4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	701a      	strb	r2, [r3, #0]
      break;
 8006c46:	e11d      	b.n	8006e84 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006c48:	2101      	movs	r1, #1
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 fa68 	bl	8007120 <USBH_SetAddress>
 8006c50:	4603      	mov	r3, r0
 8006c52:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006c54:	7bbb      	ldrb	r3, [r7, #14]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d132      	bne.n	8006cc0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006c5a:	2002      	movs	r0, #2
 8006c5c:	f001 fb30 	bl	80082c0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2201      	movs	r2, #1
 8006c64:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2203      	movs	r2, #3
 8006c6c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	7919      	ldrb	r1, [r3, #4]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006c82:	b292      	uxth	r2, r2
 8006c84:	9202      	str	r2, [sp, #8]
 8006c86:	2200      	movs	r2, #0
 8006c88:	9201      	str	r2, [sp, #4]
 8006c8a:	9300      	str	r3, [sp, #0]
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	2280      	movs	r2, #128	; 0x80
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f000 ffcf 	bl	8007c34 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	7959      	ldrb	r1, [r3, #5]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006caa:	b292      	uxth	r2, r2
 8006cac:	9202      	str	r2, [sp, #8]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	9201      	str	r2, [sp, #4]
 8006cb2:	9300      	str	r3, [sp, #0]
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f000 ffbb 	bl	8007c34 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006cbe:	e0e3      	b.n	8006e88 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006cc0:	7bbb      	ldrb	r3, [r7, #14]
 8006cc2:	2b03      	cmp	r3, #3
 8006cc4:	f040 80e0 	bne.w	8006e88 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	220d      	movs	r2, #13
 8006ccc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	705a      	strb	r2, [r3, #1]
      break;
 8006cd4:	e0d8      	b.n	8006e88 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006cd6:	2109      	movs	r1, #9
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 f99d 	bl	8007018 <USBH_Get_CfgDesc>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006ce2:	7bbb      	ldrb	r3, [r7, #14]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d103      	bne.n	8006cf0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2204      	movs	r2, #4
 8006cec:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006cee:	e0cd      	b.n	8006e8c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006cf0:	7bbb      	ldrb	r3, [r7, #14]
 8006cf2:	2b03      	cmp	r3, #3
 8006cf4:	f040 80ca 	bne.w	8006e8c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006cfe:	3301      	adds	r3, #1
 8006d00:	b2da      	uxtb	r2, r3
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d0e:	2b03      	cmp	r3, #3
 8006d10:	d903      	bls.n	8006d1a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	220d      	movs	r2, #13
 8006d16:	701a      	strb	r2, [r3, #0]
      break;
 8006d18:	e0b8      	b.n	8006e8c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	795b      	ldrb	r3, [r3, #5]
 8006d1e:	4619      	mov	r1, r3
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f000 ffd7 	bl	8007cd4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	791b      	ldrb	r3, [r3, #4]
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f000 ffd1 	bl	8007cd4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	701a      	strb	r2, [r3, #0]
      break;
 8006d3e:	e0a5      	b.n	8006e8c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006d46:	4619      	mov	r1, r3
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f000 f965 	bl	8007018 <USBH_Get_CfgDesc>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006d52:	7bbb      	ldrb	r3, [r7, #14]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d103      	bne.n	8006d60 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2205      	movs	r2, #5
 8006d5c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006d5e:	e097      	b.n	8006e90 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d60:	7bbb      	ldrb	r3, [r7, #14]
 8006d62:	2b03      	cmp	r3, #3
 8006d64:	f040 8094 	bne.w	8006e90 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d6e:	3301      	adds	r3, #1
 8006d70:	b2da      	uxtb	r2, r3
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d7e:	2b03      	cmp	r3, #3
 8006d80:	d903      	bls.n	8006d8a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	220d      	movs	r2, #13
 8006d86:	701a      	strb	r2, [r3, #0]
      break;
 8006d88:	e082      	b.n	8006e90 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	795b      	ldrb	r3, [r3, #5]
 8006d8e:	4619      	mov	r1, r3
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 ff9f 	bl	8007cd4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	791b      	ldrb	r3, [r3, #4]
 8006d9a:	4619      	mov	r1, r3
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f000 ff99 	bl	8007cd4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2200      	movs	r2, #0
 8006dac:	701a      	strb	r2, [r3, #0]
      break;
 8006dae:	e06f      	b.n	8006e90 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d019      	beq.n	8006dee <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006dc6:	23ff      	movs	r3, #255	; 0xff
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 f949 	bl	8007060 <USBH_Get_StringDesc>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006dd2:	7bbb      	ldrb	r3, [r7, #14]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d103      	bne.n	8006de0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2206      	movs	r2, #6
 8006ddc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006dde:	e059      	b.n	8006e94 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006de0:	7bbb      	ldrb	r3, [r7, #14]
 8006de2:	2b03      	cmp	r3, #3
 8006de4:	d156      	bne.n	8006e94 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2206      	movs	r2, #6
 8006dea:	705a      	strb	r2, [r3, #1]
      break;
 8006dec:	e052      	b.n	8006e94 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2206      	movs	r2, #6
 8006df2:	705a      	strb	r2, [r3, #1]
      break;
 8006df4:	e04e      	b.n	8006e94 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d019      	beq.n	8006e34 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006e0c:	23ff      	movs	r3, #255	; 0xff
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 f926 	bl	8007060 <USBH_Get_StringDesc>
 8006e14:	4603      	mov	r3, r0
 8006e16:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006e18:	7bbb      	ldrb	r3, [r7, #14]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d103      	bne.n	8006e26 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2207      	movs	r2, #7
 8006e22:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006e24:	e038      	b.n	8006e98 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e26:	7bbb      	ldrb	r3, [r7, #14]
 8006e28:	2b03      	cmp	r3, #3
 8006e2a:	d135      	bne.n	8006e98 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2207      	movs	r2, #7
 8006e30:	705a      	strb	r2, [r3, #1]
      break;
 8006e32:	e031      	b.n	8006e98 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2207      	movs	r2, #7
 8006e38:	705a      	strb	r2, [r3, #1]
      break;
 8006e3a:	e02d      	b.n	8006e98 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d017      	beq.n	8006e76 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006e52:	23ff      	movs	r3, #255	; 0xff
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f000 f903 	bl	8007060 <USBH_Get_StringDesc>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006e5e:	7bbb      	ldrb	r3, [r7, #14]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d102      	bne.n	8006e6a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006e64:	2300      	movs	r3, #0
 8006e66:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006e68:	e018      	b.n	8006e9c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e6a:	7bbb      	ldrb	r3, [r7, #14]
 8006e6c:	2b03      	cmp	r3, #3
 8006e6e:	d115      	bne.n	8006e9c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006e70:	2300      	movs	r3, #0
 8006e72:	73fb      	strb	r3, [r7, #15]
      break;
 8006e74:	e012      	b.n	8006e9c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8006e76:	2300      	movs	r3, #0
 8006e78:	73fb      	strb	r3, [r7, #15]
      break;
 8006e7a:	e00f      	b.n	8006e9c <USBH_HandleEnum+0x3bc>

    default:
      break;
 8006e7c:	bf00      	nop
 8006e7e:	e00e      	b.n	8006e9e <USBH_HandleEnum+0x3be>
      break;
 8006e80:	bf00      	nop
 8006e82:	e00c      	b.n	8006e9e <USBH_HandleEnum+0x3be>
      break;
 8006e84:	bf00      	nop
 8006e86:	e00a      	b.n	8006e9e <USBH_HandleEnum+0x3be>
      break;
 8006e88:	bf00      	nop
 8006e8a:	e008      	b.n	8006e9e <USBH_HandleEnum+0x3be>
      break;
 8006e8c:	bf00      	nop
 8006e8e:	e006      	b.n	8006e9e <USBH_HandleEnum+0x3be>
      break;
 8006e90:	bf00      	nop
 8006e92:	e004      	b.n	8006e9e <USBH_HandleEnum+0x3be>
      break;
 8006e94:	bf00      	nop
 8006e96:	e002      	b.n	8006e9e <USBH_HandleEnum+0x3be>
      break;
 8006e98:	bf00      	nop
 8006e9a:	e000      	b.n	8006e9e <USBH_HandleEnum+0x3be>
      break;
 8006e9c:	bf00      	nop
  }
  return Status;
 8006e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3710      	adds	r7, #16
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b083      	sub	sp, #12
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	683a      	ldr	r2, [r7, #0]
 8006eb6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006eba:	bf00      	nop
 8006ebc:	370c      	adds	r7, #12
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr

08006ec6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006ec6:	b580      	push	{r7, lr}
 8006ec8:	b082      	sub	sp, #8
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006ed4:	1c5a      	adds	r2, r3, #1
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 f804 	bl	8006eea <USBH_HandleSof>
}
 8006ee2:	bf00      	nop
 8006ee4:	3708      	adds	r7, #8
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}

08006eea <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006eea:	b580      	push	{r7, lr}
 8006eec:	b082      	sub	sp, #8
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	781b      	ldrb	r3, [r3, #0]
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	2b0b      	cmp	r3, #11
 8006efa:	d10a      	bne.n	8006f12 <USBH_HandleSof+0x28>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d005      	beq.n	8006f12 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f0c:	699b      	ldr	r3, [r3, #24]
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	4798      	blx	r3
  }
}
 8006f12:	bf00      	nop
 8006f14:	3708      	adds	r7, #8
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}

08006f1a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006f1a:	b480      	push	{r7}
 8006f1c:	b083      	sub	sp, #12
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2201      	movs	r2, #1
 8006f26:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006f2a:	bf00      	nop
}
 8006f2c:	370c      	adds	r7, #12
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr

08006f36 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006f36:	b480      	push	{r7}
 8006f38:	b083      	sub	sp, #12
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2200      	movs	r2, #0
 8006f42:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006f46:	bf00      	nop
}
 8006f48:	370c      	adds	r7, #12
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr

08006f52 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006f52:	b480      	push	{r7}
 8006f54:	b083      	sub	sp, #12
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2200      	movs	r2, #0
 8006f66:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006f72:	2300      	movs	r3, #0
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	370c      	adds	r7, #12
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr

08006f80 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b082      	sub	sp, #8
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2200      	movs	r2, #0
 8006f94:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f001 f844 	bl	800802e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	791b      	ldrb	r3, [r3, #4]
 8006faa:	4619      	mov	r1, r3
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f000 fe91 	bl	8007cd4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	795b      	ldrb	r3, [r3, #5]
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 fe8b 	bl	8007cd4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006fbe:	2300      	movs	r3, #0
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3708      	adds	r7, #8
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b086      	sub	sp, #24
 8006fcc:	af02      	add	r7, sp, #8
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	460b      	mov	r3, r1
 8006fd2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8006fda:	78fb      	ldrb	r3, [r7, #3]
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	9300      	str	r3, [sp, #0]
 8006fe0:	4613      	mov	r3, r2
 8006fe2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006fe6:	2100      	movs	r1, #0
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f000 f864 	bl	80070b6 <USBH_GetDescriptor>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8006ff2:	7bfb      	ldrb	r3, [r7, #15]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d10a      	bne.n	800700e <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f203 3026 	addw	r0, r3, #806	; 0x326
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007004:	78fa      	ldrb	r2, [r7, #3]
 8007006:	b292      	uxth	r2, r2
 8007008:	4619      	mov	r1, r3
 800700a:	f000 f918 	bl	800723e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800700e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007010:	4618      	mov	r0, r3
 8007012:	3710      	adds	r7, #16
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}

08007018 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007018:	b580      	push	{r7, lr}
 800701a:	b086      	sub	sp, #24
 800701c:	af02      	add	r7, sp, #8
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	460b      	mov	r3, r1
 8007022:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	331c      	adds	r3, #28
 8007028:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800702a:	887b      	ldrh	r3, [r7, #2]
 800702c:	9300      	str	r3, [sp, #0]
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007034:	2100      	movs	r1, #0
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 f83d 	bl	80070b6 <USBH_GetDescriptor>
 800703c:	4603      	mov	r3, r0
 800703e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007040:	7bfb      	ldrb	r3, [r7, #15]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d107      	bne.n	8007056 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007046:	887b      	ldrh	r3, [r7, #2]
 8007048:	461a      	mov	r2, r3
 800704a:	68b9      	ldr	r1, [r7, #8]
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 f987 	bl	8007360 <USBH_ParseCfgDesc>
 8007052:	4603      	mov	r3, r0
 8007054:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007056:	7bfb      	ldrb	r3, [r7, #15]
}
 8007058:	4618      	mov	r0, r3
 800705a:	3710      	adds	r7, #16
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b088      	sub	sp, #32
 8007064:	af02      	add	r7, sp, #8
 8007066:	60f8      	str	r0, [r7, #12]
 8007068:	607a      	str	r2, [r7, #4]
 800706a:	461a      	mov	r2, r3
 800706c:	460b      	mov	r3, r1
 800706e:	72fb      	strb	r3, [r7, #11]
 8007070:	4613      	mov	r3, r2
 8007072:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007074:	7afb      	ldrb	r3, [r7, #11]
 8007076:	b29b      	uxth	r3, r3
 8007078:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800707c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007084:	893b      	ldrh	r3, [r7, #8]
 8007086:	9300      	str	r3, [sp, #0]
 8007088:	460b      	mov	r3, r1
 800708a:	2100      	movs	r1, #0
 800708c:	68f8      	ldr	r0, [r7, #12]
 800708e:	f000 f812 	bl	80070b6 <USBH_GetDescriptor>
 8007092:	4603      	mov	r3, r0
 8007094:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007096:	7dfb      	ldrb	r3, [r7, #23]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d107      	bne.n	80070ac <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80070a2:	893a      	ldrh	r2, [r7, #8]
 80070a4:	6879      	ldr	r1, [r7, #4]
 80070a6:	4618      	mov	r0, r3
 80070a8:	f000 fb24 	bl	80076f4 <USBH_ParseStringDesc>
  }

  return status;
 80070ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3718      	adds	r7, #24
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}

080070b6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80070b6:	b580      	push	{r7, lr}
 80070b8:	b084      	sub	sp, #16
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	60f8      	str	r0, [r7, #12]
 80070be:	607b      	str	r3, [r7, #4]
 80070c0:	460b      	mov	r3, r1
 80070c2:	72fb      	strb	r3, [r7, #11]
 80070c4:	4613      	mov	r3, r2
 80070c6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	789b      	ldrb	r3, [r3, #2]
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d11c      	bne.n	800710a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80070d0:	7afb      	ldrb	r3, [r7, #11]
 80070d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80070d6:	b2da      	uxtb	r2, r3
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2206      	movs	r2, #6
 80070e0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	893a      	ldrh	r2, [r7, #8]
 80070e6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80070e8:	893b      	ldrh	r3, [r7, #8]
 80070ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80070ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070f2:	d104      	bne.n	80070fe <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f240 4209 	movw	r2, #1033	; 0x409
 80070fa:	829a      	strh	r2, [r3, #20]
 80070fc:	e002      	b.n	8007104 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2200      	movs	r2, #0
 8007102:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	8b3a      	ldrh	r2, [r7, #24]
 8007108:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800710a:	8b3b      	ldrh	r3, [r7, #24]
 800710c:	461a      	mov	r2, r3
 800710e:	6879      	ldr	r1, [r7, #4]
 8007110:	68f8      	ldr	r0, [r7, #12]
 8007112:	f000 fb3d 	bl	8007790 <USBH_CtlReq>
 8007116:	4603      	mov	r3, r0
}
 8007118:	4618      	mov	r0, r3
 800711a:	3710      	adds	r7, #16
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}

08007120 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b082      	sub	sp, #8
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	460b      	mov	r3, r1
 800712a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	789b      	ldrb	r3, [r3, #2]
 8007130:	2b01      	cmp	r3, #1
 8007132:	d10f      	bne.n	8007154 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2200      	movs	r2, #0
 8007138:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2205      	movs	r2, #5
 800713e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007140:	78fb      	ldrb	r3, [r7, #3]
 8007142:	b29a      	uxth	r2, r3
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007154:	2200      	movs	r2, #0
 8007156:	2100      	movs	r1, #0
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f000 fb19 	bl	8007790 <USBH_CtlReq>
 800715e:	4603      	mov	r3, r0
}
 8007160:	4618      	mov	r0, r3
 8007162:	3708      	adds	r7, #8
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}

08007168 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b082      	sub	sp, #8
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	460b      	mov	r3, r1
 8007172:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	789b      	ldrb	r3, [r3, #2]
 8007178:	2b01      	cmp	r3, #1
 800717a:	d10e      	bne.n	800719a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2209      	movs	r2, #9
 8007186:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	887a      	ldrh	r2, [r7, #2]
 800718c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2200      	movs	r2, #0
 8007198:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800719a:	2200      	movs	r2, #0
 800719c:	2100      	movs	r1, #0
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f000 faf6 	bl	8007790 <USBH_CtlReq>
 80071a4:	4603      	mov	r3, r0
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3708      	adds	r7, #8
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}

080071ae <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80071ae:	b580      	push	{r7, lr}
 80071b0:	b082      	sub	sp, #8
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
 80071b6:	460b      	mov	r3, r1
 80071b8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	789b      	ldrb	r3, [r3, #2]
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d10f      	bne.n	80071e2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2203      	movs	r2, #3
 80071cc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80071ce:	78fb      	ldrb	r3, [r7, #3]
 80071d0:	b29a      	uxth	r2, r3
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2200      	movs	r2, #0
 80071da:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80071e2:	2200      	movs	r2, #0
 80071e4:	2100      	movs	r1, #0
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 fad2 	bl	8007790 <USBH_CtlReq>
 80071ec:	4603      	mov	r3, r0
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3708      	adds	r7, #8
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}

080071f6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80071f6:	b580      	push	{r7, lr}
 80071f8:	b082      	sub	sp, #8
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	6078      	str	r0, [r7, #4]
 80071fe:	460b      	mov	r3, r1
 8007200:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	789b      	ldrb	r3, [r3, #2]
 8007206:	2b01      	cmp	r3, #1
 8007208:	d10f      	bne.n	800722a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2202      	movs	r2, #2
 800720e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2201      	movs	r2, #1
 8007214:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800721c:	78fb      	ldrb	r3, [r7, #3]
 800721e:	b29a      	uxth	r2, r3
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800722a:	2200      	movs	r2, #0
 800722c:	2100      	movs	r1, #0
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 faae 	bl	8007790 <USBH_CtlReq>
 8007234:	4603      	mov	r3, r0
}
 8007236:	4618      	mov	r0, r3
 8007238:	3708      	adds	r7, #8
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}

0800723e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800723e:	b480      	push	{r7}
 8007240:	b085      	sub	sp, #20
 8007242:	af00      	add	r7, sp, #0
 8007244:	60f8      	str	r0, [r7, #12]
 8007246:	60b9      	str	r1, [r7, #8]
 8007248:	4613      	mov	r3, r2
 800724a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	781a      	ldrb	r2, [r3, #0]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	785a      	ldrb	r2, [r3, #1]
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	3302      	adds	r3, #2
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	b29a      	uxth	r2, r3
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	3303      	adds	r3, #3
 8007268:	781b      	ldrb	r3, [r3, #0]
 800726a:	b29b      	uxth	r3, r3
 800726c:	021b      	lsls	r3, r3, #8
 800726e:	b29b      	uxth	r3, r3
 8007270:	4313      	orrs	r3, r2
 8007272:	b29a      	uxth	r2, r3
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	791a      	ldrb	r2, [r3, #4]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	795a      	ldrb	r2, [r3, #5]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	799a      	ldrb	r2, [r3, #6]
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	79da      	ldrb	r2, [r3, #7]
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	79db      	ldrb	r3, [r3, #7]
 800729c:	2b20      	cmp	r3, #32
 800729e:	dc11      	bgt.n	80072c4 <USBH_ParseDevDesc+0x86>
 80072a0:	2b08      	cmp	r3, #8
 80072a2:	db16      	blt.n	80072d2 <USBH_ParseDevDesc+0x94>
 80072a4:	3b08      	subs	r3, #8
 80072a6:	2201      	movs	r2, #1
 80072a8:	fa02 f303 	lsl.w	r3, r2, r3
 80072ac:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 80072b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	bf14      	ite	ne
 80072b8:	2301      	movne	r3, #1
 80072ba:	2300      	moveq	r3, #0
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d102      	bne.n	80072c8 <USBH_ParseDevDesc+0x8a>
 80072c2:	e006      	b.n	80072d2 <USBH_ParseDevDesc+0x94>
 80072c4:	2b40      	cmp	r3, #64	; 0x40
 80072c6:	d104      	bne.n	80072d2 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	79da      	ldrb	r2, [r3, #7]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	71da      	strb	r2, [r3, #7]
      break;
 80072d0:	e003      	b.n	80072da <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2240      	movs	r2, #64	; 0x40
 80072d6:	71da      	strb	r2, [r3, #7]
      break;
 80072d8:	bf00      	nop
  }

  if (length > 8U)
 80072da:	88fb      	ldrh	r3, [r7, #6]
 80072dc:	2b08      	cmp	r3, #8
 80072de:	d939      	bls.n	8007354 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	3308      	adds	r3, #8
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	b29a      	uxth	r2, r3
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	3309      	adds	r3, #9
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	021b      	lsls	r3, r3, #8
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	4313      	orrs	r3, r2
 80072f6:	b29a      	uxth	r2, r3
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	330a      	adds	r3, #10
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	b29a      	uxth	r2, r3
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	330b      	adds	r3, #11
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	b29b      	uxth	r3, r3
 800730c:	021b      	lsls	r3, r3, #8
 800730e:	b29b      	uxth	r3, r3
 8007310:	4313      	orrs	r3, r2
 8007312:	b29a      	uxth	r2, r3
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	330c      	adds	r3, #12
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	b29a      	uxth	r2, r3
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	330d      	adds	r3, #13
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	b29b      	uxth	r3, r3
 8007328:	021b      	lsls	r3, r3, #8
 800732a:	b29b      	uxth	r3, r3
 800732c:	4313      	orrs	r3, r2
 800732e:	b29a      	uxth	r2, r3
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	7b9a      	ldrb	r2, [r3, #14]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	7bda      	ldrb	r2, [r3, #15]
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	7c1a      	ldrb	r2, [r3, #16]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	7c5a      	ldrb	r2, [r3, #17]
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	745a      	strb	r2, [r3, #17]
  }
}
 8007354:	bf00      	nop
 8007356:	3714      	adds	r7, #20
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr

08007360 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b08c      	sub	sp, #48	; 0x30
 8007364:	af00      	add	r7, sp, #0
 8007366:	60f8      	str	r0, [r7, #12]
 8007368:	60b9      	str	r1, [r7, #8]
 800736a:	4613      	mov	r3, r2
 800736c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007374:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007376:	2300      	movs	r3, #0
 8007378:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007380:	2300      	movs	r3, #0
 8007382:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007386:	2300      	movs	r3, #0
 8007388:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	781a      	ldrb	r2, [r3, #0]
 8007394:	6a3b      	ldr	r3, [r7, #32]
 8007396:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	785a      	ldrb	r2, [r3, #1]
 800739c:	6a3b      	ldr	r3, [r7, #32]
 800739e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	3302      	adds	r3, #2
 80073a4:	781b      	ldrb	r3, [r3, #0]
 80073a6:	b29a      	uxth	r2, r3
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	3303      	adds	r3, #3
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	021b      	lsls	r3, r3, #8
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	4313      	orrs	r3, r2
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073bc:	bf28      	it	cs
 80073be:	f44f 7380 	movcs.w	r3, #256	; 0x100
 80073c2:	b29a      	uxth	r2, r3
 80073c4:	6a3b      	ldr	r3, [r7, #32]
 80073c6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	791a      	ldrb	r2, [r3, #4]
 80073cc:	6a3b      	ldr	r3, [r7, #32]
 80073ce:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	795a      	ldrb	r2, [r3, #5]
 80073d4:	6a3b      	ldr	r3, [r7, #32]
 80073d6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	799a      	ldrb	r2, [r3, #6]
 80073dc:	6a3b      	ldr	r3, [r7, #32]
 80073de:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	79da      	ldrb	r2, [r3, #7]
 80073e4:	6a3b      	ldr	r3, [r7, #32]
 80073e6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	7a1a      	ldrb	r2, [r3, #8]
 80073ec:	6a3b      	ldr	r3, [r7, #32]
 80073ee:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 80073f0:	6a3b      	ldr	r3, [r7, #32]
 80073f2:	781b      	ldrb	r3, [r3, #0]
 80073f4:	2b09      	cmp	r3, #9
 80073f6:	d002      	beq.n	80073fe <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80073f8:	6a3b      	ldr	r3, [r7, #32]
 80073fa:	2209      	movs	r2, #9
 80073fc:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80073fe:	88fb      	ldrh	r3, [r7, #6]
 8007400:	2b09      	cmp	r3, #9
 8007402:	f240 809d 	bls.w	8007540 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8007406:	2309      	movs	r3, #9
 8007408:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800740a:	2300      	movs	r3, #0
 800740c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800740e:	e081      	b.n	8007514 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007410:	f107 0316 	add.w	r3, r7, #22
 8007414:	4619      	mov	r1, r3
 8007416:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007418:	f000 f99f 	bl	800775a <USBH_GetNextDesc>
 800741c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800741e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007420:	785b      	ldrb	r3, [r3, #1]
 8007422:	2b04      	cmp	r3, #4
 8007424:	d176      	bne.n	8007514 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	2b09      	cmp	r3, #9
 800742c:	d002      	beq.n	8007434 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800742e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007430:	2209      	movs	r2, #9
 8007432:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007434:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007438:	221a      	movs	r2, #26
 800743a:	fb02 f303 	mul.w	r3, r2, r3
 800743e:	3308      	adds	r3, #8
 8007440:	6a3a      	ldr	r2, [r7, #32]
 8007442:	4413      	add	r3, r2
 8007444:	3302      	adds	r3, #2
 8007446:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007448:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800744a:	69f8      	ldr	r0, [r7, #28]
 800744c:	f000 f87e 	bl	800754c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007450:	2300      	movs	r3, #0
 8007452:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007456:	2300      	movs	r3, #0
 8007458:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800745a:	e043      	b.n	80074e4 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800745c:	f107 0316 	add.w	r3, r7, #22
 8007460:	4619      	mov	r1, r3
 8007462:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007464:	f000 f979 	bl	800775a <USBH_GetNextDesc>
 8007468:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800746a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800746c:	785b      	ldrb	r3, [r3, #1]
 800746e:	2b05      	cmp	r3, #5
 8007470:	d138      	bne.n	80074e4 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007472:	69fb      	ldr	r3, [r7, #28]
 8007474:	795b      	ldrb	r3, [r3, #5]
 8007476:	2b01      	cmp	r3, #1
 8007478:	d10f      	bne.n	800749a <USBH_ParseCfgDesc+0x13a>
 800747a:	69fb      	ldr	r3, [r7, #28]
 800747c:	799b      	ldrb	r3, [r3, #6]
 800747e:	2b02      	cmp	r3, #2
 8007480:	d10b      	bne.n	800749a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007482:	69fb      	ldr	r3, [r7, #28]
 8007484:	79db      	ldrb	r3, [r3, #7]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d10f      	bne.n	80074aa <USBH_ParseCfgDesc+0x14a>
 800748a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	2b09      	cmp	r3, #9
 8007490:	d00b      	beq.n	80074aa <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007494:	2209      	movs	r2, #9
 8007496:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007498:	e007      	b.n	80074aa <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800749a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	2b07      	cmp	r3, #7
 80074a0:	d004      	beq.n	80074ac <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80074a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a4:	2207      	movs	r2, #7
 80074a6:	701a      	strb	r2, [r3, #0]
 80074a8:	e000      	b.n	80074ac <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80074aa:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80074ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074b0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80074b4:	3201      	adds	r2, #1
 80074b6:	00d2      	lsls	r2, r2, #3
 80074b8:	211a      	movs	r1, #26
 80074ba:	fb01 f303 	mul.w	r3, r1, r3
 80074be:	4413      	add	r3, r2
 80074c0:	3308      	adds	r3, #8
 80074c2:	6a3a      	ldr	r2, [r7, #32]
 80074c4:	4413      	add	r3, r2
 80074c6:	3304      	adds	r3, #4
 80074c8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80074ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074cc:	69b9      	ldr	r1, [r7, #24]
 80074ce:	68f8      	ldr	r0, [r7, #12]
 80074d0:	f000 f86b 	bl	80075aa <USBH_ParseEPDesc>
 80074d4:	4603      	mov	r3, r0
 80074d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 80074da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80074de:	3301      	adds	r3, #1
 80074e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80074e4:	69fb      	ldr	r3, [r7, #28]
 80074e6:	791b      	ldrb	r3, [r3, #4]
 80074e8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d204      	bcs.n	80074fa <USBH_ParseCfgDesc+0x19a>
 80074f0:	6a3b      	ldr	r3, [r7, #32]
 80074f2:	885a      	ldrh	r2, [r3, #2]
 80074f4:	8afb      	ldrh	r3, [r7, #22]
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d8b0      	bhi.n	800745c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80074fa:	69fb      	ldr	r3, [r7, #28]
 80074fc:	791b      	ldrb	r3, [r3, #4]
 80074fe:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007502:	429a      	cmp	r2, r3
 8007504:	d201      	bcs.n	800750a <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8007506:	2303      	movs	r3, #3
 8007508:	e01c      	b.n	8007544 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800750a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800750e:	3301      	adds	r3, #1
 8007510:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007514:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007518:	2b01      	cmp	r3, #1
 800751a:	d805      	bhi.n	8007528 <USBH_ParseCfgDesc+0x1c8>
 800751c:	6a3b      	ldr	r3, [r7, #32]
 800751e:	885a      	ldrh	r2, [r3, #2]
 8007520:	8afb      	ldrh	r3, [r7, #22]
 8007522:	429a      	cmp	r2, r3
 8007524:	f63f af74 	bhi.w	8007410 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007528:	6a3b      	ldr	r3, [r7, #32]
 800752a:	791b      	ldrb	r3, [r3, #4]
 800752c:	2b02      	cmp	r3, #2
 800752e:	bf28      	it	cs
 8007530:	2302      	movcs	r3, #2
 8007532:	b2db      	uxtb	r3, r3
 8007534:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007538:	429a      	cmp	r2, r3
 800753a:	d201      	bcs.n	8007540 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800753c:	2303      	movs	r3, #3
 800753e:	e001      	b.n	8007544 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007540:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007544:	4618      	mov	r0, r3
 8007546:	3730      	adds	r7, #48	; 0x30
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800754c:	b480      	push	{r7}
 800754e:	b083      	sub	sp, #12
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	781a      	ldrb	r2, [r3, #0]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	785a      	ldrb	r2, [r3, #1]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	789a      	ldrb	r2, [r3, #2]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	78da      	ldrb	r2, [r3, #3]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	791a      	ldrb	r2, [r3, #4]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	795a      	ldrb	r2, [r3, #5]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	799a      	ldrb	r2, [r3, #6]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	79da      	ldrb	r2, [r3, #7]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	7a1a      	ldrb	r2, [r3, #8]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	721a      	strb	r2, [r3, #8]
}
 800759e:	bf00      	nop
 80075a0:	370c      	adds	r7, #12
 80075a2:	46bd      	mov	sp, r7
 80075a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a8:	4770      	bx	lr

080075aa <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 80075aa:	b480      	push	{r7}
 80075ac:	b087      	sub	sp, #28
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	60f8      	str	r0, [r7, #12]
 80075b2:	60b9      	str	r1, [r7, #8]
 80075b4:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80075b6:	2300      	movs	r3, #0
 80075b8:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	781a      	ldrb	r2, [r3, #0]
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	785a      	ldrb	r2, [r3, #1]
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	789a      	ldrb	r2, [r3, #2]
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	78da      	ldrb	r2, [r3, #3]
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	3304      	adds	r3, #4
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	b29a      	uxth	r2, r3
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	3305      	adds	r3, #5
 80075e6:	781b      	ldrb	r3, [r3, #0]
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	021b      	lsls	r3, r3, #8
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	4313      	orrs	r3, r2
 80075f0:	b29a      	uxth	r2, r3
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	799a      	ldrb	r2, [r3, #6]
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	889b      	ldrh	r3, [r3, #4]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d102      	bne.n	800760c <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8007606:	2303      	movs	r3, #3
 8007608:	75fb      	strb	r3, [r7, #23]
 800760a:	e033      	b.n	8007674 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	889b      	ldrh	r3, [r3, #4]
 8007610:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007614:	f023 0307 	bic.w	r3, r3, #7
 8007618:	b29a      	uxth	r2, r3
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	889b      	ldrh	r3, [r3, #4]
 8007622:	b21a      	sxth	r2, r3
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	3304      	adds	r3, #4
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	b299      	uxth	r1, r3
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	3305      	adds	r3, #5
 8007630:	781b      	ldrb	r3, [r3, #0]
 8007632:	b29b      	uxth	r3, r3
 8007634:	021b      	lsls	r3, r3, #8
 8007636:	b29b      	uxth	r3, r3
 8007638:	430b      	orrs	r3, r1
 800763a:	b29b      	uxth	r3, r3
 800763c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007640:	2b00      	cmp	r3, #0
 8007642:	d110      	bne.n	8007666 <USBH_ParseEPDesc+0xbc>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	3304      	adds	r3, #4
 8007648:	781b      	ldrb	r3, [r3, #0]
 800764a:	b299      	uxth	r1, r3
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	3305      	adds	r3, #5
 8007650:	781b      	ldrb	r3, [r3, #0]
 8007652:	b29b      	uxth	r3, r3
 8007654:	021b      	lsls	r3, r3, #8
 8007656:	b29b      	uxth	r3, r3
 8007658:	430b      	orrs	r3, r1
 800765a:	b29b      	uxth	r3, r3
 800765c:	b21b      	sxth	r3, r3
 800765e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007662:	b21b      	sxth	r3, r3
 8007664:	e001      	b.n	800766a <USBH_ParseEPDesc+0xc0>
 8007666:	f44f 7300 	mov.w	r3, #512	; 0x200
 800766a:	4313      	orrs	r3, r2
 800766c:	b21b      	sxth	r3, r3
 800766e:	b29a      	uxth	r2, r3
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800767a:	2b00      	cmp	r3, #0
 800767c:	d116      	bne.n	80076ac <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	78db      	ldrb	r3, [r3, #3]
 8007682:	f003 0303 	and.w	r3, r3, #3
 8007686:	2b01      	cmp	r3, #1
 8007688:	d005      	beq.n	8007696 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	78db      	ldrb	r3, [r3, #3]
 800768e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007692:	2b03      	cmp	r3, #3
 8007694:	d127      	bne.n	80076e6 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	799b      	ldrb	r3, [r3, #6]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d003      	beq.n	80076a6 <USBH_ParseEPDesc+0xfc>
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	799b      	ldrb	r3, [r3, #6]
 80076a2:	2b10      	cmp	r3, #16
 80076a4:	d91f      	bls.n	80076e6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80076a6:	2303      	movs	r3, #3
 80076a8:	75fb      	strb	r3, [r7, #23]
 80076aa:	e01c      	b.n	80076e6 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	78db      	ldrb	r3, [r3, #3]
 80076b0:	f003 0303 	and.w	r3, r3, #3
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d10a      	bne.n	80076ce <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	799b      	ldrb	r3, [r3, #6]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d003      	beq.n	80076c8 <USBH_ParseEPDesc+0x11e>
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	799b      	ldrb	r3, [r3, #6]
 80076c4:	2b10      	cmp	r3, #16
 80076c6:	d90e      	bls.n	80076e6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80076c8:	2303      	movs	r3, #3
 80076ca:	75fb      	strb	r3, [r7, #23]
 80076cc:	e00b      	b.n	80076e6 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	78db      	ldrb	r3, [r3, #3]
 80076d2:	f003 0303 	and.w	r3, r3, #3
 80076d6:	2b03      	cmp	r3, #3
 80076d8:	d105      	bne.n	80076e6 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	799b      	ldrb	r3, [r3, #6]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d101      	bne.n	80076e6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80076e2:	2303      	movs	r3, #3
 80076e4:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 80076e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	371c      	adds	r7, #28
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr

080076f4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b087      	sub	sp, #28
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	60f8      	str	r0, [r7, #12]
 80076fc:	60b9      	str	r1, [r7, #8]
 80076fe:	4613      	mov	r3, r2
 8007700:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	3301      	adds	r3, #1
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	2b03      	cmp	r3, #3
 800770a:	d120      	bne.n	800774e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	1e9a      	subs	r2, r3, #2
 8007712:	88fb      	ldrh	r3, [r7, #6]
 8007714:	4293      	cmp	r3, r2
 8007716:	bf28      	it	cs
 8007718:	4613      	movcs	r3, r2
 800771a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	3302      	adds	r3, #2
 8007720:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007722:	2300      	movs	r3, #0
 8007724:	82fb      	strh	r3, [r7, #22]
 8007726:	e00b      	b.n	8007740 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007728:	8afb      	ldrh	r3, [r7, #22]
 800772a:	68fa      	ldr	r2, [r7, #12]
 800772c:	4413      	add	r3, r2
 800772e:	781a      	ldrb	r2, [r3, #0]
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	3301      	adds	r3, #1
 8007738:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800773a:	8afb      	ldrh	r3, [r7, #22]
 800773c:	3302      	adds	r3, #2
 800773e:	82fb      	strh	r3, [r7, #22]
 8007740:	8afa      	ldrh	r2, [r7, #22]
 8007742:	8abb      	ldrh	r3, [r7, #20]
 8007744:	429a      	cmp	r2, r3
 8007746:	d3ef      	bcc.n	8007728 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	2200      	movs	r2, #0
 800774c:	701a      	strb	r2, [r3, #0]
  }
}
 800774e:	bf00      	nop
 8007750:	371c      	adds	r7, #28
 8007752:	46bd      	mov	sp, r7
 8007754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007758:	4770      	bx	lr

0800775a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800775a:	b480      	push	{r7}
 800775c:	b085      	sub	sp, #20
 800775e:	af00      	add	r7, sp, #0
 8007760:	6078      	str	r0, [r7, #4]
 8007762:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	881a      	ldrh	r2, [r3, #0]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	781b      	ldrb	r3, [r3, #0]
 800776c:	b29b      	uxth	r3, r3
 800776e:	4413      	add	r3, r2
 8007770:	b29a      	uxth	r2, r3
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	781b      	ldrb	r3, [r3, #0]
 800777a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	4413      	add	r3, r2
 8007780:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007782:	68fb      	ldr	r3, [r7, #12]
}
 8007784:	4618      	mov	r0, r3
 8007786:	3714      	adds	r7, #20
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr

08007790 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b086      	sub	sp, #24
 8007794:	af00      	add	r7, sp, #0
 8007796:	60f8      	str	r0, [r7, #12]
 8007798:	60b9      	str	r1, [r7, #8]
 800779a:	4613      	mov	r3, r2
 800779c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800779e:	2301      	movs	r3, #1
 80077a0:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	789b      	ldrb	r3, [r3, #2]
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d002      	beq.n	80077b0 <USBH_CtlReq+0x20>
 80077aa:	2b02      	cmp	r3, #2
 80077ac:	d00f      	beq.n	80077ce <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80077ae:	e027      	b.n	8007800 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	68ba      	ldr	r2, [r7, #8]
 80077b4:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	88fa      	ldrh	r2, [r7, #6]
 80077ba:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2201      	movs	r2, #1
 80077c0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2202      	movs	r2, #2
 80077c6:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80077c8:	2301      	movs	r3, #1
 80077ca:	75fb      	strb	r3, [r7, #23]
      break;
 80077cc:	e018      	b.n	8007800 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80077ce:	68f8      	ldr	r0, [r7, #12]
 80077d0:	f000 f81c 	bl	800780c <USBH_HandleControl>
 80077d4:	4603      	mov	r3, r0
 80077d6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80077d8:	7dfb      	ldrb	r3, [r7, #23]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d002      	beq.n	80077e4 <USBH_CtlReq+0x54>
 80077de:	7dfb      	ldrb	r3, [r7, #23]
 80077e0:	2b03      	cmp	r3, #3
 80077e2:	d106      	bne.n	80077f2 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2201      	movs	r2, #1
 80077e8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2200      	movs	r2, #0
 80077ee:	761a      	strb	r2, [r3, #24]
      break;
 80077f0:	e005      	b.n	80077fe <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80077f2:	7dfb      	ldrb	r3, [r7, #23]
 80077f4:	2b02      	cmp	r3, #2
 80077f6:	d102      	bne.n	80077fe <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2201      	movs	r2, #1
 80077fc:	709a      	strb	r2, [r3, #2]
      break;
 80077fe:	bf00      	nop
  }
  return status;
 8007800:	7dfb      	ldrb	r3, [r7, #23]
}
 8007802:	4618      	mov	r0, r3
 8007804:	3718      	adds	r7, #24
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
	...

0800780c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b086      	sub	sp, #24
 8007810:	af02      	add	r7, sp, #8
 8007812:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007814:	2301      	movs	r3, #1
 8007816:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007818:	2300      	movs	r3, #0
 800781a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	7e1b      	ldrb	r3, [r3, #24]
 8007820:	3b01      	subs	r3, #1
 8007822:	2b0a      	cmp	r3, #10
 8007824:	f200 8156 	bhi.w	8007ad4 <USBH_HandleControl+0x2c8>
 8007828:	a201      	add	r2, pc, #4	; (adr r2, 8007830 <USBH_HandleControl+0x24>)
 800782a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800782e:	bf00      	nop
 8007830:	0800785d 	.word	0x0800785d
 8007834:	08007877 	.word	0x08007877
 8007838:	080078e1 	.word	0x080078e1
 800783c:	08007907 	.word	0x08007907
 8007840:	0800793f 	.word	0x0800793f
 8007844:	08007969 	.word	0x08007969
 8007848:	080079bb 	.word	0x080079bb
 800784c:	080079dd 	.word	0x080079dd
 8007850:	08007a19 	.word	0x08007a19
 8007854:	08007a3f 	.word	0x08007a3f
 8007858:	08007a7d 	.word	0x08007a7d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f103 0110 	add.w	r1, r3, #16
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	795b      	ldrb	r3, [r3, #5]
 8007866:	461a      	mov	r2, r3
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f000 f943 	bl	8007af4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2202      	movs	r2, #2
 8007872:	761a      	strb	r2, [r3, #24]
      break;
 8007874:	e139      	b.n	8007aea <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	795b      	ldrb	r3, [r3, #5]
 800787a:	4619      	mov	r1, r3
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f000 fcc5 	bl	800820c <USBH_LL_GetURBState>
 8007882:	4603      	mov	r3, r0
 8007884:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007886:	7bbb      	ldrb	r3, [r7, #14]
 8007888:	2b01      	cmp	r3, #1
 800788a:	d11e      	bne.n	80078ca <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	7c1b      	ldrb	r3, [r3, #16]
 8007890:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007894:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	8adb      	ldrh	r3, [r3, #22]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d00a      	beq.n	80078b4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800789e:	7b7b      	ldrb	r3, [r7, #13]
 80078a0:	2b80      	cmp	r3, #128	; 0x80
 80078a2:	d103      	bne.n	80078ac <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2203      	movs	r2, #3
 80078a8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80078aa:	e115      	b.n	8007ad8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2205      	movs	r2, #5
 80078b0:	761a      	strb	r2, [r3, #24]
      break;
 80078b2:	e111      	b.n	8007ad8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80078b4:	7b7b      	ldrb	r3, [r7, #13]
 80078b6:	2b80      	cmp	r3, #128	; 0x80
 80078b8:	d103      	bne.n	80078c2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2209      	movs	r2, #9
 80078be:	761a      	strb	r2, [r3, #24]
      break;
 80078c0:	e10a      	b.n	8007ad8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2207      	movs	r2, #7
 80078c6:	761a      	strb	r2, [r3, #24]
      break;
 80078c8:	e106      	b.n	8007ad8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80078ca:	7bbb      	ldrb	r3, [r7, #14]
 80078cc:	2b04      	cmp	r3, #4
 80078ce:	d003      	beq.n	80078d8 <USBH_HandleControl+0xcc>
 80078d0:	7bbb      	ldrb	r3, [r7, #14]
 80078d2:	2b02      	cmp	r3, #2
 80078d4:	f040 8100 	bne.w	8007ad8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	220b      	movs	r2, #11
 80078dc:	761a      	strb	r2, [r3, #24]
      break;
 80078de:	e0fb      	b.n	8007ad8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80078e6:	b29a      	uxth	r2, r3
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6899      	ldr	r1, [r3, #8]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	899a      	ldrh	r2, [r3, #12]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	791b      	ldrb	r3, [r3, #4]
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f000 f93a 	bl	8007b72 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2204      	movs	r2, #4
 8007902:	761a      	strb	r2, [r3, #24]
      break;
 8007904:	e0f1      	b.n	8007aea <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	791b      	ldrb	r3, [r3, #4]
 800790a:	4619      	mov	r1, r3
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 fc7d 	bl	800820c <USBH_LL_GetURBState>
 8007912:	4603      	mov	r3, r0
 8007914:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007916:	7bbb      	ldrb	r3, [r7, #14]
 8007918:	2b01      	cmp	r3, #1
 800791a:	d102      	bne.n	8007922 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2209      	movs	r2, #9
 8007920:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007922:	7bbb      	ldrb	r3, [r7, #14]
 8007924:	2b05      	cmp	r3, #5
 8007926:	d102      	bne.n	800792e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007928:	2303      	movs	r3, #3
 800792a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800792c:	e0d6      	b.n	8007adc <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800792e:	7bbb      	ldrb	r3, [r7, #14]
 8007930:	2b04      	cmp	r3, #4
 8007932:	f040 80d3 	bne.w	8007adc <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	220b      	movs	r2, #11
 800793a:	761a      	strb	r2, [r3, #24]
      break;
 800793c:	e0ce      	b.n	8007adc <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6899      	ldr	r1, [r3, #8]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	899a      	ldrh	r2, [r3, #12]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	795b      	ldrb	r3, [r3, #5]
 800794a:	2001      	movs	r0, #1
 800794c:	9000      	str	r0, [sp, #0]
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f000 f8ea 	bl	8007b28 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800795a:	b29a      	uxth	r2, r3
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2206      	movs	r2, #6
 8007964:	761a      	strb	r2, [r3, #24]
      break;
 8007966:	e0c0      	b.n	8007aea <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	795b      	ldrb	r3, [r3, #5]
 800796c:	4619      	mov	r1, r3
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f000 fc4c 	bl	800820c <USBH_LL_GetURBState>
 8007974:	4603      	mov	r3, r0
 8007976:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007978:	7bbb      	ldrb	r3, [r7, #14]
 800797a:	2b01      	cmp	r3, #1
 800797c:	d103      	bne.n	8007986 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2207      	movs	r2, #7
 8007982:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007984:	e0ac      	b.n	8007ae0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007986:	7bbb      	ldrb	r3, [r7, #14]
 8007988:	2b05      	cmp	r3, #5
 800798a:	d105      	bne.n	8007998 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	220c      	movs	r2, #12
 8007990:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007992:	2303      	movs	r3, #3
 8007994:	73fb      	strb	r3, [r7, #15]
      break;
 8007996:	e0a3      	b.n	8007ae0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007998:	7bbb      	ldrb	r3, [r7, #14]
 800799a:	2b02      	cmp	r3, #2
 800799c:	d103      	bne.n	80079a6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2205      	movs	r2, #5
 80079a2:	761a      	strb	r2, [r3, #24]
      break;
 80079a4:	e09c      	b.n	8007ae0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80079a6:	7bbb      	ldrb	r3, [r7, #14]
 80079a8:	2b04      	cmp	r3, #4
 80079aa:	f040 8099 	bne.w	8007ae0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	220b      	movs	r2, #11
 80079b2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80079b4:	2302      	movs	r3, #2
 80079b6:	73fb      	strb	r3, [r7, #15]
      break;
 80079b8:	e092      	b.n	8007ae0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	791b      	ldrb	r3, [r3, #4]
 80079be:	2200      	movs	r2, #0
 80079c0:	2100      	movs	r1, #0
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 f8d5 	bl	8007b72 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80079ce:	b29a      	uxth	r2, r3
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2208      	movs	r2, #8
 80079d8:	761a      	strb	r2, [r3, #24]

      break;
 80079da:	e086      	b.n	8007aea <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	791b      	ldrb	r3, [r3, #4]
 80079e0:	4619      	mov	r1, r3
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 fc12 	bl	800820c <USBH_LL_GetURBState>
 80079e8:	4603      	mov	r3, r0
 80079ea:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80079ec:	7bbb      	ldrb	r3, [r7, #14]
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d105      	bne.n	80079fe <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	220d      	movs	r2, #13
 80079f6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80079f8:	2300      	movs	r3, #0
 80079fa:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80079fc:	e072      	b.n	8007ae4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80079fe:	7bbb      	ldrb	r3, [r7, #14]
 8007a00:	2b04      	cmp	r3, #4
 8007a02:	d103      	bne.n	8007a0c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	220b      	movs	r2, #11
 8007a08:	761a      	strb	r2, [r3, #24]
      break;
 8007a0a:	e06b      	b.n	8007ae4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007a0c:	7bbb      	ldrb	r3, [r7, #14]
 8007a0e:	2b05      	cmp	r3, #5
 8007a10:	d168      	bne.n	8007ae4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007a12:	2303      	movs	r3, #3
 8007a14:	73fb      	strb	r3, [r7, #15]
      break;
 8007a16:	e065      	b.n	8007ae4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	795b      	ldrb	r3, [r3, #5]
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	9200      	str	r2, [sp, #0]
 8007a20:	2200      	movs	r2, #0
 8007a22:	2100      	movs	r1, #0
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 f87f 	bl	8007b28 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007a30:	b29a      	uxth	r2, r3
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	220a      	movs	r2, #10
 8007a3a:	761a      	strb	r2, [r3, #24]
      break;
 8007a3c:	e055      	b.n	8007aea <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	795b      	ldrb	r3, [r3, #5]
 8007a42:	4619      	mov	r1, r3
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f000 fbe1 	bl	800820c <USBH_LL_GetURBState>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007a4e:	7bbb      	ldrb	r3, [r7, #14]
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d105      	bne.n	8007a60 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007a54:	2300      	movs	r3, #0
 8007a56:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	220d      	movs	r2, #13
 8007a5c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007a5e:	e043      	b.n	8007ae8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007a60:	7bbb      	ldrb	r3, [r7, #14]
 8007a62:	2b02      	cmp	r3, #2
 8007a64:	d103      	bne.n	8007a6e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2209      	movs	r2, #9
 8007a6a:	761a      	strb	r2, [r3, #24]
      break;
 8007a6c:	e03c      	b.n	8007ae8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007a6e:	7bbb      	ldrb	r3, [r7, #14]
 8007a70:	2b04      	cmp	r3, #4
 8007a72:	d139      	bne.n	8007ae8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	220b      	movs	r2, #11
 8007a78:	761a      	strb	r2, [r3, #24]
      break;
 8007a7a:	e035      	b.n	8007ae8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	7e5b      	ldrb	r3, [r3, #25]
 8007a80:	3301      	adds	r3, #1
 8007a82:	b2da      	uxtb	r2, r3
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	765a      	strb	r2, [r3, #25]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	7e5b      	ldrb	r3, [r3, #25]
 8007a8c:	2b02      	cmp	r3, #2
 8007a8e:	d806      	bhi.n	8007a9e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2201      	movs	r2, #1
 8007a94:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2201      	movs	r2, #1
 8007a9a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007a9c:	e025      	b.n	8007aea <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007aa4:	2106      	movs	r1, #6
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	795b      	ldrb	r3, [r3, #5]
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 f90c 	bl	8007cd4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	791b      	ldrb	r3, [r3, #4]
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 f906 	bl	8007cd4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2200      	movs	r2, #0
 8007acc:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007ace:	2302      	movs	r3, #2
 8007ad0:	73fb      	strb	r3, [r7, #15]
      break;
 8007ad2:	e00a      	b.n	8007aea <USBH_HandleControl+0x2de>

    default:
      break;
 8007ad4:	bf00      	nop
 8007ad6:	e008      	b.n	8007aea <USBH_HandleControl+0x2de>
      break;
 8007ad8:	bf00      	nop
 8007ada:	e006      	b.n	8007aea <USBH_HandleControl+0x2de>
      break;
 8007adc:	bf00      	nop
 8007ade:	e004      	b.n	8007aea <USBH_HandleControl+0x2de>
      break;
 8007ae0:	bf00      	nop
 8007ae2:	e002      	b.n	8007aea <USBH_HandleControl+0x2de>
      break;
 8007ae4:	bf00      	nop
 8007ae6:	e000      	b.n	8007aea <USBH_HandleControl+0x2de>
      break;
 8007ae8:	bf00      	nop
  }

  return status;
 8007aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3710      	adds	r7, #16
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b088      	sub	sp, #32
 8007af8:	af04      	add	r7, sp, #16
 8007afa:	60f8      	str	r0, [r7, #12]
 8007afc:	60b9      	str	r1, [r7, #8]
 8007afe:	4613      	mov	r3, r2
 8007b00:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007b02:	79f9      	ldrb	r1, [r7, #7]
 8007b04:	2300      	movs	r3, #0
 8007b06:	9303      	str	r3, [sp, #12]
 8007b08:	2308      	movs	r3, #8
 8007b0a:	9302      	str	r3, [sp, #8]
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	9301      	str	r3, [sp, #4]
 8007b10:	2300      	movs	r3, #0
 8007b12:	9300      	str	r3, [sp, #0]
 8007b14:	2300      	movs	r3, #0
 8007b16:	2200      	movs	r2, #0
 8007b18:	68f8      	ldr	r0, [r7, #12]
 8007b1a:	f000 fb46 	bl	80081aa <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007b1e:	2300      	movs	r3, #0
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3710      	adds	r7, #16
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b088      	sub	sp, #32
 8007b2c:	af04      	add	r7, sp, #16
 8007b2e:	60f8      	str	r0, [r7, #12]
 8007b30:	60b9      	str	r1, [r7, #8]
 8007b32:	4611      	mov	r1, r2
 8007b34:	461a      	mov	r2, r3
 8007b36:	460b      	mov	r3, r1
 8007b38:	80fb      	strh	r3, [r7, #6]
 8007b3a:	4613      	mov	r3, r2
 8007b3c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d001      	beq.n	8007b4c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007b4c:	7979      	ldrb	r1, [r7, #5]
 8007b4e:	7e3b      	ldrb	r3, [r7, #24]
 8007b50:	9303      	str	r3, [sp, #12]
 8007b52:	88fb      	ldrh	r3, [r7, #6]
 8007b54:	9302      	str	r3, [sp, #8]
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	9301      	str	r3, [sp, #4]
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	9300      	str	r3, [sp, #0]
 8007b5e:	2300      	movs	r3, #0
 8007b60:	2200      	movs	r2, #0
 8007b62:	68f8      	ldr	r0, [r7, #12]
 8007b64:	f000 fb21 	bl	80081aa <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007b68:	2300      	movs	r3, #0
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3710      	adds	r7, #16
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}

08007b72 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007b72:	b580      	push	{r7, lr}
 8007b74:	b088      	sub	sp, #32
 8007b76:	af04      	add	r7, sp, #16
 8007b78:	60f8      	str	r0, [r7, #12]
 8007b7a:	60b9      	str	r1, [r7, #8]
 8007b7c:	4611      	mov	r1, r2
 8007b7e:	461a      	mov	r2, r3
 8007b80:	460b      	mov	r3, r1
 8007b82:	80fb      	strh	r3, [r7, #6]
 8007b84:	4613      	mov	r3, r2
 8007b86:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007b88:	7979      	ldrb	r1, [r7, #5]
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	9303      	str	r3, [sp, #12]
 8007b8e:	88fb      	ldrh	r3, [r7, #6]
 8007b90:	9302      	str	r3, [sp, #8]
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	9301      	str	r3, [sp, #4]
 8007b96:	2301      	movs	r3, #1
 8007b98:	9300      	str	r3, [sp, #0]
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	68f8      	ldr	r0, [r7, #12]
 8007ba0:	f000 fb03 	bl	80081aa <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007ba4:	2300      	movs	r3, #0

}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3710      	adds	r7, #16
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}

08007bae <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007bae:	b580      	push	{r7, lr}
 8007bb0:	b088      	sub	sp, #32
 8007bb2:	af04      	add	r7, sp, #16
 8007bb4:	60f8      	str	r0, [r7, #12]
 8007bb6:	60b9      	str	r1, [r7, #8]
 8007bb8:	4611      	mov	r1, r2
 8007bba:	461a      	mov	r2, r3
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	80fb      	strh	r3, [r7, #6]
 8007bc0:	4613      	mov	r3, r2
 8007bc2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d001      	beq.n	8007bd2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007bd2:	7979      	ldrb	r1, [r7, #5]
 8007bd4:	7e3b      	ldrb	r3, [r7, #24]
 8007bd6:	9303      	str	r3, [sp, #12]
 8007bd8:	88fb      	ldrh	r3, [r7, #6]
 8007bda:	9302      	str	r3, [sp, #8]
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	9301      	str	r3, [sp, #4]
 8007be0:	2301      	movs	r3, #1
 8007be2:	9300      	str	r3, [sp, #0]
 8007be4:	2302      	movs	r3, #2
 8007be6:	2200      	movs	r2, #0
 8007be8:	68f8      	ldr	r0, [r7, #12]
 8007bea:	f000 fade 	bl	80081aa <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007bee:	2300      	movs	r3, #0
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3710      	adds	r7, #16
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b088      	sub	sp, #32
 8007bfc:	af04      	add	r7, sp, #16
 8007bfe:	60f8      	str	r0, [r7, #12]
 8007c00:	60b9      	str	r1, [r7, #8]
 8007c02:	4611      	mov	r1, r2
 8007c04:	461a      	mov	r2, r3
 8007c06:	460b      	mov	r3, r1
 8007c08:	80fb      	strh	r3, [r7, #6]
 8007c0a:	4613      	mov	r3, r2
 8007c0c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007c0e:	7979      	ldrb	r1, [r7, #5]
 8007c10:	2300      	movs	r3, #0
 8007c12:	9303      	str	r3, [sp, #12]
 8007c14:	88fb      	ldrh	r3, [r7, #6]
 8007c16:	9302      	str	r3, [sp, #8]
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	9301      	str	r3, [sp, #4]
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	9300      	str	r3, [sp, #0]
 8007c20:	2302      	movs	r3, #2
 8007c22:	2201      	movs	r2, #1
 8007c24:	68f8      	ldr	r0, [r7, #12]
 8007c26:	f000 fac0 	bl	80081aa <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007c2a:	2300      	movs	r3, #0
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3710      	adds	r7, #16
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b086      	sub	sp, #24
 8007c38:	af04      	add	r7, sp, #16
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	4608      	mov	r0, r1
 8007c3e:	4611      	mov	r1, r2
 8007c40:	461a      	mov	r2, r3
 8007c42:	4603      	mov	r3, r0
 8007c44:	70fb      	strb	r3, [r7, #3]
 8007c46:	460b      	mov	r3, r1
 8007c48:	70bb      	strb	r3, [r7, #2]
 8007c4a:	4613      	mov	r3, r2
 8007c4c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007c4e:	7878      	ldrb	r0, [r7, #1]
 8007c50:	78ba      	ldrb	r2, [r7, #2]
 8007c52:	78f9      	ldrb	r1, [r7, #3]
 8007c54:	8b3b      	ldrh	r3, [r7, #24]
 8007c56:	9302      	str	r3, [sp, #8]
 8007c58:	7d3b      	ldrb	r3, [r7, #20]
 8007c5a:	9301      	str	r3, [sp, #4]
 8007c5c:	7c3b      	ldrb	r3, [r7, #16]
 8007c5e:	9300      	str	r3, [sp, #0]
 8007c60:	4603      	mov	r3, r0
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 fa53 	bl	800810e <USBH_LL_OpenPipe>

  return USBH_OK;
 8007c68:	2300      	movs	r3, #0
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3708      	adds	r7, #8
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}

08007c72 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007c72:	b580      	push	{r7, lr}
 8007c74:	b082      	sub	sp, #8
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	6078      	str	r0, [r7, #4]
 8007c7a:	460b      	mov	r3, r1
 8007c7c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8007c7e:	78fb      	ldrb	r3, [r7, #3]
 8007c80:	4619      	mov	r1, r3
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 fa72 	bl	800816c <USBH_LL_ClosePipe>

  return USBH_OK;
 8007c88:	2300      	movs	r3, #0
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3708      	adds	r7, #8
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}

08007c92 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007c92:	b580      	push	{r7, lr}
 8007c94:	b084      	sub	sp, #16
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	6078      	str	r0, [r7, #4]
 8007c9a:	460b      	mov	r3, r1
 8007c9c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 f836 	bl	8007d10 <USBH_GetFreePipe>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007ca8:	89fb      	ldrh	r3, [r7, #14]
 8007caa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d00a      	beq.n	8007cc8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8007cb2:	78fa      	ldrb	r2, [r7, #3]
 8007cb4:	89fb      	ldrh	r3, [r7, #14]
 8007cb6:	f003 030f 	and.w	r3, r3, #15
 8007cba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007cbe:	6879      	ldr	r1, [r7, #4]
 8007cc0:	33e0      	adds	r3, #224	; 0xe0
 8007cc2:	009b      	lsls	r3, r3, #2
 8007cc4:	440b      	add	r3, r1
 8007cc6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007cc8:	89fb      	ldrh	r3, [r7, #14]
 8007cca:	b2db      	uxtb	r3, r3
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3710      	adds	r7, #16
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}

08007cd4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b083      	sub	sp, #12
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	460b      	mov	r3, r1
 8007cde:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007ce0:	78fb      	ldrb	r3, [r7, #3]
 8007ce2:	2b0f      	cmp	r3, #15
 8007ce4:	d80d      	bhi.n	8007d02 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007ce6:	78fb      	ldrb	r3, [r7, #3]
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	33e0      	adds	r3, #224	; 0xe0
 8007cec:	009b      	lsls	r3, r3, #2
 8007cee:	4413      	add	r3, r2
 8007cf0:	685a      	ldr	r2, [r3, #4]
 8007cf2:	78fb      	ldrb	r3, [r7, #3]
 8007cf4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007cf8:	6879      	ldr	r1, [r7, #4]
 8007cfa:	33e0      	adds	r3, #224	; 0xe0
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	440b      	add	r3, r1
 8007d00:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007d02:	2300      	movs	r3, #0
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	370c      	adds	r7, #12
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0e:	4770      	bx	lr

08007d10 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b085      	sub	sp, #20
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	73fb      	strb	r3, [r7, #15]
 8007d20:	e00f      	b.n	8007d42 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007d22:	7bfb      	ldrb	r3, [r7, #15]
 8007d24:	687a      	ldr	r2, [r7, #4]
 8007d26:	33e0      	adds	r3, #224	; 0xe0
 8007d28:	009b      	lsls	r3, r3, #2
 8007d2a:	4413      	add	r3, r2
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d102      	bne.n	8007d3c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007d36:	7bfb      	ldrb	r3, [r7, #15]
 8007d38:	b29b      	uxth	r3, r3
 8007d3a:	e007      	b.n	8007d4c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007d3c:	7bfb      	ldrb	r3, [r7, #15]
 8007d3e:	3301      	adds	r3, #1
 8007d40:	73fb      	strb	r3, [r7, #15]
 8007d42:	7bfb      	ldrb	r3, [r7, #15]
 8007d44:	2b0f      	cmp	r3, #15
 8007d46:	d9ec      	bls.n	8007d22 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007d48:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3714      	adds	r7, #20
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr

08007d58 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	490e      	ldr	r1, [pc, #56]	; (8007d98 <MX_USB_HOST_Init+0x40>)
 8007d60:	480e      	ldr	r0, [pc, #56]	; (8007d9c <MX_USB_HOST_Init+0x44>)
 8007d62:	f7fe fba7 	bl	80064b4 <USBH_Init>
 8007d66:	4603      	mov	r3, r0
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d001      	beq.n	8007d70 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007d6c:	f7f9 f871 	bl	8000e52 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007d70:	490b      	ldr	r1, [pc, #44]	; (8007da0 <MX_USB_HOST_Init+0x48>)
 8007d72:	480a      	ldr	r0, [pc, #40]	; (8007d9c <MX_USB_HOST_Init+0x44>)
 8007d74:	f7fe fc2c 	bl	80065d0 <USBH_RegisterClass>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d001      	beq.n	8007d82 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007d7e:	f7f9 f868 	bl	8000e52 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007d82:	4806      	ldr	r0, [pc, #24]	; (8007d9c <MX_USB_HOST_Init+0x44>)
 8007d84:	f7fe fcb0 	bl	80066e8 <USBH_Start>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d001      	beq.n	8007d92 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007d8e:	f7f9 f860 	bl	8000e52 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007d92:	bf00      	nop
 8007d94:	bd80      	pop	{r7, pc}
 8007d96:	bf00      	nop
 8007d98:	08007db9 	.word	0x08007db9
 8007d9c:	200001a8 	.word	0x200001a8
 8007da0:	2000000c 	.word	0x2000000c

08007da4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007da8:	4802      	ldr	r0, [pc, #8]	; (8007db4 <MX_USB_HOST_Process+0x10>)
 8007daa:	f7fe fcad 	bl	8006708 <USBH_Process>
}
 8007dae:	bf00      	nop
 8007db0:	bd80      	pop	{r7, pc}
 8007db2:	bf00      	nop
 8007db4:	200001a8 	.word	0x200001a8

08007db8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b083      	sub	sp, #12
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	460b      	mov	r3, r1
 8007dc2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007dc4:	78fb      	ldrb	r3, [r7, #3]
 8007dc6:	3b01      	subs	r3, #1
 8007dc8:	2b04      	cmp	r3, #4
 8007dca:	d819      	bhi.n	8007e00 <USBH_UserProcess+0x48>
 8007dcc:	a201      	add	r2, pc, #4	; (adr r2, 8007dd4 <USBH_UserProcess+0x1c>)
 8007dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dd2:	bf00      	nop
 8007dd4:	08007e01 	.word	0x08007e01
 8007dd8:	08007df1 	.word	0x08007df1
 8007ddc:	08007e01 	.word	0x08007e01
 8007de0:	08007df9 	.word	0x08007df9
 8007de4:	08007de9 	.word	0x08007de9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007de8:	4b09      	ldr	r3, [pc, #36]	; (8007e10 <USBH_UserProcess+0x58>)
 8007dea:	2203      	movs	r2, #3
 8007dec:	701a      	strb	r2, [r3, #0]
  break;
 8007dee:	e008      	b.n	8007e02 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007df0:	4b07      	ldr	r3, [pc, #28]	; (8007e10 <USBH_UserProcess+0x58>)
 8007df2:	2202      	movs	r2, #2
 8007df4:	701a      	strb	r2, [r3, #0]
  break;
 8007df6:	e004      	b.n	8007e02 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007df8:	4b05      	ldr	r3, [pc, #20]	; (8007e10 <USBH_UserProcess+0x58>)
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	701a      	strb	r2, [r3, #0]
  break;
 8007dfe:	e000      	b.n	8007e02 <USBH_UserProcess+0x4a>

  default:
  break;
 8007e00:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007e02:	bf00      	nop
 8007e04:	370c      	adds	r7, #12
 8007e06:	46bd      	mov	sp, r7
 8007e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0c:	4770      	bx	lr
 8007e0e:	bf00      	nop
 8007e10:	20000580 	.word	0x20000580

08007e14 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b08a      	sub	sp, #40	; 0x28
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e1c:	f107 0314 	add.w	r3, r7, #20
 8007e20:	2200      	movs	r2, #0
 8007e22:	601a      	str	r2, [r3, #0]
 8007e24:	605a      	str	r2, [r3, #4]
 8007e26:	609a      	str	r2, [r3, #8]
 8007e28:	60da      	str	r2, [r3, #12]
 8007e2a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e34:	d147      	bne.n	8007ec6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e36:	2300      	movs	r3, #0
 8007e38:	613b      	str	r3, [r7, #16]
 8007e3a:	4b25      	ldr	r3, [pc, #148]	; (8007ed0 <HAL_HCD_MspInit+0xbc>)
 8007e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e3e:	4a24      	ldr	r2, [pc, #144]	; (8007ed0 <HAL_HCD_MspInit+0xbc>)
 8007e40:	f043 0301 	orr.w	r3, r3, #1
 8007e44:	6313      	str	r3, [r2, #48]	; 0x30
 8007e46:	4b22      	ldr	r3, [pc, #136]	; (8007ed0 <HAL_HCD_MspInit+0xbc>)
 8007e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e4a:	f003 0301 	and.w	r3, r3, #1
 8007e4e:	613b      	str	r3, [r7, #16]
 8007e50:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007e52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e60:	f107 0314 	add.w	r3, r7, #20
 8007e64:	4619      	mov	r1, r3
 8007e66:	481b      	ldr	r0, [pc, #108]	; (8007ed4 <HAL_HCD_MspInit+0xc0>)
 8007e68:	f7f9 fc34 	bl	80016d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8007e6c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007e70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e72:	2302      	movs	r3, #2
 8007e74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e76:	2300      	movs	r3, #0
 8007e78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007e7e:	230a      	movs	r3, #10
 8007e80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e82:	f107 0314 	add.w	r3, r7, #20
 8007e86:	4619      	mov	r1, r3
 8007e88:	4812      	ldr	r0, [pc, #72]	; (8007ed4 <HAL_HCD_MspInit+0xc0>)
 8007e8a:	f7f9 fc23 	bl	80016d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007e8e:	4b10      	ldr	r3, [pc, #64]	; (8007ed0 <HAL_HCD_MspInit+0xbc>)
 8007e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e92:	4a0f      	ldr	r2, [pc, #60]	; (8007ed0 <HAL_HCD_MspInit+0xbc>)
 8007e94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e98:	6353      	str	r3, [r2, #52]	; 0x34
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	60fb      	str	r3, [r7, #12]
 8007e9e:	4b0c      	ldr	r3, [pc, #48]	; (8007ed0 <HAL_HCD_MspInit+0xbc>)
 8007ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ea2:	4a0b      	ldr	r2, [pc, #44]	; (8007ed0 <HAL_HCD_MspInit+0xbc>)
 8007ea4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007ea8:	6453      	str	r3, [r2, #68]	; 0x44
 8007eaa:	4b09      	ldr	r3, [pc, #36]	; (8007ed0 <HAL_HCD_MspInit+0xbc>)
 8007eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007eb2:	60fb      	str	r3, [r7, #12]
 8007eb4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	2100      	movs	r1, #0
 8007eba:	2043      	movs	r0, #67	; 0x43
 8007ebc:	f7f9 fbd3 	bl	8001666 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007ec0:	2043      	movs	r0, #67	; 0x43
 8007ec2:	f7f9 fbec 	bl	800169e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007ec6:	bf00      	nop
 8007ec8:	3728      	adds	r7, #40	; 0x28
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	40023800 	.word	0x40023800
 8007ed4:	40020000 	.word	0x40020000

08007ed8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b082      	sub	sp, #8
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f7fe ffed 	bl	8006ec6 <USBH_LL_IncTimer>
}
 8007eec:	bf00      	nop
 8007eee:	3708      	adds	r7, #8
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}

08007ef4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b082      	sub	sp, #8
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007f02:	4618      	mov	r0, r3
 8007f04:	f7ff f825 	bl	8006f52 <USBH_LL_Connect>
}
 8007f08:	bf00      	nop
 8007f0a:	3708      	adds	r7, #8
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}

08007f10 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b082      	sub	sp, #8
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f7ff f82e 	bl	8006f80 <USBH_LL_Disconnect>
}
 8007f24:	bf00      	nop
 8007f26:	3708      	adds	r7, #8
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b083      	sub	sp, #12
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	460b      	mov	r3, r1
 8007f36:	70fb      	strb	r3, [r7, #3]
 8007f38:	4613      	mov	r3, r2
 8007f3a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007f3c:	bf00      	nop
 8007f3e:	370c      	adds	r7, #12
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr

08007f48 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b082      	sub	sp, #8
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007f56:	4618      	mov	r0, r3
 8007f58:	f7fe ffdf 	bl	8006f1a <USBH_LL_PortEnabled>
}
 8007f5c:	bf00      	nop
 8007f5e:	3708      	adds	r7, #8
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}

08007f64 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b082      	sub	sp, #8
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007f72:	4618      	mov	r0, r3
 8007f74:	f7fe ffdf 	bl	8006f36 <USBH_LL_PortDisabled>
}
 8007f78:	bf00      	nop
 8007f7a:	3708      	adds	r7, #8
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b082      	sub	sp, #8
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d12a      	bne.n	8007fe8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007f92:	4a18      	ldr	r2, [pc, #96]	; (8007ff4 <USBH_LL_Init+0x74>)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	4a15      	ldr	r2, [pc, #84]	; (8007ff4 <USBH_LL_Init+0x74>)
 8007f9e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007fa2:	4b14      	ldr	r3, [pc, #80]	; (8007ff4 <USBH_LL_Init+0x74>)
 8007fa4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007fa8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007faa:	4b12      	ldr	r3, [pc, #72]	; (8007ff4 <USBH_LL_Init+0x74>)
 8007fac:	2208      	movs	r2, #8
 8007fae:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007fb0:	4b10      	ldr	r3, [pc, #64]	; (8007ff4 <USBH_LL_Init+0x74>)
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007fb6:	4b0f      	ldr	r3, [pc, #60]	; (8007ff4 <USBH_LL_Init+0x74>)
 8007fb8:	2200      	movs	r2, #0
 8007fba:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007fbc:	4b0d      	ldr	r3, [pc, #52]	; (8007ff4 <USBH_LL_Init+0x74>)
 8007fbe:	2202      	movs	r2, #2
 8007fc0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007fc2:	4b0c      	ldr	r3, [pc, #48]	; (8007ff4 <USBH_LL_Init+0x74>)
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007fc8:	480a      	ldr	r0, [pc, #40]	; (8007ff4 <USBH_LL_Init+0x74>)
 8007fca:	f7f9 fd38 	bl	8001a3e <HAL_HCD_Init>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d001      	beq.n	8007fd8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007fd4:	f7f8 ff3d 	bl	8000e52 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007fd8:	4806      	ldr	r0, [pc, #24]	; (8007ff4 <USBH_LL_Init+0x74>)
 8007fda:	f7fa f91c 	bl	8002216 <HAL_HCD_GetCurrentFrame>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f7fe ff60 	bl	8006ea8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007fe8:	2300      	movs	r3, #0
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3708      	adds	r7, #8
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
 8007ff2:	bf00      	nop
 8007ff4:	20000584 	.word	0x20000584

08007ff8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b084      	sub	sp, #16
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008000:	2300      	movs	r3, #0
 8008002:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008004:	2300      	movs	r3, #0
 8008006:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800800e:	4618      	mov	r0, r3
 8008010:	f7fa f88b 	bl	800212a <HAL_HCD_Start>
 8008014:	4603      	mov	r3, r0
 8008016:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008018:	7bfb      	ldrb	r3, [r7, #15]
 800801a:	4618      	mov	r0, r3
 800801c:	f000 f95c 	bl	80082d8 <USBH_Get_USB_Status>
 8008020:	4603      	mov	r3, r0
 8008022:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008024:	7bbb      	ldrb	r3, [r7, #14]
}
 8008026:	4618      	mov	r0, r3
 8008028:	3710      	adds	r7, #16
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}

0800802e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800802e:	b580      	push	{r7, lr}
 8008030:	b084      	sub	sp, #16
 8008032:	af00      	add	r7, sp, #0
 8008034:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008036:	2300      	movs	r3, #0
 8008038:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800803a:	2300      	movs	r3, #0
 800803c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008044:	4618      	mov	r0, r3
 8008046:	f7fa f893 	bl	8002170 <HAL_HCD_Stop>
 800804a:	4603      	mov	r3, r0
 800804c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800804e:	7bfb      	ldrb	r3, [r7, #15]
 8008050:	4618      	mov	r0, r3
 8008052:	f000 f941 	bl	80082d8 <USBH_Get_USB_Status>
 8008056:	4603      	mov	r3, r0
 8008058:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800805a:	7bbb      	ldrb	r3, [r7, #14]
}
 800805c:	4618      	mov	r0, r3
 800805e:	3710      	adds	r7, #16
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b084      	sub	sp, #16
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800806c:	2301      	movs	r3, #1
 800806e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008076:	4618      	mov	r0, r3
 8008078:	f7fa f8db 	bl	8002232 <HAL_HCD_GetCurrentSpeed>
 800807c:	4603      	mov	r3, r0
 800807e:	2b02      	cmp	r3, #2
 8008080:	d00c      	beq.n	800809c <USBH_LL_GetSpeed+0x38>
 8008082:	2b02      	cmp	r3, #2
 8008084:	d80d      	bhi.n	80080a2 <USBH_LL_GetSpeed+0x3e>
 8008086:	2b00      	cmp	r3, #0
 8008088:	d002      	beq.n	8008090 <USBH_LL_GetSpeed+0x2c>
 800808a:	2b01      	cmp	r3, #1
 800808c:	d003      	beq.n	8008096 <USBH_LL_GetSpeed+0x32>
 800808e:	e008      	b.n	80080a2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008090:	2300      	movs	r3, #0
 8008092:	73fb      	strb	r3, [r7, #15]
    break;
 8008094:	e008      	b.n	80080a8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008096:	2301      	movs	r3, #1
 8008098:	73fb      	strb	r3, [r7, #15]
    break;
 800809a:	e005      	b.n	80080a8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800809c:	2302      	movs	r3, #2
 800809e:	73fb      	strb	r3, [r7, #15]
    break;
 80080a0:	e002      	b.n	80080a8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80080a2:	2301      	movs	r3, #1
 80080a4:	73fb      	strb	r3, [r7, #15]
    break;
 80080a6:	bf00      	nop
  }
  return  speed;
 80080a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3710      	adds	r7, #16
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}

080080b2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80080b2:	b580      	push	{r7, lr}
 80080b4:	b084      	sub	sp, #16
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080ba:	2300      	movs	r3, #0
 80080bc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80080be:	2300      	movs	r3, #0
 80080c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80080c8:	4618      	mov	r0, r3
 80080ca:	f7fa f86e 	bl	80021aa <HAL_HCD_ResetPort>
 80080ce:	4603      	mov	r3, r0
 80080d0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80080d2:	7bfb      	ldrb	r3, [r7, #15]
 80080d4:	4618      	mov	r0, r3
 80080d6:	f000 f8ff 	bl	80082d8 <USBH_Get_USB_Status>
 80080da:	4603      	mov	r3, r0
 80080dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080de:	7bbb      	ldrb	r3, [r7, #14]
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3710      	adds	r7, #16
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}

080080e8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b082      	sub	sp, #8
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	460b      	mov	r3, r1
 80080f2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80080fa:	78fa      	ldrb	r2, [r7, #3]
 80080fc:	4611      	mov	r1, r2
 80080fe:	4618      	mov	r0, r3
 8008100:	f7fa f875 	bl	80021ee <HAL_HCD_HC_GetXferCount>
 8008104:	4603      	mov	r3, r0
}
 8008106:	4618      	mov	r0, r3
 8008108:	3708      	adds	r7, #8
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}

0800810e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800810e:	b590      	push	{r4, r7, lr}
 8008110:	b089      	sub	sp, #36	; 0x24
 8008112:	af04      	add	r7, sp, #16
 8008114:	6078      	str	r0, [r7, #4]
 8008116:	4608      	mov	r0, r1
 8008118:	4611      	mov	r1, r2
 800811a:	461a      	mov	r2, r3
 800811c:	4603      	mov	r3, r0
 800811e:	70fb      	strb	r3, [r7, #3]
 8008120:	460b      	mov	r3, r1
 8008122:	70bb      	strb	r3, [r7, #2]
 8008124:	4613      	mov	r3, r2
 8008126:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008128:	2300      	movs	r3, #0
 800812a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800812c:	2300      	movs	r3, #0
 800812e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008136:	787c      	ldrb	r4, [r7, #1]
 8008138:	78ba      	ldrb	r2, [r7, #2]
 800813a:	78f9      	ldrb	r1, [r7, #3]
 800813c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800813e:	9302      	str	r3, [sp, #8]
 8008140:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008144:	9301      	str	r3, [sp, #4]
 8008146:	f897 3020 	ldrb.w	r3, [r7, #32]
 800814a:	9300      	str	r3, [sp, #0]
 800814c:	4623      	mov	r3, r4
 800814e:	f7f9 fcd8 	bl	8001b02 <HAL_HCD_HC_Init>
 8008152:	4603      	mov	r3, r0
 8008154:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008156:	7bfb      	ldrb	r3, [r7, #15]
 8008158:	4618      	mov	r0, r3
 800815a:	f000 f8bd 	bl	80082d8 <USBH_Get_USB_Status>
 800815e:	4603      	mov	r3, r0
 8008160:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008162:	7bbb      	ldrb	r3, [r7, #14]
}
 8008164:	4618      	mov	r0, r3
 8008166:	3714      	adds	r7, #20
 8008168:	46bd      	mov	sp, r7
 800816a:	bd90      	pop	{r4, r7, pc}

0800816c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b084      	sub	sp, #16
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	460b      	mov	r3, r1
 8008176:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008178:	2300      	movs	r3, #0
 800817a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800817c:	2300      	movs	r3, #0
 800817e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008186:	78fa      	ldrb	r2, [r7, #3]
 8008188:	4611      	mov	r1, r2
 800818a:	4618      	mov	r0, r3
 800818c:	f7f9 fd48 	bl	8001c20 <HAL_HCD_HC_Halt>
 8008190:	4603      	mov	r3, r0
 8008192:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008194:	7bfb      	ldrb	r3, [r7, #15]
 8008196:	4618      	mov	r0, r3
 8008198:	f000 f89e 	bl	80082d8 <USBH_Get_USB_Status>
 800819c:	4603      	mov	r3, r0
 800819e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3710      	adds	r7, #16
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}

080081aa <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80081aa:	b590      	push	{r4, r7, lr}
 80081ac:	b089      	sub	sp, #36	; 0x24
 80081ae:	af04      	add	r7, sp, #16
 80081b0:	6078      	str	r0, [r7, #4]
 80081b2:	4608      	mov	r0, r1
 80081b4:	4611      	mov	r1, r2
 80081b6:	461a      	mov	r2, r3
 80081b8:	4603      	mov	r3, r0
 80081ba:	70fb      	strb	r3, [r7, #3]
 80081bc:	460b      	mov	r3, r1
 80081be:	70bb      	strb	r3, [r7, #2]
 80081c0:	4613      	mov	r3, r2
 80081c2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081c4:	2300      	movs	r3, #0
 80081c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80081c8:	2300      	movs	r3, #0
 80081ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80081d2:	787c      	ldrb	r4, [r7, #1]
 80081d4:	78ba      	ldrb	r2, [r7, #2]
 80081d6:	78f9      	ldrb	r1, [r7, #3]
 80081d8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80081dc:	9303      	str	r3, [sp, #12]
 80081de:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80081e0:	9302      	str	r3, [sp, #8]
 80081e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e4:	9301      	str	r3, [sp, #4]
 80081e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80081ea:	9300      	str	r3, [sp, #0]
 80081ec:	4623      	mov	r3, r4
 80081ee:	f7f9 fd3b 	bl	8001c68 <HAL_HCD_HC_SubmitRequest>
 80081f2:	4603      	mov	r3, r0
 80081f4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80081f6:	7bfb      	ldrb	r3, [r7, #15]
 80081f8:	4618      	mov	r0, r3
 80081fa:	f000 f86d 	bl	80082d8 <USBH_Get_USB_Status>
 80081fe:	4603      	mov	r3, r0
 8008200:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008202:	7bbb      	ldrb	r3, [r7, #14]
}
 8008204:	4618      	mov	r0, r3
 8008206:	3714      	adds	r7, #20
 8008208:	46bd      	mov	sp, r7
 800820a:	bd90      	pop	{r4, r7, pc}

0800820c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b082      	sub	sp, #8
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	460b      	mov	r3, r1
 8008216:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800821e:	78fa      	ldrb	r2, [r7, #3]
 8008220:	4611      	mov	r1, r2
 8008222:	4618      	mov	r0, r3
 8008224:	f7f9 ffcf 	bl	80021c6 <HAL_HCD_HC_GetURBState>
 8008228:	4603      	mov	r3, r0
}
 800822a:	4618      	mov	r0, r3
 800822c:	3708      	adds	r7, #8
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}

08008232 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008232:	b580      	push	{r7, lr}
 8008234:	b082      	sub	sp, #8
 8008236:	af00      	add	r7, sp, #0
 8008238:	6078      	str	r0, [r7, #4]
 800823a:	460b      	mov	r3, r1
 800823c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008244:	2b01      	cmp	r3, #1
 8008246:	d103      	bne.n	8008250 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008248:	78fb      	ldrb	r3, [r7, #3]
 800824a:	4618      	mov	r0, r3
 800824c:	f000 f870 	bl	8008330 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008250:	20c8      	movs	r0, #200	; 0xc8
 8008252:	f7f9 f909 	bl	8001468 <HAL_Delay>
  return USBH_OK;
 8008256:	2300      	movs	r3, #0
}
 8008258:	4618      	mov	r0, r3
 800825a:	3708      	adds	r7, #8
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008260:	b480      	push	{r7}
 8008262:	b085      	sub	sp, #20
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	460b      	mov	r3, r1
 800826a:	70fb      	strb	r3, [r7, #3]
 800826c:	4613      	mov	r3, r2
 800826e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008276:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008278:	78fb      	ldrb	r3, [r7, #3]
 800827a:	68fa      	ldr	r2, [r7, #12]
 800827c:	212c      	movs	r1, #44	; 0x2c
 800827e:	fb01 f303 	mul.w	r3, r1, r3
 8008282:	4413      	add	r3, r2
 8008284:	333b      	adds	r3, #59	; 0x3b
 8008286:	781b      	ldrb	r3, [r3, #0]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d009      	beq.n	80082a0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800828c:	78fb      	ldrb	r3, [r7, #3]
 800828e:	68fa      	ldr	r2, [r7, #12]
 8008290:	212c      	movs	r1, #44	; 0x2c
 8008292:	fb01 f303 	mul.w	r3, r1, r3
 8008296:	4413      	add	r3, r2
 8008298:	3354      	adds	r3, #84	; 0x54
 800829a:	78ba      	ldrb	r2, [r7, #2]
 800829c:	701a      	strb	r2, [r3, #0]
 800829e:	e008      	b.n	80082b2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80082a0:	78fb      	ldrb	r3, [r7, #3]
 80082a2:	68fa      	ldr	r2, [r7, #12]
 80082a4:	212c      	movs	r1, #44	; 0x2c
 80082a6:	fb01 f303 	mul.w	r3, r1, r3
 80082aa:	4413      	add	r3, r2
 80082ac:	3355      	adds	r3, #85	; 0x55
 80082ae:	78ba      	ldrb	r2, [r7, #2]
 80082b0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80082b2:	2300      	movs	r3, #0
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	3714      	adds	r7, #20
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr

080082c0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b082      	sub	sp, #8
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f7f9 f8cd 	bl	8001468 <HAL_Delay>
}
 80082ce:	bf00      	nop
 80082d0:	3708      	adds	r7, #8
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}
	...

080082d8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80082d8:	b480      	push	{r7}
 80082da:	b085      	sub	sp, #20
 80082dc:	af00      	add	r7, sp, #0
 80082de:	4603      	mov	r3, r0
 80082e0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80082e2:	2300      	movs	r3, #0
 80082e4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80082e6:	79fb      	ldrb	r3, [r7, #7]
 80082e8:	2b03      	cmp	r3, #3
 80082ea:	d817      	bhi.n	800831c <USBH_Get_USB_Status+0x44>
 80082ec:	a201      	add	r2, pc, #4	; (adr r2, 80082f4 <USBH_Get_USB_Status+0x1c>)
 80082ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f2:	bf00      	nop
 80082f4:	08008305 	.word	0x08008305
 80082f8:	0800830b 	.word	0x0800830b
 80082fc:	08008311 	.word	0x08008311
 8008300:	08008317 	.word	0x08008317
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008304:	2300      	movs	r3, #0
 8008306:	73fb      	strb	r3, [r7, #15]
    break;
 8008308:	e00b      	b.n	8008322 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800830a:	2302      	movs	r3, #2
 800830c:	73fb      	strb	r3, [r7, #15]
    break;
 800830e:	e008      	b.n	8008322 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008310:	2301      	movs	r3, #1
 8008312:	73fb      	strb	r3, [r7, #15]
    break;
 8008314:	e005      	b.n	8008322 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008316:	2302      	movs	r3, #2
 8008318:	73fb      	strb	r3, [r7, #15]
    break;
 800831a:	e002      	b.n	8008322 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800831c:	2302      	movs	r3, #2
 800831e:	73fb      	strb	r3, [r7, #15]
    break;
 8008320:	bf00      	nop
  }
  return usb_status;
 8008322:	7bfb      	ldrb	r3, [r7, #15]
}
 8008324:	4618      	mov	r0, r3
 8008326:	3714      	adds	r7, #20
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr

08008330 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b084      	sub	sp, #16
 8008334:	af00      	add	r7, sp, #0
 8008336:	4603      	mov	r3, r0
 8008338:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800833a:	79fb      	ldrb	r3, [r7, #7]
 800833c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800833e:	79fb      	ldrb	r3, [r7, #7]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d102      	bne.n	800834a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008344:	2300      	movs	r3, #0
 8008346:	73fb      	strb	r3, [r7, #15]
 8008348:	e001      	b.n	800834e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800834a:	2301      	movs	r3, #1
 800834c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800834e:	7bfb      	ldrb	r3, [r7, #15]
 8008350:	461a      	mov	r2, r3
 8008352:	2101      	movs	r1, #1
 8008354:	4803      	ldr	r0, [pc, #12]	; (8008364 <MX_DriverVbusFS+0x34>)
 8008356:	f7f9 fb59 	bl	8001a0c <HAL_GPIO_WritePin>
}
 800835a:	bf00      	nop
 800835c:	3710      	adds	r7, #16
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}
 8008362:	bf00      	nop
 8008364:	40020800 	.word	0x40020800

08008368 <__errno>:
 8008368:	4b01      	ldr	r3, [pc, #4]	; (8008370 <__errno+0x8>)
 800836a:	6818      	ldr	r0, [r3, #0]
 800836c:	4770      	bx	lr
 800836e:	bf00      	nop
 8008370:	2000002c 	.word	0x2000002c

08008374 <__libc_init_array>:
 8008374:	b570      	push	{r4, r5, r6, lr}
 8008376:	4d0d      	ldr	r5, [pc, #52]	; (80083ac <__libc_init_array+0x38>)
 8008378:	4c0d      	ldr	r4, [pc, #52]	; (80083b0 <__libc_init_array+0x3c>)
 800837a:	1b64      	subs	r4, r4, r5
 800837c:	10a4      	asrs	r4, r4, #2
 800837e:	2600      	movs	r6, #0
 8008380:	42a6      	cmp	r6, r4
 8008382:	d109      	bne.n	8008398 <__libc_init_array+0x24>
 8008384:	4d0b      	ldr	r5, [pc, #44]	; (80083b4 <__libc_init_array+0x40>)
 8008386:	4c0c      	ldr	r4, [pc, #48]	; (80083b8 <__libc_init_array+0x44>)
 8008388:	f000 f92e 	bl	80085e8 <_init>
 800838c:	1b64      	subs	r4, r4, r5
 800838e:	10a4      	asrs	r4, r4, #2
 8008390:	2600      	movs	r6, #0
 8008392:	42a6      	cmp	r6, r4
 8008394:	d105      	bne.n	80083a2 <__libc_init_array+0x2e>
 8008396:	bd70      	pop	{r4, r5, r6, pc}
 8008398:	f855 3b04 	ldr.w	r3, [r5], #4
 800839c:	4798      	blx	r3
 800839e:	3601      	adds	r6, #1
 80083a0:	e7ee      	b.n	8008380 <__libc_init_array+0xc>
 80083a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80083a6:	4798      	blx	r3
 80083a8:	3601      	adds	r6, #1
 80083aa:	e7f2      	b.n	8008392 <__libc_init_array+0x1e>
 80083ac:	08008624 	.word	0x08008624
 80083b0:	08008624 	.word	0x08008624
 80083b4:	08008624 	.word	0x08008624
 80083b8:	08008628 	.word	0x08008628

080083bc <malloc>:
 80083bc:	4b02      	ldr	r3, [pc, #8]	; (80083c8 <malloc+0xc>)
 80083be:	4601      	mov	r1, r0
 80083c0:	6818      	ldr	r0, [r3, #0]
 80083c2:	f000 b87f 	b.w	80084c4 <_malloc_r>
 80083c6:	bf00      	nop
 80083c8:	2000002c 	.word	0x2000002c

080083cc <free>:
 80083cc:	4b02      	ldr	r3, [pc, #8]	; (80083d8 <free+0xc>)
 80083ce:	4601      	mov	r1, r0
 80083d0:	6818      	ldr	r0, [r3, #0]
 80083d2:	f000 b80b 	b.w	80083ec <_free_r>
 80083d6:	bf00      	nop
 80083d8:	2000002c 	.word	0x2000002c

080083dc <memset>:
 80083dc:	4402      	add	r2, r0
 80083de:	4603      	mov	r3, r0
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d100      	bne.n	80083e6 <memset+0xa>
 80083e4:	4770      	bx	lr
 80083e6:	f803 1b01 	strb.w	r1, [r3], #1
 80083ea:	e7f9      	b.n	80083e0 <memset+0x4>

080083ec <_free_r>:
 80083ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80083ee:	2900      	cmp	r1, #0
 80083f0:	d044      	beq.n	800847c <_free_r+0x90>
 80083f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083f6:	9001      	str	r0, [sp, #4]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	f1a1 0404 	sub.w	r4, r1, #4
 80083fe:	bfb8      	it	lt
 8008400:	18e4      	addlt	r4, r4, r3
 8008402:	f000 f8e3 	bl	80085cc <__malloc_lock>
 8008406:	4a1e      	ldr	r2, [pc, #120]	; (8008480 <_free_r+0x94>)
 8008408:	9801      	ldr	r0, [sp, #4]
 800840a:	6813      	ldr	r3, [r2, #0]
 800840c:	b933      	cbnz	r3, 800841c <_free_r+0x30>
 800840e:	6063      	str	r3, [r4, #4]
 8008410:	6014      	str	r4, [r2, #0]
 8008412:	b003      	add	sp, #12
 8008414:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008418:	f000 b8de 	b.w	80085d8 <__malloc_unlock>
 800841c:	42a3      	cmp	r3, r4
 800841e:	d908      	bls.n	8008432 <_free_r+0x46>
 8008420:	6825      	ldr	r5, [r4, #0]
 8008422:	1961      	adds	r1, r4, r5
 8008424:	428b      	cmp	r3, r1
 8008426:	bf01      	itttt	eq
 8008428:	6819      	ldreq	r1, [r3, #0]
 800842a:	685b      	ldreq	r3, [r3, #4]
 800842c:	1949      	addeq	r1, r1, r5
 800842e:	6021      	streq	r1, [r4, #0]
 8008430:	e7ed      	b.n	800840e <_free_r+0x22>
 8008432:	461a      	mov	r2, r3
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	b10b      	cbz	r3, 800843c <_free_r+0x50>
 8008438:	42a3      	cmp	r3, r4
 800843a:	d9fa      	bls.n	8008432 <_free_r+0x46>
 800843c:	6811      	ldr	r1, [r2, #0]
 800843e:	1855      	adds	r5, r2, r1
 8008440:	42a5      	cmp	r5, r4
 8008442:	d10b      	bne.n	800845c <_free_r+0x70>
 8008444:	6824      	ldr	r4, [r4, #0]
 8008446:	4421      	add	r1, r4
 8008448:	1854      	adds	r4, r2, r1
 800844a:	42a3      	cmp	r3, r4
 800844c:	6011      	str	r1, [r2, #0]
 800844e:	d1e0      	bne.n	8008412 <_free_r+0x26>
 8008450:	681c      	ldr	r4, [r3, #0]
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	6053      	str	r3, [r2, #4]
 8008456:	4421      	add	r1, r4
 8008458:	6011      	str	r1, [r2, #0]
 800845a:	e7da      	b.n	8008412 <_free_r+0x26>
 800845c:	d902      	bls.n	8008464 <_free_r+0x78>
 800845e:	230c      	movs	r3, #12
 8008460:	6003      	str	r3, [r0, #0]
 8008462:	e7d6      	b.n	8008412 <_free_r+0x26>
 8008464:	6825      	ldr	r5, [r4, #0]
 8008466:	1961      	adds	r1, r4, r5
 8008468:	428b      	cmp	r3, r1
 800846a:	bf04      	itt	eq
 800846c:	6819      	ldreq	r1, [r3, #0]
 800846e:	685b      	ldreq	r3, [r3, #4]
 8008470:	6063      	str	r3, [r4, #4]
 8008472:	bf04      	itt	eq
 8008474:	1949      	addeq	r1, r1, r5
 8008476:	6021      	streq	r1, [r4, #0]
 8008478:	6054      	str	r4, [r2, #4]
 800847a:	e7ca      	b.n	8008412 <_free_r+0x26>
 800847c:	b003      	add	sp, #12
 800847e:	bd30      	pop	{r4, r5, pc}
 8008480:	20000888 	.word	0x20000888

08008484 <sbrk_aligned>:
 8008484:	b570      	push	{r4, r5, r6, lr}
 8008486:	4e0e      	ldr	r6, [pc, #56]	; (80084c0 <sbrk_aligned+0x3c>)
 8008488:	460c      	mov	r4, r1
 800848a:	6831      	ldr	r1, [r6, #0]
 800848c:	4605      	mov	r5, r0
 800848e:	b911      	cbnz	r1, 8008496 <sbrk_aligned+0x12>
 8008490:	f000 f88c 	bl	80085ac <_sbrk_r>
 8008494:	6030      	str	r0, [r6, #0]
 8008496:	4621      	mov	r1, r4
 8008498:	4628      	mov	r0, r5
 800849a:	f000 f887 	bl	80085ac <_sbrk_r>
 800849e:	1c43      	adds	r3, r0, #1
 80084a0:	d00a      	beq.n	80084b8 <sbrk_aligned+0x34>
 80084a2:	1cc4      	adds	r4, r0, #3
 80084a4:	f024 0403 	bic.w	r4, r4, #3
 80084a8:	42a0      	cmp	r0, r4
 80084aa:	d007      	beq.n	80084bc <sbrk_aligned+0x38>
 80084ac:	1a21      	subs	r1, r4, r0
 80084ae:	4628      	mov	r0, r5
 80084b0:	f000 f87c 	bl	80085ac <_sbrk_r>
 80084b4:	3001      	adds	r0, #1
 80084b6:	d101      	bne.n	80084bc <sbrk_aligned+0x38>
 80084b8:	f04f 34ff 	mov.w	r4, #4294967295
 80084bc:	4620      	mov	r0, r4
 80084be:	bd70      	pop	{r4, r5, r6, pc}
 80084c0:	2000088c 	.word	0x2000088c

080084c4 <_malloc_r>:
 80084c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084c8:	1ccd      	adds	r5, r1, #3
 80084ca:	f025 0503 	bic.w	r5, r5, #3
 80084ce:	3508      	adds	r5, #8
 80084d0:	2d0c      	cmp	r5, #12
 80084d2:	bf38      	it	cc
 80084d4:	250c      	movcc	r5, #12
 80084d6:	2d00      	cmp	r5, #0
 80084d8:	4607      	mov	r7, r0
 80084da:	db01      	blt.n	80084e0 <_malloc_r+0x1c>
 80084dc:	42a9      	cmp	r1, r5
 80084de:	d905      	bls.n	80084ec <_malloc_r+0x28>
 80084e0:	230c      	movs	r3, #12
 80084e2:	603b      	str	r3, [r7, #0]
 80084e4:	2600      	movs	r6, #0
 80084e6:	4630      	mov	r0, r6
 80084e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084ec:	4e2e      	ldr	r6, [pc, #184]	; (80085a8 <_malloc_r+0xe4>)
 80084ee:	f000 f86d 	bl	80085cc <__malloc_lock>
 80084f2:	6833      	ldr	r3, [r6, #0]
 80084f4:	461c      	mov	r4, r3
 80084f6:	bb34      	cbnz	r4, 8008546 <_malloc_r+0x82>
 80084f8:	4629      	mov	r1, r5
 80084fa:	4638      	mov	r0, r7
 80084fc:	f7ff ffc2 	bl	8008484 <sbrk_aligned>
 8008500:	1c43      	adds	r3, r0, #1
 8008502:	4604      	mov	r4, r0
 8008504:	d14d      	bne.n	80085a2 <_malloc_r+0xde>
 8008506:	6834      	ldr	r4, [r6, #0]
 8008508:	4626      	mov	r6, r4
 800850a:	2e00      	cmp	r6, #0
 800850c:	d140      	bne.n	8008590 <_malloc_r+0xcc>
 800850e:	6823      	ldr	r3, [r4, #0]
 8008510:	4631      	mov	r1, r6
 8008512:	4638      	mov	r0, r7
 8008514:	eb04 0803 	add.w	r8, r4, r3
 8008518:	f000 f848 	bl	80085ac <_sbrk_r>
 800851c:	4580      	cmp	r8, r0
 800851e:	d13a      	bne.n	8008596 <_malloc_r+0xd2>
 8008520:	6821      	ldr	r1, [r4, #0]
 8008522:	3503      	adds	r5, #3
 8008524:	1a6d      	subs	r5, r5, r1
 8008526:	f025 0503 	bic.w	r5, r5, #3
 800852a:	3508      	adds	r5, #8
 800852c:	2d0c      	cmp	r5, #12
 800852e:	bf38      	it	cc
 8008530:	250c      	movcc	r5, #12
 8008532:	4629      	mov	r1, r5
 8008534:	4638      	mov	r0, r7
 8008536:	f7ff ffa5 	bl	8008484 <sbrk_aligned>
 800853a:	3001      	adds	r0, #1
 800853c:	d02b      	beq.n	8008596 <_malloc_r+0xd2>
 800853e:	6823      	ldr	r3, [r4, #0]
 8008540:	442b      	add	r3, r5
 8008542:	6023      	str	r3, [r4, #0]
 8008544:	e00e      	b.n	8008564 <_malloc_r+0xa0>
 8008546:	6822      	ldr	r2, [r4, #0]
 8008548:	1b52      	subs	r2, r2, r5
 800854a:	d41e      	bmi.n	800858a <_malloc_r+0xc6>
 800854c:	2a0b      	cmp	r2, #11
 800854e:	d916      	bls.n	800857e <_malloc_r+0xba>
 8008550:	1961      	adds	r1, r4, r5
 8008552:	42a3      	cmp	r3, r4
 8008554:	6025      	str	r5, [r4, #0]
 8008556:	bf18      	it	ne
 8008558:	6059      	strne	r1, [r3, #4]
 800855a:	6863      	ldr	r3, [r4, #4]
 800855c:	bf08      	it	eq
 800855e:	6031      	streq	r1, [r6, #0]
 8008560:	5162      	str	r2, [r4, r5]
 8008562:	604b      	str	r3, [r1, #4]
 8008564:	4638      	mov	r0, r7
 8008566:	f104 060b 	add.w	r6, r4, #11
 800856a:	f000 f835 	bl	80085d8 <__malloc_unlock>
 800856e:	f026 0607 	bic.w	r6, r6, #7
 8008572:	1d23      	adds	r3, r4, #4
 8008574:	1af2      	subs	r2, r6, r3
 8008576:	d0b6      	beq.n	80084e6 <_malloc_r+0x22>
 8008578:	1b9b      	subs	r3, r3, r6
 800857a:	50a3      	str	r3, [r4, r2]
 800857c:	e7b3      	b.n	80084e6 <_malloc_r+0x22>
 800857e:	6862      	ldr	r2, [r4, #4]
 8008580:	42a3      	cmp	r3, r4
 8008582:	bf0c      	ite	eq
 8008584:	6032      	streq	r2, [r6, #0]
 8008586:	605a      	strne	r2, [r3, #4]
 8008588:	e7ec      	b.n	8008564 <_malloc_r+0xa0>
 800858a:	4623      	mov	r3, r4
 800858c:	6864      	ldr	r4, [r4, #4]
 800858e:	e7b2      	b.n	80084f6 <_malloc_r+0x32>
 8008590:	4634      	mov	r4, r6
 8008592:	6876      	ldr	r6, [r6, #4]
 8008594:	e7b9      	b.n	800850a <_malloc_r+0x46>
 8008596:	230c      	movs	r3, #12
 8008598:	603b      	str	r3, [r7, #0]
 800859a:	4638      	mov	r0, r7
 800859c:	f000 f81c 	bl	80085d8 <__malloc_unlock>
 80085a0:	e7a1      	b.n	80084e6 <_malloc_r+0x22>
 80085a2:	6025      	str	r5, [r4, #0]
 80085a4:	e7de      	b.n	8008564 <_malloc_r+0xa0>
 80085a6:	bf00      	nop
 80085a8:	20000888 	.word	0x20000888

080085ac <_sbrk_r>:
 80085ac:	b538      	push	{r3, r4, r5, lr}
 80085ae:	4d06      	ldr	r5, [pc, #24]	; (80085c8 <_sbrk_r+0x1c>)
 80085b0:	2300      	movs	r3, #0
 80085b2:	4604      	mov	r4, r0
 80085b4:	4608      	mov	r0, r1
 80085b6:	602b      	str	r3, [r5, #0]
 80085b8:	f7f8 fd32 	bl	8001020 <_sbrk>
 80085bc:	1c43      	adds	r3, r0, #1
 80085be:	d102      	bne.n	80085c6 <_sbrk_r+0x1a>
 80085c0:	682b      	ldr	r3, [r5, #0]
 80085c2:	b103      	cbz	r3, 80085c6 <_sbrk_r+0x1a>
 80085c4:	6023      	str	r3, [r4, #0]
 80085c6:	bd38      	pop	{r3, r4, r5, pc}
 80085c8:	20000890 	.word	0x20000890

080085cc <__malloc_lock>:
 80085cc:	4801      	ldr	r0, [pc, #4]	; (80085d4 <__malloc_lock+0x8>)
 80085ce:	f000 b809 	b.w	80085e4 <__retarget_lock_acquire_recursive>
 80085d2:	bf00      	nop
 80085d4:	20000894 	.word	0x20000894

080085d8 <__malloc_unlock>:
 80085d8:	4801      	ldr	r0, [pc, #4]	; (80085e0 <__malloc_unlock+0x8>)
 80085da:	f000 b804 	b.w	80085e6 <__retarget_lock_release_recursive>
 80085de:	bf00      	nop
 80085e0:	20000894 	.word	0x20000894

080085e4 <__retarget_lock_acquire_recursive>:
 80085e4:	4770      	bx	lr

080085e6 <__retarget_lock_release_recursive>:
 80085e6:	4770      	bx	lr

080085e8 <_init>:
 80085e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ea:	bf00      	nop
 80085ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085ee:	bc08      	pop	{r3}
 80085f0:	469e      	mov	lr, r3
 80085f2:	4770      	bx	lr

080085f4 <_fini>:
 80085f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085f6:	bf00      	nop
 80085f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085fa:	bc08      	pop	{r3}
 80085fc:	469e      	mov	lr, r3
 80085fe:	4770      	bx	lr
