
OOOOOLD_NEW_LIB_f103_connection_+_IMU3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087e8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000048c  080088f8  080088f8  000188f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d84  08008d84  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008d84  08008d84  00018d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d8c  08008d8c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d8c  08008d8c  00018d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d90  08008d90  00018d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008d94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000338  200001dc  08008f70  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000514  08008f70  00020514  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fd52  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002876  00000000  00000000  0002ff57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001140  00000000  00000000  000327d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001028  00000000  00000000  00033910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019572  00000000  00000000  00034938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000121a9  00000000  00000000  0004deaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008eacb  00000000  00000000  00060053  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eeb1e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005aec  00000000  00000000  000eeb70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	080088e0 	.word	0x080088e0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	080088e0 	.word	0x080088e0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_f2iz>:
 8000fe4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fe8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fec:	d30f      	bcc.n	800100e <__aeabi_f2iz+0x2a>
 8000fee:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000ff2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ff6:	d90d      	bls.n	8001014 <__aeabi_f2iz+0x30>
 8000ff8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ffc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001000:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001004:	fa23 f002 	lsr.w	r0, r3, r2
 8001008:	bf18      	it	ne
 800100a:	4240      	negne	r0, r0
 800100c:	4770      	bx	lr
 800100e:	f04f 0000 	mov.w	r0, #0
 8001012:	4770      	bx	lr
 8001014:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001018:	d101      	bne.n	800101e <__aeabi_f2iz+0x3a>
 800101a:	0242      	lsls	r2, r0, #9
 800101c:	d105      	bne.n	800102a <__aeabi_f2iz+0x46>
 800101e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001022:	bf08      	it	eq
 8001024:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001028:	4770      	bx	lr
 800102a:	f04f 0000 	mov.w	r0, #0
 800102e:	4770      	bx	lr

08001030 <__aeabi_ldivmod>:
 8001030:	b97b      	cbnz	r3, 8001052 <__aeabi_ldivmod+0x22>
 8001032:	b972      	cbnz	r2, 8001052 <__aeabi_ldivmod+0x22>
 8001034:	2900      	cmp	r1, #0
 8001036:	bfbe      	ittt	lt
 8001038:	2000      	movlt	r0, #0
 800103a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800103e:	e006      	blt.n	800104e <__aeabi_ldivmod+0x1e>
 8001040:	bf08      	it	eq
 8001042:	2800      	cmpeq	r0, #0
 8001044:	bf1c      	itt	ne
 8001046:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800104a:	f04f 30ff 	movne.w	r0, #4294967295
 800104e:	f000 b9a9 	b.w	80013a4 <__aeabi_idiv0>
 8001052:	f1ad 0c08 	sub.w	ip, sp, #8
 8001056:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800105a:	2900      	cmp	r1, #0
 800105c:	db09      	blt.n	8001072 <__aeabi_ldivmod+0x42>
 800105e:	2b00      	cmp	r3, #0
 8001060:	db1a      	blt.n	8001098 <__aeabi_ldivmod+0x68>
 8001062:	f000 f835 	bl	80010d0 <__udivmoddi4>
 8001066:	f8dd e004 	ldr.w	lr, [sp, #4]
 800106a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800106e:	b004      	add	sp, #16
 8001070:	4770      	bx	lr
 8001072:	4240      	negs	r0, r0
 8001074:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001078:	2b00      	cmp	r3, #0
 800107a:	db1b      	blt.n	80010b4 <__aeabi_ldivmod+0x84>
 800107c:	f000 f828 	bl	80010d0 <__udivmoddi4>
 8001080:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001084:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001088:	b004      	add	sp, #16
 800108a:	4240      	negs	r0, r0
 800108c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001090:	4252      	negs	r2, r2
 8001092:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001096:	4770      	bx	lr
 8001098:	4252      	negs	r2, r2
 800109a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800109e:	f000 f817 	bl	80010d0 <__udivmoddi4>
 80010a2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010aa:	b004      	add	sp, #16
 80010ac:	4240      	negs	r0, r0
 80010ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010b2:	4770      	bx	lr
 80010b4:	4252      	negs	r2, r2
 80010b6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80010ba:	f000 f809 	bl	80010d0 <__udivmoddi4>
 80010be:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010c6:	b004      	add	sp, #16
 80010c8:	4252      	negs	r2, r2
 80010ca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80010ce:	4770      	bx	lr

080010d0 <__udivmoddi4>:
 80010d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010d4:	9e08      	ldr	r6, [sp, #32]
 80010d6:	460d      	mov	r5, r1
 80010d8:	4604      	mov	r4, r0
 80010da:	4688      	mov	r8, r1
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d14d      	bne.n	800117c <__udivmoddi4+0xac>
 80010e0:	428a      	cmp	r2, r1
 80010e2:	4694      	mov	ip, r2
 80010e4:	d968      	bls.n	80011b8 <__udivmoddi4+0xe8>
 80010e6:	fab2 f282 	clz	r2, r2
 80010ea:	b152      	cbz	r2, 8001102 <__udivmoddi4+0x32>
 80010ec:	fa01 f302 	lsl.w	r3, r1, r2
 80010f0:	f1c2 0120 	rsb	r1, r2, #32
 80010f4:	fa20 f101 	lsr.w	r1, r0, r1
 80010f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80010fc:	ea41 0803 	orr.w	r8, r1, r3
 8001100:	4094      	lsls	r4, r2
 8001102:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8001106:	fbb8 f7f1 	udiv	r7, r8, r1
 800110a:	fa1f fe8c 	uxth.w	lr, ip
 800110e:	fb01 8817 	mls	r8, r1, r7, r8
 8001112:	fb07 f00e 	mul.w	r0, r7, lr
 8001116:	0c23      	lsrs	r3, r4, #16
 8001118:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800111c:	4298      	cmp	r0, r3
 800111e:	d90a      	bls.n	8001136 <__udivmoddi4+0x66>
 8001120:	eb1c 0303 	adds.w	r3, ip, r3
 8001124:	f107 35ff 	add.w	r5, r7, #4294967295
 8001128:	f080 811e 	bcs.w	8001368 <__udivmoddi4+0x298>
 800112c:	4298      	cmp	r0, r3
 800112e:	f240 811b 	bls.w	8001368 <__udivmoddi4+0x298>
 8001132:	3f02      	subs	r7, #2
 8001134:	4463      	add	r3, ip
 8001136:	1a1b      	subs	r3, r3, r0
 8001138:	fbb3 f0f1 	udiv	r0, r3, r1
 800113c:	fb01 3310 	mls	r3, r1, r0, r3
 8001140:	fb00 fe0e 	mul.w	lr, r0, lr
 8001144:	b2a4      	uxth	r4, r4
 8001146:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800114a:	45a6      	cmp	lr, r4
 800114c:	d90a      	bls.n	8001164 <__udivmoddi4+0x94>
 800114e:	eb1c 0404 	adds.w	r4, ip, r4
 8001152:	f100 33ff 	add.w	r3, r0, #4294967295
 8001156:	f080 8109 	bcs.w	800136c <__udivmoddi4+0x29c>
 800115a:	45a6      	cmp	lr, r4
 800115c:	f240 8106 	bls.w	800136c <__udivmoddi4+0x29c>
 8001160:	4464      	add	r4, ip
 8001162:	3802      	subs	r0, #2
 8001164:	2100      	movs	r1, #0
 8001166:	eba4 040e 	sub.w	r4, r4, lr
 800116a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800116e:	b11e      	cbz	r6, 8001178 <__udivmoddi4+0xa8>
 8001170:	2300      	movs	r3, #0
 8001172:	40d4      	lsrs	r4, r2
 8001174:	e9c6 4300 	strd	r4, r3, [r6]
 8001178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800117c:	428b      	cmp	r3, r1
 800117e:	d908      	bls.n	8001192 <__udivmoddi4+0xc2>
 8001180:	2e00      	cmp	r6, #0
 8001182:	f000 80ee 	beq.w	8001362 <__udivmoddi4+0x292>
 8001186:	2100      	movs	r1, #0
 8001188:	e9c6 0500 	strd	r0, r5, [r6]
 800118c:	4608      	mov	r0, r1
 800118e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001192:	fab3 f183 	clz	r1, r3
 8001196:	2900      	cmp	r1, #0
 8001198:	d14a      	bne.n	8001230 <__udivmoddi4+0x160>
 800119a:	42ab      	cmp	r3, r5
 800119c:	d302      	bcc.n	80011a4 <__udivmoddi4+0xd4>
 800119e:	4282      	cmp	r2, r0
 80011a0:	f200 80fc 	bhi.w	800139c <__udivmoddi4+0x2cc>
 80011a4:	1a84      	subs	r4, r0, r2
 80011a6:	eb65 0303 	sbc.w	r3, r5, r3
 80011aa:	2001      	movs	r0, #1
 80011ac:	4698      	mov	r8, r3
 80011ae:	2e00      	cmp	r6, #0
 80011b0:	d0e2      	beq.n	8001178 <__udivmoddi4+0xa8>
 80011b2:	e9c6 4800 	strd	r4, r8, [r6]
 80011b6:	e7df      	b.n	8001178 <__udivmoddi4+0xa8>
 80011b8:	b902      	cbnz	r2, 80011bc <__udivmoddi4+0xec>
 80011ba:	deff      	udf	#255	; 0xff
 80011bc:	fab2 f282 	clz	r2, r2
 80011c0:	2a00      	cmp	r2, #0
 80011c2:	f040 8091 	bne.w	80012e8 <__udivmoddi4+0x218>
 80011c6:	eba1 000c 	sub.w	r0, r1, ip
 80011ca:	2101      	movs	r1, #1
 80011cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80011d0:	fa1f fe8c 	uxth.w	lr, ip
 80011d4:	fbb0 f3f7 	udiv	r3, r0, r7
 80011d8:	fb07 0013 	mls	r0, r7, r3, r0
 80011dc:	0c25      	lsrs	r5, r4, #16
 80011de:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80011e2:	fb0e f003 	mul.w	r0, lr, r3
 80011e6:	42a8      	cmp	r0, r5
 80011e8:	d908      	bls.n	80011fc <__udivmoddi4+0x12c>
 80011ea:	eb1c 0505 	adds.w	r5, ip, r5
 80011ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80011f2:	d202      	bcs.n	80011fa <__udivmoddi4+0x12a>
 80011f4:	42a8      	cmp	r0, r5
 80011f6:	f200 80ce 	bhi.w	8001396 <__udivmoddi4+0x2c6>
 80011fa:	4643      	mov	r3, r8
 80011fc:	1a2d      	subs	r5, r5, r0
 80011fe:	fbb5 f0f7 	udiv	r0, r5, r7
 8001202:	fb07 5510 	mls	r5, r7, r0, r5
 8001206:	fb0e fe00 	mul.w	lr, lr, r0
 800120a:	b2a4      	uxth	r4, r4
 800120c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001210:	45a6      	cmp	lr, r4
 8001212:	d908      	bls.n	8001226 <__udivmoddi4+0x156>
 8001214:	eb1c 0404 	adds.w	r4, ip, r4
 8001218:	f100 35ff 	add.w	r5, r0, #4294967295
 800121c:	d202      	bcs.n	8001224 <__udivmoddi4+0x154>
 800121e:	45a6      	cmp	lr, r4
 8001220:	f200 80b6 	bhi.w	8001390 <__udivmoddi4+0x2c0>
 8001224:	4628      	mov	r0, r5
 8001226:	eba4 040e 	sub.w	r4, r4, lr
 800122a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800122e:	e79e      	b.n	800116e <__udivmoddi4+0x9e>
 8001230:	f1c1 0720 	rsb	r7, r1, #32
 8001234:	408b      	lsls	r3, r1
 8001236:	fa22 fc07 	lsr.w	ip, r2, r7
 800123a:	ea4c 0c03 	orr.w	ip, ip, r3
 800123e:	fa25 fa07 	lsr.w	sl, r5, r7
 8001242:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001246:	fbba f8f9 	udiv	r8, sl, r9
 800124a:	fa20 f307 	lsr.w	r3, r0, r7
 800124e:	fb09 aa18 	mls	sl, r9, r8, sl
 8001252:	408d      	lsls	r5, r1
 8001254:	fa1f fe8c 	uxth.w	lr, ip
 8001258:	431d      	orrs	r5, r3
 800125a:	fa00 f301 	lsl.w	r3, r0, r1
 800125e:	fb08 f00e 	mul.w	r0, r8, lr
 8001262:	0c2c      	lsrs	r4, r5, #16
 8001264:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8001268:	42a0      	cmp	r0, r4
 800126a:	fa02 f201 	lsl.w	r2, r2, r1
 800126e:	d90b      	bls.n	8001288 <__udivmoddi4+0x1b8>
 8001270:	eb1c 0404 	adds.w	r4, ip, r4
 8001274:	f108 3aff 	add.w	sl, r8, #4294967295
 8001278:	f080 8088 	bcs.w	800138c <__udivmoddi4+0x2bc>
 800127c:	42a0      	cmp	r0, r4
 800127e:	f240 8085 	bls.w	800138c <__udivmoddi4+0x2bc>
 8001282:	f1a8 0802 	sub.w	r8, r8, #2
 8001286:	4464      	add	r4, ip
 8001288:	1a24      	subs	r4, r4, r0
 800128a:	fbb4 f0f9 	udiv	r0, r4, r9
 800128e:	fb09 4410 	mls	r4, r9, r0, r4
 8001292:	fb00 fe0e 	mul.w	lr, r0, lr
 8001296:	b2ad      	uxth	r5, r5
 8001298:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800129c:	45a6      	cmp	lr, r4
 800129e:	d908      	bls.n	80012b2 <__udivmoddi4+0x1e2>
 80012a0:	eb1c 0404 	adds.w	r4, ip, r4
 80012a4:	f100 35ff 	add.w	r5, r0, #4294967295
 80012a8:	d26c      	bcs.n	8001384 <__udivmoddi4+0x2b4>
 80012aa:	45a6      	cmp	lr, r4
 80012ac:	d96a      	bls.n	8001384 <__udivmoddi4+0x2b4>
 80012ae:	3802      	subs	r0, #2
 80012b0:	4464      	add	r4, ip
 80012b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80012b6:	fba0 9502 	umull	r9, r5, r0, r2
 80012ba:	eba4 040e 	sub.w	r4, r4, lr
 80012be:	42ac      	cmp	r4, r5
 80012c0:	46c8      	mov	r8, r9
 80012c2:	46ae      	mov	lr, r5
 80012c4:	d356      	bcc.n	8001374 <__udivmoddi4+0x2a4>
 80012c6:	d053      	beq.n	8001370 <__udivmoddi4+0x2a0>
 80012c8:	2e00      	cmp	r6, #0
 80012ca:	d069      	beq.n	80013a0 <__udivmoddi4+0x2d0>
 80012cc:	ebb3 0208 	subs.w	r2, r3, r8
 80012d0:	eb64 040e 	sbc.w	r4, r4, lr
 80012d4:	fa22 f301 	lsr.w	r3, r2, r1
 80012d8:	fa04 f707 	lsl.w	r7, r4, r7
 80012dc:	431f      	orrs	r7, r3
 80012de:	40cc      	lsrs	r4, r1
 80012e0:	e9c6 7400 	strd	r7, r4, [r6]
 80012e4:	2100      	movs	r1, #0
 80012e6:	e747      	b.n	8001178 <__udivmoddi4+0xa8>
 80012e8:	fa0c fc02 	lsl.w	ip, ip, r2
 80012ec:	f1c2 0120 	rsb	r1, r2, #32
 80012f0:	fa25 f301 	lsr.w	r3, r5, r1
 80012f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80012f8:	fa20 f101 	lsr.w	r1, r0, r1
 80012fc:	4095      	lsls	r5, r2
 80012fe:	430d      	orrs	r5, r1
 8001300:	fbb3 f1f7 	udiv	r1, r3, r7
 8001304:	fb07 3311 	mls	r3, r7, r1, r3
 8001308:	fa1f fe8c 	uxth.w	lr, ip
 800130c:	0c28      	lsrs	r0, r5, #16
 800130e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001312:	fb01 f30e 	mul.w	r3, r1, lr
 8001316:	4283      	cmp	r3, r0
 8001318:	fa04 f402 	lsl.w	r4, r4, r2
 800131c:	d908      	bls.n	8001330 <__udivmoddi4+0x260>
 800131e:	eb1c 0000 	adds.w	r0, ip, r0
 8001322:	f101 38ff 	add.w	r8, r1, #4294967295
 8001326:	d22f      	bcs.n	8001388 <__udivmoddi4+0x2b8>
 8001328:	4283      	cmp	r3, r0
 800132a:	d92d      	bls.n	8001388 <__udivmoddi4+0x2b8>
 800132c:	3902      	subs	r1, #2
 800132e:	4460      	add	r0, ip
 8001330:	1ac0      	subs	r0, r0, r3
 8001332:	fbb0 f3f7 	udiv	r3, r0, r7
 8001336:	fb07 0013 	mls	r0, r7, r3, r0
 800133a:	b2ad      	uxth	r5, r5
 800133c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001340:	fb03 f00e 	mul.w	r0, r3, lr
 8001344:	42a8      	cmp	r0, r5
 8001346:	d908      	bls.n	800135a <__udivmoddi4+0x28a>
 8001348:	eb1c 0505 	adds.w	r5, ip, r5
 800134c:	f103 38ff 	add.w	r8, r3, #4294967295
 8001350:	d216      	bcs.n	8001380 <__udivmoddi4+0x2b0>
 8001352:	42a8      	cmp	r0, r5
 8001354:	d914      	bls.n	8001380 <__udivmoddi4+0x2b0>
 8001356:	3b02      	subs	r3, #2
 8001358:	4465      	add	r5, ip
 800135a:	1a28      	subs	r0, r5, r0
 800135c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001360:	e738      	b.n	80011d4 <__udivmoddi4+0x104>
 8001362:	4631      	mov	r1, r6
 8001364:	4630      	mov	r0, r6
 8001366:	e707      	b.n	8001178 <__udivmoddi4+0xa8>
 8001368:	462f      	mov	r7, r5
 800136a:	e6e4      	b.n	8001136 <__udivmoddi4+0x66>
 800136c:	4618      	mov	r0, r3
 800136e:	e6f9      	b.n	8001164 <__udivmoddi4+0x94>
 8001370:	454b      	cmp	r3, r9
 8001372:	d2a9      	bcs.n	80012c8 <__udivmoddi4+0x1f8>
 8001374:	ebb9 0802 	subs.w	r8, r9, r2
 8001378:	eb65 0e0c 	sbc.w	lr, r5, ip
 800137c:	3801      	subs	r0, #1
 800137e:	e7a3      	b.n	80012c8 <__udivmoddi4+0x1f8>
 8001380:	4643      	mov	r3, r8
 8001382:	e7ea      	b.n	800135a <__udivmoddi4+0x28a>
 8001384:	4628      	mov	r0, r5
 8001386:	e794      	b.n	80012b2 <__udivmoddi4+0x1e2>
 8001388:	4641      	mov	r1, r8
 800138a:	e7d1      	b.n	8001330 <__udivmoddi4+0x260>
 800138c:	46d0      	mov	r8, sl
 800138e:	e77b      	b.n	8001288 <__udivmoddi4+0x1b8>
 8001390:	4464      	add	r4, ip
 8001392:	3802      	subs	r0, #2
 8001394:	e747      	b.n	8001226 <__udivmoddi4+0x156>
 8001396:	3b02      	subs	r3, #2
 8001398:	4465      	add	r5, ip
 800139a:	e72f      	b.n	80011fc <__udivmoddi4+0x12c>
 800139c:	4608      	mov	r0, r1
 800139e:	e706      	b.n	80011ae <__udivmoddi4+0xde>
 80013a0:	4631      	mov	r1, r6
 80013a2:	e6e9      	b.n	8001178 <__udivmoddi4+0xa8>

080013a4 <__aeabi_idiv0>:
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop

080013a8 <BMP280_Init>:
sprintf(press, "%0.7f;\n", pressure);
HAL_UART_Transmit_IT(&huart1, (uint8_t*)press, strlen(press));
 */

void BMP280_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 80013ac:	2201      	movs	r2, #1
 80013ae:	2110      	movs	r1, #16
 80013b0:	480f      	ldr	r0, [pc, #60]	; (80013f0 <BMP280_Init+0x48>)
 80013b2:	f002 fc0d 	bl	8003bd0 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80013b6:	200a      	movs	r0, #10
 80013b8:	f002 f8a4 	bl	8003504 <HAL_Delay>
	BMP280_reset();
 80013bc:	f000 f8a0 	bl	8001500 <BMP280_reset>
	while (BMP280_readStatus() & BMP280_STATUS_IM_UPDATE)
 80013c0:	bf00      	nop
 80013c2:	f000 f8a5 	bl	8001510 <BMP280_readStatus>
 80013c6:	4603      	mov	r3, r0
 80013c8:	f003 0301 	and.w	r3, r3, #1
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d1f8      	bne.n	80013c2 <BMP280_Init+0x1a>
	;
	setPressureOversampling();
 80013d0:	f000 f934 	bl	800163c <setPressureOversampling>
	setTemperatureOversampling();
 80013d4:	f000 f94c 	bl	8001670 <setTemperatureOversampling>
	setPowerMode();
 80013d8:	f000 f964 	bl	80016a4 <setPowerMode>
	setFilterCoefficient();
 80013dc:	f000 f977 	bl	80016ce <setFilterCoefficient>
	setStandbyTime();
 80013e0:	f000 f98f 	bl	8001702 <setStandbyTime>
	readCompensationParameters();
 80013e4:	f000 f8a4 	bl	8001530 <readCompensationParameters>
	setReferencePressure();
 80013e8:	f000 fd68 	bl	8001ebc <setReferencePressure>
}
 80013ec:	bf00      	nop
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40010800 	.word	0x40010800

080013f4 <read_BMP_Register>:


// Считать 1 байт из BMP280 Через SPI
uint8_t read_BMP_Register(uint8_t address)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET); // Кидаем ноль на пин чип-селект чтоб обратиться к BMP280, а не к MPU9250
 80013fe:	2200      	movs	r2, #0
 8001400:	2110      	movs	r1, #16
 8001402:	480b      	ldr	r0, [pc, #44]	; (8001430 <read_BMP_Register+0x3c>)
 8001404:	f002 fbe4 	bl	8003bd0 <HAL_GPIO_WritePin>
	spi_BMP_ReadWrite(address);
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	4618      	mov	r0, r3
 800140c:	f000 f836 	bl	800147c <spi_BMP_ReadWrite>
	uint8_t value = spi_BMP_ReadWrite(0);
 8001410:	2000      	movs	r0, #0
 8001412:	f000 f833 	bl	800147c <spi_BMP_ReadWrite>
 8001416:	4603      	mov	r3, r0
 8001418:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET); // Кидаем VDD на пин чип-селект чтоб остановить общение с BMP280
 800141a:	2201      	movs	r2, #1
 800141c:	2110      	movs	r1, #16
 800141e:	4804      	ldr	r0, [pc, #16]	; (8001430 <read_BMP_Register+0x3c>)
 8001420:	f002 fbd6 	bl	8003bd0 <HAL_GPIO_WritePin>
	return value;
 8001424:	7bfb      	ldrb	r3, [r7, #15]
}
 8001426:	4618      	mov	r0, r3
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40010800 	.word	0x40010800

08001434 <write_BMP_Register>:

// Записать 1 байт в BMP280 Через SPI. Принимает адрес и значение для записи, смотреть что етсь что по даташиту
uint8_t write_BMP_Register(uint8_t address, uint8_t value)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	460a      	mov	r2, r1
 800143e:	71fb      	strb	r3, [r7, #7]
 8001440:	4613      	mov	r3, r2
 8001442:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET); // Кидаем ноль на пин чип-селект чтоб обратиться к BMP280, а не к MPU9250
 8001444:	2200      	movs	r2, #0
 8001446:	2110      	movs	r1, #16
 8001448:	480b      	ldr	r0, [pc, #44]	; (8001478 <write_BMP_Register+0x44>)
 800144a:	f002 fbc1 	bl	8003bd0 <HAL_GPIO_WritePin>
	spi_BMP_ReadWrite(address & BMP280_SPI_MASK_WRITE);
 800144e:	79fb      	ldrb	r3, [r7, #7]
 8001450:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001454:	b2db      	uxtb	r3, r3
 8001456:	4618      	mov	r0, r3
 8001458:	f000 f810 	bl	800147c <spi_BMP_ReadWrite>
	spi_BMP_ReadWrite(value);
 800145c:	79bb      	ldrb	r3, [r7, #6]
 800145e:	4618      	mov	r0, r3
 8001460:	f000 f80c 	bl	800147c <spi_BMP_ReadWrite>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET); // Кидаем VDD на пин чип-селект чтоб остановить общение с BMP280
 8001464:	2201      	movs	r2, #1
 8001466:	2110      	movs	r1, #16
 8001468:	4803      	ldr	r0, [pc, #12]	; (8001478 <write_BMP_Register+0x44>)
 800146a:	f002 fbb1 	bl	8003bd0 <HAL_GPIO_WritePin>
}
 800146e:	bf00      	nop
 8001470:	4618      	mov	r0, r3
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40010800 	.word	0x40010800

0800147c <spi_BMP_ReadWrite>:

// Вызов SPI изнутри двух предидущих функций
uint8_t spi_BMP_ReadWrite(uint8_t tx_message)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af02      	add	r7, sp, #8
 8001482:	4603      	mov	r3, r0
 8001484:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_message = 255;
 8001486:	23ff      	movs	r3, #255	; 0xff
 8001488:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(&hspi1, &tx_message, &rx_message, 1, HAL_MAX_DELAY);
 800148a:	f107 020f 	add.w	r2, r7, #15
 800148e:	1df9      	adds	r1, r7, #7
 8001490:	f04f 33ff 	mov.w	r3, #4294967295
 8001494:	9300      	str	r3, [sp, #0]
 8001496:	2301      	movs	r3, #1
 8001498:	4803      	ldr	r0, [pc, #12]	; (80014a8 <spi_BMP_ReadWrite+0x2c>)
 800149a:	f003 f881 	bl	80045a0 <HAL_SPI_TransmitReceive>
	return rx_message;
 800149e:	7bfb      	ldrb	r3, [r7, #15]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3710      	adds	r7, #16
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	20000418 	.word	0x20000418

080014ac <readMBRegister>:


// Чтение мульти байтовых регистров. Принимает адрес регистра, указатель на массив для записи и кол-во байт для чтения
void readMBRegister(uint8_t address, uint8_t *values, uint8_t length)
{
 80014ac:	b590      	push	{r4, r7, lr}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	6039      	str	r1, [r7, #0]
 80014b6:	71fb      	strb	r3, [r7, #7]
 80014b8:	4613      	mov	r3, r2
 80014ba:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET); // Кидаем ноль на пин чип-селект чтоб обратиться к BMP280, а не к MPU9250
 80014bc:	2200      	movs	r2, #0
 80014be:	2110      	movs	r1, #16
 80014c0:	480e      	ldr	r0, [pc, #56]	; (80014fc <readMBRegister+0x50>)
 80014c2:	f002 fb85 	bl	8003bd0 <HAL_GPIO_WritePin>
	spi_BMP_ReadWrite(address);
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff ffd7 	bl	800147c <spi_BMP_ReadWrite>
	while (length--)
 80014ce:	e007      	b.n	80014e0 <readMBRegister+0x34>
	{
		*values++ = spi_BMP_ReadWrite(0);
 80014d0:	683c      	ldr	r4, [r7, #0]
 80014d2:	1c63      	adds	r3, r4, #1
 80014d4:	603b      	str	r3, [r7, #0]
 80014d6:	2000      	movs	r0, #0
 80014d8:	f7ff ffd0 	bl	800147c <spi_BMP_ReadWrite>
 80014dc:	4603      	mov	r3, r0
 80014de:	7023      	strb	r3, [r4, #0]
	while (length--)
 80014e0:	79bb      	ldrb	r3, [r7, #6]
 80014e2:	1e5a      	subs	r2, r3, #1
 80014e4:	71ba      	strb	r2, [r7, #6]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d1f2      	bne.n	80014d0 <readMBRegister+0x24>
	}
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET); // Кидаем VDD на пин чип-селект чтоб остановить общение с BMP280
 80014ea:	2201      	movs	r2, #1
 80014ec:	2110      	movs	r1, #16
 80014ee:	4803      	ldr	r0, [pc, #12]	; (80014fc <readMBRegister+0x50>)
 80014f0:	f002 fb6e 	bl	8003bd0 <HAL_GPIO_WritePin>
}
 80014f4:	bf00      	nop
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd90      	pop	{r4, r7, pc}
 80014fc:	40010800 	.word	0x40010800

08001500 <BMP280_reset>:


void BMP280_reset(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
	write_BMP_Register(BMP280_REG_RESET, BMP280_RESET_VALUE);
 8001504:	21b6      	movs	r1, #182	; 0xb6
 8001506:	20e0      	movs	r0, #224	; 0xe0
 8001508:	f7ff ff94 	bl	8001434 <write_BMP_Register>
}
 800150c:	bf00      	nop
 800150e:	bd80      	pop	{r7, pc}

08001510 <BMP280_readStatus>:

uint8_t BMP280_readStatus(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
	uint8_t result = read_BMP_Register(BMP280_REGISTER_STATUS)&0x09;
 8001516:	20f3      	movs	r0, #243	; 0xf3
 8001518:	f7ff ff6c 	bl	80013f4 <read_BMP_Register>
 800151c:	4603      	mov	r3, r0
 800151e:	f003 0309 	and.w	r3, r3, #9
 8001522:	71fb      	strb	r3, [r7, #7]
	return result;
 8001524:	79fb      	ldrb	r3, [r7, #7]
}
 8001526:	4618      	mov	r0, r3
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
	...

08001530 <readCompensationParameters>:

void readCompensationParameters(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
	uint8_t buf[24] = {6};
 8001536:	2306      	movs	r3, #6
 8001538:	603b      	str	r3, [r7, #0]
 800153a:	1d3b      	adds	r3, r7, #4
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	611a      	str	r2, [r3, #16]
	readMBRegister(BMP280_REG_CALIB, buf, 24);
 8001548:	463b      	mov	r3, r7
 800154a:	2218      	movs	r2, #24
 800154c:	4619      	mov	r1, r3
 800154e:	2088      	movs	r0, #136	; 0x88
 8001550:	f7ff ffac 	bl	80014ac <readMBRegister>
	compensationParameters.dig_t1 = ((buf[1] << 8) | buf[0]);
 8001554:	787b      	ldrb	r3, [r7, #1]
 8001556:	021b      	lsls	r3, r3, #8
 8001558:	b21a      	sxth	r2, r3
 800155a:	783b      	ldrb	r3, [r7, #0]
 800155c:	b21b      	sxth	r3, r3
 800155e:	4313      	orrs	r3, r2
 8001560:	b21b      	sxth	r3, r3
 8001562:	b29a      	uxth	r2, r3
 8001564:	4b34      	ldr	r3, [pc, #208]	; (8001638 <readCompensationParameters+0x108>)
 8001566:	801a      	strh	r2, [r3, #0]
	compensationParameters.dig_t2 = ((buf[3] << 8) | buf[2]);
 8001568:	78fb      	ldrb	r3, [r7, #3]
 800156a:	021b      	lsls	r3, r3, #8
 800156c:	b21a      	sxth	r2, r3
 800156e:	78bb      	ldrb	r3, [r7, #2]
 8001570:	b21b      	sxth	r3, r3
 8001572:	4313      	orrs	r3, r2
 8001574:	b21a      	sxth	r2, r3
 8001576:	4b30      	ldr	r3, [pc, #192]	; (8001638 <readCompensationParameters+0x108>)
 8001578:	805a      	strh	r2, [r3, #2]
	compensationParameters.dig_t3 = ((buf[5] << 8) | buf[4]);
 800157a:	797b      	ldrb	r3, [r7, #5]
 800157c:	021b      	lsls	r3, r3, #8
 800157e:	b21a      	sxth	r2, r3
 8001580:	793b      	ldrb	r3, [r7, #4]
 8001582:	b21b      	sxth	r3, r3
 8001584:	4313      	orrs	r3, r2
 8001586:	b21a      	sxth	r2, r3
 8001588:	4b2b      	ldr	r3, [pc, #172]	; (8001638 <readCompensationParameters+0x108>)
 800158a:	809a      	strh	r2, [r3, #4]
	compensationParameters.dig_p1 = ((buf[7] << 8) | buf[6]);
 800158c:	79fb      	ldrb	r3, [r7, #7]
 800158e:	021b      	lsls	r3, r3, #8
 8001590:	b21a      	sxth	r2, r3
 8001592:	79bb      	ldrb	r3, [r7, #6]
 8001594:	b21b      	sxth	r3, r3
 8001596:	4313      	orrs	r3, r2
 8001598:	b21b      	sxth	r3, r3
 800159a:	b29a      	uxth	r2, r3
 800159c:	4b26      	ldr	r3, [pc, #152]	; (8001638 <readCompensationParameters+0x108>)
 800159e:	80da      	strh	r2, [r3, #6]
	compensationParameters.dig_p2 = ((buf[9] << 8) | buf[8]);
 80015a0:	7a7b      	ldrb	r3, [r7, #9]
 80015a2:	021b      	lsls	r3, r3, #8
 80015a4:	b21a      	sxth	r2, r3
 80015a6:	7a3b      	ldrb	r3, [r7, #8]
 80015a8:	b21b      	sxth	r3, r3
 80015aa:	4313      	orrs	r3, r2
 80015ac:	b21a      	sxth	r2, r3
 80015ae:	4b22      	ldr	r3, [pc, #136]	; (8001638 <readCompensationParameters+0x108>)
 80015b0:	811a      	strh	r2, [r3, #8]
	compensationParameters.dig_p3 = ((buf[11] << 8) | buf[10]);
 80015b2:	7afb      	ldrb	r3, [r7, #11]
 80015b4:	021b      	lsls	r3, r3, #8
 80015b6:	b21a      	sxth	r2, r3
 80015b8:	7abb      	ldrb	r3, [r7, #10]
 80015ba:	b21b      	sxth	r3, r3
 80015bc:	4313      	orrs	r3, r2
 80015be:	b21a      	sxth	r2, r3
 80015c0:	4b1d      	ldr	r3, [pc, #116]	; (8001638 <readCompensationParameters+0x108>)
 80015c2:	815a      	strh	r2, [r3, #10]
	compensationParameters.dig_p4 = ((buf[13] << 8) | buf[12]);
 80015c4:	7b7b      	ldrb	r3, [r7, #13]
 80015c6:	021b      	lsls	r3, r3, #8
 80015c8:	b21a      	sxth	r2, r3
 80015ca:	7b3b      	ldrb	r3, [r7, #12]
 80015cc:	b21b      	sxth	r3, r3
 80015ce:	4313      	orrs	r3, r2
 80015d0:	b21a      	sxth	r2, r3
 80015d2:	4b19      	ldr	r3, [pc, #100]	; (8001638 <readCompensationParameters+0x108>)
 80015d4:	819a      	strh	r2, [r3, #12]
	compensationParameters.dig_p5 = ((buf[15] << 8) | buf[14]);
 80015d6:	7bfb      	ldrb	r3, [r7, #15]
 80015d8:	021b      	lsls	r3, r3, #8
 80015da:	b21a      	sxth	r2, r3
 80015dc:	7bbb      	ldrb	r3, [r7, #14]
 80015de:	b21b      	sxth	r3, r3
 80015e0:	4313      	orrs	r3, r2
 80015e2:	b21a      	sxth	r2, r3
 80015e4:	4b14      	ldr	r3, [pc, #80]	; (8001638 <readCompensationParameters+0x108>)
 80015e6:	81da      	strh	r2, [r3, #14]
	compensationParameters.dig_p6 = ((buf[17] << 8) | buf[16]);
 80015e8:	7c7b      	ldrb	r3, [r7, #17]
 80015ea:	021b      	lsls	r3, r3, #8
 80015ec:	b21a      	sxth	r2, r3
 80015ee:	7c3b      	ldrb	r3, [r7, #16]
 80015f0:	b21b      	sxth	r3, r3
 80015f2:	4313      	orrs	r3, r2
 80015f4:	b21a      	sxth	r2, r3
 80015f6:	4b10      	ldr	r3, [pc, #64]	; (8001638 <readCompensationParameters+0x108>)
 80015f8:	821a      	strh	r2, [r3, #16]
	compensationParameters.dig_p7 = ((buf[19] << 8) | buf[18]);
 80015fa:	7cfb      	ldrb	r3, [r7, #19]
 80015fc:	021b      	lsls	r3, r3, #8
 80015fe:	b21a      	sxth	r2, r3
 8001600:	7cbb      	ldrb	r3, [r7, #18]
 8001602:	b21b      	sxth	r3, r3
 8001604:	4313      	orrs	r3, r2
 8001606:	b21a      	sxth	r2, r3
 8001608:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <readCompensationParameters+0x108>)
 800160a:	825a      	strh	r2, [r3, #18]
	compensationParameters.dig_p8 = ((buf[21] << 8) | buf[20]);
 800160c:	7d7b      	ldrb	r3, [r7, #21]
 800160e:	021b      	lsls	r3, r3, #8
 8001610:	b21a      	sxth	r2, r3
 8001612:	7d3b      	ldrb	r3, [r7, #20]
 8001614:	b21b      	sxth	r3, r3
 8001616:	4313      	orrs	r3, r2
 8001618:	b21a      	sxth	r2, r3
 800161a:	4b07      	ldr	r3, [pc, #28]	; (8001638 <readCompensationParameters+0x108>)
 800161c:	829a      	strh	r2, [r3, #20]
	compensationParameters.dig_p9 = ((buf[23] << 8) | buf[22]);
 800161e:	7dfb      	ldrb	r3, [r7, #23]
 8001620:	021b      	lsls	r3, r3, #8
 8001622:	b21a      	sxth	r2, r3
 8001624:	7dbb      	ldrb	r3, [r7, #22]
 8001626:	b21b      	sxth	r3, r3
 8001628:	4313      	orrs	r3, r2
 800162a:	b21a      	sxth	r2, r3
 800162c:	4b02      	ldr	r3, [pc, #8]	; (8001638 <readCompensationParameters+0x108>)
 800162e:	82da      	strh	r2, [r3, #22]
}
 8001630:	bf00      	nop
 8001632:	3718      	adds	r7, #24
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20000200 	.word	0x20000200

0800163c <setPressureOversampling>:

void setPressureOversampling(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
	uint8_t ctrl = read_BMP_Register(BMP280_REG_CTRL_MEAS);
 8001642:	20f4      	movs	r0, #244	; 0xf4
 8001644:	f7ff fed6 	bl	80013f4 <read_BMP_Register>
 8001648:	4603      	mov	r3, r0
 800164a:	71fb      	strb	r3, [r7, #7]
	ctrl = (ctrl & 0b11100011) | (0b101 << 2);
 800164c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001650:	f023 031c 	bic.w	r3, r3, #28
 8001654:	b25b      	sxtb	r3, r3
 8001656:	f043 0314 	orr.w	r3, r3, #20
 800165a:	b25b      	sxtb	r3, r3
 800165c:	71fb      	strb	r3, [r7, #7]
	write_BMP_Register(BMP280_REG_CTRL, ctrl);
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	4619      	mov	r1, r3
 8001662:	20f4      	movs	r0, #244	; 0xf4
 8001664:	f7ff fee6 	bl	8001434 <write_BMP_Register>
}
 8001668:	bf00      	nop
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <setTemperatureOversampling>:

void setTemperatureOversampling(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
	uint8_t ctrl = read_BMP_Register(BMP280_REG_CTRL_MEAS);
 8001676:	20f4      	movs	r0, #244	; 0xf4
 8001678:	f7ff febc 	bl	80013f4 <read_BMP_Register>
 800167c:	4603      	mov	r3, r0
 800167e:	71fb      	strb	r3, [r7, #7]
	ctrl = (ctrl & 0b00011111) | (0b101 << 5);
 8001680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001684:	f003 031f 	and.w	r3, r3, #31
 8001688:	b25b      	sxtb	r3, r3
 800168a:	f063 035f 	orn	r3, r3, #95	; 0x5f
 800168e:	b25b      	sxtb	r3, r3
 8001690:	71fb      	strb	r3, [r7, #7]
	write_BMP_Register(BMP280_REG_CTRL, ctrl);
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	4619      	mov	r1, r3
 8001696:	20f4      	movs	r0, #244	; 0xf4
 8001698:	f7ff fecc 	bl	8001434 <write_BMP_Register>
}
 800169c:	bf00      	nop
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <setPowerMode>:

void setPowerMode(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
	uint8_t ctrl = read_BMP_Register(BMP280_REG_CTRL_MEAS);
 80016aa:	20f4      	movs	r0, #244	; 0xf4
 80016ac:	f7ff fea2 	bl	80013f4 <read_BMP_Register>
 80016b0:	4603      	mov	r3, r0
 80016b2:	71fb      	strb	r3, [r7, #7]
	ctrl = (ctrl & 0b11111100) | 0b11;
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	f043 0303 	orr.w	r3, r3, #3
 80016ba:	71fb      	strb	r3, [r7, #7]
	write_BMP_Register(BMP280_REG_CTRL, ctrl);
 80016bc:	79fb      	ldrb	r3, [r7, #7]
 80016be:	4619      	mov	r1, r3
 80016c0:	20f4      	movs	r0, #244	; 0xf4
 80016c2:	f7ff feb7 	bl	8001434 <write_BMP_Register>
}
 80016c6:	bf00      	nop
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <setFilterCoefficient>:

void setFilterCoefficient(void)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b082      	sub	sp, #8
 80016d2:	af00      	add	r7, sp, #0
	uint8_t conf = read_BMP_Register(BMP280_REG_CONFIG);
 80016d4:	20f5      	movs	r0, #245	; 0xf5
 80016d6:	f7ff fe8d 	bl	80013f4 <read_BMP_Register>
 80016da:	4603      	mov	r3, r0
 80016dc:	71fb      	strb	r3, [r7, #7]
	conf = (conf & 0b11100011) | (0b100 << 2);
 80016de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e2:	f023 031c 	bic.w	r3, r3, #28
 80016e6:	b25b      	sxtb	r3, r3
 80016e8:	f043 0310 	orr.w	r3, r3, #16
 80016ec:	b25b      	sxtb	r3, r3
 80016ee:	71fb      	strb	r3, [r7, #7]
	write_BMP_Register(BMP280_REG_CONFIG, conf);
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	4619      	mov	r1, r3
 80016f4:	20f5      	movs	r0, #245	; 0xf5
 80016f6:	f7ff fe9d 	bl	8001434 <write_BMP_Register>
}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <setStandbyTime>:

void setStandbyTime(void)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b082      	sub	sp, #8
 8001706:	af00      	add	r7, sp, #0
	uint8_t conf = read_BMP_Register(BMP280_REG_CONFIG);
 8001708:	20f5      	movs	r0, #245	; 0xf5
 800170a:	f7ff fe73 	bl	80013f4 <read_BMP_Register>
 800170e:	4603      	mov	r3, r0
 8001710:	71fb      	strb	r3, [r7, #7]
	conf = (conf & 0b00011111) | (0b000 << 5);
 8001712:	79fb      	ldrb	r3, [r7, #7]
 8001714:	f003 031f 	and.w	r3, r3, #31
 8001718:	71fb      	strb	r3, [r7, #7]
	write_BMP_Register(BMP280_REG_CONFIG, conf);
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	4619      	mov	r1, r3
 800171e:	20f5      	movs	r0, #245	; 0xf5
 8001720:	f7ff fe88 	bl	8001434 <write_BMP_Register>
}
 8001724:	bf00      	nop
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <measure>:


float measure(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0
	uint8_t data[6];
	float temperature = 0;
 8001732:	f04f 0300 	mov.w	r3, #0
 8001736:	617b      	str	r3, [r7, #20]
	float pressure = 0;
 8001738:	f04f 0300 	mov.w	r3, #0
 800173c:	613b      	str	r3, [r7, #16]
	readMBRegister(BMP280_REG_DATA, data, 6);
 800173e:	463b      	mov	r3, r7
 8001740:	2206      	movs	r2, #6
 8001742:	4619      	mov	r1, r3
 8001744:	20f7      	movs	r0, #247	; 0xf7
 8001746:	f7ff feb1 	bl	80014ac <readMBRegister>

	int32_t adc_P = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 800174a:	783b      	ldrb	r3, [r7, #0]
 800174c:	031a      	lsls	r2, r3, #12
 800174e:	787b      	ldrb	r3, [r7, #1]
 8001750:	011b      	lsls	r3, r3, #4
 8001752:	4313      	orrs	r3, r2
 8001754:	78ba      	ldrb	r2, [r7, #2]
 8001756:	0912      	lsrs	r2, r2, #4
 8001758:	b2d2      	uxtb	r2, r2
 800175a:	4313      	orrs	r3, r2
 800175c:	60fb      	str	r3, [r7, #12]
	int32_t adc_T = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 800175e:	78fb      	ldrb	r3, [r7, #3]
 8001760:	031a      	lsls	r2, r3, #12
 8001762:	793b      	ldrb	r3, [r7, #4]
 8001764:	011b      	lsls	r3, r3, #4
 8001766:	4313      	orrs	r3, r2
 8001768:	797a      	ldrb	r2, [r7, #5]
 800176a:	0912      	lsrs	r2, r2, #4
 800176c:	b2d2      	uxtb	r2, r2
 800176e:	4313      	orrs	r3, r2
 8001770:	60bb      	str	r3, [r7, #8]

	temperature = (float) compensate_temperature(adc_T) / 100.0;
 8001772:	68b8      	ldr	r0, [r7, #8]
 8001774:	f000 f84c 	bl	8001810 <compensate_temperature>
 8001778:	4603      	mov	r3, r0
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff fa8e 	bl	8000c9c <__aeabi_i2f>
 8001780:	4603      	mov	r3, r0
 8001782:	4618      	mov	r0, r3
 8001784:	f7fe fe50 	bl	8000428 <__aeabi_f2d>
 8001788:	f04f 0200 	mov.w	r2, #0
 800178c:	4b13      	ldr	r3, [pc, #76]	; (80017dc <measure+0xb0>)
 800178e:	f7fe ffcd 	bl	800072c <__aeabi_ddiv>
 8001792:	4602      	mov	r2, r0
 8001794:	460b      	mov	r3, r1
 8001796:	4610      	mov	r0, r2
 8001798:	4619      	mov	r1, r3
 800179a:	f7ff f975 	bl	8000a88 <__aeabi_d2f>
 800179e:	4603      	mov	r3, r0
 80017a0:	617b      	str	r3, [r7, #20]
	pressure = (float) compensate_pressure(adc_P) / 256.0;
 80017a2:	68f8      	ldr	r0, [r7, #12]
 80017a4:	f000 f88c 	bl	80018c0 <compensate_pressure>
 80017a8:	4603      	mov	r3, r0
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff fa72 	bl	8000c94 <__aeabi_ui2f>
 80017b0:	4603      	mov	r3, r0
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7fe fe38 	bl	8000428 <__aeabi_f2d>
 80017b8:	f04f 0200 	mov.w	r2, #0
 80017bc:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <measure+0xb4>)
 80017be:	f7fe ffb5 	bl	800072c <__aeabi_ddiv>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	4610      	mov	r0, r2
 80017c8:	4619      	mov	r1, r3
 80017ca:	f7ff f95d 	bl	8000a88 <__aeabi_d2f>
 80017ce:	4603      	mov	r3, r0
 80017d0:	613b      	str	r3, [r7, #16]

	return pressure;
 80017d2:	693b      	ldr	r3, [r7, #16]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3718      	adds	r7, #24
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40590000 	.word	0x40590000
 80017e0:	40700000 	.word	0x40700000

080017e4 <get_diff_preasure>:

float get_diff_preasure(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
	float diff_measure = measure()- p_reference;
 80017ea:	f7ff ff9f 	bl	800172c <measure>
 80017ee:	4602      	mov	r2, r0
 80017f0:	4b06      	ldr	r3, [pc, #24]	; (800180c <get_diff_preasure+0x28>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4619      	mov	r1, r3
 80017f6:	4610      	mov	r0, r2
 80017f8:	f7ff f99a 	bl	8000b30 <__aeabi_fsub>
 80017fc:	4603      	mov	r3, r0
 80017fe:	607b      	str	r3, [r7, #4]
	return diff_measure;
 8001800:	687b      	ldr	r3, [r7, #4]
}
 8001802:	4618      	mov	r0, r3
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	200001fc 	.word	0x200001fc

08001810 <compensate_temperature>:

int32_t compensate_temperature(int32_t uncomp_temp)
{
 8001810:	b480      	push	{r7}
 8001812:	b085      	sub	sp, #20
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
	int32_t var1, var2;
	var1 =
			((((uncomp_temp / 8)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2b00      	cmp	r3, #0
 800181c:	da00      	bge.n	8001820 <compensate_temperature+0x10>
 800181e:	3307      	adds	r3, #7
 8001820:	10db      	asrs	r3, r3, #3
 8001822:	461a      	mov	r2, r3
					- ((int32_t) compensationParameters.dig_t1 << 1)))
 8001824:	4b24      	ldr	r3, [pc, #144]	; (80018b8 <compensate_temperature+0xa8>)
 8001826:	881b      	ldrh	r3, [r3, #0]
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	1ad3      	subs	r3, r2, r3
					* ((int32_t) compensationParameters.dig_t2)) / 2048;
 800182c:	4a22      	ldr	r2, [pc, #136]	; (80018b8 <compensate_temperature+0xa8>)
 800182e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001832:	fb02 f303 	mul.w	r3, r2, r3
	var1 =
 8001836:	2b00      	cmp	r3, #0
 8001838:	da01      	bge.n	800183e <compensate_temperature+0x2e>
 800183a:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800183e:	12db      	asrs	r3, r3, #11
 8001840:	60fb      	str	r3, [r7, #12]
	var2 = (((((uncomp_temp / 16) - ((int32_t) compensationParameters.dig_t1))
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2b00      	cmp	r3, #0
 8001846:	da00      	bge.n	800184a <compensate_temperature+0x3a>
 8001848:	330f      	adds	r3, #15
 800184a:	111b      	asrs	r3, r3, #4
 800184c:	461a      	mov	r2, r3
 800184e:	4b1a      	ldr	r3, [pc, #104]	; (80018b8 <compensate_temperature+0xa8>)
 8001850:	881b      	ldrh	r3, [r3, #0]
 8001852:	1ad2      	subs	r2, r2, r3
			* ((uncomp_temp / 16) - ((int32_t) compensationParameters.dig_t1)))
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	da00      	bge.n	800185c <compensate_temperature+0x4c>
 800185a:	330f      	adds	r3, #15
 800185c:	111b      	asrs	r3, r3, #4
 800185e:	4619      	mov	r1, r3
 8001860:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <compensate_temperature+0xa8>)
 8001862:	881b      	ldrh	r3, [r3, #0]
 8001864:	1acb      	subs	r3, r1, r3
 8001866:	fb02 f303 	mul.w	r3, r2, r3
			/ 4096) * ((int32_t) compensationParameters.dig_t3)) / 16384;
 800186a:	2b00      	cmp	r3, #0
 800186c:	da01      	bge.n	8001872 <compensate_temperature+0x62>
 800186e:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001872:	131b      	asrs	r3, r3, #12
 8001874:	461a      	mov	r2, r3
 8001876:	4b10      	ldr	r3, [pc, #64]	; (80018b8 <compensate_temperature+0xa8>)
 8001878:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800187c:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((uncomp_temp / 16) - ((int32_t) compensationParameters.dig_t1))
 8001880:	2b00      	cmp	r3, #0
 8001882:	da02      	bge.n	800188a <compensate_temperature+0x7a>
 8001884:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8001888:	333f      	adds	r3, #63	; 0x3f
 800188a:	139b      	asrs	r3, r3, #14
 800188c:	60bb      	str	r3, [r7, #8]
	t_fine = var1 + var2;
 800188e:	68fa      	ldr	r2, [r7, #12]
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	4413      	add	r3, r2
 8001894:	4a09      	ldr	r2, [pc, #36]	; (80018bc <compensate_temperature+0xac>)
 8001896:	6013      	str	r3, [r2, #0]
	return (t_fine * 5 + 128) / 256;
 8001898:	4b08      	ldr	r3, [pc, #32]	; (80018bc <compensate_temperature+0xac>)
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	4613      	mov	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	4413      	add	r3, r2
 80018a2:	3380      	adds	r3, #128	; 0x80
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	da00      	bge.n	80018aa <compensate_temperature+0x9a>
 80018a8:	33ff      	adds	r3, #255	; 0xff
 80018aa:	121b      	asrs	r3, r3, #8
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3714      	adds	r7, #20
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bc80      	pop	{r7}
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	20000200 	.word	0x20000200
 80018bc:	200001f8 	.word	0x200001f8

080018c0 <compensate_pressure>:

uint32_t compensate_pressure(int32_t uncomp_pres)
{
 80018c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018c4:	b0d6      	sub	sp, #344	; 0x158
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
	int64_t var1, var2, p;

	var1 = ((int64_t) (t_fine)) - 128000;
 80018cc:	4bb5      	ldr	r3, [pc, #724]	; (8001ba4 <compensate_pressure+0x2e4>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	17da      	asrs	r2, r3, #31
 80018d2:	461c      	mov	r4, r3
 80018d4:	4615      	mov	r5, r2
 80018d6:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 80018da:	f145 3bff 	adc.w	fp, r5, #4294967295
 80018de:	e9c7 ab54 	strd	sl, fp, [r7, #336]	; 0x150
	var2 = var1 * var1 * (int64_t) compensationParameters.dig_p6;
 80018e2:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80018e6:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80018ea:	fb03 f102 	mul.w	r1, r3, r2
 80018ee:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80018f2:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80018f6:	fb02 f303 	mul.w	r3, r2, r3
 80018fa:	18ca      	adds	r2, r1, r3
 80018fc:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001900:	fba3 8903 	umull	r8, r9, r3, r3
 8001904:	eb02 0309 	add.w	r3, r2, r9
 8001908:	4699      	mov	r9, r3
 800190a:	4ba7      	ldr	r3, [pc, #668]	; (8001ba8 <compensate_pressure+0x2e8>)
 800190c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001910:	b21b      	sxth	r3, r3
 8001912:	17da      	asrs	r2, r3, #31
 8001914:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001918:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800191c:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8001920:	4603      	mov	r3, r0
 8001922:	fb03 f209 	mul.w	r2, r3, r9
 8001926:	460b      	mov	r3, r1
 8001928:	fb08 f303 	mul.w	r3, r8, r3
 800192c:	4413      	add	r3, r2
 800192e:	4602      	mov	r2, r0
 8001930:	fba8 2102 	umull	r2, r1, r8, r2
 8001934:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 8001938:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 800193c:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001940:	4413      	add	r3, r2
 8001942:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001946:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 800194a:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
 800194e:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
	var2 = var2 + ((var1 * (int64_t) compensationParameters.dig_p5) * 131072);
 8001952:	4b95      	ldr	r3, [pc, #596]	; (8001ba8 <compensate_pressure+0x2e8>)
 8001954:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001958:	b21b      	sxth	r3, r3
 800195a:	17da      	asrs	r2, r3, #31
 800195c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001960:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8001964:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001968:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800196c:	462a      	mov	r2, r5
 800196e:	fb02 f203 	mul.w	r2, r2, r3
 8001972:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001976:	4621      	mov	r1, r4
 8001978:	fb01 f303 	mul.w	r3, r1, r3
 800197c:	441a      	add	r2, r3
 800197e:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001982:	4621      	mov	r1, r4
 8001984:	fba3 3101 	umull	r3, r1, r3, r1
 8001988:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 800198c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8001990:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001994:	18d3      	adds	r3, r2, r3
 8001996:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800199a:	f04f 0000 	mov.w	r0, #0
 800199e:	f04f 0100 	mov.w	r1, #0
 80019a2:	e9d7 454c 	ldrd	r4, r5, [r7, #304]	; 0x130
 80019a6:	462b      	mov	r3, r5
 80019a8:	0459      	lsls	r1, r3, #17
 80019aa:	4622      	mov	r2, r4
 80019ac:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 80019b0:	4623      	mov	r3, r4
 80019b2:	0458      	lsls	r0, r3, #17
 80019b4:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80019b8:	1814      	adds	r4, r2, r0
 80019ba:	67bc      	str	r4, [r7, #120]	; 0x78
 80019bc:	414b      	adcs	r3, r1
 80019be:	67fb      	str	r3, [r7, #124]	; 0x7c
 80019c0:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80019c4:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
	var2 = var2 + (((int64_t) compensationParameters.dig_p4) * 34359738368);
 80019c8:	4b77      	ldr	r3, [pc, #476]	; (8001ba8 <compensate_pressure+0x2e8>)
 80019ca:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80019ce:	b21b      	sxth	r3, r3
 80019d0:	17da      	asrs	r2, r3, #31
 80019d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80019d6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80019da:	f04f 0000 	mov.w	r0, #0
 80019de:	f04f 0100 	mov.w	r1, #0
 80019e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80019e6:	00d9      	lsls	r1, r3, #3
 80019e8:	2000      	movs	r0, #0
 80019ea:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 80019ee:	1814      	adds	r4, r2, r0
 80019f0:	673c      	str	r4, [r7, #112]	; 0x70
 80019f2:	414b      	adcs	r3, r1
 80019f4:	677b      	str	r3, [r7, #116]	; 0x74
 80019f6:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 80019fa:	e9c7 3452 	strd	r3, r4, [r7, #328]	; 0x148
	var1 = ((var1 * var1 * (int64_t) compensationParameters.dig_p3) / 256)
 80019fe:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8001a02:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001a06:	fb03 f102 	mul.w	r1, r3, r2
 8001a0a:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8001a0e:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001a12:	fb02 f303 	mul.w	r3, r2, r3
 8001a16:	18ca      	adds	r2, r1, r3
 8001a18:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001a1c:	fba3 3103 	umull	r3, r1, r3, r3
 8001a20:	f8c7 112c 	str.w	r1, [r7, #300]	; 0x12c
 8001a24:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001a28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001a2c:	18d3      	adds	r3, r2, r3
 8001a2e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001a32:	4b5d      	ldr	r3, [pc, #372]	; (8001ba8 <compensate_pressure+0x2e8>)
 8001a34:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001a38:	b21b      	sxth	r3, r3
 8001a3a:	17da      	asrs	r2, r3, #31
 8001a3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001a40:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001a44:	e9d7 344a 	ldrd	r3, r4, [r7, #296]	; 0x128
 8001a48:	4622      	mov	r2, r4
 8001a4a:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001a4e:	4641      	mov	r1, r8
 8001a50:	fb01 f202 	mul.w	r2, r1, r2
 8001a54:	464d      	mov	r5, r9
 8001a56:	4618      	mov	r0, r3
 8001a58:	4621      	mov	r1, r4
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	fb03 f305 	mul.w	r3, r3, r5
 8001a60:	4413      	add	r3, r2
 8001a62:	4602      	mov	r2, r0
 8001a64:	4641      	mov	r1, r8
 8001a66:	fba2 2101 	umull	r2, r1, r2, r1
 8001a6a:	f8c7 1124 	str.w	r1, [r7, #292]	; 0x124
 8001a6e:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
 8001a72:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001a76:	4413      	add	r3, r2
 8001a78:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001a7c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	da07      	bge.n	8001a94 <compensate_pressure+0x1d4>
 8001a84:	f112 01ff 	adds.w	r1, r2, #255	; 0xff
 8001a88:	66b9      	str	r1, [r7, #104]	; 0x68
 8001a8a:	f143 0300 	adc.w	r3, r3, #0
 8001a8e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001a90:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001a94:	f04f 0000 	mov.w	r0, #0
 8001a98:	f04f 0100 	mov.w	r1, #0
 8001a9c:	0a10      	lsrs	r0, r2, #8
 8001a9e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001aa2:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) compensationParameters.dig_p2) * 4096);
 8001aa4:	4b40      	ldr	r3, [pc, #256]	; (8001ba8 <compensate_pressure+0x2e8>)
 8001aa6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001aaa:	b21b      	sxth	r3, r3
 8001aac:	17da      	asrs	r2, r3, #31
 8001aae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001ab2:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001ab6:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001aba:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8001abe:	464a      	mov	r2, r9
 8001ac0:	fb02 f203 	mul.w	r2, r2, r3
 8001ac4:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001ac8:	4644      	mov	r4, r8
 8001aca:	fb04 f303 	mul.w	r3, r4, r3
 8001ace:	441a      	add	r2, r3
 8001ad0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001ad4:	4644      	mov	r4, r8
 8001ad6:	fba3 3404 	umull	r3, r4, r3, r4
 8001ada:	f8c7 411c 	str.w	r4, [r7, #284]	; 0x11c
 8001ade:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8001ae2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001ae6:	18d3      	adds	r3, r2, r3
 8001ae8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001aec:	f04f 0200 	mov.w	r2, #0
 8001af0:	f04f 0300 	mov.w	r3, #0
 8001af4:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 8001af8:	464c      	mov	r4, r9
 8001afa:	0323      	lsls	r3, r4, #12
 8001afc:	46c4      	mov	ip, r8
 8001afe:	ea43 531c 	orr.w	r3, r3, ip, lsr #20
 8001b02:	4644      	mov	r4, r8
 8001b04:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) compensationParameters.dig_p3) / 256)
 8001b06:	1884      	adds	r4, r0, r2
 8001b08:	663c      	str	r4, [r7, #96]	; 0x60
 8001b0a:	eb41 0303 	adc.w	r3, r1, r3
 8001b0e:	667b      	str	r3, [r7, #100]	; 0x64
 8001b10:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8001b14:	e9c7 3454 	strd	r3, r4, [r7, #336]	; 0x150
	var1 = ((INT64_C(0x800000000000) + var1)
 8001b18:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8001b1c:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8001b20:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
 8001b24:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
			* ((int64_t) compensationParameters.dig_p1)) / 8589934592;
 8001b28:	4b1f      	ldr	r3, [pc, #124]	; (8001ba8 <compensate_pressure+0x2e8>)
 8001b2a:	88db      	ldrh	r3, [r3, #6]
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001b34:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001b38:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8001b3c:	4622      	mov	r2, r4
 8001b3e:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001b42:	4641      	mov	r1, r8
 8001b44:	fb01 f202 	mul.w	r2, r1, r2
 8001b48:	464d      	mov	r5, r9
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	4621      	mov	r1, r4
 8001b4e:	4603      	mov	r3, r0
 8001b50:	fb03 f305 	mul.w	r3, r3, r5
 8001b54:	4413      	add	r3, r2
 8001b56:	4602      	mov	r2, r0
 8001b58:	4641      	mov	r1, r8
 8001b5a:	fba2 2101 	umull	r2, r1, r2, r1
 8001b5e:	f8c7 1114 	str.w	r1, [r7, #276]	; 0x114
 8001b62:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 8001b66:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001b6a:	4413      	add	r3, r2
 8001b6c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	var1 = ((INT64_C(0x800000000000) + var1)
 8001b70:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	da06      	bge.n	8001b86 <compensate_pressure+0x2c6>
 8001b78:	1e51      	subs	r1, r2, #1
 8001b7a:	65b9      	str	r1, [r7, #88]	; 0x58
 8001b7c:	f143 0301 	adc.w	r3, r3, #1
 8001b80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001b82:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001b86:	f04f 0000 	mov.w	r0, #0
 8001b8a:	f04f 0100 	mov.w	r1, #0
 8001b8e:	1058      	asrs	r0, r3, #1
 8001b90:	17d9      	asrs	r1, r3, #31
 8001b92:	e9c7 0154 	strd	r0, r1, [r7, #336]	; 0x150
	if (var1 == 0)
 8001b96:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	d106      	bne.n	8001bac <compensate_pressure+0x2ec>
	{
		return 0;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	e181      	b.n	8001ea6 <compensate_pressure+0x5e6>
 8001ba2:	bf00      	nop
 8001ba4:	200001f8 	.word	0x200001f8
 8001ba8:	20000200 	.word	0x20000200
	}
	p = 1048576 - uncomp_pres;
 8001bac:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001bb0:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001bb4:	17da      	asrs	r2, r3, #31
 8001bb6:	653b      	str	r3, [r7, #80]	; 0x50
 8001bb8:	657a      	str	r2, [r7, #84]	; 0x54
 8001bba:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8001bbe:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
	p = (((((p * 2147483648U)) - var2) * 3125) / var1);
 8001bc2:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8001bc6:	f04f 0000 	mov.w	r0, #0
 8001bca:	f04f 0100 	mov.w	r1, #0
 8001bce:	07d9      	lsls	r1, r3, #31
 8001bd0:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 8001bd4:	07d0      	lsls	r0, r2, #31
 8001bd6:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8001bda:	1a84      	subs	r4, r0, r2
 8001bdc:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8001be0:	eb61 0303 	sbc.w	r3, r1, r3
 8001be4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001be8:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8001bec:	4622      	mov	r2, r4
 8001bee:	462b      	mov	r3, r5
 8001bf0:	1891      	adds	r1, r2, r2
 8001bf2:	64b9      	str	r1, [r7, #72]	; 0x48
 8001bf4:	415b      	adcs	r3, r3
 8001bf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001bf8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001bfc:	4621      	mov	r1, r4
 8001bfe:	1851      	adds	r1, r2, r1
 8001c00:	6439      	str	r1, [r7, #64]	; 0x40
 8001c02:	4629      	mov	r1, r5
 8001c04:	414b      	adcs	r3, r1
 8001c06:	647b      	str	r3, [r7, #68]	; 0x44
 8001c08:	f04f 0200 	mov.w	r2, #0
 8001c0c:	f04f 0300 	mov.w	r3, #0
 8001c10:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001c14:	4649      	mov	r1, r9
 8001c16:	018b      	lsls	r3, r1, #6
 8001c18:	4641      	mov	r1, r8
 8001c1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c1e:	4641      	mov	r1, r8
 8001c20:	018a      	lsls	r2, r1, #6
 8001c22:	4641      	mov	r1, r8
 8001c24:	1889      	adds	r1, r1, r2
 8001c26:	63b9      	str	r1, [r7, #56]	; 0x38
 8001c28:	4649      	mov	r1, r9
 8001c2a:	eb43 0101 	adc.w	r1, r3, r1
 8001c2e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8001c30:	f04f 0200 	mov.w	r2, #0
 8001c34:	f04f 0300 	mov.w	r3, #0
 8001c38:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001c3c:	4649      	mov	r1, r9
 8001c3e:	008b      	lsls	r3, r1, #2
 8001c40:	46c4      	mov	ip, r8
 8001c42:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001c46:	4641      	mov	r1, r8
 8001c48:	008a      	lsls	r2, r1, #2
 8001c4a:	4610      	mov	r0, r2
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4603      	mov	r3, r0
 8001c50:	4622      	mov	r2, r4
 8001c52:	189b      	adds	r3, r3, r2
 8001c54:	633b      	str	r3, [r7, #48]	; 0x30
 8001c56:	460b      	mov	r3, r1
 8001c58:	462a      	mov	r2, r5
 8001c5a:	eb42 0303 	adc.w	r3, r2, r3
 8001c5e:	637b      	str	r3, [r7, #52]	; 0x34
 8001c60:	f04f 0200 	mov.w	r2, #0
 8001c64:	f04f 0300 	mov.w	r3, #0
 8001c68:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 8001c6c:	4649      	mov	r1, r9
 8001c6e:	008b      	lsls	r3, r1, #2
 8001c70:	46c4      	mov	ip, r8
 8001c72:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001c76:	4641      	mov	r1, r8
 8001c78:	008a      	lsls	r2, r1, #2
 8001c7a:	4610      	mov	r0, r2
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4603      	mov	r3, r0
 8001c80:	4622      	mov	r2, r4
 8001c82:	189b      	adds	r3, r3, r2
 8001c84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001c88:	462b      	mov	r3, r5
 8001c8a:	460a      	mov	r2, r1
 8001c8c:	eb42 0303 	adc.w	r3, r2, r3
 8001c90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001c94:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8001c98:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8001c9c:	f7ff f9c8 	bl	8001030 <__aeabi_ldivmod>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
	var1 = (((int64_t) compensationParameters.dig_p9) * (p / 8192) * (p / 8192))
 8001ca8:	4b82      	ldr	r3, [pc, #520]	; (8001eb4 <compensate_pressure+0x5f4>)
 8001caa:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001cae:	b21b      	sxth	r3, r3
 8001cb0:	17da      	asrs	r2, r3, #31
 8001cb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001cb6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001cba:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	da08      	bge.n	8001cd4 <compensate_pressure+0x414>
 8001cc2:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8001cc6:	1851      	adds	r1, r2, r1
 8001cc8:	62b9      	str	r1, [r7, #40]	; 0x28
 8001cca:	f143 0300 	adc.w	r3, r3, #0
 8001cce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cd0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001cd4:	f04f 0000 	mov.w	r0, #0
 8001cd8:	f04f 0100 	mov.w	r1, #0
 8001cdc:	0b50      	lsrs	r0, r2, #13
 8001cde:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001ce2:	1359      	asrs	r1, r3, #13
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 8001cec:	4629      	mov	r1, r5
 8001cee:	fb02 f001 	mul.w	r0, r2, r1
 8001cf2:	4621      	mov	r1, r4
 8001cf4:	fb01 f103 	mul.w	r1, r1, r3
 8001cf8:	4401      	add	r1, r0
 8001cfa:	4620      	mov	r0, r4
 8001cfc:	fba0 3202 	umull	r3, r2, r0, r2
 8001d00:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8001d04:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001d08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001d0c:	18cb      	adds	r3, r1, r3
 8001d0e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001d12:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	da08      	bge.n	8001d2c <compensate_pressure+0x46c>
 8001d1a:	f641 71ff 	movw	r1, #8191	; 0x1fff
 8001d1e:	1851      	adds	r1, r2, r1
 8001d20:	6239      	str	r1, [r7, #32]
 8001d22:	f143 0300 	adc.w	r3, r3, #0
 8001d26:	627b      	str	r3, [r7, #36]	; 0x24
 8001d28:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d2c:	f04f 0000 	mov.w	r0, #0
 8001d30:	f04f 0100 	mov.w	r1, #0
 8001d34:	0b50      	lsrs	r0, r2, #13
 8001d36:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001d3a:	1359      	asrs	r1, r3, #13
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	460b      	mov	r3, r1
 8001d40:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8001d44:	4629      	mov	r1, r5
 8001d46:	fb02 f001 	mul.w	r0, r2, r1
 8001d4a:	4621      	mov	r1, r4
 8001d4c:	fb01 f103 	mul.w	r1, r1, r3
 8001d50:	4401      	add	r1, r0
 8001d52:	4620      	mov	r0, r4
 8001d54:	fba0 3202 	umull	r3, r2, r0, r2
 8001d58:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8001d5c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001d64:	18cb      	adds	r3, r1, r3
 8001d66:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001d6a:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	da08      	bge.n	8001d84 <compensate_pressure+0x4c4>
 8001d72:	f06f 417e 	mvn.w	r1, #4261412864	; 0xfe000000
 8001d76:	1851      	adds	r1, r2, r1
 8001d78:	61b9      	str	r1, [r7, #24]
 8001d7a:	f143 0300 	adc.w	r3, r3, #0
 8001d7e:	61fb      	str	r3, [r7, #28]
 8001d80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d84:	f04f 0000 	mov.w	r0, #0
 8001d88:	f04f 0100 	mov.w	r1, #0
 8001d8c:	0e50      	lsrs	r0, r2, #25
 8001d8e:	ea40 10c3 	orr.w	r0, r0, r3, lsl #7
 8001d92:	1659      	asrs	r1, r3, #25
 8001d94:	e9c7 0154 	strd	r0, r1, [r7, #336]	; 0x150
			/ 33554432;
	var2 = (((int64_t) compensationParameters.dig_p8) * p) / 524288;
 8001d98:	4b46      	ldr	r3, [pc, #280]	; (8001eb4 <compensate_pressure+0x5f4>)
 8001d9a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001d9e:	b21b      	sxth	r3, r3
 8001da0:	17da      	asrs	r2, r3, #31
 8001da2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001da6:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001daa:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001dae:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8001db2:	462a      	mov	r2, r5
 8001db4:	fb02 f203 	mul.w	r2, r2, r3
 8001db8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001dbc:	4621      	mov	r1, r4
 8001dbe:	fb01 f303 	mul.w	r3, r1, r3
 8001dc2:	441a      	add	r2, r3
 8001dc4:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001dc8:	4621      	mov	r1, r4
 8001dca:	fba3 3101 	umull	r3, r1, r3, r1
 8001dce:	f8c7 10fc 	str.w	r1, [r7, #252]	; 0xfc
 8001dd2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001dd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001dda:	18d3      	adds	r3, r2, r3
 8001ddc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001de0:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8001de4:	2900      	cmp	r1, #0
 8001de6:	da07      	bge.n	8001df8 <compensate_pressure+0x538>
 8001de8:	4b33      	ldr	r3, [pc, #204]	; (8001eb8 <compensate_pressure+0x5f8>)
 8001dea:	18c3      	adds	r3, r0, r3
 8001dec:	613b      	str	r3, [r7, #16]
 8001dee:	f141 0300 	adc.w	r3, r1, #0
 8001df2:	617b      	str	r3, [r7, #20]
 8001df4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001df8:	f04f 0200 	mov.w	r2, #0
 8001dfc:	f04f 0300 	mov.w	r3, #0
 8001e00:	0cc2      	lsrs	r2, r0, #19
 8001e02:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001e06:	14cb      	asrs	r3, r1, #19
 8001e08:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
	p = ((p + var1 + var2) / 256)
 8001e0c:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8001e10:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8001e14:	1884      	adds	r4, r0, r2
 8001e16:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8001e1a:	eb41 0303 	adc.w	r3, r1, r3
 8001e1e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001e22:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8001e26:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001e2a:	4621      	mov	r1, r4
 8001e2c:	1889      	adds	r1, r1, r2
 8001e2e:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8001e32:	4629      	mov	r1, r5
 8001e34:	eb43 0101 	adc.w	r1, r3, r1
 8001e38:	f8c7 108c 	str.w	r1, [r7, #140]	; 0x8c
 8001e3c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	da07      	bge.n	8001e54 <compensate_pressure+0x594>
 8001e44:	f112 01ff 	adds.w	r1, r2, #255	; 0xff
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	f143 0300 	adc.w	r3, r3, #0
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e54:	f04f 0000 	mov.w	r0, #0
 8001e58:	f04f 0100 	mov.w	r1, #0
 8001e5c:	0a10      	lsrs	r0, r2, #8
 8001e5e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001e62:	1219      	asrs	r1, r3, #8
			+ (((int64_t) compensationParameters.dig_p7) * 16);
 8001e64:	4b13      	ldr	r3, [pc, #76]	; (8001eb4 <compensate_pressure+0x5f4>)
 8001e66:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001e6a:	b21b      	sxth	r3, r3
 8001e6c:	17da      	asrs	r2, r3, #31
 8001e6e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001e72:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001e76:	f04f 0200 	mov.w	r2, #0
 8001e7a:	f04f 0300 	mov.w	r3, #0
 8001e7e:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8001e82:	464c      	mov	r4, r9
 8001e84:	0123      	lsls	r3, r4, #4
 8001e86:	46c4      	mov	ip, r8
 8001e88:	ea43 731c 	orr.w	r3, r3, ip, lsr #28
 8001e8c:	4644      	mov	r4, r8
 8001e8e:	0122      	lsls	r2, r4, #4
	p = ((p + var1 + var2) / 256)
 8001e90:	1884      	adds	r4, r0, r2
 8001e92:	603c      	str	r4, [r7, #0]
 8001e94:	eb41 0303 	adc.w	r3, r1, r3
 8001e98:	607b      	str	r3, [r7, #4]
 8001e9a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001e9e:	e9c7 3450 	strd	r3, r4, [r7, #320]	; 0x140
	return (uint32_t) p;
 8001ea2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8001eac:	46bd      	mov	sp, r7
 8001eae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001eb2:	bf00      	nop
 8001eb4:	20000200 	.word	0x20000200
 8001eb8:	0007ffff 	.word	0x0007ffff

08001ebc <setReferencePressure>:

float setReferencePressure(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
	uint16_t samples = 20;
 8001ec2:	2314      	movs	r3, #20
 8001ec4:	803b      	strh	r3, [r7, #0]
	HAL_Delay(100);
 8001ec6:	2064      	movs	r0, #100	; 0x64
 8001ec8:	f001 fb1c 	bl	8003504 <HAL_Delay>
	float sum = 0;
 8001ecc:	f04f 0300 	mov.w	r3, #0
 8001ed0:	607b      	str	r3, [r7, #4]
	for (char i = 0; i < samples; i++)
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	70fb      	strb	r3, [r7, #3]
 8001ed6:	e00e      	b.n	8001ef6 <setReferencePressure+0x3a>
	{
		sum += measure();
 8001ed8:	f7ff fc28 	bl	800172c <measure>
 8001edc:	4603      	mov	r3, r0
 8001ede:	4619      	mov	r1, r3
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f7fe fe27 	bl	8000b34 <__addsf3>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	607b      	str	r3, [r7, #4]
		HAL_Delay(100);
 8001eea:	2064      	movs	r0, #100	; 0x64
 8001eec:	f001 fb0a 	bl	8003504 <HAL_Delay>
	for (char i = 0; i < samples; i++)
 8001ef0:	78fb      	ldrb	r3, [r7, #3]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	70fb      	strb	r3, [r7, #3]
 8001ef6:	78fb      	ldrb	r3, [r7, #3]
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	883a      	ldrh	r2, [r7, #0]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d8eb      	bhi.n	8001ed8 <setReferencePressure+0x1c>
	}
	p_reference = sum / samples;
 8001f00:	883b      	ldrh	r3, [r7, #0]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7fe feca 	bl	8000c9c <__aeabi_i2f>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f7fe ffcd 	bl	8000eac <__aeabi_fdiv>
 8001f12:	4603      	mov	r3, r0
 8001f14:	461a      	mov	r2, r3
 8001f16:	4b03      	ldr	r3, [pc, #12]	; (8001f24 <setReferencePressure+0x68>)
 8001f18:	601a      	str	r2, [r3, #0]
}
 8001f1a:	bf00      	nop
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	200001fc 	.word	0x200001fc

08001f28 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b088      	sub	sp, #32
 8001f2c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f2e:	f107 0310 	add.w	r3, r7, #16
 8001f32:	2200      	movs	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	605a      	str	r2, [r3, #4]
 8001f38:	609a      	str	r2, [r3, #8]
 8001f3a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f3c:	4b4a      	ldr	r3, [pc, #296]	; (8002068 <MX_GPIO_Init+0x140>)
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	4a49      	ldr	r2, [pc, #292]	; (8002068 <MX_GPIO_Init+0x140>)
 8001f42:	f043 0310 	orr.w	r3, r3, #16
 8001f46:	6193      	str	r3, [r2, #24]
 8001f48:	4b47      	ldr	r3, [pc, #284]	; (8002068 <MX_GPIO_Init+0x140>)
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	f003 0310 	and.w	r3, r3, #16
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f54:	4b44      	ldr	r3, [pc, #272]	; (8002068 <MX_GPIO_Init+0x140>)
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	4a43      	ldr	r2, [pc, #268]	; (8002068 <MX_GPIO_Init+0x140>)
 8001f5a:	f043 0320 	orr.w	r3, r3, #32
 8001f5e:	6193      	str	r3, [r2, #24]
 8001f60:	4b41      	ldr	r3, [pc, #260]	; (8002068 <MX_GPIO_Init+0x140>)
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	f003 0320 	and.w	r3, r3, #32
 8001f68:	60bb      	str	r3, [r7, #8]
 8001f6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f6c:	4b3e      	ldr	r3, [pc, #248]	; (8002068 <MX_GPIO_Init+0x140>)
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	4a3d      	ldr	r2, [pc, #244]	; (8002068 <MX_GPIO_Init+0x140>)
 8001f72:	f043 0304 	orr.w	r3, r3, #4
 8001f76:	6193      	str	r3, [r2, #24]
 8001f78:	4b3b      	ldr	r3, [pc, #236]	; (8002068 <MX_GPIO_Init+0x140>)
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	f003 0304 	and.w	r3, r3, #4
 8001f80:	607b      	str	r3, [r7, #4]
 8001f82:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f84:	4b38      	ldr	r3, [pc, #224]	; (8002068 <MX_GPIO_Init+0x140>)
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	4a37      	ldr	r2, [pc, #220]	; (8002068 <MX_GPIO_Init+0x140>)
 8001f8a:	f043 0308 	orr.w	r3, r3, #8
 8001f8e:	6193      	str	r3, [r2, #24]
 8001f90:	4b35      	ldr	r3, [pc, #212]	; (8002068 <MX_GPIO_Init+0x140>)
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	f003 0308 	and.w	r3, r3, #8
 8001f98:	603b      	str	r3, [r7, #0]
 8001f9a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fa2:	4832      	ldr	r0, [pc, #200]	; (800206c <MX_GPIO_Init+0x144>)
 8001fa4:	f001 fe14 	bl	8003bd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001fa8:	2201      	movs	r2, #1
 8001faa:	2110      	movs	r1, #16
 8001fac:	4830      	ldr	r0, [pc, #192]	; (8002070 <MX_GPIO_Init+0x148>)
 8001fae:	f001 fe0f 	bl	8003bd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_3, GPIO_PIN_RESET);
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	2109      	movs	r1, #9
 8001fb6:	482f      	ldr	r0, [pc, #188]	; (8002074 <MX_GPIO_Init+0x14c>)
 8001fb8:	f001 fe0a 	bl	8003bd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001fbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fc0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fce:	f107 0310 	add.w	r3, r7, #16
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4825      	ldr	r0, [pc, #148]	; (800206c <MX_GPIO_Init+0x144>)
 8001fd6:	f001 fc77 	bl	80038c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001fda:	2302      	movs	r3, #2
 8001fdc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001fde:	4b26      	ldr	r3, [pc, #152]	; (8002078 <MX_GPIO_Init+0x150>)
 8001fe0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe6:	f107 0310 	add.w	r3, r7, #16
 8001fea:	4619      	mov	r1, r3
 8001fec:	4820      	ldr	r0, [pc, #128]	; (8002070 <MX_GPIO_Init+0x148>)
 8001fee:	f001 fc6b 	bl	80038c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001ff2:	2310      	movs	r3, #16
 8001ff4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ffe:	2303      	movs	r3, #3
 8002000:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002002:	f107 0310 	add.w	r3, r7, #16
 8002006:	4619      	mov	r1, r3
 8002008:	4819      	ldr	r0, [pc, #100]	; (8002070 <MX_GPIO_Init+0x148>)
 800200a:	f001 fc5d 	bl	80038c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800200e:	2301      	movs	r3, #1
 8002010:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002012:	2301      	movs	r3, #1
 8002014:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002016:	2300      	movs	r3, #0
 8002018:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800201a:	2303      	movs	r3, #3
 800201c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800201e:	f107 0310 	add.w	r3, r7, #16
 8002022:	4619      	mov	r1, r3
 8002024:	4813      	ldr	r0, [pc, #76]	; (8002074 <MX_GPIO_Init+0x14c>)
 8002026:	f001 fc4f 	bl	80038c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800202a:	2302      	movs	r3, #2
 800202c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800202e:	2300      	movs	r3, #0
 8002030:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002032:	2301      	movs	r3, #1
 8002034:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002036:	f107 0310 	add.w	r3, r7, #16
 800203a:	4619      	mov	r1, r3
 800203c:	480d      	ldr	r0, [pc, #52]	; (8002074 <MX_GPIO_Init+0x14c>)
 800203e:	f001 fc43 	bl	80038c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002042:	2308      	movs	r3, #8
 8002044:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002046:	2301      	movs	r3, #1
 8002048:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800204a:	2302      	movs	r3, #2
 800204c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800204e:	2303      	movs	r3, #3
 8002050:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002052:	f107 0310 	add.w	r3, r7, #16
 8002056:	4619      	mov	r1, r3
 8002058:	4806      	ldr	r0, [pc, #24]	; (8002074 <MX_GPIO_Init+0x14c>)
 800205a:	f001 fc35 	bl	80038c8 <HAL_GPIO_Init>

}
 800205e:	bf00      	nop
 8002060:	3720      	adds	r7, #32
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	40021000 	.word	0x40021000
 800206c:	40011000 	.word	0x40011000
 8002070:	40010800 	.word	0x40010800
 8002074:	40010c00 	.word	0x40010c00
 8002078:	10110000 	.word	0x10110000

0800207c <MPU_begin>:
int whoAmIAK8963();

//-------------------------------------------

/* starts communication with the MPU-9250 */
int MPU_begin(){
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  // select clock source to gyro
  if(writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL) < 0){
 8002080:	236b      	movs	r3, #107	; 0x6b
 8002082:	2201      	movs	r2, #1
 8002084:	4611      	mov	r1, r2
 8002086:	4618      	mov	r0, r3
 8002088:	f000 f8f8 	bl	800227c <writeRegister>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	da02      	bge.n	8002098 <MPU_begin+0x1c>

    return -1;
 8002092:	f04f 33ff 	mov.w	r3, #4294967295
 8002096:	e0ec      	b.n	8002272 <MPU_begin+0x1f6>
  }
  // enable I2C master mode
  if(writeRegister(USER_CTRL,I2C_MST_EN) < 0){
 8002098:	236a      	movs	r3, #106	; 0x6a
 800209a:	2220      	movs	r2, #32
 800209c:	4611      	mov	r1, r2
 800209e:	4618      	mov	r0, r3
 80020a0:	f000 f8ec 	bl	800227c <writeRegister>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	da02      	bge.n	80020b0 <MPU_begin+0x34>
    return -2;
 80020aa:	f06f 0301 	mvn.w	r3, #1
 80020ae:	e0e0      	b.n	8002272 <MPU_begin+0x1f6>
  }
  // set the I2C bus speed to 400 kHz
  if(writeRegister(I2C_MST_CTRL,I2C_MST_CLK) < 0){
 80020b0:	2324      	movs	r3, #36	; 0x24
 80020b2:	220d      	movs	r2, #13
 80020b4:	4611      	mov	r1, r2
 80020b6:	4618      	mov	r0, r3
 80020b8:	f000 f8e0 	bl	800227c <writeRegister>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	da02      	bge.n	80020c8 <MPU_begin+0x4c>
    return -3;
 80020c2:	f06f 0302 	mvn.w	r3, #2
 80020c6:	e0d4      	b.n	8002272 <MPU_begin+0x1f6>
  }
  // set AK8963 to Power Down
  writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN);
 80020c8:	230a      	movs	r3, #10
 80020ca:	2200      	movs	r2, #0
 80020cc:	4611      	mov	r1, r2
 80020ce:	4618      	mov	r0, r3
 80020d0:	f000 f994 	bl	80023fc <writeAK8963Register>
  // reset the MPU9250
  writeRegister(PWR_MGMNT_1,PWR_RESET);
 80020d4:	236b      	movs	r3, #107	; 0x6b
 80020d6:	2280      	movs	r2, #128	; 0x80
 80020d8:	4611      	mov	r1, r2
 80020da:	4618      	mov	r0, r3
 80020dc:	f000 f8ce 	bl	800227c <writeRegister>
  // wait for MPU-9250 to come back up
  HAL_Delay(10);
 80020e0:	200a      	movs	r0, #10
 80020e2:	f001 fa0f 	bl	8003504 <HAL_Delay>
  // reset the AK8963
  writeAK8963Register(AK8963_CNTL2,AK8963_RESET);
 80020e6:	230b      	movs	r3, #11
 80020e8:	2201      	movs	r2, #1
 80020ea:	4611      	mov	r1, r2
 80020ec:	4618      	mov	r0, r3
 80020ee:	f000 f985 	bl	80023fc <writeAK8963Register>
  // select clock source to gyro
  if(writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL) < 0){
 80020f2:	236b      	movs	r3, #107	; 0x6b
 80020f4:	2201      	movs	r2, #1
 80020f6:	4611      	mov	r1, r2
 80020f8:	4618      	mov	r0, r3
 80020fa:	f000 f8bf 	bl	800227c <writeRegister>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	da02      	bge.n	800210a <MPU_begin+0x8e>
    return -4;
 8002104:	f06f 0303 	mvn.w	r3, #3
 8002108:	e0b3      	b.n	8002272 <MPU_begin+0x1f6>
  // check the WHO AM I byte, expected value is 0x71 (decimal 113   112) or 0x73 (decimal 115)
 // if((whoAmI() != 112)&&(whoAmI() != 115)){
  //  return -5;
 // }
  // enable accelerometer and gyro
  if(writeRegister(PWR_MGMNT_2,SEN_ENABLE) < 0){
 800210a:	236c      	movs	r3, #108	; 0x6c
 800210c:	2200      	movs	r2, #0
 800210e:	4611      	mov	r1, r2
 8002110:	4618      	mov	r0, r3
 8002112:	f000 f8b3 	bl	800227c <writeRegister>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	da02      	bge.n	8002122 <MPU_begin+0xa6>
    return -6;
 800211c:	f06f 0305 	mvn.w	r3, #5
 8002120:	e0a7      	b.n	8002272 <MPU_begin+0x1f6>
  }
  // setting accel range to 16G as default
  if(writeRegister(ACCEL_CONFIG,ACCEL_FS_SEL_16G) < 0){
 8002122:	231c      	movs	r3, #28
 8002124:	2218      	movs	r2, #24
 8002126:	4611      	mov	r1, r2
 8002128:	4618      	mov	r0, r3
 800212a:	f000 f8a7 	bl	800227c <writeRegister>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	da02      	bge.n	800213a <MPU_begin+0xbe>
    return -7;
 8002134:	f06f 0306 	mvn.w	r3, #6
 8002138:	e09b      	b.n	8002272 <MPU_begin+0x1f6>
  }

  // setting the gyro range to 2000DPS as default
  if(writeRegister(GYRO_CONFIG,GYRO_FS_SEL_250DPS) < 0){
 800213a:	231b      	movs	r3, #27
 800213c:	2200      	movs	r2, #0
 800213e:	4611      	mov	r1, r2
 8002140:	4618      	mov	r0, r3
 8002142:	f000 f89b 	bl	800227c <writeRegister>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	da02      	bge.n	8002152 <MPU_begin+0xd6>
    return -8;
 800214c:	f06f 0307 	mvn.w	r3, #7
 8002150:	e08f      	b.n	8002272 <MPU_begin+0x1f6>
  }

  // setting bandwidth to 184Hz as default
  if(writeRegister(ACCEL_CONFIG2,DLPF_184) < 0){
 8002152:	231d      	movs	r3, #29
 8002154:	2201      	movs	r2, #1
 8002156:	4611      	mov	r1, r2
 8002158:	4618      	mov	r0, r3
 800215a:	f000 f88f 	bl	800227c <writeRegister>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	da02      	bge.n	800216a <MPU_begin+0xee>
    return -9;
 8002164:	f06f 0308 	mvn.w	r3, #8
 8002168:	e083      	b.n	8002272 <MPU_begin+0x1f6>
  }
  if(writeRegister(CONFIG,DLPF_184) < 0){ // setting gyro bandwidth to 184Hz
 800216a:	231a      	movs	r3, #26
 800216c:	2201      	movs	r2, #1
 800216e:	4611      	mov	r1, r2
 8002170:	4618      	mov	r0, r3
 8002172:	f000 f883 	bl	800227c <writeRegister>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	da02      	bge.n	8002182 <MPU_begin+0x106>
    return -10;
 800217c:	f06f 0309 	mvn.w	r3, #9
 8002180:	e077      	b.n	8002272 <MPU_begin+0x1f6>
  }

  // setting the sample rate divider to 0 as default
  if(writeRegister(SMPDIV,0x00) < 0){
 8002182:	2319      	movs	r3, #25
 8002184:	2100      	movs	r1, #0
 8002186:	4618      	mov	r0, r3
 8002188:	f000 f878 	bl	800227c <writeRegister>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	da02      	bge.n	8002198 <MPU_begin+0x11c>
    return -11;
 8002192:	f06f 030a 	mvn.w	r3, #10
 8002196:	e06c      	b.n	8002272 <MPU_begin+0x1f6>
  }

  // enable I2C master mode
  if(writeRegister(USER_CTRL,I2C_MST_EN) < 0){
 8002198:	236a      	movs	r3, #106	; 0x6a
 800219a:	2220      	movs	r2, #32
 800219c:	4611      	mov	r1, r2
 800219e:	4618      	mov	r0, r3
 80021a0:	f000 f86c 	bl	800227c <writeRegister>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	da02      	bge.n	80021b0 <MPU_begin+0x134>
  	return -12;
 80021aa:	f06f 030b 	mvn.w	r3, #11
 80021ae:	e060      	b.n	8002272 <MPU_begin+0x1f6>
  }
	// set the I2C bus speed to 400 kHz
	if( writeRegister(I2C_MST_CTRL,I2C_MST_CLK) < 0){
 80021b0:	2324      	movs	r3, #36	; 0x24
 80021b2:	220d      	movs	r2, #13
 80021b4:	4611      	mov	r1, r2
 80021b6:	4618      	mov	r0, r3
 80021b8:	f000 f860 	bl	800227c <writeRegister>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	da02      	bge.n	80021c8 <MPU_begin+0x14c>
		return -13;
 80021c2:	f06f 030c 	mvn.w	r3, #12
 80021c6:	e054      	b.n	8002272 <MPU_begin+0x1f6>
   // return -14;
	//}

  /* get the magnetometer calibration */
  // set AK8963 to Power Down
  if(writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN) < 0){
 80021c8:	230a      	movs	r3, #10
 80021ca:	2200      	movs	r2, #0
 80021cc:	4611      	mov	r1, r2
 80021ce:	4618      	mov	r0, r3
 80021d0:	f000 f914 	bl	80023fc <writeAK8963Register>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	da02      	bge.n	80021e0 <MPU_begin+0x164>
    return -15;
 80021da:	f06f 030e 	mvn.w	r3, #14
 80021de:	e048      	b.n	8002272 <MPU_begin+0x1f6>
  }
  HAL_Delay(100); // long wait between AK8963 mode changes
 80021e0:	2064      	movs	r0, #100	; 0x64
 80021e2:	f001 f98f 	bl	8003504 <HAL_Delay>
  // set AK8963 to FUSE ROM access
  if(writeAK8963Register(AK8963_CNTL1,AK8963_FUSE_ROM) < 0){
 80021e6:	230a      	movs	r3, #10
 80021e8:	220f      	movs	r2, #15
 80021ea:	4611      	mov	r1, r2
 80021ec:	4618      	mov	r0, r3
 80021ee:	f000 f905 	bl	80023fc <writeAK8963Register>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	da02      	bge.n	80021fe <MPU_begin+0x182>
    return -16;
 80021f8:	f06f 030f 	mvn.w	r3, #15
 80021fc:	e039      	b.n	8002272 <MPU_begin+0x1f6>
  }
  HAL_Delay(100); // long wait between AK8963 mode changes
 80021fe:	2064      	movs	r0, #100	; 0x64
 8002200:	f001 f980 	bl	8003504 <HAL_Delay>
  // read the AK8963 ASA registers and compute magnetometer scale factors
  readAK8963Registers(AK8963_ASA,3,_buffer);
 8002204:	2310      	movs	r3, #16
 8002206:	4a1c      	ldr	r2, [pc, #112]	; (8002278 <MPU_begin+0x1fc>)
 8002208:	2103      	movs	r1, #3
 800220a:	4618      	mov	r0, r3
 800220c:	f000 f94c 	bl	80024a8 <readAK8963Registers>

  // set AK8963 to Power Down
  if(writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN) < 0){
 8002210:	230a      	movs	r3, #10
 8002212:	2200      	movs	r2, #0
 8002214:	4611      	mov	r1, r2
 8002216:	4618      	mov	r0, r3
 8002218:	f000 f8f0 	bl	80023fc <writeAK8963Register>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	da02      	bge.n	8002228 <MPU_begin+0x1ac>
    return -17;
 8002222:	f06f 0310 	mvn.w	r3, #16
 8002226:	e024      	b.n	8002272 <MPU_begin+0x1f6>
  }
  HAL_Delay(100); // long wait between AK8963 mode changes
 8002228:	2064      	movs	r0, #100	; 0x64
 800222a:	f001 f96b 	bl	8003504 <HAL_Delay>
  // set AK8963 to 16 bit resolution, 100 Hz update rate
  if(writeAK8963Register(AK8963_CNTL1,AK8963_CNT_MEAS2) < 0){
 800222e:	230a      	movs	r3, #10
 8002230:	2216      	movs	r2, #22
 8002232:	4611      	mov	r1, r2
 8002234:	4618      	mov	r0, r3
 8002236:	f000 f8e1 	bl	80023fc <writeAK8963Register>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	da02      	bge.n	8002246 <MPU_begin+0x1ca>
    return -18;
 8002240:	f06f 0311 	mvn.w	r3, #17
 8002244:	e015      	b.n	8002272 <MPU_begin+0x1f6>
  }
  HAL_Delay(100); // long wait between AK8963 mode changes
 8002246:	2064      	movs	r0, #100	; 0x64
 8002248:	f001 f95c 	bl	8003504 <HAL_Delay>
  // select clock source to gyro
  if(writeRegister(PWR_MGMNT_1,CLOCK_SEL_PLL) < 0){
 800224c:	236b      	movs	r3, #107	; 0x6b
 800224e:	2201      	movs	r2, #1
 8002250:	4611      	mov	r1, r2
 8002252:	4618      	mov	r0, r3
 8002254:	f000 f812 	bl	800227c <writeRegister>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	da02      	bge.n	8002264 <MPU_begin+0x1e8>
    return -19;
 800225e:	f06f 0312 	mvn.w	r3, #18
 8002262:	e006      	b.n	8002272 <MPU_begin+0x1f6>
  }
  // instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
  readAK8963Registers(AK8963_HXL,7,_buffer);
 8002264:	2303      	movs	r3, #3
 8002266:	4a04      	ldr	r2, [pc, #16]	; (8002278 <MPU_begin+0x1fc>)
 8002268:	2107      	movs	r1, #7
 800226a:	4618      	mov	r0, r3
 800226c:	f000 f91c 	bl	80024a8 <readAK8963Registers>

  // successful init, return 1
  return 1;
 8002270:	2301      	movs	r3, #1
}
 8002272:	4618      	mov	r0, r3
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	20000284 	.word	0x20000284

0800227c <writeRegister>:
}


/* writes a byte to MPU9250 register given a register address and data */
int writeRegister(uint8_t subAddress, uint8_t data)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	4603      	mov	r3, r0
 8002284:	460a      	mov	r2, r1
 8002286:	71fb      	strb	r3, [r7, #7]
 8002288:	4613      	mov	r3, r2
 800228a:	71bb      	strb	r3, [r7, #6]
  /* write data to device */
	HAL_StatusTypeDef status = HAL_OK;
 800228c:	2300      	movs	r3, #0
 800228e:	73fb      	strb	r3, [r7, #15]
	MPU_SPI_Write(&data, subAddress, 1);
 8002290:	79f9      	ldrb	r1, [r7, #7]
 8002292:	1dbb      	adds	r3, r7, #6
 8002294:	2201      	movs	r2, #1
 8002296:	4618      	mov	r0, r3
 8002298:	f000 f852 	bl	8002340 <MPU_SPI_Write>
	HAL_Delay(10);
 800229c:	200a      	movs	r0, #10
 800229e:	f001 f931 	bl	8003504 <HAL_Delay>

  /* read back the register */
  readRegisters(subAddress,1,_buffer);
 80022a2:	79fb      	ldrb	r3, [r7, #7]
 80022a4:	4a08      	ldr	r2, [pc, #32]	; (80022c8 <writeRegister+0x4c>)
 80022a6:	2101      	movs	r1, #1
 80022a8:	4618      	mov	r0, r3
 80022aa:	f000 f80f 	bl	80022cc <readRegisters>
  /* check the read back register against the written register */
  if(_buffer[0] == data) {
 80022ae:	4b06      	ldr	r3, [pc, #24]	; (80022c8 <writeRegister+0x4c>)
 80022b0:	781a      	ldrb	r2, [r3, #0]
 80022b2:	79bb      	ldrb	r3, [r7, #6]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d101      	bne.n	80022bc <writeRegister+0x40>
    return 1;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e001      	b.n	80022c0 <writeRegister+0x44>
  }
  else{
    return -1;
 80022bc:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	20000284 	.word	0x20000284

080022cc <readRegisters>:

/* reads registers from MPU9250 given a starting register address, number of bytes, and a pointer to store data */
//add uint16_t count instead of uint8_t count
int readRegisters(uint8_t subAddress, uint8_t count, uint8_t* dest){
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	4603      	mov	r3, r0
 80022d4:	603a      	str	r2, [r7, #0]
 80022d6:	71fb      	strb	r3, [r7, #7]
 80022d8:	460b      	mov	r3, r1
 80022da:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef status = HAL_OK;
 80022dc:	2300      	movs	r3, #0
 80022de:	73fb      	strb	r3, [r7, #15]
	MPU_SPI_Read(dest, subAddress, count);
 80022e0:	79fb      	ldrb	r3, [r7, #7]
 80022e2:	79ba      	ldrb	r2, [r7, #6]
 80022e4:	4619      	mov	r1, r3
 80022e6:	6838      	ldr	r0, [r7, #0]
 80022e8:	f000 f856 	bl	8002398 <MPU_SPI_Read>
	if (status == HAL_OK) {
 80022ec:	7bfb      	ldrb	r3, [r7, #15]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <readRegisters+0x2a>
      return 1;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e001      	b.n	80022fa <readRegisters+0x2e>
    } else {
      return -1;
 80022f6:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
	...

08002304 <SPIx_WriteRead>:

uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af02      	add	r7, sp, #8
 800230a:	4603      	mov	r3, r0
 800230c:	71fb      	strb	r3, [r7, #7]
	uint8_t receivedbyte = 0;
 800230e:	2300      	movs	r3, #0
 8002310:	73fb      	strb	r3, [r7, #15]
	if(HAL_SPI_TransmitReceive(&hspi1,(uint8_t*) &Byte,(uint8_t*) &receivedbyte,1,0x1000)!=HAL_OK)
 8002312:	f107 020f 	add.w	r2, r7, #15
 8002316:	1df9      	adds	r1, r7, #7
 8002318:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800231c:	9300      	str	r3, [sp, #0]
 800231e:	2301      	movs	r3, #1
 8002320:	4806      	ldr	r0, [pc, #24]	; (800233c <SPIx_WriteRead+0x38>)
 8002322:	f002 f93d 	bl	80045a0 <HAL_SPI_TransmitReceive>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <SPIx_WriteRead+0x2c>
	{
		return -1;
 800232c:	23ff      	movs	r3, #255	; 0xff
 800232e:	e000      	b.n	8002332 <SPIx_WriteRead+0x2e>
	}
	else
	{
	}
	return receivedbyte;
 8002330:	7bfb      	ldrb	r3, [r7, #15]
}
 8002332:	4618      	mov	r0, r3
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	20000418 	.word	0x20000418

08002340 <MPU_SPI_Write>:
void MPU_SPI_Write (uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	460b      	mov	r3, r1
 800234a:	70fb      	strb	r3, [r7, #3]
 800234c:	4613      	mov	r3, r2
 800234e:	803b      	strh	r3, [r7, #0]
	CS_ON;
 8002350:	2200      	movs	r2, #0
 8002352:	2101      	movs	r1, #1
 8002354:	480f      	ldr	r0, [pc, #60]	; (8002394 <MPU_SPI_Write+0x54>)
 8002356:	f001 fc3b 	bl	8003bd0 <HAL_GPIO_WritePin>
	SPIx_WriteRead(WriteAddr);
 800235a:	78fb      	ldrb	r3, [r7, #3]
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff ffd1 	bl	8002304 <SPIx_WriteRead>
	while(NumByteToWrite>=0x01)
 8002362:	e00a      	b.n	800237a <MPU_SPI_Write+0x3a>
	{
		SPIx_WriteRead(*pBuffer);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff ffcb 	bl	8002304 <SPIx_WriteRead>
		NumByteToWrite--;
 800236e:	883b      	ldrh	r3, [r7, #0]
 8002370:	3b01      	subs	r3, #1
 8002372:	803b      	strh	r3, [r7, #0]
		pBuffer++;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3301      	adds	r3, #1
 8002378:	607b      	str	r3, [r7, #4]
	while(NumByteToWrite>=0x01)
 800237a:	883b      	ldrh	r3, [r7, #0]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d1f1      	bne.n	8002364 <MPU_SPI_Write+0x24>
	}
	CS_OFF;
 8002380:	2201      	movs	r2, #1
 8002382:	2101      	movs	r1, #1
 8002384:	4803      	ldr	r0, [pc, #12]	; (8002394 <MPU_SPI_Write+0x54>)
 8002386:	f001 fc23 	bl	8003bd0 <HAL_GPIO_WritePin>
}
 800238a:	bf00      	nop
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	40010c00 	.word	0x40010c00

08002398 <MPU_SPI_Read>:
void MPU_SPI_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	460b      	mov	r3, r1
 80023a2:	70fb      	strb	r3, [r7, #3]
 80023a4:	4613      	mov	r3, r2
 80023a6:	803b      	strh	r3, [r7, #0]
	ReadAddr |= (uint8_t)READWRITE_CMD;
 80023a8:	2280      	movs	r2, #128	; 0x80
 80023aa:	78fb      	ldrb	r3, [r7, #3]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	70fb      	strb	r3, [r7, #3]
	CS_ON;
 80023b0:	2200      	movs	r2, #0
 80023b2:	2101      	movs	r1, #1
 80023b4:	4810      	ldr	r0, [pc, #64]	; (80023f8 <MPU_SPI_Read+0x60>)
 80023b6:	f001 fc0b 	bl	8003bd0 <HAL_GPIO_WritePin>
	SPIx_WriteRead(ReadAddr);
 80023ba:	78fb      	ldrb	r3, [r7, #3]
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff ffa1 	bl	8002304 <SPIx_WriteRead>
	while(NumByteToRead != 0 )
 80023c2:	e00d      	b.n	80023e0 <MPU_SPI_Read+0x48>
	{
		*pBuffer=SPIx_WriteRead(DUMMY_BYTE);
 80023c4:	2300      	movs	r3, #0
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7ff ff9c 	bl	8002304 <SPIx_WriteRead>
 80023cc:	4603      	mov	r3, r0
 80023ce:	461a      	mov	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	701a      	strb	r2, [r3, #0]
		NumByteToRead--;
 80023d4:	883b      	ldrh	r3, [r7, #0]
 80023d6:	3b01      	subs	r3, #1
 80023d8:	803b      	strh	r3, [r7, #0]
		pBuffer++;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	3301      	adds	r3, #1
 80023de:	607b      	str	r3, [r7, #4]
	while(NumByteToRead != 0 )
 80023e0:	883b      	ldrh	r3, [r7, #0]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1ee      	bne.n	80023c4 <MPU_SPI_Read+0x2c>
	}
	CS_OFF;
 80023e6:	2201      	movs	r2, #1
 80023e8:	2101      	movs	r1, #1
 80023ea:	4803      	ldr	r0, [pc, #12]	; (80023f8 <MPU_SPI_Read+0x60>)
 80023ec:	f001 fbf0 	bl	8003bd0 <HAL_GPIO_WritePin>
}
 80023f0:	bf00      	nop
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40010c00 	.word	0x40010c00

080023fc <writeAK8963Register>:
//--------------------------------------


/* writes a register to the AK8963 given a register address and data */
int writeAK8963Register(uint8_t subAddress, uint8_t data){
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	4603      	mov	r3, r0
 8002404:	460a      	mov	r2, r1
 8002406:	71fb      	strb	r3, [r7, #7]
 8002408:	4613      	mov	r3, r2
 800240a:	71bb      	strb	r3, [r7, #6]
  // set slave 0 to the AK8963 and set for write
	if (writeRegister(I2C_SLV0_ADDR,AK8963_I2C_ADDR) < 0) {
 800240c:	2325      	movs	r3, #37	; 0x25
 800240e:	220c      	movs	r2, #12
 8002410:	4611      	mov	r1, r2
 8002412:	4618      	mov	r0, r3
 8002414:	f7ff ff32 	bl	800227c <writeRegister>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	da02      	bge.n	8002424 <writeAK8963Register+0x28>
    return -1;
 800241e:	f04f 33ff 	mov.w	r3, #4294967295
 8002422:	e03b      	b.n	800249c <writeAK8963Register+0xa0>
  }
  // set the register to the desired AK8963 sub address
	if (writeRegister(I2C_SLV0_REG,subAddress) < 0) {
 8002424:	2226      	movs	r2, #38	; 0x26
 8002426:	79fb      	ldrb	r3, [r7, #7]
 8002428:	4619      	mov	r1, r3
 800242a:	4610      	mov	r0, r2
 800242c:	f7ff ff26 	bl	800227c <writeRegister>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	da02      	bge.n	800243c <writeAK8963Register+0x40>
    return -2;
 8002436:	f06f 0301 	mvn.w	r3, #1
 800243a:	e02f      	b.n	800249c <writeAK8963Register+0xa0>
  }
  // store the data for write
	if (writeRegister(I2C_SLV0_DO,data) < 0) {
 800243c:	2263      	movs	r2, #99	; 0x63
 800243e:	79bb      	ldrb	r3, [r7, #6]
 8002440:	4619      	mov	r1, r3
 8002442:	4610      	mov	r0, r2
 8002444:	f7ff ff1a 	bl	800227c <writeRegister>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	da02      	bge.n	8002454 <writeAK8963Register+0x58>
    return -3;
 800244e:	f06f 0302 	mvn.w	r3, #2
 8002452:	e023      	b.n	800249c <writeAK8963Register+0xa0>
  }
  // enable I2C and send 1 byte
	if (writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | (uint8_t)1) < 0) {
 8002454:	2227      	movs	r2, #39	; 0x27
 8002456:	2380      	movs	r3, #128	; 0x80
 8002458:	f043 0301 	orr.w	r3, r3, #1
 800245c:	b2db      	uxtb	r3, r3
 800245e:	4619      	mov	r1, r3
 8002460:	4610      	mov	r0, r2
 8002462:	f7ff ff0b 	bl	800227c <writeRegister>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	da02      	bge.n	8002472 <writeAK8963Register+0x76>
    return -4;
 800246c:	f06f 0303 	mvn.w	r3, #3
 8002470:	e014      	b.n	800249c <writeAK8963Register+0xa0>
  }
	// read the register and confirm
	if (readAK8963Registers(subAddress,1,_buffer) < 0) {
 8002472:	79fb      	ldrb	r3, [r7, #7]
 8002474:	4a0b      	ldr	r2, [pc, #44]	; (80024a4 <writeAK8963Register+0xa8>)
 8002476:	2101      	movs	r1, #1
 8002478:	4618      	mov	r0, r3
 800247a:	f000 f815 	bl	80024a8 <readAK8963Registers>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	da02      	bge.n	800248a <writeAK8963Register+0x8e>
    return -5;
 8002484:	f06f 0304 	mvn.w	r3, #4
 8002488:	e008      	b.n	800249c <writeAK8963Register+0xa0>
  }
	if(_buffer[0] == data) {
 800248a:	4b06      	ldr	r3, [pc, #24]	; (80024a4 <writeAK8963Register+0xa8>)
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	79ba      	ldrb	r2, [r7, #6]
 8002490:	429a      	cmp	r2, r3
 8002492:	d101      	bne.n	8002498 <writeAK8963Register+0x9c>
  	return 1;
 8002494:	2301      	movs	r3, #1
 8002496:	e001      	b.n	800249c <writeAK8963Register+0xa0>
  } else{

  	return -6;
 8002498:	f06f 0305 	mvn.w	r3, #5
  }
}
 800249c:	4618      	mov	r0, r3
 800249e:	3708      	adds	r7, #8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	20000284 	.word	0x20000284

080024a8 <readAK8963Registers>:

/* reads registers from the AK8963 */
int readAK8963Registers(uint8_t subAddress, uint8_t count, uint8_t* dest){
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	4603      	mov	r3, r0
 80024b0:	603a      	str	r2, [r7, #0]
 80024b2:	71fb      	strb	r3, [r7, #7]
 80024b4:	460b      	mov	r3, r1
 80024b6:	71bb      	strb	r3, [r7, #6]
  // set slave 0 to the AK8963 and set for read
	if (writeRegister(I2C_SLV0_ADDR,AK8963_I2C_ADDR | I2C_READ_FLAG) < 0) {
 80024b8:	2025      	movs	r0, #37	; 0x25
 80024ba:	220c      	movs	r2, #12
 80024bc:	2380      	movs	r3, #128	; 0x80
 80024be:	4313      	orrs	r3, r2
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	4619      	mov	r1, r3
 80024c4:	f7ff feda 	bl	800227c <writeRegister>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	da02      	bge.n	80024d4 <readAK8963Registers+0x2c>
    return -1;
 80024ce:	f04f 33ff 	mov.w	r3, #4294967295
 80024d2:	e040      	b.n	8002556 <readAK8963Registers+0xae>
  }
  // set the register to the desired AK8963 sub address
	if (writeRegister(I2C_SLV0_REG,subAddress) < 0) {
 80024d4:	2226      	movs	r2, #38	; 0x26
 80024d6:	79fb      	ldrb	r3, [r7, #7]
 80024d8:	4619      	mov	r1, r3
 80024da:	4610      	mov	r0, r2
 80024dc:	f7ff fece 	bl	800227c <writeRegister>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	da02      	bge.n	80024ec <readAK8963Registers+0x44>
    return -2;
 80024e6:	f06f 0301 	mvn.w	r3, #1
 80024ea:	e034      	b.n	8002556 <readAK8963Registers+0xae>
  }
  // enable I2C and request the bytes
	if (writeRegister(I2C_SLV0_CTRL,I2C_SLV0_EN | count) < 0) {
 80024ec:	2027      	movs	r0, #39	; 0x27
 80024ee:	2280      	movs	r2, #128	; 0x80
 80024f0:	79bb      	ldrb	r3, [r7, #6]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	4619      	mov	r1, r3
 80024f8:	f7ff fec0 	bl	800227c <writeRegister>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	da02      	bge.n	8002508 <readAK8963Registers+0x60>
    return -3;
 8002502:	f06f 0302 	mvn.w	r3, #2
 8002506:	e026      	b.n	8002556 <readAK8963Registers+0xae>
  }
	HAL_Delay(1); // takes some time for these registers to fill
 8002508:	2001      	movs	r0, #1
 800250a:	f000 fffb 	bl	8003504 <HAL_Delay>
  // read the bytes off the MPU9250 EXT_SENS_DATA registers
	_status = readRegisters(EXT_SENS_DATA_00,count,dest);
 800250e:	2049      	movs	r0, #73	; 0x49
 8002510:	79bb      	ldrb	r3, [r7, #6]
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	4619      	mov	r1, r3
 8002516:	f7ff fed9 	bl	80022cc <readRegisters>
 800251a:	4603      	mov	r3, r0
 800251c:	4a10      	ldr	r2, [pc, #64]	; (8002560 <readAK8963Registers+0xb8>)
 800251e:	6013      	str	r3, [r2, #0]
	int z=0;
 8002520:	2300      	movs	r3, #0
 8002522:	60bb      	str	r3, [r7, #8]
	for(int i=1; i<8; i++)
 8002524:	2301      	movs	r3, #1
 8002526:	60fb      	str	r3, [r7, #12]
 8002528:	e010      	b.n	800254c <readAK8963Registers+0xa4>
	{
	BLYATb[i] = dest[i];
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	4413      	add	r3, r2
 8002530:	7819      	ldrb	r1, [r3, #0]
 8002532:	4a0c      	ldr	r2, [pc, #48]	; (8002564 <readAK8963Registers+0xbc>)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	4413      	add	r3, r2
 8002538:	460a      	mov	r2, r1
 800253a:	701a      	strb	r2, [r3, #0]
	z = BLYATb[i];
 800253c:	4a09      	ldr	r2, [pc, #36]	; (8002564 <readAK8963Registers+0xbc>)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	4413      	add	r3, r2
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	60bb      	str	r3, [r7, #8]
	for(int i=1; i<8; i++)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	3301      	adds	r3, #1
 800254a:	60fb      	str	r3, [r7, #12]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2b07      	cmp	r3, #7
 8002550:	ddeb      	ble.n	800252a <readAK8963Registers+0x82>
	}

  return _status;
 8002552:	4b03      	ldr	r3, [pc, #12]	; (8002560 <readAK8963Registers+0xb8>)
 8002554:	681b      	ldr	r3, [r3, #0]
}
 8002556:	4618      	mov	r0, r3
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	20000280 	.word	0x20000280
 8002564:	2000029c 	.word	0x2000029c

08002568 <setSrd>:
  }
 return 1;
}

/* sets the sample rate divider to values other than default */
int setSrd(uint8_t srd) {
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	4603      	mov	r3, r0
 8002570:	71fb      	strb	r3, [r7, #7]

  /* setting the sample rate divider to 19 to facilitate setting up magnetometer */
  if(writeRegister(SMPDIV,19) < 0){ // setting the sample rate divider
 8002572:	2319      	movs	r3, #25
 8002574:	2113      	movs	r1, #19
 8002576:	4618      	mov	r0, r3
 8002578:	f7ff fe80 	bl	800227c <writeRegister>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	da02      	bge.n	8002588 <setSrd+0x20>
    return -1;
 8002582:	f04f 33ff 	mov.w	r3, #4294967295
 8002586:	e04c      	b.n	8002622 <setSrd+0xba>
  }
  if(srd > 9){
 8002588:	79fb      	ldrb	r3, [r7, #7]
 800258a:	2b09      	cmp	r3, #9
 800258c:	d924      	bls.n	80025d8 <setSrd+0x70>
    // set AK8963 to Power Down
    if(writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN) < 0){
 800258e:	230a      	movs	r3, #10
 8002590:	2200      	movs	r2, #0
 8002592:	4611      	mov	r1, r2
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff ff31 	bl	80023fc <writeAK8963Register>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	da02      	bge.n	80025a6 <setSrd+0x3e>
      return -2;
 80025a0:	f06f 0301 	mvn.w	r3, #1
 80025a4:	e03d      	b.n	8002622 <setSrd+0xba>
    }
    HAL_Delay(100); // long wait between AK8963 mode changes
 80025a6:	2064      	movs	r0, #100	; 0x64
 80025a8:	f000 ffac 	bl	8003504 <HAL_Delay>
    // set AK8963 to 16 bit resolution, 8 Hz update rate
    if(writeAK8963Register(AK8963_CNTL1,AK8963_CNT_MEAS1) < 0){
 80025ac:	230a      	movs	r3, #10
 80025ae:	2212      	movs	r2, #18
 80025b0:	4611      	mov	r1, r2
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7ff ff22 	bl	80023fc <writeAK8963Register>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	da02      	bge.n	80025c4 <setSrd+0x5c>
      return -3;
 80025be:	f06f 0302 	mvn.w	r3, #2
 80025c2:	e02e      	b.n	8002622 <setSrd+0xba>
    }
    HAL_Delay(100); // long wait between AK8963 mode changes
 80025c4:	2064      	movs	r0, #100	; 0x64
 80025c6:	f000 ff9d 	bl	8003504 <HAL_Delay>
    // instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
    readAK8963Registers(AK8963_HXL,7,_buffer);
 80025ca:	2303      	movs	r3, #3
 80025cc:	4a17      	ldr	r2, [pc, #92]	; (800262c <setSrd+0xc4>)
 80025ce:	2107      	movs	r1, #7
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff ff69 	bl	80024a8 <readAK8963Registers>
 80025d6:	e023      	b.n	8002620 <setSrd+0xb8>
  } else {
    // set AK8963 to Power Down
    if(writeAK8963Register(AK8963_CNTL1,AK8963_PWR_DOWN) < 0){
 80025d8:	230a      	movs	r3, #10
 80025da:	2200      	movs	r2, #0
 80025dc:	4611      	mov	r1, r2
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff ff0c 	bl	80023fc <writeAK8963Register>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	da02      	bge.n	80025f0 <setSrd+0x88>
      return -2;
 80025ea:	f06f 0301 	mvn.w	r3, #1
 80025ee:	e018      	b.n	8002622 <setSrd+0xba>
    }
    HAL_Delay(100); // long wait between AK8963 mode changes
 80025f0:	2064      	movs	r0, #100	; 0x64
 80025f2:	f000 ff87 	bl	8003504 <HAL_Delay>
    // set AK8963 to 16 bit resolution, 100 Hz update rate
    if(writeAK8963Register(AK8963_CNTL1,AK8963_CNT_MEAS2) < 0){
 80025f6:	230a      	movs	r3, #10
 80025f8:	2216      	movs	r2, #22
 80025fa:	4611      	mov	r1, r2
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7ff fefd 	bl	80023fc <writeAK8963Register>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	da02      	bge.n	800260e <setSrd+0xa6>
      return -3;
 8002608:	f06f 0302 	mvn.w	r3, #2
 800260c:	e009      	b.n	8002622 <setSrd+0xba>
    }
    HAL_Delay(100); // long wait between AK8963 mode changes
 800260e:	2064      	movs	r0, #100	; 0x64
 8002610:	f000 ff78 	bl	8003504 <HAL_Delay>
    // instruct the MPU9250 to get 7 bytes of data from the AK8963 at the sample rate
    readAK8963Registers(AK8963_HXL,7,_buffer);
 8002614:	2303      	movs	r3, #3
 8002616:	4a05      	ldr	r2, [pc, #20]	; (800262c <setSrd+0xc4>)
 8002618:	2107      	movs	r1, #7
 800261a:	4618      	mov	r0, r3
 800261c:	f7ff ff44 	bl	80024a8 <readAK8963Registers>
  }
  /* setting the sample rate divider */
  //if(writeRegister(SMPDIV,srd) < 0){ // setting the sample rate divider
   // return -4;
  //}
  return 1;
 8002620:	2301      	movs	r3, #1
}
 8002622:	4618      	mov	r0, r3
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	20000284 	.word	0x20000284

08002630 <readSensor3>:
  _hycounts = (((int16_t)_buffer[17]) << 8) | _buffer[16];
  _hzcounts = (((int16_t)_buffer[19]) << 8) | _buffer[18];
  return 1;
}

int readSensor3(int16_t* AccData, int16_t* MagData, int16_t* GyroData) {
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
  // grab the data from the MPU9250
  if (readRegisters(ACCEL_OUT, 21, _buffer) < 0) {
 800263c:	233b      	movs	r3, #59	; 0x3b
 800263e:	4a3c      	ldr	r2, [pc, #240]	; (8002730 <readSensor3+0x100>)
 8002640:	2115      	movs	r1, #21
 8002642:	4618      	mov	r0, r3
 8002644:	f7ff fe42 	bl	80022cc <readRegisters>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	da02      	bge.n	8002654 <readSensor3+0x24>
    return -1;
 800264e:	f04f 33ff 	mov.w	r3, #4294967295
 8002652:	e069      	b.n	8002728 <readSensor3+0xf8>
  }
  // combine into 16 bit values
  AccData[0] = (((int16_t)_buffer[0]) << 8) | _buffer[1];
 8002654:	4b36      	ldr	r3, [pc, #216]	; (8002730 <readSensor3+0x100>)
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	021b      	lsls	r3, r3, #8
 800265a:	b21a      	sxth	r2, r3
 800265c:	4b34      	ldr	r3, [pc, #208]	; (8002730 <readSensor3+0x100>)
 800265e:	785b      	ldrb	r3, [r3, #1]
 8002660:	b21b      	sxth	r3, r3
 8002662:	4313      	orrs	r3, r2
 8002664:	b21a      	sxth	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	801a      	strh	r2, [r3, #0]
  AccData[1] = (((int16_t)_buffer[2]) << 8) | _buffer[3];
 800266a:	4b31      	ldr	r3, [pc, #196]	; (8002730 <readSensor3+0x100>)
 800266c:	789b      	ldrb	r3, [r3, #2]
 800266e:	021b      	lsls	r3, r3, #8
 8002670:	b219      	sxth	r1, r3
 8002672:	4b2f      	ldr	r3, [pc, #188]	; (8002730 <readSensor3+0x100>)
 8002674:	78db      	ldrb	r3, [r3, #3]
 8002676:	b21a      	sxth	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	3302      	adds	r3, #2
 800267c:	430a      	orrs	r2, r1
 800267e:	b212      	sxth	r2, r2
 8002680:	801a      	strh	r2, [r3, #0]
  AccData[2] = (((int16_t)_buffer[4]) << 8) | _buffer[5];
 8002682:	4b2b      	ldr	r3, [pc, #172]	; (8002730 <readSensor3+0x100>)
 8002684:	791b      	ldrb	r3, [r3, #4]
 8002686:	021b      	lsls	r3, r3, #8
 8002688:	b219      	sxth	r1, r3
 800268a:	4b29      	ldr	r3, [pc, #164]	; (8002730 <readSensor3+0x100>)
 800268c:	795b      	ldrb	r3, [r3, #5]
 800268e:	b21a      	sxth	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	3304      	adds	r3, #4
 8002694:	430a      	orrs	r2, r1
 8002696:	b212      	sxth	r2, r2
 8002698:	801a      	strh	r2, [r3, #0]
  GyroData[0] = (((int16_t)_buffer[8]) << 8) | _buffer[9];
 800269a:	4b25      	ldr	r3, [pc, #148]	; (8002730 <readSensor3+0x100>)
 800269c:	7a1b      	ldrb	r3, [r3, #8]
 800269e:	021b      	lsls	r3, r3, #8
 80026a0:	b21a      	sxth	r2, r3
 80026a2:	4b23      	ldr	r3, [pc, #140]	; (8002730 <readSensor3+0x100>)
 80026a4:	7a5b      	ldrb	r3, [r3, #9]
 80026a6:	b21b      	sxth	r3, r3
 80026a8:	4313      	orrs	r3, r2
 80026aa:	b21a      	sxth	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	801a      	strh	r2, [r3, #0]
  GyroData[1] = (((int16_t)_buffer[10]) << 8) | _buffer[11];
 80026b0:	4b1f      	ldr	r3, [pc, #124]	; (8002730 <readSensor3+0x100>)
 80026b2:	7a9b      	ldrb	r3, [r3, #10]
 80026b4:	021b      	lsls	r3, r3, #8
 80026b6:	b219      	sxth	r1, r3
 80026b8:	4b1d      	ldr	r3, [pc, #116]	; (8002730 <readSensor3+0x100>)
 80026ba:	7adb      	ldrb	r3, [r3, #11]
 80026bc:	b21a      	sxth	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	3302      	adds	r3, #2
 80026c2:	430a      	orrs	r2, r1
 80026c4:	b212      	sxth	r2, r2
 80026c6:	801a      	strh	r2, [r3, #0]
  GyroData[2] = (((int16_t)_buffer[12]) << 8) | _buffer[13];
 80026c8:	4b19      	ldr	r3, [pc, #100]	; (8002730 <readSensor3+0x100>)
 80026ca:	7b1b      	ldrb	r3, [r3, #12]
 80026cc:	021b      	lsls	r3, r3, #8
 80026ce:	b219      	sxth	r1, r3
 80026d0:	4b17      	ldr	r3, [pc, #92]	; (8002730 <readSensor3+0x100>)
 80026d2:	7b5b      	ldrb	r3, [r3, #13]
 80026d4:	b21a      	sxth	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	3304      	adds	r3, #4
 80026da:	430a      	orrs	r2, r1
 80026dc:	b212      	sxth	r2, r2
 80026de:	801a      	strh	r2, [r3, #0]
  MagData[0] = (((int16_t)_buffer[15]) << 8) | _buffer[14];
 80026e0:	4b13      	ldr	r3, [pc, #76]	; (8002730 <readSensor3+0x100>)
 80026e2:	7bdb      	ldrb	r3, [r3, #15]
 80026e4:	021b      	lsls	r3, r3, #8
 80026e6:	b21a      	sxth	r2, r3
 80026e8:	4b11      	ldr	r3, [pc, #68]	; (8002730 <readSensor3+0x100>)
 80026ea:	7b9b      	ldrb	r3, [r3, #14]
 80026ec:	b21b      	sxth	r3, r3
 80026ee:	4313      	orrs	r3, r2
 80026f0:	b21a      	sxth	r2, r3
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	801a      	strh	r2, [r3, #0]
  MagData[1] = (((int16_t)_buffer[17]) << 8) | _buffer[16];
 80026f6:	4b0e      	ldr	r3, [pc, #56]	; (8002730 <readSensor3+0x100>)
 80026f8:	7c5b      	ldrb	r3, [r3, #17]
 80026fa:	021b      	lsls	r3, r3, #8
 80026fc:	b219      	sxth	r1, r3
 80026fe:	4b0c      	ldr	r3, [pc, #48]	; (8002730 <readSensor3+0x100>)
 8002700:	7c1b      	ldrb	r3, [r3, #16]
 8002702:	b21a      	sxth	r2, r3
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	3302      	adds	r3, #2
 8002708:	430a      	orrs	r2, r1
 800270a:	b212      	sxth	r2, r2
 800270c:	801a      	strh	r2, [r3, #0]
  MagData[2] = (((int16_t)_buffer[19]) << 8) | _buffer[18];
 800270e:	4b08      	ldr	r3, [pc, #32]	; (8002730 <readSensor3+0x100>)
 8002710:	7cdb      	ldrb	r3, [r3, #19]
 8002712:	021b      	lsls	r3, r3, #8
 8002714:	b219      	sxth	r1, r3
 8002716:	4b06      	ldr	r3, [pc, #24]	; (8002730 <readSensor3+0x100>)
 8002718:	7c9b      	ldrb	r3, [r3, #18]
 800271a:	b21a      	sxth	r2, r3
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	3304      	adds	r3, #4
 8002720:	430a      	orrs	r2, r1
 8002722:	b212      	sxth	r2, r2
 8002724:	801a      	strh	r2, [r3, #0]
  return 1;
 8002726:	2301      	movs	r3, #1
}
 8002728:	4618      	mov	r0, r3
 800272a:	3710      	adds	r7, #16
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	20000284 	.word	0x20000284

08002734 <V3fTransform>:
	MRes[2][1]=M1[2][0]*M2[0][1] + M1[2][1]*M2[1][1] + M1[2][2]*M2[2][1];
	MRes[2][2]=M1[2][0]*M2[0][2] + M1[2][1]*M2[1][2] + M1[2][2]*M2[2][2];
}

void V3fTransform(Vector3f V, Matrix3f M, Vector3f VRes)
{
 8002734:	b5b0      	push	{r4, r5, r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
	VRes[0]=V[0]*M[0][0] + V[1]*M[1][0] + V[2]*M[2][0];
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4619      	mov	r1, r3
 800274a:	4610      	mov	r0, r2
 800274c:	f7fe fafa 	bl	8000d44 <__aeabi_fmul>
 8002750:	4603      	mov	r3, r0
 8002752:	461c      	mov	r4, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	3304      	adds	r3, #4
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	330c      	adds	r3, #12
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4619      	mov	r1, r3
 8002762:	4610      	mov	r0, r2
 8002764:	f7fe faee 	bl	8000d44 <__aeabi_fmul>
 8002768:	4603      	mov	r3, r0
 800276a:	4619      	mov	r1, r3
 800276c:	4620      	mov	r0, r4
 800276e:	f7fe f9e1 	bl	8000b34 <__addsf3>
 8002772:	4603      	mov	r3, r0
 8002774:	461c      	mov	r4, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	3308      	adds	r3, #8
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	3318      	adds	r3, #24
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4619      	mov	r1, r3
 8002784:	4610      	mov	r0, r2
 8002786:	f7fe fadd 	bl	8000d44 <__aeabi_fmul>
 800278a:	4603      	mov	r3, r0
 800278c:	4619      	mov	r1, r3
 800278e:	4620      	mov	r0, r4
 8002790:	f7fe f9d0 	bl	8000b34 <__addsf3>
 8002794:	4603      	mov	r3, r0
 8002796:	461a      	mov	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	601a      	str	r2, [r3, #0]
	VRes[1]=V[0]*M[0][1] + V[1]*M[1][1] + V[2]*M[2][1];
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	4619      	mov	r1, r3
 80027a6:	4610      	mov	r0, r2
 80027a8:	f7fe facc 	bl	8000d44 <__aeabi_fmul>
 80027ac:	4603      	mov	r3, r0
 80027ae:	461c      	mov	r4, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	3304      	adds	r3, #4
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	330c      	adds	r3, #12
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	4619      	mov	r1, r3
 80027be:	4610      	mov	r0, r2
 80027c0:	f7fe fac0 	bl	8000d44 <__aeabi_fmul>
 80027c4:	4603      	mov	r3, r0
 80027c6:	4619      	mov	r1, r3
 80027c8:	4620      	mov	r0, r4
 80027ca:	f7fe f9b3 	bl	8000b34 <__addsf3>
 80027ce:	4603      	mov	r3, r0
 80027d0:	461d      	mov	r5, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	3308      	adds	r3, #8
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	3318      	adds	r3, #24
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	4619      	mov	r1, r3
 80027e0:	4610      	mov	r0, r2
 80027e2:	f7fe faaf 	bl	8000d44 <__aeabi_fmul>
 80027e6:	4603      	mov	r3, r0
 80027e8:	461a      	mov	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	1d1c      	adds	r4, r3, #4
 80027ee:	4611      	mov	r1, r2
 80027f0:	4628      	mov	r0, r5
 80027f2:	f7fe f99f 	bl	8000b34 <__addsf3>
 80027f6:	4603      	mov	r3, r0
 80027f8:	6023      	str	r3, [r4, #0]
	VRes[2]=V[0]*M[0][2] + V[1]*M[1][2] + V[2]*M[2][2];
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	4619      	mov	r1, r3
 8002804:	4610      	mov	r0, r2
 8002806:	f7fe fa9d 	bl	8000d44 <__aeabi_fmul>
 800280a:	4603      	mov	r3, r0
 800280c:	461c      	mov	r4, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	3304      	adds	r3, #4
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	330c      	adds	r3, #12
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	4619      	mov	r1, r3
 800281c:	4610      	mov	r0, r2
 800281e:	f7fe fa91 	bl	8000d44 <__aeabi_fmul>
 8002822:	4603      	mov	r3, r0
 8002824:	4619      	mov	r1, r3
 8002826:	4620      	mov	r0, r4
 8002828:	f7fe f984 	bl	8000b34 <__addsf3>
 800282c:	4603      	mov	r3, r0
 800282e:	461d      	mov	r5, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	3308      	adds	r3, #8
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	3318      	adds	r3, #24
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	4619      	mov	r1, r3
 800283e:	4610      	mov	r0, r2
 8002840:	f7fe fa80 	bl	8000d44 <__aeabi_fmul>
 8002844:	4603      	mov	r3, r0
 8002846:	461a      	mov	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f103 0408 	add.w	r4, r3, #8
 800284e:	4611      	mov	r1, r2
 8002850:	4628      	mov	r0, r5
 8002852:	f7fe f96f 	bl	8000b34 <__addsf3>
 8002856:	4603      	mov	r3, r0
 8002858:	6023      	str	r3, [r4, #0]
}
 800285a:	bf00      	nop
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bdb0      	pop	{r4, r5, r7, pc}

08002862 <M3fDupe>:
	MInv[2][2]=(M1[0][0]*M1[1][1]-M1[0][1]*M1[1][0])*def;
		return 1;
}

void M3fDupe(Matrix3f M1, Matrix3f MRes)
{
 8002862:	b480      	push	{r7}
 8002864:	b083      	sub	sp, #12
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
 800286a:	6039      	str	r1, [r7, #0]
	MRes[0][0]=M1[0][0];
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	601a      	str	r2, [r3, #0]
	MRes[0][1]=M1[0][1];
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685a      	ldr	r2, [r3, #4]
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	605a      	str	r2, [r3, #4]
	MRes[0][2]=M1[0][2];
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689a      	ldr	r2, [r3, #8]
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	609a      	str	r2, [r3, #8]

	MRes[1][0]=M1[1][0];
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f103 020c 	add.w	r2, r3, #12
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	330c      	adds	r3, #12
 800288e:	6812      	ldr	r2, [r2, #0]
 8002890:	601a      	str	r2, [r3, #0]
	MRes[1][1]=M1[1][1];
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f103 020c 	add.w	r2, r3, #12
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	330c      	adds	r3, #12
 800289c:	6852      	ldr	r2, [r2, #4]
 800289e:	605a      	str	r2, [r3, #4]
	MRes[1][2]=M1[1][2];
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f103 020c 	add.w	r2, r3, #12
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	330c      	adds	r3, #12
 80028aa:	6892      	ldr	r2, [r2, #8]
 80028ac:	609a      	str	r2, [r3, #8]

	MRes[2][0]=M1[2][0];
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f103 0218 	add.w	r2, r3, #24
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	3318      	adds	r3, #24
 80028b8:	6812      	ldr	r2, [r2, #0]
 80028ba:	601a      	str	r2, [r3, #0]
	MRes[2][1]=M1[2][1];
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f103 0218 	add.w	r2, r3, #24
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	3318      	adds	r3, #24
 80028c6:	6852      	ldr	r2, [r2, #4]
 80028c8:	605a      	str	r2, [r3, #4]
	MRes[2][2]=M1[2][2];
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f103 0218 	add.w	r2, r3, #24
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	3318      	adds	r3, #24
 80028d4:	6892      	ldr	r2, [r2, #8]
 80028d6:	609a      	str	r2, [r3, #8]
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	bc80      	pop	{r7}
 80028e0:	4770      	bx	lr
	...

080028e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b0b4      	sub	sp, #208	; 0xd0
 80028e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028ea:	f000 fda9 	bl	8003440 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028ee:	f000 f8dd 	bl	8002aac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80028f2:	f7ff fb19 	bl	8001f28 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80028f6:	f000 fcff 	bl	80032f8 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80028fa:	f000 facd 	bl	8002e98 <MX_SPI1_Init>
  MX_TIM1_Init();
 80028fe:	f000 fc85 	bl	800320c <MX_TIM1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8002902:	f000 f918 	bl	8002b36 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  int st;

  	MagShift[0] = 41.616649f;
 8002906:	4b4b      	ldr	r3, [pc, #300]	; (8002a34 <main+0x150>)
 8002908:	4a4b      	ldr	r2, [pc, #300]	; (8002a38 <main+0x154>)
 800290a:	601a      	str	r2, [r3, #0]
  	MagShift[1] = 39.388807f;
 800290c:	4b49      	ldr	r3, [pc, #292]	; (8002a34 <main+0x150>)
 800290e:	4a4b      	ldr	r2, [pc, #300]	; (8002a3c <main+0x158>)
 8002910:	605a      	str	r2, [r3, #4]
  	MagShift[2] = -164.968190f;
 8002912:	4b48      	ldr	r3, [pc, #288]	; (8002a34 <main+0x150>)
 8002914:	4a4a      	ldr	r2, [pc, #296]	; (8002a40 <main+0x15c>)
 8002916:	609a      	str	r2, [r3, #8]

  	MagCalibr[0][0] = 1.008692f;
 8002918:	4b4a      	ldr	r3, [pc, #296]	; (8002a44 <main+0x160>)
 800291a:	4a4b      	ldr	r2, [pc, #300]	; (8002a48 <main+0x164>)
 800291c:	601a      	str	r2, [r3, #0]
  	MagCalibr[0][1] = 0.009086f;
 800291e:	4b49      	ldr	r3, [pc, #292]	; (8002a44 <main+0x160>)
 8002920:	4a4a      	ldr	r2, [pc, #296]	; (8002a4c <main+0x168>)
 8002922:	605a      	str	r2, [r3, #4]
  	MagCalibr[0][2] = -0.002774f;
 8002924:	4b47      	ldr	r3, [pc, #284]	; (8002a44 <main+0x160>)
 8002926:	4a4a      	ldr	r2, [pc, #296]	; (8002a50 <main+0x16c>)
 8002928:	609a      	str	r2, [r3, #8]

  	MagCalibr[1][0] = 0.009086f;
 800292a:	4b46      	ldr	r3, [pc, #280]	; (8002a44 <main+0x160>)
 800292c:	4a47      	ldr	r2, [pc, #284]	; (8002a4c <main+0x168>)
 800292e:	60da      	str	r2, [r3, #12]
  	MagCalibr[1][1] = 1.055844f;
 8002930:	4b44      	ldr	r3, [pc, #272]	; (8002a44 <main+0x160>)
 8002932:	4a48      	ldr	r2, [pc, #288]	; (8002a54 <main+0x170>)
 8002934:	611a      	str	r2, [r3, #16]
  	MagCalibr[1][2] = 0.017625f;
 8002936:	4b43      	ldr	r3, [pc, #268]	; (8002a44 <main+0x160>)
 8002938:	4a47      	ldr	r2, [pc, #284]	; (8002a58 <main+0x174>)
 800293a:	615a      	str	r2, [r3, #20]

  	MagCalibr[2][0] = -0.002774f;
 800293c:	4b41      	ldr	r3, [pc, #260]	; (8002a44 <main+0x160>)
 800293e:	4a44      	ldr	r2, [pc, #272]	; (8002a50 <main+0x16c>)
 8002940:	619a      	str	r2, [r3, #24]
  	MagCalibr[2][1] = 0.017625f;
 8002942:	4b40      	ldr	r3, [pc, #256]	; (8002a44 <main+0x160>)
 8002944:	4a44      	ldr	r2, [pc, #272]	; (8002a58 <main+0x174>)
 8002946:	61da      	str	r2, [r3, #28]
  	MagCalibr[2][2] = 0.998143f;
 8002948:	4b3e      	ldr	r3, [pc, #248]	; (8002a44 <main+0x160>)
 800294a:	4a44      	ldr	r2, [pc, #272]	; (8002a5c <main+0x178>)
 800294c:	621a      	str	r2, [r3, #32]

	AccShift[0]=18.204330f;
 800294e:	4b44      	ldr	r3, [pc, #272]	; (8002a60 <main+0x17c>)
 8002950:	4a44      	ldr	r2, [pc, #272]	; (8002a64 <main+0x180>)
 8002952:	601a      	str	r2, [r3, #0]
	AccShift[1]=1.946967f;
 8002954:	4b42      	ldr	r3, [pc, #264]	; (8002a60 <main+0x17c>)
 8002956:	4a44      	ldr	r2, [pc, #272]	; (8002a68 <main+0x184>)
 8002958:	605a      	str	r2, [r3, #4]
	AccShift[2]=25.956847f;
 800295a:	4b41      	ldr	r3, [pc, #260]	; (8002a60 <main+0x17c>)
 800295c:	4a43      	ldr	r2, [pc, #268]	; (8002a6c <main+0x188>)
 800295e:	609a      	str	r2, [r3, #8]


	AccCalibr[0][0]=1.023314f;
 8002960:	4b43      	ldr	r3, [pc, #268]	; (8002a70 <main+0x18c>)
 8002962:	4a44      	ldr	r2, [pc, #272]	; (8002a74 <main+0x190>)
 8002964:	601a      	str	r2, [r3, #0]
	AccCalibr[0][1]=-0.004549f;
 8002966:	4b42      	ldr	r3, [pc, #264]	; (8002a70 <main+0x18c>)
 8002968:	4a43      	ldr	r2, [pc, #268]	; (8002a78 <main+0x194>)
 800296a:	605a      	str	r2, [r3, #4]
	AccCalibr[0][2]=0.001297f;
 800296c:	4b40      	ldr	r3, [pc, #256]	; (8002a70 <main+0x18c>)
 800296e:	4a43      	ldr	r2, [pc, #268]	; (8002a7c <main+0x198>)
 8002970:	609a      	str	r2, [r3, #8]

	AccCalibr[1][0]=-0.004549f;
 8002972:	4b3f      	ldr	r3, [pc, #252]	; (8002a70 <main+0x18c>)
 8002974:	4a40      	ldr	r2, [pc, #256]	; (8002a78 <main+0x194>)
 8002976:	60da      	str	r2, [r3, #12]
	AccCalibr[1][1]=0.997855f;
 8002978:	4b3d      	ldr	r3, [pc, #244]	; (8002a70 <main+0x18c>)
 800297a:	4a41      	ldr	r2, [pc, #260]	; (8002a80 <main+0x19c>)
 800297c:	611a      	str	r2, [r3, #16]
	AccCalibr[1][2]=-0.000489f;
 800297e:	4b3c      	ldr	r3, [pc, #240]	; (8002a70 <main+0x18c>)
 8002980:	4a40      	ldr	r2, [pc, #256]	; (8002a84 <main+0x1a0>)
 8002982:	615a      	str	r2, [r3, #20]

	AccCalibr[2][0]=0.001297f;
 8002984:	4b3a      	ldr	r3, [pc, #232]	; (8002a70 <main+0x18c>)
 8002986:	4a3d      	ldr	r2, [pc, #244]	; (8002a7c <main+0x198>)
 8002988:	619a      	str	r2, [r3, #24]
	AccCalibr[2][1]=-0.000489f;
 800298a:	4b39      	ldr	r3, [pc, #228]	; (8002a70 <main+0x18c>)
 800298c:	4a3d      	ldr	r2, [pc, #244]	; (8002a84 <main+0x1a0>)
 800298e:	61da      	str	r2, [r3, #28]
	AccCalibr[2][2]=1.018328f;
 8002990:	4b37      	ldr	r3, [pc, #220]	; (8002a70 <main+0x18c>)
 8002992:	4a3d      	ldr	r2, [pc, #244]	; (8002a88 <main+0x1a4>)
 8002994:	621a      	str	r2, [r3, #32]

  	GyroShift[0]=90.37f;
 8002996:	4b3d      	ldr	r3, [pc, #244]	; (8002a8c <main+0x1a8>)
 8002998:	4a3d      	ldr	r2, [pc, #244]	; (8002a90 <main+0x1ac>)
 800299a:	601a      	str	r2, [r3, #0]
  	GyroShift[1]=34.80f;
 800299c:	4b3b      	ldr	r3, [pc, #236]	; (8002a8c <main+0x1a8>)
 800299e:	4a3d      	ldr	r2, [pc, #244]	; (8002a94 <main+0x1b0>)
 80029a0:	605a      	str	r2, [r3, #4]
  	GyroShift[2]=-19.44f;
 80029a2:	4b3a      	ldr	r3, [pc, #232]	; (8002a8c <main+0x1a8>)
 80029a4:	4a3c      	ldr	r2, [pc, #240]	; (8002a98 <main+0x1b4>)
 80029a6:	609a      	str	r2, [r3, #8]

  	uint8_t flag_for_data_capturing = 0;
 80029a8:	2300      	movs	r3, #0
 80029aa:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf



	st = MPU_begin();
 80029ae:	f7ff fb65 	bl	800207c <MPU_begin>
 80029b2:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
	HAL_Delay(100);
 80029b6:	2064      	movs	r0, #100	; 0x64
 80029b8:	f000 fda4 	bl	8003504 <HAL_Delay>
	setSrd(0);
 80029bc:	2000      	movs	r0, #0
 80029be:	f7ff fdd3 	bl	8002568 <setSrd>
	HAL_Delay(100);
 80029c2:	2064      	movs	r0, #100	; 0x64
 80029c4:	f000 fd9e 	bl	8003504 <HAL_Delay>

	// BMP280 INIT
	BMP280_Init();
 80029c8:	f7fe fcee 	bl	80013a8 <BMP280_Init>
	GPIOC->ODR ^= 1<<13;
 80029cc:	4b33      	ldr	r3, [pc, #204]	; (8002a9c <main+0x1b8>)
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	4a32      	ldr	r2, [pc, #200]	; (8002a9c <main+0x1b8>)
 80029d2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80029d6:	60d3      	str	r3, [r2, #12]
	HAL_Delay(200);
 80029d8:	20c8      	movs	r0, #200	; 0xc8
 80029da:	f000 fd93 	bl	8003504 <HAL_Delay>
	GPIOC->ODR ^= 1<<13;
 80029de:	4b2f      	ldr	r3, [pc, #188]	; (8002a9c <main+0x1b8>)
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	4a2e      	ldr	r2, [pc, #184]	; (8002a9c <main+0x1b8>)
 80029e4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80029e8:	60d3      	str	r3, [r2, #12]
	HAL_TIM_Base_Start_IT(&htim1);
 80029ea:	482d      	ldr	r0, [pc, #180]	; (8002aa0 <main+0x1bc>)
 80029ec:	f002 f870 	bl	8004ad0 <HAL_TIM_Base_Start_IT>
	uint8_t buff[200] = {0,};
 80029f0:	2300      	movs	r3, #0
 80029f2:	603b      	str	r3, [r7, #0]
 80029f4:	1d3b      	adds	r3, r7, #4
 80029f6:	22c4      	movs	r2, #196	; 0xc4
 80029f8:	2100      	movs	r1, #0
 80029fa:	4618      	mov	r0, r3
 80029fc:	f003 f87c 	bl	8005af8 <memset>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (GPIOB->IDR & (1<<1))
 8002a00:	4b28      	ldr	r3, [pc, #160]	; (8002aa4 <main+0x1c0>)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d009      	beq.n	8002a20 <main+0x13c>
	  {
		  Y_Lable = 0;
 8002a0c:	4b26      	ldr	r3, [pc, #152]	; (8002aa8 <main+0x1c4>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	701a      	strb	r2, [r3, #0]
		  GPIOC->ODR |= (1<<13);
 8002a12:	4b22      	ldr	r3, [pc, #136]	; (8002a9c <main+0x1b8>)
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	4a21      	ldr	r2, [pc, #132]	; (8002a9c <main+0x1b8>)
 8002a18:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a1c:	60d3      	str	r3, [r2, #12]
 8002a1e:	e7ef      	b.n	8002a00 <main+0x11c>
	  }
	  else
	  {
		  Y_Lable = 1;
 8002a20:	4b21      	ldr	r3, [pc, #132]	; (8002aa8 <main+0x1c4>)
 8002a22:	2201      	movs	r2, #1
 8002a24:	701a      	strb	r2, [r3, #0]
		  GPIOC->ODR &= ~(1<<13);
 8002a26:	4b1d      	ldr	r3, [pc, #116]	; (8002a9c <main+0x1b8>)
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	4a1c      	ldr	r2, [pc, #112]	; (8002a9c <main+0x1b8>)
 8002a2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a30:	60d3      	str	r3, [r2, #12]
	  if (GPIOB->IDR & (1<<1))
 8002a32:	e7e5      	b.n	8002a00 <main+0x11c>
 8002a34:	20000304 	.word	0x20000304
 8002a38:	42267773 	.word	0x42267773
 8002a3c:	421d8e23 	.word	0x421d8e23
 8002a40:	c324f7db 	.word	0xc324f7db
 8002a44:	20000328 	.word	0x20000328
 8002a48:	3f811cd2 	.word	0x3f811cd2
 8002a4c:	3c14dd72 	.word	0x3c14dd72
 8002a50:	bb35cbff 	.word	0xbb35cbff
 8002a54:	3f8725e5 	.word	0x3f8725e5
 8002a58:	3c90624e 	.word	0x3c90624e
 8002a5c:	3f7f864d 	.word	0x3f7f864d
 8002a60:	20000310 	.word	0x20000310
 8002a64:	4191a278 	.word	0x4191a278
 8002a68:	3ff93637 	.word	0x3ff93637
 8002a6c:	41cfa79f 	.word	0x41cfa79f
 8002a70:	2000034c 	.word	0x2000034c
 8002a74:	3f82fbf4 	.word	0x3f82fbf4
 8002a78:	bb950fc7 	.word	0xbb950fc7
 8002a7c:	3aaa0019 	.word	0x3aaa0019
 8002a80:	3f7f736d 	.word	0x3f7f736d
 8002a84:	ba00303c 	.word	0xba00303c
 8002a88:	3f825892 	.word	0x3f825892
 8002a8c:	2000031c 	.word	0x2000031c
 8002a90:	42b4bd71 	.word	0x42b4bd71
 8002a94:	420b3333 	.word	0x420b3333
 8002a98:	c19b851f 	.word	0xc19b851f
 8002a9c:	40011000 	.word	0x40011000
 8002aa0:	20000474 	.word	0x20000474
 8002aa4:	40010c00 	.word	0x40010c00
 8002aa8:	20000218 	.word	0x20000218

08002aac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b090      	sub	sp, #64	; 0x40
 8002ab0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ab2:	f107 0318 	add.w	r3, r7, #24
 8002ab6:	2228      	movs	r2, #40	; 0x28
 8002ab8:	2100      	movs	r1, #0
 8002aba:	4618      	mov	r0, r3
 8002abc:	f003 f81c 	bl	8005af8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ac0:	1d3b      	adds	r3, r7, #4
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	601a      	str	r2, [r3, #0]
 8002ac6:	605a      	str	r2, [r3, #4]
 8002ac8:	609a      	str	r2, [r3, #8]
 8002aca:	60da      	str	r2, [r3, #12]
 8002acc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002ad2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ad6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002adc:	2301      	movs	r3, #1
 8002ade:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ae4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ae8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002aea:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002aee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002af0:	f107 0318 	add.w	r3, r7, #24
 8002af4:	4618      	mov	r0, r3
 8002af6:	f001 f8b5 	bl	8003c64 <HAL_RCC_OscConfig>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002b00:	f000 f9c4 	bl	8002e8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b04:	230f      	movs	r3, #15
 8002b06:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b08:	2302      	movs	r3, #2
 8002b0a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002b10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b16:	2300      	movs	r3, #0
 8002b18:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002b1a:	1d3b      	adds	r3, r7, #4
 8002b1c:	2102      	movs	r1, #2
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f001 fb22 	bl	8004168 <HAL_RCC_ClockConfig>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002b2a:	f000 f9af 	bl	8002e8c <Error_Handler>
  }
}
 8002b2e:	bf00      	nop
 8002b30:	3740      	adds	r7, #64	; 0x40
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	af00      	add	r7, sp, #0
  /* EXTI1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	2100      	movs	r1, #0
 8002b3e:	2007      	movs	r0, #7
 8002b40:	f000 fddb 	bl	80036fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002b44:	2007      	movs	r0, #7
 8002b46:	f000 fdf4 	bl	8003732 <HAL_NVIC_EnableIRQ>
}
 8002b4a:	bf00      	nop
 8002b4c:	bd80      	pop	{r7, pc}
	...

08002b50 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
		  {
 8002b50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b54:	b0a4      	sub	sp, #144	; 0x90
 8002b56:	af16      	add	r7, sp, #88	; 0x58
 8002b58:	6378      	str	r0, [r7, #52]	; 0x34
	  	  	  readSensor3(AccData, MagData, GyroData);
 8002b5a:	4a4b      	ldr	r2, [pc, #300]	; (8002c88 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002b5c:	494b      	ldr	r1, [pc, #300]	; (8002c8c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8002b5e:	484c      	ldr	r0, [pc, #304]	; (8002c90 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8002b60:	f7ff fd66 	bl	8002630 <readSensor3>
	  	  	  calibrateData();
 8002b64:	f000 f8a8 	bl	8002cb8 <calibrateData>

	  	  	  Pressure = (int16_t)(get_diff_preasure()*100);
 8002b68:	f7fe fe3c 	bl	80017e4 <get_diff_preasure>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	4949      	ldr	r1, [pc, #292]	; (8002c94 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7fe f8e7 	bl	8000d44 <__aeabi_fmul>
 8002b76:	4603      	mov	r3, r0
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7fe fa33 	bl	8000fe4 <__aeabi_f2iz>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	b21a      	sxth	r2, r3
 8002b82:	4b45      	ldr	r3, [pc, #276]	; (8002c98 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8002b84:	801a      	strh	r2, [r3, #0]

	  	  	  snprintf(str1, 100, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.f,%d",
			  	  	  	  (float)Acc[0], (float)Acc[1], (float)Acc[2],
 8002b86:	4b45      	ldr	r3, [pc, #276]	; (8002c9c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8002b88:	681b      	ldr	r3, [r3, #0]
	  	  	  snprintf(str1, 100, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.f,%d",
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7fd fc4c 	bl	8000428 <__aeabi_f2d>
 8002b90:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
			  	  	  	  (float)Acc[0], (float)Acc[1], (float)Acc[2],
 8002b94:	4b41      	ldr	r3, [pc, #260]	; (8002c9c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8002b96:	685b      	ldr	r3, [r3, #4]
	  	  	  snprintf(str1, 100, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.f,%d",
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7fd fc45 	bl	8000428 <__aeabi_f2d>
 8002b9e:	e9c7 0108 	strd	r0, r1, [r7, #32]
			  	  	  	  (float)Acc[0], (float)Acc[1], (float)Acc[2],
 8002ba2:	4b3e      	ldr	r3, [pc, #248]	; (8002c9c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
	  	  	  snprintf(str1, 100, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.f,%d",
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7fd fc3e 	bl	8000428 <__aeabi_f2d>
 8002bac:	e9c7 0106 	strd	r0, r1, [r7, #24]
						  (float)Gyr[0], (float)Gyr[1], (float)Gyr[2],
 8002bb0:	4b3b      	ldr	r3, [pc, #236]	; (8002ca0 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
	  	  	  snprintf(str1, 100, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.f,%d",
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7fd fc37 	bl	8000428 <__aeabi_f2d>
 8002bba:	e9c7 0104 	strd	r0, r1, [r7, #16]
						  (float)Gyr[0], (float)Gyr[1], (float)Gyr[2],
 8002bbe:	4b38      	ldr	r3, [pc, #224]	; (8002ca0 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8002bc0:	685b      	ldr	r3, [r3, #4]
	  	  	  snprintf(str1, 100, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.f,%d",
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7fd fc30 	bl	8000428 <__aeabi_f2d>
 8002bc8:	e9c7 0102 	strd	r0, r1, [r7, #8]
						  (float)Gyr[0], (float)Gyr[1], (float)Gyr[2],
 8002bcc:	4b34      	ldr	r3, [pc, #208]	; (8002ca0 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8002bce:	689b      	ldr	r3, [r3, #8]
	  	  	  snprintf(str1, 100, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.f,%d",
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7fd fc29 	bl	8000428 <__aeabi_f2d>
 8002bd6:	e9c7 0100 	strd	r0, r1, [r7]
						  (float)Mag[0], (float)Mag[1], (float)Mag[2],
 8002bda:	4b32      	ldr	r3, [pc, #200]	; (8002ca4 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
	  	  	  snprintf(str1, 100, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.f,%d",
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7fd fc22 	bl	8000428 <__aeabi_f2d>
 8002be4:	4682      	mov	sl, r0
 8002be6:	468b      	mov	fp, r1
						  (float)Mag[0], (float)Mag[1], (float)Mag[2],
 8002be8:	4b2e      	ldr	r3, [pc, #184]	; (8002ca4 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8002bea:	685b      	ldr	r3, [r3, #4]
	  	  	  snprintf(str1, 100, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.f,%d",
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7fd fc1b 	bl	8000428 <__aeabi_f2d>
 8002bf2:	4680      	mov	r8, r0
 8002bf4:	4689      	mov	r9, r1
						  (float)Mag[0], (float)Mag[1], (float)Mag[2],
 8002bf6:	4b2b      	ldr	r3, [pc, #172]	; (8002ca4 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
	  	  	  snprintf(str1, 100, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.f,%d",
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7fd fc14 	bl	8000428 <__aeabi_f2d>
 8002c00:	4604      	mov	r4, r0
 8002c02:	460d      	mov	r5, r1
						  (float)Pressure, (uint8_t)Y_Lable);
 8002c04:	4b24      	ldr	r3, [pc, #144]	; (8002c98 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8002c06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7fe f846 	bl	8000c9c <__aeabi_i2f>
 8002c10:	4603      	mov	r3, r0
	  	  	  snprintf(str1, 100, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.f,%d",
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7fd fc08 	bl	8000428 <__aeabi_f2d>
 8002c18:	4b23      	ldr	r3, [pc, #140]	; (8002ca8 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	9314      	str	r3, [sp, #80]	; 0x50
 8002c1e:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8002c22:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
 8002c26:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8002c2a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
 8002c2e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002c32:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 8002c36:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002c3a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8002c3e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002c42:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8002c46:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002c4a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8002c4e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002c52:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8002c56:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8002c5a:	e9cd 3400 	strd	r3, r4, [sp]
 8002c5e:	4a13      	ldr	r2, [pc, #76]	; (8002cac <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8002c60:	2164      	movs	r1, #100	; 0x64
 8002c62:	4813      	ldr	r0, [pc, #76]	; (8002cb0 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8002c64:	f003 fbb0 	bl	80063c8 <sniprintf>

	  	  	HAL_UART_Transmit_IT(&huart1, (char*)str1, strlen(str1));
 8002c68:	4811      	ldr	r0, [pc, #68]	; (8002cb0 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8002c6a:	f7fd fa71 	bl	8000150 <strlen>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	461a      	mov	r2, r3
 8002c74:	490e      	ldr	r1, [pc, #56]	; (8002cb0 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8002c76:	480f      	ldr	r0, [pc, #60]	; (8002cb4 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8002c78:	f002 fb21 	bl	80052be <HAL_UART_Transmit_IT>
		  }
 8002c7c:	bf00      	nop
 8002c7e:	3738      	adds	r7, #56	; 0x38
 8002c80:	46bd      	mov	sp, r7
 8002c82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c86:	bf00      	nop
 8002c88:	200003c8 	.word	0x200003c8
 8002c8c:	200003c0 	.word	0x200003c0
 8002c90:	200003b8 	.word	0x200003b8
 8002c94:	42c80000 	.word	0x42c80000
 8002c98:	20000300 	.word	0x20000300
 8002c9c:	2000037c 	.word	0x2000037c
 8002ca0:	20000394 	.word	0x20000394
 8002ca4:	20000370 	.word	0x20000370
 8002ca8:	20000218 	.word	0x20000218
 8002cac:	080088f8 	.word	0x080088f8
 8002cb0:	2000021c 	.word	0x2000021c
 8002cb4:	200004bc 	.word	0x200004bc

08002cb8 <calibrateData>:
	HAL_UART_Transmit_IT(&huart1, (uint8_t*)str0, strlen(str0));
}


void calibrateData()
  {
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
	  MagR[0]=(float)MagData[0]-MagShift[0];
 8002cbc:	4b59      	ldr	r3, [pc, #356]	; (8002e24 <calibrateData+0x16c>)
 8002cbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7fd ffea 	bl	8000c9c <__aeabi_i2f>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	4b57      	ldr	r3, [pc, #348]	; (8002e28 <calibrateData+0x170>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4619      	mov	r1, r3
 8002cd0:	4610      	mov	r0, r2
 8002cd2:	f7fd ff2d 	bl	8000b30 <__aeabi_fsub>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	461a      	mov	r2, r3
 8002cda:	4b54      	ldr	r3, [pc, #336]	; (8002e2c <calibrateData+0x174>)
 8002cdc:	601a      	str	r2, [r3, #0]
	  MagR[1]=(float)MagData[1]-MagShift[1];
 8002cde:	4b51      	ldr	r3, [pc, #324]	; (8002e24 <calibrateData+0x16c>)
 8002ce0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7fd ffd9 	bl	8000c9c <__aeabi_i2f>
 8002cea:	4602      	mov	r2, r0
 8002cec:	4b4e      	ldr	r3, [pc, #312]	; (8002e28 <calibrateData+0x170>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	4610      	mov	r0, r2
 8002cf4:	f7fd ff1c 	bl	8000b30 <__aeabi_fsub>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	4b4b      	ldr	r3, [pc, #300]	; (8002e2c <calibrateData+0x174>)
 8002cfe:	605a      	str	r2, [r3, #4]
	  MagR[2]=(float)MagData[2]-MagShift[2];
 8002d00:	4b48      	ldr	r3, [pc, #288]	; (8002e24 <calibrateData+0x16c>)
 8002d02:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7fd ffc8 	bl	8000c9c <__aeabi_i2f>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	4b46      	ldr	r3, [pc, #280]	; (8002e28 <calibrateData+0x170>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	4619      	mov	r1, r3
 8002d14:	4610      	mov	r0, r2
 8002d16:	f7fd ff0b 	bl	8000b30 <__aeabi_fsub>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	4b43      	ldr	r3, [pc, #268]	; (8002e2c <calibrateData+0x174>)
 8002d20:	609a      	str	r2, [r3, #8]
	  V3fTransform(MagR, MagCalibr, Mag0);
 8002d22:	4a43      	ldr	r2, [pc, #268]	; (8002e30 <calibrateData+0x178>)
 8002d24:	4943      	ldr	r1, [pc, #268]	; (8002e34 <calibrateData+0x17c>)
 8002d26:	4841      	ldr	r0, [pc, #260]	; (8002e2c <calibrateData+0x174>)
 8002d28:	f7ff fd04 	bl	8002734 <V3fTransform>
	  Mag[0] = Mag0[1];
 8002d2c:	4b40      	ldr	r3, [pc, #256]	; (8002e30 <calibrateData+0x178>)
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	4a41      	ldr	r2, [pc, #260]	; (8002e38 <calibrateData+0x180>)
 8002d32:	6013      	str	r3, [r2, #0]
	  Mag[1] = Mag0[0];
 8002d34:	4b3e      	ldr	r3, [pc, #248]	; (8002e30 <calibrateData+0x178>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a3f      	ldr	r2, [pc, #252]	; (8002e38 <calibrateData+0x180>)
 8002d3a:	6053      	str	r3, [r2, #4]
	  Mag[2] = -Mag0[2];
 8002d3c:	4b3c      	ldr	r3, [pc, #240]	; (8002e30 <calibrateData+0x178>)
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002d44:	4a3c      	ldr	r2, [pc, #240]	; (8002e38 <calibrateData+0x180>)
 8002d46:	6093      	str	r3, [r2, #8]
	  AccR[0]=(float)AccData[0]-AccShift[0];
 8002d48:	4b3c      	ldr	r3, [pc, #240]	; (8002e3c <calibrateData+0x184>)
 8002d4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7fd ffa4 	bl	8000c9c <__aeabi_i2f>
 8002d54:	4602      	mov	r2, r0
 8002d56:	4b3a      	ldr	r3, [pc, #232]	; (8002e40 <calibrateData+0x188>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	4610      	mov	r0, r2
 8002d5e:	f7fd fee7 	bl	8000b30 <__aeabi_fsub>
 8002d62:	4603      	mov	r3, r0
 8002d64:	461a      	mov	r2, r3
 8002d66:	4b37      	ldr	r3, [pc, #220]	; (8002e44 <calibrateData+0x18c>)
 8002d68:	601a      	str	r2, [r3, #0]
	  AccR[1]=(float)AccData[1]-AccShift[1];
 8002d6a:	4b34      	ldr	r3, [pc, #208]	; (8002e3c <calibrateData+0x184>)
 8002d6c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7fd ff93 	bl	8000c9c <__aeabi_i2f>
 8002d76:	4602      	mov	r2, r0
 8002d78:	4b31      	ldr	r3, [pc, #196]	; (8002e40 <calibrateData+0x188>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	4610      	mov	r0, r2
 8002d80:	f7fd fed6 	bl	8000b30 <__aeabi_fsub>
 8002d84:	4603      	mov	r3, r0
 8002d86:	461a      	mov	r2, r3
 8002d88:	4b2e      	ldr	r3, [pc, #184]	; (8002e44 <calibrateData+0x18c>)
 8002d8a:	605a      	str	r2, [r3, #4]
	  AccR[2]=(float)AccData[2]-AccShift[2];
 8002d8c:	4b2b      	ldr	r3, [pc, #172]	; (8002e3c <calibrateData+0x184>)
 8002d8e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7fd ff82 	bl	8000c9c <__aeabi_i2f>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	4b29      	ldr	r3, [pc, #164]	; (8002e40 <calibrateData+0x188>)
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	4619      	mov	r1, r3
 8002da0:	4610      	mov	r0, r2
 8002da2:	f7fd fec5 	bl	8000b30 <__aeabi_fsub>
 8002da6:	4603      	mov	r3, r0
 8002da8:	461a      	mov	r2, r3
 8002daa:	4b26      	ldr	r3, [pc, #152]	; (8002e44 <calibrateData+0x18c>)
 8002dac:	609a      	str	r2, [r3, #8]
	  V3fTransform(AccR, AccCalibr, Acc);
 8002dae:	4a26      	ldr	r2, [pc, #152]	; (8002e48 <calibrateData+0x190>)
 8002db0:	4926      	ldr	r1, [pc, #152]	; (8002e4c <calibrateData+0x194>)
 8002db2:	4824      	ldr	r0, [pc, #144]	; (8002e44 <calibrateData+0x18c>)
 8002db4:	f7ff fcbe 	bl	8002734 <V3fTransform>
	  Gyr[0]=(float)GyroData[0]-GyroShift[0];
 8002db8:	4b25      	ldr	r3, [pc, #148]	; (8002e50 <calibrateData+0x198>)
 8002dba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7fd ff6c 	bl	8000c9c <__aeabi_i2f>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	4b23      	ldr	r3, [pc, #140]	; (8002e54 <calibrateData+0x19c>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4619      	mov	r1, r3
 8002dcc:	4610      	mov	r0, r2
 8002dce:	f7fd feaf 	bl	8000b30 <__aeabi_fsub>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	4b20      	ldr	r3, [pc, #128]	; (8002e58 <calibrateData+0x1a0>)
 8002dd8:	601a      	str	r2, [r3, #0]
	  Gyr[1]=(float)GyroData[1]-GyroShift[1];
 8002dda:	4b1d      	ldr	r3, [pc, #116]	; (8002e50 <calibrateData+0x198>)
 8002ddc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7fd ff5b 	bl	8000c9c <__aeabi_i2f>
 8002de6:	4602      	mov	r2, r0
 8002de8:	4b1a      	ldr	r3, [pc, #104]	; (8002e54 <calibrateData+0x19c>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	4619      	mov	r1, r3
 8002dee:	4610      	mov	r0, r2
 8002df0:	f7fd fe9e 	bl	8000b30 <__aeabi_fsub>
 8002df4:	4603      	mov	r3, r0
 8002df6:	461a      	mov	r2, r3
 8002df8:	4b17      	ldr	r3, [pc, #92]	; (8002e58 <calibrateData+0x1a0>)
 8002dfa:	605a      	str	r2, [r3, #4]
	  Gyr[2]=(float)GyroData[2]-GyroShift[2];
 8002dfc:	4b14      	ldr	r3, [pc, #80]	; (8002e50 <calibrateData+0x198>)
 8002dfe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7fd ff4a 	bl	8000c9c <__aeabi_i2f>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	4b12      	ldr	r3, [pc, #72]	; (8002e54 <calibrateData+0x19c>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	4619      	mov	r1, r3
 8002e10:	4610      	mov	r0, r2
 8002e12:	f7fd fe8d 	bl	8000b30 <__aeabi_fsub>
 8002e16:	4603      	mov	r3, r0
 8002e18:	461a      	mov	r2, r3
 8002e1a:	4b0f      	ldr	r3, [pc, #60]	; (8002e58 <calibrateData+0x1a0>)
 8002e1c:	609a      	str	r2, [r3, #8]

  }
 8002e1e:	bf00      	nop
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	200003c0 	.word	0x200003c0
 8002e28:	20000304 	.word	0x20000304
 8002e2c:	200003a0 	.word	0x200003a0
 8002e30:	20000388 	.word	0x20000388
 8002e34:	20000328 	.word	0x20000328
 8002e38:	20000370 	.word	0x20000370
 8002e3c:	200003b8 	.word	0x200003b8
 8002e40:	20000310 	.word	0x20000310
 8002e44:	200003ac 	.word	0x200003ac
 8002e48:	2000037c 	.word	0x2000037c
 8002e4c:	2000034c 	.word	0x2000034c
 8002e50:	200003c8 	.word	0x200003c8
 8002e54:	2000031c 	.word	0x2000031c
 8002e58:	20000394 	.word	0x20000394

08002e5c <HAL_GPIO_EXTI_Callback>:
	  	 }
  }


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	4603      	mov	r3, r0
 8002e64:	80fb      	strh	r3, [r7, #6]
	M3fDupe(M1, M0);
 8002e66:	4906      	ldr	r1, [pc, #24]	; (8002e80 <HAL_GPIO_EXTI_Callback+0x24>)
 8002e68:	4806      	ldr	r0, [pc, #24]	; (8002e84 <HAL_GPIO_EXTI_Callback+0x28>)
 8002e6a:	f7ff fcfa 	bl	8002862 <M3fDupe>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8002e6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e72:	4805      	ldr	r0, [pc, #20]	; (8002e88 <HAL_GPIO_EXTI_Callback+0x2c>)
 8002e74:	f000 fec4 	bl	8003c00 <HAL_GPIO_TogglePin>
}
 8002e78:	bf00      	nop
 8002e7a:	3708      	adds	r7, #8
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	200003d0 	.word	0x200003d0
 8002e84:	200003f4 	.word	0x200003f4
 8002e88:	40011000 	.word	0x40011000

08002e8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e90:	b672      	cpsid	i
}
 8002e92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e94:	e7fe      	b.n	8002e94 <Error_Handler+0x8>
	...

08002e98 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002e9c:	4b17      	ldr	r3, [pc, #92]	; (8002efc <MX_SPI1_Init+0x64>)
 8002e9e:	4a18      	ldr	r2, [pc, #96]	; (8002f00 <MX_SPI1_Init+0x68>)
 8002ea0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002ea2:	4b16      	ldr	r3, [pc, #88]	; (8002efc <MX_SPI1_Init+0x64>)
 8002ea4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002ea8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002eaa:	4b14      	ldr	r3, [pc, #80]	; (8002efc <MX_SPI1_Init+0x64>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002eb0:	4b12      	ldr	r3, [pc, #72]	; (8002efc <MX_SPI1_Init+0x64>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002eb6:	4b11      	ldr	r3, [pc, #68]	; (8002efc <MX_SPI1_Init+0x64>)
 8002eb8:	2202      	movs	r2, #2
 8002eba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002ebc:	4b0f      	ldr	r3, [pc, #60]	; (8002efc <MX_SPI1_Init+0x64>)
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002ec2:	4b0e      	ldr	r3, [pc, #56]	; (8002efc <MX_SPI1_Init+0x64>)
 8002ec4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ec8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002eca:	4b0c      	ldr	r3, [pc, #48]	; (8002efc <MX_SPI1_Init+0x64>)
 8002ecc:	2230      	movs	r2, #48	; 0x30
 8002ece:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ed0:	4b0a      	ldr	r3, [pc, #40]	; (8002efc <MX_SPI1_Init+0x64>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ed6:	4b09      	ldr	r3, [pc, #36]	; (8002efc <MX_SPI1_Init+0x64>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002edc:	4b07      	ldr	r3, [pc, #28]	; (8002efc <MX_SPI1_Init+0x64>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002ee2:	4b06      	ldr	r3, [pc, #24]	; (8002efc <MX_SPI1_Init+0x64>)
 8002ee4:	220a      	movs	r2, #10
 8002ee6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002ee8:	4804      	ldr	r0, [pc, #16]	; (8002efc <MX_SPI1_Init+0x64>)
 8002eea:	f001 fad5 	bl	8004498 <HAL_SPI_Init>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d001      	beq.n	8002ef8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002ef4:	f7ff ffca 	bl	8002e8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002ef8:	bf00      	nop
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	20000418 	.word	0x20000418
 8002f00:	40013000 	.word	0x40013000

08002f04 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b088      	sub	sp, #32
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f0c:	f107 0310 	add.w	r3, r7, #16
 8002f10:	2200      	movs	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	605a      	str	r2, [r3, #4]
 8002f16:	609a      	str	r2, [r3, #8]
 8002f18:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a1b      	ldr	r2, [pc, #108]	; (8002f8c <HAL_SPI_MspInit+0x88>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d12f      	bne.n	8002f84 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f24:	4b1a      	ldr	r3, [pc, #104]	; (8002f90 <HAL_SPI_MspInit+0x8c>)
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	4a19      	ldr	r2, [pc, #100]	; (8002f90 <HAL_SPI_MspInit+0x8c>)
 8002f2a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f2e:	6193      	str	r3, [r2, #24]
 8002f30:	4b17      	ldr	r3, [pc, #92]	; (8002f90 <HAL_SPI_MspInit+0x8c>)
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f38:	60fb      	str	r3, [r7, #12]
 8002f3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f3c:	4b14      	ldr	r3, [pc, #80]	; (8002f90 <HAL_SPI_MspInit+0x8c>)
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	4a13      	ldr	r2, [pc, #76]	; (8002f90 <HAL_SPI_MspInit+0x8c>)
 8002f42:	f043 0304 	orr.w	r3, r3, #4
 8002f46:	6193      	str	r3, [r2, #24]
 8002f48:	4b11      	ldr	r3, [pc, #68]	; (8002f90 <HAL_SPI_MspInit+0x8c>)
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	f003 0304 	and.w	r3, r3, #4
 8002f50:	60bb      	str	r3, [r7, #8]
 8002f52:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002f54:	23a0      	movs	r3, #160	; 0xa0
 8002f56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f58:	2302      	movs	r3, #2
 8002f5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f60:	f107 0310 	add.w	r3, r7, #16
 8002f64:	4619      	mov	r1, r3
 8002f66:	480b      	ldr	r0, [pc, #44]	; (8002f94 <HAL_SPI_MspInit+0x90>)
 8002f68:	f000 fcae 	bl	80038c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002f6c:	2340      	movs	r3, #64	; 0x40
 8002f6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f70:	2300      	movs	r3, #0
 8002f72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f74:	2300      	movs	r3, #0
 8002f76:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f78:	f107 0310 	add.w	r3, r7, #16
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	4805      	ldr	r0, [pc, #20]	; (8002f94 <HAL_SPI_MspInit+0x90>)
 8002f80:	f000 fca2 	bl	80038c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002f84:	bf00      	nop
 8002f86:	3720      	adds	r7, #32
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	40013000 	.word	0x40013000
 8002f90:	40021000 	.word	0x40021000
 8002f94:	40010800 	.word	0x40010800

08002f98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b085      	sub	sp, #20
 8002f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002f9e:	4b15      	ldr	r3, [pc, #84]	; (8002ff4 <HAL_MspInit+0x5c>)
 8002fa0:	699b      	ldr	r3, [r3, #24]
 8002fa2:	4a14      	ldr	r2, [pc, #80]	; (8002ff4 <HAL_MspInit+0x5c>)
 8002fa4:	f043 0301 	orr.w	r3, r3, #1
 8002fa8:	6193      	str	r3, [r2, #24]
 8002faa:	4b12      	ldr	r3, [pc, #72]	; (8002ff4 <HAL_MspInit+0x5c>)
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	60bb      	str	r3, [r7, #8]
 8002fb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fb6:	4b0f      	ldr	r3, [pc, #60]	; (8002ff4 <HAL_MspInit+0x5c>)
 8002fb8:	69db      	ldr	r3, [r3, #28]
 8002fba:	4a0e      	ldr	r2, [pc, #56]	; (8002ff4 <HAL_MspInit+0x5c>)
 8002fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fc0:	61d3      	str	r3, [r2, #28]
 8002fc2:	4b0c      	ldr	r3, [pc, #48]	; (8002ff4 <HAL_MspInit+0x5c>)
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fca:	607b      	str	r3, [r7, #4]
 8002fcc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002fce:	4b0a      	ldr	r3, [pc, #40]	; (8002ff8 <HAL_MspInit+0x60>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	60fb      	str	r3, [r7, #12]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002fda:	60fb      	str	r3, [r7, #12]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002fe2:	60fb      	str	r3, [r7, #12]
 8002fe4:	4a04      	ldr	r2, [pc, #16]	; (8002ff8 <HAL_MspInit+0x60>)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fea:	bf00      	nop
 8002fec:	3714      	adds	r7, #20
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bc80      	pop	{r7}
 8002ff2:	4770      	bx	lr
 8002ff4:	40021000 	.word	0x40021000
 8002ff8:	40010000 	.word	0x40010000

08002ffc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003000:	e7fe      	b.n	8003000 <NMI_Handler+0x4>

08003002 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003002:	b480      	push	{r7}
 8003004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003006:	e7fe      	b.n	8003006 <HardFault_Handler+0x4>

08003008 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800300c:	e7fe      	b.n	800300c <MemManage_Handler+0x4>

0800300e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800300e:	b480      	push	{r7}
 8003010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003012:	e7fe      	b.n	8003012 <BusFault_Handler+0x4>

08003014 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003018:	e7fe      	b.n	8003018 <UsageFault_Handler+0x4>

0800301a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800301a:	b480      	push	{r7}
 800301c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800301e:	bf00      	nop
 8003020:	46bd      	mov	sp, r7
 8003022:	bc80      	pop	{r7}
 8003024:	4770      	bx	lr

08003026 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003026:	b480      	push	{r7}
 8003028:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800302a:	bf00      	nop
 800302c:	46bd      	mov	sp, r7
 800302e:	bc80      	pop	{r7}
 8003030:	4770      	bx	lr

08003032 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003032:	b480      	push	{r7}
 8003034:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003036:	bf00      	nop
 8003038:	46bd      	mov	sp, r7
 800303a:	bc80      	pop	{r7}
 800303c:	4770      	bx	lr

0800303e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003042:	f000 fa43 	bl	80034cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003046:	bf00      	nop
 8003048:	bd80      	pop	{r7, pc}

0800304a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800304a:	b580      	push	{r7, lr}
 800304c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
	//HAL_GPIO_EXTI_IRQHandler();

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800304e:	2002      	movs	r0, #2
 8003050:	f000 fdf0 	bl	8003c34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003054:	bf00      	nop
 8003056:	bd80      	pop	{r7, pc}

08003058 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800305c:	4802      	ldr	r0, [pc, #8]	; (8003068 <TIM1_UP_IRQHandler+0x10>)
 800305e:	f001 fd89 	bl	8004b74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003062:	bf00      	nop
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	20000474 	.word	0x20000474

0800306c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003070:	4802      	ldr	r0, [pc, #8]	; (800307c <USART1_IRQHandler+0x10>)
 8003072:	f002 f969 	bl	8005348 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003076:	bf00      	nop
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	200004bc 	.word	0x200004bc

08003080 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
	return 1;
 8003084:	2301      	movs	r3, #1
}
 8003086:	4618      	mov	r0, r3
 8003088:	46bd      	mov	sp, r7
 800308a:	bc80      	pop	{r7}
 800308c:	4770      	bx	lr

0800308e <_kill>:

int _kill(int pid, int sig)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b082      	sub	sp, #8
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
 8003096:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003098:	f002 fd04 	bl	8005aa4 <__errno>
 800309c:	4603      	mov	r3, r0
 800309e:	2216      	movs	r2, #22
 80030a0:	601a      	str	r2, [r3, #0]
	return -1;
 80030a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3708      	adds	r7, #8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <_exit>:

void _exit (int status)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b082      	sub	sp, #8
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80030b6:	f04f 31ff 	mov.w	r1, #4294967295
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f7ff ffe7 	bl	800308e <_kill>
	while (1) {}		/* Make sure we hang here */
 80030c0:	e7fe      	b.n	80030c0 <_exit+0x12>

080030c2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b086      	sub	sp, #24
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	60f8      	str	r0, [r7, #12]
 80030ca:	60b9      	str	r1, [r7, #8]
 80030cc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030ce:	2300      	movs	r3, #0
 80030d0:	617b      	str	r3, [r7, #20]
 80030d2:	e00a      	b.n	80030ea <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80030d4:	f3af 8000 	nop.w
 80030d8:	4601      	mov	r1, r0
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	1c5a      	adds	r2, r3, #1
 80030de:	60ba      	str	r2, [r7, #8]
 80030e0:	b2ca      	uxtb	r2, r1
 80030e2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	3301      	adds	r3, #1
 80030e8:	617b      	str	r3, [r7, #20]
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	dbf0      	blt.n	80030d4 <_read+0x12>
	}

return len;
 80030f2:	687b      	ldr	r3, [r7, #4]
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3718      	adds	r7, #24
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b086      	sub	sp, #24
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003108:	2300      	movs	r3, #0
 800310a:	617b      	str	r3, [r7, #20]
 800310c:	e009      	b.n	8003122 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	1c5a      	adds	r2, r3, #1
 8003112:	60ba      	str	r2, [r7, #8]
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	4618      	mov	r0, r3
 8003118:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	3301      	adds	r3, #1
 8003120:	617b      	str	r3, [r7, #20]
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	429a      	cmp	r2, r3
 8003128:	dbf1      	blt.n	800310e <_write+0x12>
	}
	return len;
 800312a:	687b      	ldr	r3, [r7, #4]
}
 800312c:	4618      	mov	r0, r3
 800312e:	3718      	adds	r7, #24
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <_close>:

int _close(int file)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
	return -1;
 800313c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003140:	4618      	mov	r0, r3
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	bc80      	pop	{r7}
 8003148:	4770      	bx	lr

0800314a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800314a:	b480      	push	{r7}
 800314c:	b083      	sub	sp, #12
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
 8003152:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800315a:	605a      	str	r2, [r3, #4]
	return 0;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	bc80      	pop	{r7}
 8003166:	4770      	bx	lr

08003168 <_isatty>:

int _isatty(int file)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
	return 1;
 8003170:	2301      	movs	r3, #1
}
 8003172:	4618      	mov	r0, r3
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	bc80      	pop	{r7}
 800317a:	4770      	bx	lr

0800317c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800317c:	b480      	push	{r7}
 800317e:	b085      	sub	sp, #20
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]
	return 0;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3714      	adds	r7, #20
 800318e:	46bd      	mov	sp, r7
 8003190:	bc80      	pop	{r7}
 8003192:	4770      	bx	lr

08003194 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b086      	sub	sp, #24
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800319c:	4a14      	ldr	r2, [pc, #80]	; (80031f0 <_sbrk+0x5c>)
 800319e:	4b15      	ldr	r3, [pc, #84]	; (80031f4 <_sbrk+0x60>)
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031a8:	4b13      	ldr	r3, [pc, #76]	; (80031f8 <_sbrk+0x64>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d102      	bne.n	80031b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031b0:	4b11      	ldr	r3, [pc, #68]	; (80031f8 <_sbrk+0x64>)
 80031b2:	4a12      	ldr	r2, [pc, #72]	; (80031fc <_sbrk+0x68>)
 80031b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031b6:	4b10      	ldr	r3, [pc, #64]	; (80031f8 <_sbrk+0x64>)
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4413      	add	r3, r2
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d207      	bcs.n	80031d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031c4:	f002 fc6e 	bl	8005aa4 <__errno>
 80031c8:	4603      	mov	r3, r0
 80031ca:	220c      	movs	r2, #12
 80031cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80031ce:	f04f 33ff 	mov.w	r3, #4294967295
 80031d2:	e009      	b.n	80031e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031d4:	4b08      	ldr	r3, [pc, #32]	; (80031f8 <_sbrk+0x64>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031da:	4b07      	ldr	r3, [pc, #28]	; (80031f8 <_sbrk+0x64>)
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4413      	add	r3, r2
 80031e2:	4a05      	ldr	r2, [pc, #20]	; (80031f8 <_sbrk+0x64>)
 80031e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031e6:	68fb      	ldr	r3, [r7, #12]
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3718      	adds	r7, #24
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	20005000 	.word	0x20005000
 80031f4:	00000400 	.word	0x00000400
 80031f8:	20000470 	.word	0x20000470
 80031fc:	20000518 	.word	0x20000518

08003200 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003204:	bf00      	nop
 8003206:	46bd      	mov	sp, r7
 8003208:	bc80      	pop	{r7}
 800320a:	4770      	bx	lr

0800320c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003212:	f107 0308 	add.w	r3, r7, #8
 8003216:	2200      	movs	r2, #0
 8003218:	601a      	str	r2, [r3, #0]
 800321a:	605a      	str	r2, [r3, #4]
 800321c:	609a      	str	r2, [r3, #8]
 800321e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003220:	463b      	mov	r3, r7
 8003222:	2200      	movs	r2, #0
 8003224:	601a      	str	r2, [r3, #0]
 8003226:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003228:	4b1e      	ldr	r3, [pc, #120]	; (80032a4 <MX_TIM1_Init+0x98>)
 800322a:	4a1f      	ldr	r2, [pc, #124]	; (80032a8 <MX_TIM1_Init+0x9c>)
 800322c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7199;
 800322e:	4b1d      	ldr	r3, [pc, #116]	; (80032a4 <MX_TIM1_Init+0x98>)
 8003230:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8003234:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003236:	4b1b      	ldr	r3, [pc, #108]	; (80032a4 <MX_TIM1_Init+0x98>)
 8003238:	2200      	movs	r2, #0
 800323a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 800323c:	4b19      	ldr	r3, [pc, #100]	; (80032a4 <MX_TIM1_Init+0x98>)
 800323e:	2264      	movs	r2, #100	; 0x64
 8003240:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003242:	4b18      	ldr	r3, [pc, #96]	; (80032a4 <MX_TIM1_Init+0x98>)
 8003244:	2200      	movs	r2, #0
 8003246:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003248:	4b16      	ldr	r3, [pc, #88]	; (80032a4 <MX_TIM1_Init+0x98>)
 800324a:	2200      	movs	r2, #0
 800324c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800324e:	4b15      	ldr	r3, [pc, #84]	; (80032a4 <MX_TIM1_Init+0x98>)
 8003250:	2200      	movs	r2, #0
 8003252:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003254:	4813      	ldr	r0, [pc, #76]	; (80032a4 <MX_TIM1_Init+0x98>)
 8003256:	f001 fbeb 	bl	8004a30 <HAL_TIM_Base_Init>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d001      	beq.n	8003264 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8003260:	f7ff fe14 	bl	8002e8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003264:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003268:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800326a:	f107 0308 	add.w	r3, r7, #8
 800326e:	4619      	mov	r1, r3
 8003270:	480c      	ldr	r0, [pc, #48]	; (80032a4 <MX_TIM1_Init+0x98>)
 8003272:	f001 fd87 	bl	8004d84 <HAL_TIM_ConfigClockSource>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d001      	beq.n	8003280 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800327c:	f7ff fe06 	bl	8002e8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003280:	2300      	movs	r3, #0
 8003282:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003284:	2300      	movs	r3, #0
 8003286:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003288:	463b      	mov	r3, r7
 800328a:	4619      	mov	r1, r3
 800328c:	4805      	ldr	r0, [pc, #20]	; (80032a4 <MX_TIM1_Init+0x98>)
 800328e:	f001 ff59 	bl	8005144 <HAL_TIMEx_MasterConfigSynchronization>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d001      	beq.n	800329c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003298:	f7ff fdf8 	bl	8002e8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800329c:	bf00      	nop
 800329e:	3718      	adds	r7, #24
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	20000474 	.word	0x20000474
 80032a8:	40012c00 	.word	0x40012c00

080032ac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a0d      	ldr	r2, [pc, #52]	; (80032f0 <HAL_TIM_Base_MspInit+0x44>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d113      	bne.n	80032e6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80032be:	4b0d      	ldr	r3, [pc, #52]	; (80032f4 <HAL_TIM_Base_MspInit+0x48>)
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	4a0c      	ldr	r2, [pc, #48]	; (80032f4 <HAL_TIM_Base_MspInit+0x48>)
 80032c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80032c8:	6193      	str	r3, [r2, #24]
 80032ca:	4b0a      	ldr	r3, [pc, #40]	; (80032f4 <HAL_TIM_Base_MspInit+0x48>)
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032d2:	60fb      	str	r3, [r7, #12]
 80032d4:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80032d6:	2200      	movs	r2, #0
 80032d8:	2100      	movs	r1, #0
 80032da:	2019      	movs	r0, #25
 80032dc:	f000 fa0d 	bl	80036fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80032e0:	2019      	movs	r0, #25
 80032e2:	f000 fa26 	bl	8003732 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80032e6:	bf00      	nop
 80032e8:	3710      	adds	r7, #16
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	40012c00 	.word	0x40012c00
 80032f4:	40021000 	.word	0x40021000

080032f8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80032fc:	4b11      	ldr	r3, [pc, #68]	; (8003344 <MX_USART1_UART_Init+0x4c>)
 80032fe:	4a12      	ldr	r2, [pc, #72]	; (8003348 <MX_USART1_UART_Init+0x50>)
 8003300:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003302:	4b10      	ldr	r3, [pc, #64]	; (8003344 <MX_USART1_UART_Init+0x4c>)
 8003304:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003308:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800330a:	4b0e      	ldr	r3, [pc, #56]	; (8003344 <MX_USART1_UART_Init+0x4c>)
 800330c:	2200      	movs	r2, #0
 800330e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003310:	4b0c      	ldr	r3, [pc, #48]	; (8003344 <MX_USART1_UART_Init+0x4c>)
 8003312:	2200      	movs	r2, #0
 8003314:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003316:	4b0b      	ldr	r3, [pc, #44]	; (8003344 <MX_USART1_UART_Init+0x4c>)
 8003318:	2200      	movs	r2, #0
 800331a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800331c:	4b09      	ldr	r3, [pc, #36]	; (8003344 <MX_USART1_UART_Init+0x4c>)
 800331e:	220c      	movs	r2, #12
 8003320:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003322:	4b08      	ldr	r3, [pc, #32]	; (8003344 <MX_USART1_UART_Init+0x4c>)
 8003324:	2200      	movs	r2, #0
 8003326:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003328:	4b06      	ldr	r3, [pc, #24]	; (8003344 <MX_USART1_UART_Init+0x4c>)
 800332a:	2200      	movs	r2, #0
 800332c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800332e:	4805      	ldr	r0, [pc, #20]	; (8003344 <MX_USART1_UART_Init+0x4c>)
 8003330:	f001 ff78 	bl	8005224 <HAL_UART_Init>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800333a:	f7ff fda7 	bl	8002e8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800333e:	bf00      	nop
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	200004bc 	.word	0x200004bc
 8003348:	40013800 	.word	0x40013800

0800334c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b088      	sub	sp, #32
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003354:	f107 0310 	add.w	r3, r7, #16
 8003358:	2200      	movs	r2, #0
 800335a:	601a      	str	r2, [r3, #0]
 800335c:	605a      	str	r2, [r3, #4]
 800335e:	609a      	str	r2, [r3, #8]
 8003360:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a20      	ldr	r2, [pc, #128]	; (80033e8 <HAL_UART_MspInit+0x9c>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d139      	bne.n	80033e0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800336c:	4b1f      	ldr	r3, [pc, #124]	; (80033ec <HAL_UART_MspInit+0xa0>)
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	4a1e      	ldr	r2, [pc, #120]	; (80033ec <HAL_UART_MspInit+0xa0>)
 8003372:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003376:	6193      	str	r3, [r2, #24]
 8003378:	4b1c      	ldr	r3, [pc, #112]	; (80033ec <HAL_UART_MspInit+0xa0>)
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003380:	60fb      	str	r3, [r7, #12]
 8003382:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003384:	4b19      	ldr	r3, [pc, #100]	; (80033ec <HAL_UART_MspInit+0xa0>)
 8003386:	699b      	ldr	r3, [r3, #24]
 8003388:	4a18      	ldr	r2, [pc, #96]	; (80033ec <HAL_UART_MspInit+0xa0>)
 800338a:	f043 0304 	orr.w	r3, r3, #4
 800338e:	6193      	str	r3, [r2, #24]
 8003390:	4b16      	ldr	r3, [pc, #88]	; (80033ec <HAL_UART_MspInit+0xa0>)
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	f003 0304 	and.w	r3, r3, #4
 8003398:	60bb      	str	r3, [r7, #8]
 800339a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800339c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033a2:	2302      	movs	r3, #2
 80033a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80033a6:	2303      	movs	r3, #3
 80033a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033aa:	f107 0310 	add.w	r3, r7, #16
 80033ae:	4619      	mov	r1, r3
 80033b0:	480f      	ldr	r0, [pc, #60]	; (80033f0 <HAL_UART_MspInit+0xa4>)
 80033b2:	f000 fa89 	bl	80038c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80033b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033bc:	2300      	movs	r3, #0
 80033be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c0:	2300      	movs	r3, #0
 80033c2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033c4:	f107 0310 	add.w	r3, r7, #16
 80033c8:	4619      	mov	r1, r3
 80033ca:	4809      	ldr	r0, [pc, #36]	; (80033f0 <HAL_UART_MspInit+0xa4>)
 80033cc:	f000 fa7c 	bl	80038c8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80033d0:	2200      	movs	r2, #0
 80033d2:	2100      	movs	r1, #0
 80033d4:	2025      	movs	r0, #37	; 0x25
 80033d6:	f000 f990 	bl	80036fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80033da:	2025      	movs	r0, #37	; 0x25
 80033dc:	f000 f9a9 	bl	8003732 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80033e0:	bf00      	nop
 80033e2:	3720      	adds	r7, #32
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	40013800 	.word	0x40013800
 80033ec:	40021000 	.word	0x40021000
 80033f0:	40010800 	.word	0x40010800

080033f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80033f4:	480c      	ldr	r0, [pc, #48]	; (8003428 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80033f6:	490d      	ldr	r1, [pc, #52]	; (800342c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80033f8:	4a0d      	ldr	r2, [pc, #52]	; (8003430 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80033fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033fc:	e002      	b.n	8003404 <LoopCopyDataInit>

080033fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003400:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003402:	3304      	adds	r3, #4

08003404 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003404:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003406:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003408:	d3f9      	bcc.n	80033fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800340a:	4a0a      	ldr	r2, [pc, #40]	; (8003434 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800340c:	4c0a      	ldr	r4, [pc, #40]	; (8003438 <LoopFillZerobss+0x22>)
  movs r3, #0
 800340e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003410:	e001      	b.n	8003416 <LoopFillZerobss>

08003412 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003412:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003414:	3204      	adds	r2, #4

08003416 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003416:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003418:	d3fb      	bcc.n	8003412 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800341a:	f7ff fef1 	bl	8003200 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800341e:	f002 fb47 	bl	8005ab0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003422:	f7ff fa5f 	bl	80028e4 <main>
  bx lr
 8003426:	4770      	bx	lr
  ldr r0, =_sdata
 8003428:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800342c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8003430:	08008d94 	.word	0x08008d94
  ldr r2, =_sbss
 8003434:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8003438:	20000514 	.word	0x20000514

0800343c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800343c:	e7fe      	b.n	800343c <ADC1_2_IRQHandler>
	...

08003440 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003444:	4b08      	ldr	r3, [pc, #32]	; (8003468 <HAL_Init+0x28>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a07      	ldr	r2, [pc, #28]	; (8003468 <HAL_Init+0x28>)
 800344a:	f043 0310 	orr.w	r3, r3, #16
 800344e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003450:	2003      	movs	r0, #3
 8003452:	f000 f947 	bl	80036e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003456:	200f      	movs	r0, #15
 8003458:	f000 f808 	bl	800346c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800345c:	f7ff fd9c 	bl	8002f98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	40022000 	.word	0x40022000

0800346c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003474:	4b12      	ldr	r3, [pc, #72]	; (80034c0 <HAL_InitTick+0x54>)
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	4b12      	ldr	r3, [pc, #72]	; (80034c4 <HAL_InitTick+0x58>)
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	4619      	mov	r1, r3
 800347e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003482:	fbb3 f3f1 	udiv	r3, r3, r1
 8003486:	fbb2 f3f3 	udiv	r3, r2, r3
 800348a:	4618      	mov	r0, r3
 800348c:	f000 f95f 	bl	800374e <HAL_SYSTICK_Config>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e00e      	b.n	80034b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2b0f      	cmp	r3, #15
 800349e:	d80a      	bhi.n	80034b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034a0:	2200      	movs	r2, #0
 80034a2:	6879      	ldr	r1, [r7, #4]
 80034a4:	f04f 30ff 	mov.w	r0, #4294967295
 80034a8:	f000 f927 	bl	80036fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80034ac:	4a06      	ldr	r2, [pc, #24]	; (80034c8 <HAL_InitTick+0x5c>)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
 80034b4:	e000      	b.n	80034b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3708      	adds	r7, #8
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	20000000 	.word	0x20000000
 80034c4:	20000008 	.word	0x20000008
 80034c8:	20000004 	.word	0x20000004

080034cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034cc:	b480      	push	{r7}
 80034ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80034d0:	4b05      	ldr	r3, [pc, #20]	; (80034e8 <HAL_IncTick+0x1c>)
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	461a      	mov	r2, r3
 80034d6:	4b05      	ldr	r3, [pc, #20]	; (80034ec <HAL_IncTick+0x20>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4413      	add	r3, r2
 80034dc:	4a03      	ldr	r2, [pc, #12]	; (80034ec <HAL_IncTick+0x20>)
 80034de:	6013      	str	r3, [r2, #0]
}
 80034e0:	bf00      	nop
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bc80      	pop	{r7}
 80034e6:	4770      	bx	lr
 80034e8:	20000008 	.word	0x20000008
 80034ec:	20000500 	.word	0x20000500

080034f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0
  return uwTick;
 80034f4:	4b02      	ldr	r3, [pc, #8]	; (8003500 <HAL_GetTick+0x10>)
 80034f6:	681b      	ldr	r3, [r3, #0]
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bc80      	pop	{r7}
 80034fe:	4770      	bx	lr
 8003500:	20000500 	.word	0x20000500

08003504 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800350c:	f7ff fff0 	bl	80034f0 <HAL_GetTick>
 8003510:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800351c:	d005      	beq.n	800352a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800351e:	4b0a      	ldr	r3, [pc, #40]	; (8003548 <HAL_Delay+0x44>)
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	461a      	mov	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	4413      	add	r3, r2
 8003528:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800352a:	bf00      	nop
 800352c:	f7ff ffe0 	bl	80034f0 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	429a      	cmp	r2, r3
 800353a:	d8f7      	bhi.n	800352c <HAL_Delay+0x28>
  {
  }
}
 800353c:	bf00      	nop
 800353e:	bf00      	nop
 8003540:	3710      	adds	r7, #16
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	20000008 	.word	0x20000008

0800354c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800354c:	b480      	push	{r7}
 800354e:	b085      	sub	sp, #20
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f003 0307 	and.w	r3, r3, #7
 800355a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800355c:	4b0c      	ldr	r3, [pc, #48]	; (8003590 <__NVIC_SetPriorityGrouping+0x44>)
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003562:	68ba      	ldr	r2, [r7, #8]
 8003564:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003568:	4013      	ands	r3, r2
 800356a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003574:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800357c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800357e:	4a04      	ldr	r2, [pc, #16]	; (8003590 <__NVIC_SetPriorityGrouping+0x44>)
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	60d3      	str	r3, [r2, #12]
}
 8003584:	bf00      	nop
 8003586:	3714      	adds	r7, #20
 8003588:	46bd      	mov	sp, r7
 800358a:	bc80      	pop	{r7}
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	e000ed00 	.word	0xe000ed00

08003594 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003594:	b480      	push	{r7}
 8003596:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003598:	4b04      	ldr	r3, [pc, #16]	; (80035ac <__NVIC_GetPriorityGrouping+0x18>)
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	0a1b      	lsrs	r3, r3, #8
 800359e:	f003 0307 	and.w	r3, r3, #7
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bc80      	pop	{r7}
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	e000ed00 	.word	0xe000ed00

080035b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	4603      	mov	r3, r0
 80035b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	db0b      	blt.n	80035da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035c2:	79fb      	ldrb	r3, [r7, #7]
 80035c4:	f003 021f 	and.w	r2, r3, #31
 80035c8:	4906      	ldr	r1, [pc, #24]	; (80035e4 <__NVIC_EnableIRQ+0x34>)
 80035ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ce:	095b      	lsrs	r3, r3, #5
 80035d0:	2001      	movs	r0, #1
 80035d2:	fa00 f202 	lsl.w	r2, r0, r2
 80035d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80035da:	bf00      	nop
 80035dc:	370c      	adds	r7, #12
 80035de:	46bd      	mov	sp, r7
 80035e0:	bc80      	pop	{r7}
 80035e2:	4770      	bx	lr
 80035e4:	e000e100 	.word	0xe000e100

080035e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	4603      	mov	r3, r0
 80035f0:	6039      	str	r1, [r7, #0]
 80035f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	db0a      	blt.n	8003612 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	b2da      	uxtb	r2, r3
 8003600:	490c      	ldr	r1, [pc, #48]	; (8003634 <__NVIC_SetPriority+0x4c>)
 8003602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003606:	0112      	lsls	r2, r2, #4
 8003608:	b2d2      	uxtb	r2, r2
 800360a:	440b      	add	r3, r1
 800360c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003610:	e00a      	b.n	8003628 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	b2da      	uxtb	r2, r3
 8003616:	4908      	ldr	r1, [pc, #32]	; (8003638 <__NVIC_SetPriority+0x50>)
 8003618:	79fb      	ldrb	r3, [r7, #7]
 800361a:	f003 030f 	and.w	r3, r3, #15
 800361e:	3b04      	subs	r3, #4
 8003620:	0112      	lsls	r2, r2, #4
 8003622:	b2d2      	uxtb	r2, r2
 8003624:	440b      	add	r3, r1
 8003626:	761a      	strb	r2, [r3, #24]
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	bc80      	pop	{r7}
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	e000e100 	.word	0xe000e100
 8003638:	e000ed00 	.word	0xe000ed00

0800363c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800363c:	b480      	push	{r7}
 800363e:	b089      	sub	sp, #36	; 0x24
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f003 0307 	and.w	r3, r3, #7
 800364e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	f1c3 0307 	rsb	r3, r3, #7
 8003656:	2b04      	cmp	r3, #4
 8003658:	bf28      	it	cs
 800365a:	2304      	movcs	r3, #4
 800365c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	3304      	adds	r3, #4
 8003662:	2b06      	cmp	r3, #6
 8003664:	d902      	bls.n	800366c <NVIC_EncodePriority+0x30>
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	3b03      	subs	r3, #3
 800366a:	e000      	b.n	800366e <NVIC_EncodePriority+0x32>
 800366c:	2300      	movs	r3, #0
 800366e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003670:	f04f 32ff 	mov.w	r2, #4294967295
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	fa02 f303 	lsl.w	r3, r2, r3
 800367a:	43da      	mvns	r2, r3
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	401a      	ands	r2, r3
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003684:	f04f 31ff 	mov.w	r1, #4294967295
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	fa01 f303 	lsl.w	r3, r1, r3
 800368e:	43d9      	mvns	r1, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003694:	4313      	orrs	r3, r2
         );
}
 8003696:	4618      	mov	r0, r3
 8003698:	3724      	adds	r7, #36	; 0x24
 800369a:	46bd      	mov	sp, r7
 800369c:	bc80      	pop	{r7}
 800369e:	4770      	bx	lr

080036a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	3b01      	subs	r3, #1
 80036ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036b0:	d301      	bcc.n	80036b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036b2:	2301      	movs	r3, #1
 80036b4:	e00f      	b.n	80036d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036b6:	4a0a      	ldr	r2, [pc, #40]	; (80036e0 <SysTick_Config+0x40>)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	3b01      	subs	r3, #1
 80036bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036be:	210f      	movs	r1, #15
 80036c0:	f04f 30ff 	mov.w	r0, #4294967295
 80036c4:	f7ff ff90 	bl	80035e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036c8:	4b05      	ldr	r3, [pc, #20]	; (80036e0 <SysTick_Config+0x40>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036ce:	4b04      	ldr	r3, [pc, #16]	; (80036e0 <SysTick_Config+0x40>)
 80036d0:	2207      	movs	r2, #7
 80036d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	e000e010 	.word	0xe000e010

080036e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f7ff ff2d 	bl	800354c <__NVIC_SetPriorityGrouping>
}
 80036f2:	bf00      	nop
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b086      	sub	sp, #24
 80036fe:	af00      	add	r7, sp, #0
 8003700:	4603      	mov	r3, r0
 8003702:	60b9      	str	r1, [r7, #8]
 8003704:	607a      	str	r2, [r7, #4]
 8003706:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003708:	2300      	movs	r3, #0
 800370a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800370c:	f7ff ff42 	bl	8003594 <__NVIC_GetPriorityGrouping>
 8003710:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	68b9      	ldr	r1, [r7, #8]
 8003716:	6978      	ldr	r0, [r7, #20]
 8003718:	f7ff ff90 	bl	800363c <NVIC_EncodePriority>
 800371c:	4602      	mov	r2, r0
 800371e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003722:	4611      	mov	r1, r2
 8003724:	4618      	mov	r0, r3
 8003726:	f7ff ff5f 	bl	80035e8 <__NVIC_SetPriority>
}
 800372a:	bf00      	nop
 800372c:	3718      	adds	r7, #24
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b082      	sub	sp, #8
 8003736:	af00      	add	r7, sp, #0
 8003738:	4603      	mov	r3, r0
 800373a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800373c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003740:	4618      	mov	r0, r3
 8003742:	f7ff ff35 	bl	80035b0 <__NVIC_EnableIRQ>
}
 8003746:	bf00      	nop
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800374e:	b580      	push	{r7, lr}
 8003750:	b082      	sub	sp, #8
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f7ff ffa2 	bl	80036a0 <SysTick_Config>
 800375c:	4603      	mov	r3, r0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3708      	adds	r7, #8
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003766:	b480      	push	{r7}
 8003768:	b085      	sub	sp, #20
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800376e:	2300      	movs	r3, #0
 8003770:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003778:	2b02      	cmp	r3, #2
 800377a:	d008      	beq.n	800378e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2204      	movs	r2, #4
 8003780:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e020      	b.n	80037d0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f022 020e 	bic.w	r2, r2, #14
 800379c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 0201 	bic.w	r2, r2, #1
 80037ac:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b6:	2101      	movs	r1, #1
 80037b8:	fa01 f202 	lsl.w	r2, r1, r2
 80037bc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80037ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3714      	adds	r7, #20
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bc80      	pop	{r7}
 80037d8:	4770      	bx	lr
	...

080037dc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037e4:	2300      	movs	r3, #0
 80037e6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d005      	beq.n	80037fe <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2204      	movs	r2, #4
 80037f6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	73fb      	strb	r3, [r7, #15]
 80037fc:	e051      	b.n	80038a2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 020e 	bic.w	r2, r2, #14
 800380c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f022 0201 	bic.w	r2, r2, #1
 800381c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a22      	ldr	r2, [pc, #136]	; (80038ac <HAL_DMA_Abort_IT+0xd0>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d029      	beq.n	800387c <HAL_DMA_Abort_IT+0xa0>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a20      	ldr	r2, [pc, #128]	; (80038b0 <HAL_DMA_Abort_IT+0xd4>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d022      	beq.n	8003878 <HAL_DMA_Abort_IT+0x9c>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a1f      	ldr	r2, [pc, #124]	; (80038b4 <HAL_DMA_Abort_IT+0xd8>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d01a      	beq.n	8003872 <HAL_DMA_Abort_IT+0x96>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a1d      	ldr	r2, [pc, #116]	; (80038b8 <HAL_DMA_Abort_IT+0xdc>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d012      	beq.n	800386c <HAL_DMA_Abort_IT+0x90>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a1c      	ldr	r2, [pc, #112]	; (80038bc <HAL_DMA_Abort_IT+0xe0>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d00a      	beq.n	8003866 <HAL_DMA_Abort_IT+0x8a>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a1a      	ldr	r2, [pc, #104]	; (80038c0 <HAL_DMA_Abort_IT+0xe4>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d102      	bne.n	8003860 <HAL_DMA_Abort_IT+0x84>
 800385a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800385e:	e00e      	b.n	800387e <HAL_DMA_Abort_IT+0xa2>
 8003860:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003864:	e00b      	b.n	800387e <HAL_DMA_Abort_IT+0xa2>
 8003866:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800386a:	e008      	b.n	800387e <HAL_DMA_Abort_IT+0xa2>
 800386c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003870:	e005      	b.n	800387e <HAL_DMA_Abort_IT+0xa2>
 8003872:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003876:	e002      	b.n	800387e <HAL_DMA_Abort_IT+0xa2>
 8003878:	2310      	movs	r3, #16
 800387a:	e000      	b.n	800387e <HAL_DMA_Abort_IT+0xa2>
 800387c:	2301      	movs	r3, #1
 800387e:	4a11      	ldr	r2, [pc, #68]	; (80038c4 <HAL_DMA_Abort_IT+0xe8>)
 8003880:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2201      	movs	r2, #1
 8003886:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003896:	2b00      	cmp	r3, #0
 8003898:	d003      	beq.n	80038a2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	4798      	blx	r3
    } 
  }
  return status;
 80038a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3710      	adds	r7, #16
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	40020008 	.word	0x40020008
 80038b0:	4002001c 	.word	0x4002001c
 80038b4:	40020030 	.word	0x40020030
 80038b8:	40020044 	.word	0x40020044
 80038bc:	40020058 	.word	0x40020058
 80038c0:	4002006c 	.word	0x4002006c
 80038c4:	40020000 	.word	0x40020000

080038c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b08b      	sub	sp, #44	; 0x2c
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80038d2:	2300      	movs	r3, #0
 80038d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80038d6:	2300      	movs	r3, #0
 80038d8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038da:	e169      	b.n	8003bb0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80038dc:	2201      	movs	r2, #1
 80038de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e0:	fa02 f303 	lsl.w	r3, r2, r3
 80038e4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	69fa      	ldr	r2, [r7, #28]
 80038ec:	4013      	ands	r3, r2
 80038ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	f040 8158 	bne.w	8003baa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	4a9a      	ldr	r2, [pc, #616]	; (8003b68 <HAL_GPIO_Init+0x2a0>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d05e      	beq.n	80039c2 <HAL_GPIO_Init+0xfa>
 8003904:	4a98      	ldr	r2, [pc, #608]	; (8003b68 <HAL_GPIO_Init+0x2a0>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d875      	bhi.n	80039f6 <HAL_GPIO_Init+0x12e>
 800390a:	4a98      	ldr	r2, [pc, #608]	; (8003b6c <HAL_GPIO_Init+0x2a4>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d058      	beq.n	80039c2 <HAL_GPIO_Init+0xfa>
 8003910:	4a96      	ldr	r2, [pc, #600]	; (8003b6c <HAL_GPIO_Init+0x2a4>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d86f      	bhi.n	80039f6 <HAL_GPIO_Init+0x12e>
 8003916:	4a96      	ldr	r2, [pc, #600]	; (8003b70 <HAL_GPIO_Init+0x2a8>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d052      	beq.n	80039c2 <HAL_GPIO_Init+0xfa>
 800391c:	4a94      	ldr	r2, [pc, #592]	; (8003b70 <HAL_GPIO_Init+0x2a8>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d869      	bhi.n	80039f6 <HAL_GPIO_Init+0x12e>
 8003922:	4a94      	ldr	r2, [pc, #592]	; (8003b74 <HAL_GPIO_Init+0x2ac>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d04c      	beq.n	80039c2 <HAL_GPIO_Init+0xfa>
 8003928:	4a92      	ldr	r2, [pc, #584]	; (8003b74 <HAL_GPIO_Init+0x2ac>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d863      	bhi.n	80039f6 <HAL_GPIO_Init+0x12e>
 800392e:	4a92      	ldr	r2, [pc, #584]	; (8003b78 <HAL_GPIO_Init+0x2b0>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d046      	beq.n	80039c2 <HAL_GPIO_Init+0xfa>
 8003934:	4a90      	ldr	r2, [pc, #576]	; (8003b78 <HAL_GPIO_Init+0x2b0>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d85d      	bhi.n	80039f6 <HAL_GPIO_Init+0x12e>
 800393a:	2b12      	cmp	r3, #18
 800393c:	d82a      	bhi.n	8003994 <HAL_GPIO_Init+0xcc>
 800393e:	2b12      	cmp	r3, #18
 8003940:	d859      	bhi.n	80039f6 <HAL_GPIO_Init+0x12e>
 8003942:	a201      	add	r2, pc, #4	; (adr r2, 8003948 <HAL_GPIO_Init+0x80>)
 8003944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003948:	080039c3 	.word	0x080039c3
 800394c:	0800399d 	.word	0x0800399d
 8003950:	080039af 	.word	0x080039af
 8003954:	080039f1 	.word	0x080039f1
 8003958:	080039f7 	.word	0x080039f7
 800395c:	080039f7 	.word	0x080039f7
 8003960:	080039f7 	.word	0x080039f7
 8003964:	080039f7 	.word	0x080039f7
 8003968:	080039f7 	.word	0x080039f7
 800396c:	080039f7 	.word	0x080039f7
 8003970:	080039f7 	.word	0x080039f7
 8003974:	080039f7 	.word	0x080039f7
 8003978:	080039f7 	.word	0x080039f7
 800397c:	080039f7 	.word	0x080039f7
 8003980:	080039f7 	.word	0x080039f7
 8003984:	080039f7 	.word	0x080039f7
 8003988:	080039f7 	.word	0x080039f7
 800398c:	080039a5 	.word	0x080039a5
 8003990:	080039b9 	.word	0x080039b9
 8003994:	4a79      	ldr	r2, [pc, #484]	; (8003b7c <HAL_GPIO_Init+0x2b4>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d013      	beq.n	80039c2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800399a:	e02c      	b.n	80039f6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	623b      	str	r3, [r7, #32]
          break;
 80039a2:	e029      	b.n	80039f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	3304      	adds	r3, #4
 80039aa:	623b      	str	r3, [r7, #32]
          break;
 80039ac:	e024      	b.n	80039f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	3308      	adds	r3, #8
 80039b4:	623b      	str	r3, [r7, #32]
          break;
 80039b6:	e01f      	b.n	80039f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	330c      	adds	r3, #12
 80039be:	623b      	str	r3, [r7, #32]
          break;
 80039c0:	e01a      	b.n	80039f8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d102      	bne.n	80039d0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80039ca:	2304      	movs	r3, #4
 80039cc:	623b      	str	r3, [r7, #32]
          break;
 80039ce:	e013      	b.n	80039f8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d105      	bne.n	80039e4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80039d8:	2308      	movs	r3, #8
 80039da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	69fa      	ldr	r2, [r7, #28]
 80039e0:	611a      	str	r2, [r3, #16]
          break;
 80039e2:	e009      	b.n	80039f8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80039e4:	2308      	movs	r3, #8
 80039e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	69fa      	ldr	r2, [r7, #28]
 80039ec:	615a      	str	r2, [r3, #20]
          break;
 80039ee:	e003      	b.n	80039f8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80039f0:	2300      	movs	r3, #0
 80039f2:	623b      	str	r3, [r7, #32]
          break;
 80039f4:	e000      	b.n	80039f8 <HAL_GPIO_Init+0x130>
          break;
 80039f6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	2bff      	cmp	r3, #255	; 0xff
 80039fc:	d801      	bhi.n	8003a02 <HAL_GPIO_Init+0x13a>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	e001      	b.n	8003a06 <HAL_GPIO_Init+0x13e>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	3304      	adds	r3, #4
 8003a06:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	2bff      	cmp	r3, #255	; 0xff
 8003a0c:	d802      	bhi.n	8003a14 <HAL_GPIO_Init+0x14c>
 8003a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	e002      	b.n	8003a1a <HAL_GPIO_Init+0x152>
 8003a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a16:	3b08      	subs	r3, #8
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	210f      	movs	r1, #15
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	fa01 f303 	lsl.w	r3, r1, r3
 8003a28:	43db      	mvns	r3, r3
 8003a2a:	401a      	ands	r2, r3
 8003a2c:	6a39      	ldr	r1, [r7, #32]
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	fa01 f303 	lsl.w	r3, r1, r3
 8003a34:	431a      	orrs	r2, r3
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f000 80b1 	beq.w	8003baa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003a48:	4b4d      	ldr	r3, [pc, #308]	; (8003b80 <HAL_GPIO_Init+0x2b8>)
 8003a4a:	699b      	ldr	r3, [r3, #24]
 8003a4c:	4a4c      	ldr	r2, [pc, #304]	; (8003b80 <HAL_GPIO_Init+0x2b8>)
 8003a4e:	f043 0301 	orr.w	r3, r3, #1
 8003a52:	6193      	str	r3, [r2, #24]
 8003a54:	4b4a      	ldr	r3, [pc, #296]	; (8003b80 <HAL_GPIO_Init+0x2b8>)
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	f003 0301 	and.w	r3, r3, #1
 8003a5c:	60bb      	str	r3, [r7, #8]
 8003a5e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003a60:	4a48      	ldr	r2, [pc, #288]	; (8003b84 <HAL_GPIO_Init+0x2bc>)
 8003a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a64:	089b      	lsrs	r3, r3, #2
 8003a66:	3302      	adds	r3, #2
 8003a68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a6c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a70:	f003 0303 	and.w	r3, r3, #3
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	220f      	movs	r2, #15
 8003a78:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7c:	43db      	mvns	r3, r3
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	4013      	ands	r3, r2
 8003a82:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a40      	ldr	r2, [pc, #256]	; (8003b88 <HAL_GPIO_Init+0x2c0>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d013      	beq.n	8003ab4 <HAL_GPIO_Init+0x1ec>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a3f      	ldr	r2, [pc, #252]	; (8003b8c <HAL_GPIO_Init+0x2c4>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d00d      	beq.n	8003ab0 <HAL_GPIO_Init+0x1e8>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a3e      	ldr	r2, [pc, #248]	; (8003b90 <HAL_GPIO_Init+0x2c8>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d007      	beq.n	8003aac <HAL_GPIO_Init+0x1e4>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a3d      	ldr	r2, [pc, #244]	; (8003b94 <HAL_GPIO_Init+0x2cc>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d101      	bne.n	8003aa8 <HAL_GPIO_Init+0x1e0>
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e006      	b.n	8003ab6 <HAL_GPIO_Init+0x1ee>
 8003aa8:	2304      	movs	r3, #4
 8003aaa:	e004      	b.n	8003ab6 <HAL_GPIO_Init+0x1ee>
 8003aac:	2302      	movs	r3, #2
 8003aae:	e002      	b.n	8003ab6 <HAL_GPIO_Init+0x1ee>
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e000      	b.n	8003ab6 <HAL_GPIO_Init+0x1ee>
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ab8:	f002 0203 	and.w	r2, r2, #3
 8003abc:	0092      	lsls	r2, r2, #2
 8003abe:	4093      	lsls	r3, r2
 8003ac0:	68fa      	ldr	r2, [r7, #12]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003ac6:	492f      	ldr	r1, [pc, #188]	; (8003b84 <HAL_GPIO_Init+0x2bc>)
 8003ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aca:	089b      	lsrs	r3, r3, #2
 8003acc:	3302      	adds	r3, #2
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d006      	beq.n	8003aee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003ae0:	4b2d      	ldr	r3, [pc, #180]	; (8003b98 <HAL_GPIO_Init+0x2d0>)
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	492c      	ldr	r1, [pc, #176]	; (8003b98 <HAL_GPIO_Init+0x2d0>)
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	600b      	str	r3, [r1, #0]
 8003aec:	e006      	b.n	8003afc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003aee:	4b2a      	ldr	r3, [pc, #168]	; (8003b98 <HAL_GPIO_Init+0x2d0>)
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	43db      	mvns	r3, r3
 8003af6:	4928      	ldr	r1, [pc, #160]	; (8003b98 <HAL_GPIO_Init+0x2d0>)
 8003af8:	4013      	ands	r3, r2
 8003afa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d006      	beq.n	8003b16 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003b08:	4b23      	ldr	r3, [pc, #140]	; (8003b98 <HAL_GPIO_Init+0x2d0>)
 8003b0a:	685a      	ldr	r2, [r3, #4]
 8003b0c:	4922      	ldr	r1, [pc, #136]	; (8003b98 <HAL_GPIO_Init+0x2d0>)
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	604b      	str	r3, [r1, #4]
 8003b14:	e006      	b.n	8003b24 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003b16:	4b20      	ldr	r3, [pc, #128]	; (8003b98 <HAL_GPIO_Init+0x2d0>)
 8003b18:	685a      	ldr	r2, [r3, #4]
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	43db      	mvns	r3, r3
 8003b1e:	491e      	ldr	r1, [pc, #120]	; (8003b98 <HAL_GPIO_Init+0x2d0>)
 8003b20:	4013      	ands	r3, r2
 8003b22:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d006      	beq.n	8003b3e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003b30:	4b19      	ldr	r3, [pc, #100]	; (8003b98 <HAL_GPIO_Init+0x2d0>)
 8003b32:	689a      	ldr	r2, [r3, #8]
 8003b34:	4918      	ldr	r1, [pc, #96]	; (8003b98 <HAL_GPIO_Init+0x2d0>)
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	608b      	str	r3, [r1, #8]
 8003b3c:	e006      	b.n	8003b4c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003b3e:	4b16      	ldr	r3, [pc, #88]	; (8003b98 <HAL_GPIO_Init+0x2d0>)
 8003b40:	689a      	ldr	r2, [r3, #8]
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	43db      	mvns	r3, r3
 8003b46:	4914      	ldr	r1, [pc, #80]	; (8003b98 <HAL_GPIO_Init+0x2d0>)
 8003b48:	4013      	ands	r3, r2
 8003b4a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d021      	beq.n	8003b9c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003b58:	4b0f      	ldr	r3, [pc, #60]	; (8003b98 <HAL_GPIO_Init+0x2d0>)
 8003b5a:	68da      	ldr	r2, [r3, #12]
 8003b5c:	490e      	ldr	r1, [pc, #56]	; (8003b98 <HAL_GPIO_Init+0x2d0>)
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	60cb      	str	r3, [r1, #12]
 8003b64:	e021      	b.n	8003baa <HAL_GPIO_Init+0x2e2>
 8003b66:	bf00      	nop
 8003b68:	10320000 	.word	0x10320000
 8003b6c:	10310000 	.word	0x10310000
 8003b70:	10220000 	.word	0x10220000
 8003b74:	10210000 	.word	0x10210000
 8003b78:	10120000 	.word	0x10120000
 8003b7c:	10110000 	.word	0x10110000
 8003b80:	40021000 	.word	0x40021000
 8003b84:	40010000 	.word	0x40010000
 8003b88:	40010800 	.word	0x40010800
 8003b8c:	40010c00 	.word	0x40010c00
 8003b90:	40011000 	.word	0x40011000
 8003b94:	40011400 	.word	0x40011400
 8003b98:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003b9c:	4b0b      	ldr	r3, [pc, #44]	; (8003bcc <HAL_GPIO_Init+0x304>)
 8003b9e:	68da      	ldr	r2, [r3, #12]
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	43db      	mvns	r3, r3
 8003ba4:	4909      	ldr	r1, [pc, #36]	; (8003bcc <HAL_GPIO_Init+0x304>)
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bac:	3301      	adds	r3, #1
 8003bae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	f47f ae8e 	bne.w	80038dc <HAL_GPIO_Init+0x14>
  }
}
 8003bc0:	bf00      	nop
 8003bc2:	bf00      	nop
 8003bc4:	372c      	adds	r7, #44	; 0x2c
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bc80      	pop	{r7}
 8003bca:	4770      	bx	lr
 8003bcc:	40010400 	.word	0x40010400

08003bd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	460b      	mov	r3, r1
 8003bda:	807b      	strh	r3, [r7, #2]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003be0:	787b      	ldrb	r3, [r7, #1]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d003      	beq.n	8003bee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003be6:	887a      	ldrh	r2, [r7, #2]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003bec:	e003      	b.n	8003bf6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003bee:	887b      	ldrh	r3, [r7, #2]
 8003bf0:	041a      	lsls	r2, r3, #16
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	611a      	str	r2, [r3, #16]
}
 8003bf6:	bf00      	nop
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bc80      	pop	{r7}
 8003bfe:	4770      	bx	lr

08003c00 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	460b      	mov	r3, r1
 8003c0a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003c12:	887a      	ldrh	r2, [r7, #2]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	4013      	ands	r3, r2
 8003c18:	041a      	lsls	r2, r3, #16
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	43d9      	mvns	r1, r3
 8003c1e:	887b      	ldrh	r3, [r7, #2]
 8003c20:	400b      	ands	r3, r1
 8003c22:	431a      	orrs	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	611a      	str	r2, [r3, #16]
}
 8003c28:	bf00      	nop
 8003c2a:	3714      	adds	r7, #20
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bc80      	pop	{r7}
 8003c30:	4770      	bx	lr
	...

08003c34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003c3e:	4b08      	ldr	r3, [pc, #32]	; (8003c60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c40:	695a      	ldr	r2, [r3, #20]
 8003c42:	88fb      	ldrh	r3, [r7, #6]
 8003c44:	4013      	ands	r3, r2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d006      	beq.n	8003c58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c4a:	4a05      	ldr	r2, [pc, #20]	; (8003c60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c4c:	88fb      	ldrh	r3, [r7, #6]
 8003c4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c50:	88fb      	ldrh	r3, [r7, #6]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7ff f902 	bl	8002e5c <HAL_GPIO_EXTI_Callback>
  }
}
 8003c58:	bf00      	nop
 8003c5a:	3708      	adds	r7, #8
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	40010400 	.word	0x40010400

08003c64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b086      	sub	sp, #24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d101      	bne.n	8003c76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e272      	b.n	800415c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	f000 8087 	beq.w	8003d92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c84:	4b92      	ldr	r3, [pc, #584]	; (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f003 030c 	and.w	r3, r3, #12
 8003c8c:	2b04      	cmp	r3, #4
 8003c8e:	d00c      	beq.n	8003caa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003c90:	4b8f      	ldr	r3, [pc, #572]	; (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f003 030c 	and.w	r3, r3, #12
 8003c98:	2b08      	cmp	r3, #8
 8003c9a:	d112      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x5e>
 8003c9c:	4b8c      	ldr	r3, [pc, #560]	; (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ca8:	d10b      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003caa:	4b89      	ldr	r3, [pc, #548]	; (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d06c      	beq.n	8003d90 <HAL_RCC_OscConfig+0x12c>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d168      	bne.n	8003d90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e24c      	b.n	800415c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cca:	d106      	bne.n	8003cda <HAL_RCC_OscConfig+0x76>
 8003ccc:	4b80      	ldr	r3, [pc, #512]	; (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a7f      	ldr	r2, [pc, #508]	; (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003cd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cd6:	6013      	str	r3, [r2, #0]
 8003cd8:	e02e      	b.n	8003d38 <HAL_RCC_OscConfig+0xd4>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d10c      	bne.n	8003cfc <HAL_RCC_OscConfig+0x98>
 8003ce2:	4b7b      	ldr	r3, [pc, #492]	; (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a7a      	ldr	r2, [pc, #488]	; (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003ce8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cec:	6013      	str	r3, [r2, #0]
 8003cee:	4b78      	ldr	r3, [pc, #480]	; (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a77      	ldr	r2, [pc, #476]	; (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003cf4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cf8:	6013      	str	r3, [r2, #0]
 8003cfa:	e01d      	b.n	8003d38 <HAL_RCC_OscConfig+0xd4>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d04:	d10c      	bne.n	8003d20 <HAL_RCC_OscConfig+0xbc>
 8003d06:	4b72      	ldr	r3, [pc, #456]	; (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a71      	ldr	r2, [pc, #452]	; (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003d0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d10:	6013      	str	r3, [r2, #0]
 8003d12:	4b6f      	ldr	r3, [pc, #444]	; (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a6e      	ldr	r2, [pc, #440]	; (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d1c:	6013      	str	r3, [r2, #0]
 8003d1e:	e00b      	b.n	8003d38 <HAL_RCC_OscConfig+0xd4>
 8003d20:	4b6b      	ldr	r3, [pc, #428]	; (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a6a      	ldr	r2, [pc, #424]	; (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003d26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d2a:	6013      	str	r3, [r2, #0]
 8003d2c:	4b68      	ldr	r3, [pc, #416]	; (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a67      	ldr	r2, [pc, #412]	; (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003d32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d36:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d013      	beq.n	8003d68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d40:	f7ff fbd6 	bl	80034f0 <HAL_GetTick>
 8003d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d46:	e008      	b.n	8003d5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d48:	f7ff fbd2 	bl	80034f0 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	2b64      	cmp	r3, #100	; 0x64
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e200      	b.n	800415c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d5a:	4b5d      	ldr	r3, [pc, #372]	; (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d0f0      	beq.n	8003d48 <HAL_RCC_OscConfig+0xe4>
 8003d66:	e014      	b.n	8003d92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d68:	f7ff fbc2 	bl	80034f0 <HAL_GetTick>
 8003d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d6e:	e008      	b.n	8003d82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d70:	f7ff fbbe 	bl	80034f0 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b64      	cmp	r3, #100	; 0x64
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e1ec      	b.n	800415c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d82:	4b53      	ldr	r3, [pc, #332]	; (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1f0      	bne.n	8003d70 <HAL_RCC_OscConfig+0x10c>
 8003d8e:	e000      	b.n	8003d92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d063      	beq.n	8003e66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d9e:	4b4c      	ldr	r3, [pc, #304]	; (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f003 030c 	and.w	r3, r3, #12
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00b      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003daa:	4b49      	ldr	r3, [pc, #292]	; (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f003 030c 	and.w	r3, r3, #12
 8003db2:	2b08      	cmp	r3, #8
 8003db4:	d11c      	bne.n	8003df0 <HAL_RCC_OscConfig+0x18c>
 8003db6:	4b46      	ldr	r3, [pc, #280]	; (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d116      	bne.n	8003df0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dc2:	4b43      	ldr	r3, [pc, #268]	; (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0302 	and.w	r3, r3, #2
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d005      	beq.n	8003dda <HAL_RCC_OscConfig+0x176>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d001      	beq.n	8003dda <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e1c0      	b.n	800415c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dda:	4b3d      	ldr	r3, [pc, #244]	; (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	00db      	lsls	r3, r3, #3
 8003de8:	4939      	ldr	r1, [pc, #228]	; (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dee:	e03a      	b.n	8003e66 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d020      	beq.n	8003e3a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003df8:	4b36      	ldr	r3, [pc, #216]	; (8003ed4 <HAL_RCC_OscConfig+0x270>)
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dfe:	f7ff fb77 	bl	80034f0 <HAL_GetTick>
 8003e02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e04:	e008      	b.n	8003e18 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e06:	f7ff fb73 	bl	80034f0 <HAL_GetTick>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d901      	bls.n	8003e18 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e1a1      	b.n	800415c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e18:	4b2d      	ldr	r3, [pc, #180]	; (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d0f0      	beq.n	8003e06 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e24:	4b2a      	ldr	r3, [pc, #168]	; (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	695b      	ldr	r3, [r3, #20]
 8003e30:	00db      	lsls	r3, r3, #3
 8003e32:	4927      	ldr	r1, [pc, #156]	; (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	600b      	str	r3, [r1, #0]
 8003e38:	e015      	b.n	8003e66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e3a:	4b26      	ldr	r3, [pc, #152]	; (8003ed4 <HAL_RCC_OscConfig+0x270>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e40:	f7ff fb56 	bl	80034f0 <HAL_GetTick>
 8003e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e46:	e008      	b.n	8003e5a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e48:	f7ff fb52 	bl	80034f0 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d901      	bls.n	8003e5a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e180      	b.n	800415c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e5a:	4b1d      	ldr	r3, [pc, #116]	; (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0302 	and.w	r3, r3, #2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1f0      	bne.n	8003e48 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0308 	and.w	r3, r3, #8
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d03a      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d019      	beq.n	8003eae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e7a:	4b17      	ldr	r3, [pc, #92]	; (8003ed8 <HAL_RCC_OscConfig+0x274>)
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e80:	f7ff fb36 	bl	80034f0 <HAL_GetTick>
 8003e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e86:	e008      	b.n	8003e9a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e88:	f7ff fb32 	bl	80034f0 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d901      	bls.n	8003e9a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e160      	b.n	800415c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e9a:	4b0d      	ldr	r3, [pc, #52]	; (8003ed0 <HAL_RCC_OscConfig+0x26c>)
 8003e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9e:	f003 0302 	and.w	r3, r3, #2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d0f0      	beq.n	8003e88 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003ea6:	2001      	movs	r0, #1
 8003ea8:	f000 fad8 	bl	800445c <RCC_Delay>
 8003eac:	e01c      	b.n	8003ee8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003eae:	4b0a      	ldr	r3, [pc, #40]	; (8003ed8 <HAL_RCC_OscConfig+0x274>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eb4:	f7ff fb1c 	bl	80034f0 <HAL_GetTick>
 8003eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003eba:	e00f      	b.n	8003edc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ebc:	f7ff fb18 	bl	80034f0 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d908      	bls.n	8003edc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e146      	b.n	800415c <HAL_RCC_OscConfig+0x4f8>
 8003ece:	bf00      	nop
 8003ed0:	40021000 	.word	0x40021000
 8003ed4:	42420000 	.word	0x42420000
 8003ed8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003edc:	4b92      	ldr	r3, [pc, #584]	; (8004128 <HAL_RCC_OscConfig+0x4c4>)
 8003ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1e9      	bne.n	8003ebc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0304 	and.w	r3, r3, #4
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	f000 80a6 	beq.w	8004042 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003efa:	4b8b      	ldr	r3, [pc, #556]	; (8004128 <HAL_RCC_OscConfig+0x4c4>)
 8003efc:	69db      	ldr	r3, [r3, #28]
 8003efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d10d      	bne.n	8003f22 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f06:	4b88      	ldr	r3, [pc, #544]	; (8004128 <HAL_RCC_OscConfig+0x4c4>)
 8003f08:	69db      	ldr	r3, [r3, #28]
 8003f0a:	4a87      	ldr	r2, [pc, #540]	; (8004128 <HAL_RCC_OscConfig+0x4c4>)
 8003f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f10:	61d3      	str	r3, [r2, #28]
 8003f12:	4b85      	ldr	r3, [pc, #532]	; (8004128 <HAL_RCC_OscConfig+0x4c4>)
 8003f14:	69db      	ldr	r3, [r3, #28]
 8003f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f1a:	60bb      	str	r3, [r7, #8]
 8003f1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f22:	4b82      	ldr	r3, [pc, #520]	; (800412c <HAL_RCC_OscConfig+0x4c8>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d118      	bne.n	8003f60 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f2e:	4b7f      	ldr	r3, [pc, #508]	; (800412c <HAL_RCC_OscConfig+0x4c8>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a7e      	ldr	r2, [pc, #504]	; (800412c <HAL_RCC_OscConfig+0x4c8>)
 8003f34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f3a:	f7ff fad9 	bl	80034f0 <HAL_GetTick>
 8003f3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f40:	e008      	b.n	8003f54 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f42:	f7ff fad5 	bl	80034f0 <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	2b64      	cmp	r3, #100	; 0x64
 8003f4e:	d901      	bls.n	8003f54 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	e103      	b.n	800415c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f54:	4b75      	ldr	r3, [pc, #468]	; (800412c <HAL_RCC_OscConfig+0x4c8>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d0f0      	beq.n	8003f42 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d106      	bne.n	8003f76 <HAL_RCC_OscConfig+0x312>
 8003f68:	4b6f      	ldr	r3, [pc, #444]	; (8004128 <HAL_RCC_OscConfig+0x4c4>)
 8003f6a:	6a1b      	ldr	r3, [r3, #32]
 8003f6c:	4a6e      	ldr	r2, [pc, #440]	; (8004128 <HAL_RCC_OscConfig+0x4c4>)
 8003f6e:	f043 0301 	orr.w	r3, r3, #1
 8003f72:	6213      	str	r3, [r2, #32]
 8003f74:	e02d      	b.n	8003fd2 <HAL_RCC_OscConfig+0x36e>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d10c      	bne.n	8003f98 <HAL_RCC_OscConfig+0x334>
 8003f7e:	4b6a      	ldr	r3, [pc, #424]	; (8004128 <HAL_RCC_OscConfig+0x4c4>)
 8003f80:	6a1b      	ldr	r3, [r3, #32]
 8003f82:	4a69      	ldr	r2, [pc, #420]	; (8004128 <HAL_RCC_OscConfig+0x4c4>)
 8003f84:	f023 0301 	bic.w	r3, r3, #1
 8003f88:	6213      	str	r3, [r2, #32]
 8003f8a:	4b67      	ldr	r3, [pc, #412]	; (8004128 <HAL_RCC_OscConfig+0x4c4>)
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	4a66      	ldr	r2, [pc, #408]	; (8004128 <HAL_RCC_OscConfig+0x4c4>)
 8003f90:	f023 0304 	bic.w	r3, r3, #4
 8003f94:	6213      	str	r3, [r2, #32]
 8003f96:	e01c      	b.n	8003fd2 <HAL_RCC_OscConfig+0x36e>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	2b05      	cmp	r3, #5
 8003f9e:	d10c      	bne.n	8003fba <HAL_RCC_OscConfig+0x356>
 8003fa0:	4b61      	ldr	r3, [pc, #388]	; (8004128 <HAL_RCC_OscConfig+0x4c4>)
 8003fa2:	6a1b      	ldr	r3, [r3, #32]
 8003fa4:	4a60      	ldr	r2, [pc, #384]	; (8004128 <HAL_RCC_OscConfig+0x4c4>)
 8003fa6:	f043 0304 	orr.w	r3, r3, #4
 8003faa:	6213      	str	r3, [r2, #32]
 8003fac:	4b5e      	ldr	r3, [pc, #376]	; (8004128 <HAL_RCC_OscConfig+0x4c4>)
 8003fae:	6a1b      	ldr	r3, [r3, #32]
 8003fb0:	4a5d      	ldr	r2, [pc, #372]	; (8004128 <HAL_RCC_OscConfig+0x4c4>)
 8003fb2:	f043 0301 	orr.w	r3, r3, #1
 8003fb6:	6213      	str	r3, [r2, #32]
 8003fb8:	e00b      	b.n	8003fd2 <HAL_RCC_OscConfig+0x36e>
 8003fba:	4b5b      	ldr	r3, [pc, #364]	; (8004128 <HAL_RCC_OscConfig+0x4c4>)
 8003fbc:	6a1b      	ldr	r3, [r3, #32]
 8003fbe:	4a5a      	ldr	r2, [pc, #360]	; (8004128 <HAL_RCC_OscConfig+0x4c4>)
 8003fc0:	f023 0301 	bic.w	r3, r3, #1
 8003fc4:	6213      	str	r3, [r2, #32]
 8003fc6:	4b58      	ldr	r3, [pc, #352]	; (8004128 <HAL_RCC_OscConfig+0x4c4>)
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	4a57      	ldr	r2, [pc, #348]	; (8004128 <HAL_RCC_OscConfig+0x4c4>)
 8003fcc:	f023 0304 	bic.w	r3, r3, #4
 8003fd0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d015      	beq.n	8004006 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fda:	f7ff fa89 	bl	80034f0 <HAL_GetTick>
 8003fde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fe0:	e00a      	b.n	8003ff8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fe2:	f7ff fa85 	bl	80034f0 <HAL_GetTick>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d901      	bls.n	8003ff8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e0b1      	b.n	800415c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ff8:	4b4b      	ldr	r3, [pc, #300]	; (8004128 <HAL_RCC_OscConfig+0x4c4>)
 8003ffa:	6a1b      	ldr	r3, [r3, #32]
 8003ffc:	f003 0302 	and.w	r3, r3, #2
 8004000:	2b00      	cmp	r3, #0
 8004002:	d0ee      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x37e>
 8004004:	e014      	b.n	8004030 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004006:	f7ff fa73 	bl	80034f0 <HAL_GetTick>
 800400a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800400c:	e00a      	b.n	8004024 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800400e:	f7ff fa6f 	bl	80034f0 <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	f241 3288 	movw	r2, #5000	; 0x1388
 800401c:	4293      	cmp	r3, r2
 800401e:	d901      	bls.n	8004024 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	e09b      	b.n	800415c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004024:	4b40      	ldr	r3, [pc, #256]	; (8004128 <HAL_RCC_OscConfig+0x4c4>)
 8004026:	6a1b      	ldr	r3, [r3, #32]
 8004028:	f003 0302 	and.w	r3, r3, #2
 800402c:	2b00      	cmp	r3, #0
 800402e:	d1ee      	bne.n	800400e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004030:	7dfb      	ldrb	r3, [r7, #23]
 8004032:	2b01      	cmp	r3, #1
 8004034:	d105      	bne.n	8004042 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004036:	4b3c      	ldr	r3, [pc, #240]	; (8004128 <HAL_RCC_OscConfig+0x4c4>)
 8004038:	69db      	ldr	r3, [r3, #28]
 800403a:	4a3b      	ldr	r2, [pc, #236]	; (8004128 <HAL_RCC_OscConfig+0x4c4>)
 800403c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004040:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	69db      	ldr	r3, [r3, #28]
 8004046:	2b00      	cmp	r3, #0
 8004048:	f000 8087 	beq.w	800415a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800404c:	4b36      	ldr	r3, [pc, #216]	; (8004128 <HAL_RCC_OscConfig+0x4c4>)
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f003 030c 	and.w	r3, r3, #12
 8004054:	2b08      	cmp	r3, #8
 8004056:	d061      	beq.n	800411c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	69db      	ldr	r3, [r3, #28]
 800405c:	2b02      	cmp	r3, #2
 800405e:	d146      	bne.n	80040ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004060:	4b33      	ldr	r3, [pc, #204]	; (8004130 <HAL_RCC_OscConfig+0x4cc>)
 8004062:	2200      	movs	r2, #0
 8004064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004066:	f7ff fa43 	bl	80034f0 <HAL_GetTick>
 800406a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800406c:	e008      	b.n	8004080 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800406e:	f7ff fa3f 	bl	80034f0 <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	2b02      	cmp	r3, #2
 800407a:	d901      	bls.n	8004080 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e06d      	b.n	800415c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004080:	4b29      	ldr	r3, [pc, #164]	; (8004128 <HAL_RCC_OscConfig+0x4c4>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d1f0      	bne.n	800406e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004094:	d108      	bne.n	80040a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004096:	4b24      	ldr	r3, [pc, #144]	; (8004128 <HAL_RCC_OscConfig+0x4c4>)
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	4921      	ldr	r1, [pc, #132]	; (8004128 <HAL_RCC_OscConfig+0x4c4>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040a8:	4b1f      	ldr	r3, [pc, #124]	; (8004128 <HAL_RCC_OscConfig+0x4c4>)
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a19      	ldr	r1, [r3, #32]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b8:	430b      	orrs	r3, r1
 80040ba:	491b      	ldr	r1, [pc, #108]	; (8004128 <HAL_RCC_OscConfig+0x4c4>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040c0:	4b1b      	ldr	r3, [pc, #108]	; (8004130 <HAL_RCC_OscConfig+0x4cc>)
 80040c2:	2201      	movs	r2, #1
 80040c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c6:	f7ff fa13 	bl	80034f0 <HAL_GetTick>
 80040ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040cc:	e008      	b.n	80040e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040ce:	f7ff fa0f 	bl	80034f0 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d901      	bls.n	80040e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e03d      	b.n	800415c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040e0:	4b11      	ldr	r3, [pc, #68]	; (8004128 <HAL_RCC_OscConfig+0x4c4>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d0f0      	beq.n	80040ce <HAL_RCC_OscConfig+0x46a>
 80040ec:	e035      	b.n	800415a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ee:	4b10      	ldr	r3, [pc, #64]	; (8004130 <HAL_RCC_OscConfig+0x4cc>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f4:	f7ff f9fc 	bl	80034f0 <HAL_GetTick>
 80040f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040fa:	e008      	b.n	800410e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040fc:	f7ff f9f8 	bl	80034f0 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	2b02      	cmp	r3, #2
 8004108:	d901      	bls.n	800410e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e026      	b.n	800415c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800410e:	4b06      	ldr	r3, [pc, #24]	; (8004128 <HAL_RCC_OscConfig+0x4c4>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1f0      	bne.n	80040fc <HAL_RCC_OscConfig+0x498>
 800411a:	e01e      	b.n	800415a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	69db      	ldr	r3, [r3, #28]
 8004120:	2b01      	cmp	r3, #1
 8004122:	d107      	bne.n	8004134 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e019      	b.n	800415c <HAL_RCC_OscConfig+0x4f8>
 8004128:	40021000 	.word	0x40021000
 800412c:	40007000 	.word	0x40007000
 8004130:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004134:	4b0b      	ldr	r3, [pc, #44]	; (8004164 <HAL_RCC_OscConfig+0x500>)
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a1b      	ldr	r3, [r3, #32]
 8004144:	429a      	cmp	r2, r3
 8004146:	d106      	bne.n	8004156 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004152:	429a      	cmp	r2, r3
 8004154:	d001      	beq.n	800415a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e000      	b.n	800415c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800415a:	2300      	movs	r3, #0
}
 800415c:	4618      	mov	r0, r3
 800415e:	3718      	adds	r7, #24
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	40021000 	.word	0x40021000

08004168 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d101      	bne.n	800417c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e0d0      	b.n	800431e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800417c:	4b6a      	ldr	r3, [pc, #424]	; (8004328 <HAL_RCC_ClockConfig+0x1c0>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0307 	and.w	r3, r3, #7
 8004184:	683a      	ldr	r2, [r7, #0]
 8004186:	429a      	cmp	r2, r3
 8004188:	d910      	bls.n	80041ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800418a:	4b67      	ldr	r3, [pc, #412]	; (8004328 <HAL_RCC_ClockConfig+0x1c0>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f023 0207 	bic.w	r2, r3, #7
 8004192:	4965      	ldr	r1, [pc, #404]	; (8004328 <HAL_RCC_ClockConfig+0x1c0>)
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	4313      	orrs	r3, r2
 8004198:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800419a:	4b63      	ldr	r3, [pc, #396]	; (8004328 <HAL_RCC_ClockConfig+0x1c0>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0307 	and.w	r3, r3, #7
 80041a2:	683a      	ldr	r2, [r7, #0]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d001      	beq.n	80041ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e0b8      	b.n	800431e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0302 	and.w	r3, r3, #2
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d020      	beq.n	80041fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0304 	and.w	r3, r3, #4
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d005      	beq.n	80041d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041c4:	4b59      	ldr	r3, [pc, #356]	; (800432c <HAL_RCC_ClockConfig+0x1c4>)
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	4a58      	ldr	r2, [pc, #352]	; (800432c <HAL_RCC_ClockConfig+0x1c4>)
 80041ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80041ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0308 	and.w	r3, r3, #8
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d005      	beq.n	80041e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041dc:	4b53      	ldr	r3, [pc, #332]	; (800432c <HAL_RCC_ClockConfig+0x1c4>)
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	4a52      	ldr	r2, [pc, #328]	; (800432c <HAL_RCC_ClockConfig+0x1c4>)
 80041e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80041e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041e8:	4b50      	ldr	r3, [pc, #320]	; (800432c <HAL_RCC_ClockConfig+0x1c4>)
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	494d      	ldr	r1, [pc, #308]	; (800432c <HAL_RCC_ClockConfig+0x1c4>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0301 	and.w	r3, r3, #1
 8004202:	2b00      	cmp	r3, #0
 8004204:	d040      	beq.n	8004288 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	2b01      	cmp	r3, #1
 800420c:	d107      	bne.n	800421e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800420e:	4b47      	ldr	r3, [pc, #284]	; (800432c <HAL_RCC_ClockConfig+0x1c4>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d115      	bne.n	8004246 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e07f      	b.n	800431e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	2b02      	cmp	r3, #2
 8004224:	d107      	bne.n	8004236 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004226:	4b41      	ldr	r3, [pc, #260]	; (800432c <HAL_RCC_ClockConfig+0x1c4>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d109      	bne.n	8004246 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e073      	b.n	800431e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004236:	4b3d      	ldr	r3, [pc, #244]	; (800432c <HAL_RCC_ClockConfig+0x1c4>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0302 	and.w	r3, r3, #2
 800423e:	2b00      	cmp	r3, #0
 8004240:	d101      	bne.n	8004246 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e06b      	b.n	800431e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004246:	4b39      	ldr	r3, [pc, #228]	; (800432c <HAL_RCC_ClockConfig+0x1c4>)
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	f023 0203 	bic.w	r2, r3, #3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	4936      	ldr	r1, [pc, #216]	; (800432c <HAL_RCC_ClockConfig+0x1c4>)
 8004254:	4313      	orrs	r3, r2
 8004256:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004258:	f7ff f94a 	bl	80034f0 <HAL_GetTick>
 800425c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800425e:	e00a      	b.n	8004276 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004260:	f7ff f946 	bl	80034f0 <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	f241 3288 	movw	r2, #5000	; 0x1388
 800426e:	4293      	cmp	r3, r2
 8004270:	d901      	bls.n	8004276 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e053      	b.n	800431e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004276:	4b2d      	ldr	r3, [pc, #180]	; (800432c <HAL_RCC_ClockConfig+0x1c4>)
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f003 020c 	and.w	r2, r3, #12
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	429a      	cmp	r2, r3
 8004286:	d1eb      	bne.n	8004260 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004288:	4b27      	ldr	r3, [pc, #156]	; (8004328 <HAL_RCC_ClockConfig+0x1c0>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0307 	and.w	r3, r3, #7
 8004290:	683a      	ldr	r2, [r7, #0]
 8004292:	429a      	cmp	r2, r3
 8004294:	d210      	bcs.n	80042b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004296:	4b24      	ldr	r3, [pc, #144]	; (8004328 <HAL_RCC_ClockConfig+0x1c0>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f023 0207 	bic.w	r2, r3, #7
 800429e:	4922      	ldr	r1, [pc, #136]	; (8004328 <HAL_RCC_ClockConfig+0x1c0>)
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042a6:	4b20      	ldr	r3, [pc, #128]	; (8004328 <HAL_RCC_ClockConfig+0x1c0>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0307 	and.w	r3, r3, #7
 80042ae:	683a      	ldr	r2, [r7, #0]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d001      	beq.n	80042b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e032      	b.n	800431e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0304 	and.w	r3, r3, #4
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d008      	beq.n	80042d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042c4:	4b19      	ldr	r3, [pc, #100]	; (800432c <HAL_RCC_ClockConfig+0x1c4>)
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	4916      	ldr	r1, [pc, #88]	; (800432c <HAL_RCC_ClockConfig+0x1c4>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0308 	and.w	r3, r3, #8
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d009      	beq.n	80042f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80042e2:	4b12      	ldr	r3, [pc, #72]	; (800432c <HAL_RCC_ClockConfig+0x1c4>)
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	00db      	lsls	r3, r3, #3
 80042f0:	490e      	ldr	r1, [pc, #56]	; (800432c <HAL_RCC_ClockConfig+0x1c4>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80042f6:	f000 f821 	bl	800433c <HAL_RCC_GetSysClockFreq>
 80042fa:	4602      	mov	r2, r0
 80042fc:	4b0b      	ldr	r3, [pc, #44]	; (800432c <HAL_RCC_ClockConfig+0x1c4>)
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	091b      	lsrs	r3, r3, #4
 8004302:	f003 030f 	and.w	r3, r3, #15
 8004306:	490a      	ldr	r1, [pc, #40]	; (8004330 <HAL_RCC_ClockConfig+0x1c8>)
 8004308:	5ccb      	ldrb	r3, [r1, r3]
 800430a:	fa22 f303 	lsr.w	r3, r2, r3
 800430e:	4a09      	ldr	r2, [pc, #36]	; (8004334 <HAL_RCC_ClockConfig+0x1cc>)
 8004310:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004312:	4b09      	ldr	r3, [pc, #36]	; (8004338 <HAL_RCC_ClockConfig+0x1d0>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4618      	mov	r0, r3
 8004318:	f7ff f8a8 	bl	800346c <HAL_InitTick>

  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3710      	adds	r7, #16
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	40022000 	.word	0x40022000
 800432c:	40021000 	.word	0x40021000
 8004330:	08008994 	.word	0x08008994
 8004334:	20000000 	.word	0x20000000
 8004338:	20000004 	.word	0x20000004

0800433c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800433c:	b490      	push	{r4, r7}
 800433e:	b08a      	sub	sp, #40	; 0x28
 8004340:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004342:	4b29      	ldr	r3, [pc, #164]	; (80043e8 <HAL_RCC_GetSysClockFreq+0xac>)
 8004344:	1d3c      	adds	r4, r7, #4
 8004346:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004348:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800434c:	f240 2301 	movw	r3, #513	; 0x201
 8004350:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004352:	2300      	movs	r3, #0
 8004354:	61fb      	str	r3, [r7, #28]
 8004356:	2300      	movs	r3, #0
 8004358:	61bb      	str	r3, [r7, #24]
 800435a:	2300      	movs	r3, #0
 800435c:	627b      	str	r3, [r7, #36]	; 0x24
 800435e:	2300      	movs	r3, #0
 8004360:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004362:	2300      	movs	r3, #0
 8004364:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004366:	4b21      	ldr	r3, [pc, #132]	; (80043ec <HAL_RCC_GetSysClockFreq+0xb0>)
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	f003 030c 	and.w	r3, r3, #12
 8004372:	2b04      	cmp	r3, #4
 8004374:	d002      	beq.n	800437c <HAL_RCC_GetSysClockFreq+0x40>
 8004376:	2b08      	cmp	r3, #8
 8004378:	d003      	beq.n	8004382 <HAL_RCC_GetSysClockFreq+0x46>
 800437a:	e02b      	b.n	80043d4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800437c:	4b1c      	ldr	r3, [pc, #112]	; (80043f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800437e:	623b      	str	r3, [r7, #32]
      break;
 8004380:	e02b      	b.n	80043da <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	0c9b      	lsrs	r3, r3, #18
 8004386:	f003 030f 	and.w	r3, r3, #15
 800438a:	3328      	adds	r3, #40	; 0x28
 800438c:	443b      	add	r3, r7
 800438e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004392:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d012      	beq.n	80043c4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800439e:	4b13      	ldr	r3, [pc, #76]	; (80043ec <HAL_RCC_GetSysClockFreq+0xb0>)
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	0c5b      	lsrs	r3, r3, #17
 80043a4:	f003 0301 	and.w	r3, r3, #1
 80043a8:	3328      	adds	r3, #40	; 0x28
 80043aa:	443b      	add	r3, r7
 80043ac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80043b0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	4a0e      	ldr	r2, [pc, #56]	; (80043f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80043b6:	fb03 f202 	mul.w	r2, r3, r2
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c0:	627b      	str	r3, [r7, #36]	; 0x24
 80043c2:	e004      	b.n	80043ce <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	4a0b      	ldr	r2, [pc, #44]	; (80043f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043c8:	fb02 f303 	mul.w	r3, r2, r3
 80043cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80043ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d0:	623b      	str	r3, [r7, #32]
      break;
 80043d2:	e002      	b.n	80043da <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80043d4:	4b06      	ldr	r3, [pc, #24]	; (80043f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80043d6:	623b      	str	r3, [r7, #32]
      break;
 80043d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043da:	6a3b      	ldr	r3, [r7, #32]
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3728      	adds	r7, #40	; 0x28
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bc90      	pop	{r4, r7}
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	08008984 	.word	0x08008984
 80043ec:	40021000 	.word	0x40021000
 80043f0:	007a1200 	.word	0x007a1200
 80043f4:	003d0900 	.word	0x003d0900

080043f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043f8:	b480      	push	{r7}
 80043fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043fc:	4b02      	ldr	r3, [pc, #8]	; (8004408 <HAL_RCC_GetHCLKFreq+0x10>)
 80043fe:	681b      	ldr	r3, [r3, #0]
}
 8004400:	4618      	mov	r0, r3
 8004402:	46bd      	mov	sp, r7
 8004404:	bc80      	pop	{r7}
 8004406:	4770      	bx	lr
 8004408:	20000000 	.word	0x20000000

0800440c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004410:	f7ff fff2 	bl	80043f8 <HAL_RCC_GetHCLKFreq>
 8004414:	4602      	mov	r2, r0
 8004416:	4b05      	ldr	r3, [pc, #20]	; (800442c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	0a1b      	lsrs	r3, r3, #8
 800441c:	f003 0307 	and.w	r3, r3, #7
 8004420:	4903      	ldr	r1, [pc, #12]	; (8004430 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004422:	5ccb      	ldrb	r3, [r1, r3]
 8004424:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004428:	4618      	mov	r0, r3
 800442a:	bd80      	pop	{r7, pc}
 800442c:	40021000 	.word	0x40021000
 8004430:	080089a4 	.word	0x080089a4

08004434 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004438:	f7ff ffde 	bl	80043f8 <HAL_RCC_GetHCLKFreq>
 800443c:	4602      	mov	r2, r0
 800443e:	4b05      	ldr	r3, [pc, #20]	; (8004454 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	0adb      	lsrs	r3, r3, #11
 8004444:	f003 0307 	and.w	r3, r3, #7
 8004448:	4903      	ldr	r1, [pc, #12]	; (8004458 <HAL_RCC_GetPCLK2Freq+0x24>)
 800444a:	5ccb      	ldrb	r3, [r1, r3]
 800444c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004450:	4618      	mov	r0, r3
 8004452:	bd80      	pop	{r7, pc}
 8004454:	40021000 	.word	0x40021000
 8004458:	080089a4 	.word	0x080089a4

0800445c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800445c:	b480      	push	{r7}
 800445e:	b085      	sub	sp, #20
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004464:	4b0a      	ldr	r3, [pc, #40]	; (8004490 <RCC_Delay+0x34>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a0a      	ldr	r2, [pc, #40]	; (8004494 <RCC_Delay+0x38>)
 800446a:	fba2 2303 	umull	r2, r3, r2, r3
 800446e:	0a5b      	lsrs	r3, r3, #9
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	fb02 f303 	mul.w	r3, r2, r3
 8004476:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004478:	bf00      	nop
  }
  while (Delay --);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	1e5a      	subs	r2, r3, #1
 800447e:	60fa      	str	r2, [r7, #12]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d1f9      	bne.n	8004478 <RCC_Delay+0x1c>
}
 8004484:	bf00      	nop
 8004486:	bf00      	nop
 8004488:	3714      	adds	r7, #20
 800448a:	46bd      	mov	sp, r7
 800448c:	bc80      	pop	{r7}
 800448e:	4770      	bx	lr
 8004490:	20000000 	.word	0x20000000
 8004494:	10624dd3 	.word	0x10624dd3

08004498 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d101      	bne.n	80044aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e076      	b.n	8004598 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d108      	bne.n	80044c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044ba:	d009      	beq.n	80044d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	61da      	str	r2, [r3, #28]
 80044c2:	e005      	b.n	80044d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d106      	bne.n	80044f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f7fe fd0a 	bl	8002f04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2202      	movs	r2, #2
 80044f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004506:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004518:	431a      	orrs	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004522:	431a      	orrs	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	f003 0302 	and.w	r3, r3, #2
 800452c:	431a      	orrs	r2, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	695b      	ldr	r3, [r3, #20]
 8004532:	f003 0301 	and.w	r3, r3, #1
 8004536:	431a      	orrs	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004540:	431a      	orrs	r2, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	69db      	ldr	r3, [r3, #28]
 8004546:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800454a:	431a      	orrs	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a1b      	ldr	r3, [r3, #32]
 8004550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004554:	ea42 0103 	orr.w	r1, r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800455c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	430a      	orrs	r2, r1
 8004566:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	699b      	ldr	r3, [r3, #24]
 800456c:	0c1a      	lsrs	r2, r3, #16
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f002 0204 	and.w	r2, r2, #4
 8004576:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	69da      	ldr	r2, [r3, #28]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004586:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2201      	movs	r2, #1
 8004592:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	3708      	adds	r7, #8
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b08c      	sub	sp, #48	; 0x30
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
 80045ac:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80045ae:	2301      	movs	r3, #1
 80045b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80045b2:	2300      	movs	r3, #0
 80045b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d101      	bne.n	80045c6 <HAL_SPI_TransmitReceive+0x26>
 80045c2:	2302      	movs	r3, #2
 80045c4:	e18a      	b.n	80048dc <HAL_SPI_TransmitReceive+0x33c>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2201      	movs	r2, #1
 80045ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045ce:	f7fe ff8f 	bl	80034f0 <HAL_GetTick>
 80045d2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80045e4:	887b      	ldrh	r3, [r7, #2]
 80045e6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80045e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d00f      	beq.n	8004610 <HAL_SPI_TransmitReceive+0x70>
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045f6:	d107      	bne.n	8004608 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d103      	bne.n	8004608 <HAL_SPI_TransmitReceive+0x68>
 8004600:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004604:	2b04      	cmp	r3, #4
 8004606:	d003      	beq.n	8004610 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004608:	2302      	movs	r3, #2
 800460a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800460e:	e15b      	b.n	80048c8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d005      	beq.n	8004622 <HAL_SPI_TransmitReceive+0x82>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d002      	beq.n	8004622 <HAL_SPI_TransmitReceive+0x82>
 800461c:	887b      	ldrh	r3, [r7, #2]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d103      	bne.n	800462a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004628:	e14e      	b.n	80048c8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004630:	b2db      	uxtb	r3, r3
 8004632:	2b04      	cmp	r3, #4
 8004634:	d003      	beq.n	800463e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2205      	movs	r2, #5
 800463a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	887a      	ldrh	r2, [r7, #2]
 800464e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	887a      	ldrh	r2, [r7, #2]
 8004654:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	68ba      	ldr	r2, [r7, #8]
 800465a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	887a      	ldrh	r2, [r7, #2]
 8004660:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	887a      	ldrh	r2, [r7, #2]
 8004666:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2200      	movs	r2, #0
 800466c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800467e:	2b40      	cmp	r3, #64	; 0x40
 8004680:	d007      	beq.n	8004692 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004690:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800469a:	d178      	bne.n	800478e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d002      	beq.n	80046aa <HAL_SPI_TransmitReceive+0x10a>
 80046a4:	8b7b      	ldrh	r3, [r7, #26]
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d166      	bne.n	8004778 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ae:	881a      	ldrh	r2, [r3, #0]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ba:	1c9a      	adds	r2, r3, #2
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	3b01      	subs	r3, #1
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046ce:	e053      	b.n	8004778 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d11b      	bne.n	8004716 <HAL_SPI_TransmitReceive+0x176>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d016      	beq.n	8004716 <HAL_SPI_TransmitReceive+0x176>
 80046e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d113      	bne.n	8004716 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f2:	881a      	ldrh	r2, [r3, #0]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fe:	1c9a      	adds	r2, r3, #2
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004708:	b29b      	uxth	r3, r3
 800470a:	3b01      	subs	r3, #1
 800470c:	b29a      	uxth	r2, r3
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004712:	2300      	movs	r3, #0
 8004714:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	f003 0301 	and.w	r3, r3, #1
 8004720:	2b01      	cmp	r3, #1
 8004722:	d119      	bne.n	8004758 <HAL_SPI_TransmitReceive+0x1b8>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004728:	b29b      	uxth	r3, r3
 800472a:	2b00      	cmp	r3, #0
 800472c:	d014      	beq.n	8004758 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68da      	ldr	r2, [r3, #12]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004738:	b292      	uxth	r2, r2
 800473a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004740:	1c9a      	adds	r2, r3, #2
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800474a:	b29b      	uxth	r3, r3
 800474c:	3b01      	subs	r3, #1
 800474e:	b29a      	uxth	r2, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004754:	2301      	movs	r3, #1
 8004756:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004758:	f7fe feca 	bl	80034f0 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004764:	429a      	cmp	r2, r3
 8004766:	d807      	bhi.n	8004778 <HAL_SPI_TransmitReceive+0x1d8>
 8004768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800476a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800476e:	d003      	beq.n	8004778 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004776:	e0a7      	b.n	80048c8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800477c:	b29b      	uxth	r3, r3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d1a6      	bne.n	80046d0 <HAL_SPI_TransmitReceive+0x130>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004786:	b29b      	uxth	r3, r3
 8004788:	2b00      	cmp	r3, #0
 800478a:	d1a1      	bne.n	80046d0 <HAL_SPI_TransmitReceive+0x130>
 800478c:	e07c      	b.n	8004888 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d002      	beq.n	800479c <HAL_SPI_TransmitReceive+0x1fc>
 8004796:	8b7b      	ldrh	r3, [r7, #26]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d16b      	bne.n	8004874 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	330c      	adds	r3, #12
 80047a6:	7812      	ldrb	r2, [r2, #0]
 80047a8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ae:	1c5a      	adds	r2, r3, #1
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	3b01      	subs	r3, #1
 80047bc:	b29a      	uxth	r2, r3
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047c2:	e057      	b.n	8004874 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f003 0302 	and.w	r3, r3, #2
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d11c      	bne.n	800480c <HAL_SPI_TransmitReceive+0x26c>
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d017      	beq.n	800480c <HAL_SPI_TransmitReceive+0x26c>
 80047dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d114      	bne.n	800480c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	330c      	adds	r3, #12
 80047ec:	7812      	ldrb	r2, [r2, #0]
 80047ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f4:	1c5a      	adds	r2, r3, #1
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047fe:	b29b      	uxth	r3, r3
 8004800:	3b01      	subs	r3, #1
 8004802:	b29a      	uxth	r2, r3
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004808:	2300      	movs	r3, #0
 800480a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f003 0301 	and.w	r3, r3, #1
 8004816:	2b01      	cmp	r3, #1
 8004818:	d119      	bne.n	800484e <HAL_SPI_TransmitReceive+0x2ae>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800481e:	b29b      	uxth	r3, r3
 8004820:	2b00      	cmp	r3, #0
 8004822:	d014      	beq.n	800484e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68da      	ldr	r2, [r3, #12]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800482e:	b2d2      	uxtb	r2, r2
 8004830:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004836:	1c5a      	adds	r2, r3, #1
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004840:	b29b      	uxth	r3, r3
 8004842:	3b01      	subs	r3, #1
 8004844:	b29a      	uxth	r2, r3
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800484a:	2301      	movs	r3, #1
 800484c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800484e:	f7fe fe4f 	bl	80034f0 <HAL_GetTick>
 8004852:	4602      	mov	r2, r0
 8004854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800485a:	429a      	cmp	r2, r3
 800485c:	d803      	bhi.n	8004866 <HAL_SPI_TransmitReceive+0x2c6>
 800485e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004864:	d102      	bne.n	800486c <HAL_SPI_TransmitReceive+0x2cc>
 8004866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004868:	2b00      	cmp	r3, #0
 800486a:	d103      	bne.n	8004874 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004872:	e029      	b.n	80048c8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004878:	b29b      	uxth	r3, r3
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1a2      	bne.n	80047c4 <HAL_SPI_TransmitReceive+0x224>
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004882:	b29b      	uxth	r3, r3
 8004884:	2b00      	cmp	r3, #0
 8004886:	d19d      	bne.n	80047c4 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800488a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800488c:	68f8      	ldr	r0, [r7, #12]
 800488e:	f000 f8b1 	bl	80049f4 <SPI_EndRxTxTransaction>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d006      	beq.n	80048a6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2220      	movs	r2, #32
 80048a2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80048a4:	e010      	b.n	80048c8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d10b      	bne.n	80048c6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80048ae:	2300      	movs	r3, #0
 80048b0:	617b      	str	r3, [r7, #20]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	617b      	str	r3, [r7, #20]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	617b      	str	r3, [r7, #20]
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	e000      	b.n	80048c8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80048c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2200      	movs	r2, #0
 80048d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80048d8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3730      	adds	r7, #48	; 0x30
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b088      	sub	sp, #32
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	603b      	str	r3, [r7, #0]
 80048f0:	4613      	mov	r3, r2
 80048f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80048f4:	f7fe fdfc 	bl	80034f0 <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fc:	1a9b      	subs	r3, r3, r2
 80048fe:	683a      	ldr	r2, [r7, #0]
 8004900:	4413      	add	r3, r2
 8004902:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004904:	f7fe fdf4 	bl	80034f0 <HAL_GetTick>
 8004908:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800490a:	4b39      	ldr	r3, [pc, #228]	; (80049f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	015b      	lsls	r3, r3, #5
 8004910:	0d1b      	lsrs	r3, r3, #20
 8004912:	69fa      	ldr	r2, [r7, #28]
 8004914:	fb02 f303 	mul.w	r3, r2, r3
 8004918:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800491a:	e054      	b.n	80049c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004922:	d050      	beq.n	80049c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004924:	f7fe fde4 	bl	80034f0 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	69fa      	ldr	r2, [r7, #28]
 8004930:	429a      	cmp	r2, r3
 8004932:	d902      	bls.n	800493a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d13d      	bne.n	80049b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	685a      	ldr	r2, [r3, #4]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004948:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004952:	d111      	bne.n	8004978 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800495c:	d004      	beq.n	8004968 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004966:	d107      	bne.n	8004978 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004976:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004980:	d10f      	bne.n	80049a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004990:	601a      	str	r2, [r3, #0]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e017      	b.n	80049e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d101      	bne.n	80049c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80049bc:	2300      	movs	r3, #0
 80049be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	3b01      	subs	r3, #1
 80049c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	689a      	ldr	r2, [r3, #8]
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	4013      	ands	r3, r2
 80049d0:	68ba      	ldr	r2, [r7, #8]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	bf0c      	ite	eq
 80049d6:	2301      	moveq	r3, #1
 80049d8:	2300      	movne	r3, #0
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	461a      	mov	r2, r3
 80049de:	79fb      	ldrb	r3, [r7, #7]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d19b      	bne.n	800491c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3720      	adds	r7, #32
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	20000000 	.word	0x20000000

080049f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b086      	sub	sp, #24
 80049f8:	af02      	add	r7, sp, #8
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	9300      	str	r3, [sp, #0]
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	2200      	movs	r2, #0
 8004a08:	2180      	movs	r1, #128	; 0x80
 8004a0a:	68f8      	ldr	r0, [r7, #12]
 8004a0c:	f7ff ff6a 	bl	80048e4 <SPI_WaitFlagStateUntilTimeout>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d007      	beq.n	8004a26 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a1a:	f043 0220 	orr.w	r2, r3, #32
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e000      	b.n	8004a28 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3710      	adds	r7, #16
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d101      	bne.n	8004a42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e041      	b.n	8004ac6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d106      	bne.n	8004a5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f7fe fc28 	bl	80032ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2202      	movs	r2, #2
 8004a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	3304      	adds	r3, #4
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	4610      	mov	r0, r2
 8004a70:	f000 fa70 	bl	8004f54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3708      	adds	r7, #8
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
	...

08004ad0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b085      	sub	sp, #20
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d001      	beq.n	8004ae8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e03a      	b.n	8004b5e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2202      	movs	r2, #2
 8004aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68da      	ldr	r2, [r3, #12]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f042 0201 	orr.w	r2, r2, #1
 8004afe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a18      	ldr	r2, [pc, #96]	; (8004b68 <HAL_TIM_Base_Start_IT+0x98>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d00e      	beq.n	8004b28 <HAL_TIM_Base_Start_IT+0x58>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b12:	d009      	beq.n	8004b28 <HAL_TIM_Base_Start_IT+0x58>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a14      	ldr	r2, [pc, #80]	; (8004b6c <HAL_TIM_Base_Start_IT+0x9c>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d004      	beq.n	8004b28 <HAL_TIM_Base_Start_IT+0x58>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a13      	ldr	r2, [pc, #76]	; (8004b70 <HAL_TIM_Base_Start_IT+0xa0>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d111      	bne.n	8004b4c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f003 0307 	and.w	r3, r3, #7
 8004b32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2b06      	cmp	r3, #6
 8004b38:	d010      	beq.n	8004b5c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f042 0201 	orr.w	r2, r2, #1
 8004b48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b4a:	e007      	b.n	8004b5c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f042 0201 	orr.w	r2, r2, #1
 8004b5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3714      	adds	r7, #20
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bc80      	pop	{r7}
 8004b66:	4770      	bx	lr
 8004b68:	40012c00 	.word	0x40012c00
 8004b6c:	40000400 	.word	0x40000400
 8004b70:	40000800 	.word	0x40000800

08004b74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	f003 0302 	and.w	r3, r3, #2
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d122      	bne.n	8004bd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	f003 0302 	and.w	r3, r3, #2
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d11b      	bne.n	8004bd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f06f 0202 	mvn.w	r2, #2
 8004ba0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	f003 0303 	and.w	r3, r3, #3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d003      	beq.n	8004bbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 f9b1 	bl	8004f1e <HAL_TIM_IC_CaptureCallback>
 8004bbc:	e005      	b.n	8004bca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 f9a4 	bl	8004f0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 f9b3 	bl	8004f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	f003 0304 	and.w	r3, r3, #4
 8004bda:	2b04      	cmp	r3, #4
 8004bdc:	d122      	bne.n	8004c24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	f003 0304 	and.w	r3, r3, #4
 8004be8:	2b04      	cmp	r3, #4
 8004bea:	d11b      	bne.n	8004c24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f06f 0204 	mvn.w	r2, #4
 8004bf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2202      	movs	r2, #2
 8004bfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	699b      	ldr	r3, [r3, #24]
 8004c02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d003      	beq.n	8004c12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 f987 	bl	8004f1e <HAL_TIM_IC_CaptureCallback>
 8004c10:	e005      	b.n	8004c1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 f97a 	bl	8004f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f000 f989 	bl	8004f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	f003 0308 	and.w	r3, r3, #8
 8004c2e:	2b08      	cmp	r3, #8
 8004c30:	d122      	bne.n	8004c78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	f003 0308 	and.w	r3, r3, #8
 8004c3c:	2b08      	cmp	r3, #8
 8004c3e:	d11b      	bne.n	8004c78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f06f 0208 	mvn.w	r2, #8
 8004c48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2204      	movs	r2, #4
 8004c4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	69db      	ldr	r3, [r3, #28]
 8004c56:	f003 0303 	and.w	r3, r3, #3
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d003      	beq.n	8004c66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 f95d 	bl	8004f1e <HAL_TIM_IC_CaptureCallback>
 8004c64:	e005      	b.n	8004c72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 f950 	bl	8004f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f000 f95f 	bl	8004f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	f003 0310 	and.w	r3, r3, #16
 8004c82:	2b10      	cmp	r3, #16
 8004c84:	d122      	bne.n	8004ccc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	f003 0310 	and.w	r3, r3, #16
 8004c90:	2b10      	cmp	r3, #16
 8004c92:	d11b      	bne.n	8004ccc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f06f 0210 	mvn.w	r2, #16
 8004c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2208      	movs	r2, #8
 8004ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	69db      	ldr	r3, [r3, #28]
 8004caa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d003      	beq.n	8004cba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 f933 	bl	8004f1e <HAL_TIM_IC_CaptureCallback>
 8004cb8:	e005      	b.n	8004cc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 f926 	bl	8004f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f000 f935 	bl	8004f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	f003 0301 	and.w	r3, r3, #1
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d10e      	bne.n	8004cf8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	f003 0301 	and.w	r3, r3, #1
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d107      	bne.n	8004cf8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f06f 0201 	mvn.w	r2, #1
 8004cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f7fd ff2c 	bl	8002b50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d02:	2b80      	cmp	r3, #128	; 0x80
 8004d04:	d10e      	bne.n	8004d24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d10:	2b80      	cmp	r3, #128	; 0x80
 8004d12:	d107      	bne.n	8004d24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 fa77 	bl	8005212 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d2e:	2b40      	cmp	r3, #64	; 0x40
 8004d30:	d10e      	bne.n	8004d50 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d3c:	2b40      	cmp	r3, #64	; 0x40
 8004d3e:	d107      	bne.n	8004d50 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 f8f9 	bl	8004f42 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	f003 0320 	and.w	r3, r3, #32
 8004d5a:	2b20      	cmp	r3, #32
 8004d5c:	d10e      	bne.n	8004d7c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	f003 0320 	and.w	r3, r3, #32
 8004d68:	2b20      	cmp	r3, #32
 8004d6a:	d107      	bne.n	8004d7c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f06f 0220 	mvn.w	r2, #32
 8004d74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 fa42 	bl	8005200 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d7c:	bf00      	nop
 8004d7e:	3708      	adds	r7, #8
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d101      	bne.n	8004d9c <HAL_TIM_ConfigClockSource+0x18>
 8004d98:	2302      	movs	r3, #2
 8004d9a:	e0b3      	b.n	8004f04 <HAL_TIM_ConfigClockSource+0x180>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2202      	movs	r2, #2
 8004da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004dba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dc2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dd4:	d03e      	beq.n	8004e54 <HAL_TIM_ConfigClockSource+0xd0>
 8004dd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dda:	f200 8087 	bhi.w	8004eec <HAL_TIM_ConfigClockSource+0x168>
 8004dde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004de2:	f000 8085 	beq.w	8004ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8004de6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dea:	d87f      	bhi.n	8004eec <HAL_TIM_ConfigClockSource+0x168>
 8004dec:	2b70      	cmp	r3, #112	; 0x70
 8004dee:	d01a      	beq.n	8004e26 <HAL_TIM_ConfigClockSource+0xa2>
 8004df0:	2b70      	cmp	r3, #112	; 0x70
 8004df2:	d87b      	bhi.n	8004eec <HAL_TIM_ConfigClockSource+0x168>
 8004df4:	2b60      	cmp	r3, #96	; 0x60
 8004df6:	d050      	beq.n	8004e9a <HAL_TIM_ConfigClockSource+0x116>
 8004df8:	2b60      	cmp	r3, #96	; 0x60
 8004dfa:	d877      	bhi.n	8004eec <HAL_TIM_ConfigClockSource+0x168>
 8004dfc:	2b50      	cmp	r3, #80	; 0x50
 8004dfe:	d03c      	beq.n	8004e7a <HAL_TIM_ConfigClockSource+0xf6>
 8004e00:	2b50      	cmp	r3, #80	; 0x50
 8004e02:	d873      	bhi.n	8004eec <HAL_TIM_ConfigClockSource+0x168>
 8004e04:	2b40      	cmp	r3, #64	; 0x40
 8004e06:	d058      	beq.n	8004eba <HAL_TIM_ConfigClockSource+0x136>
 8004e08:	2b40      	cmp	r3, #64	; 0x40
 8004e0a:	d86f      	bhi.n	8004eec <HAL_TIM_ConfigClockSource+0x168>
 8004e0c:	2b30      	cmp	r3, #48	; 0x30
 8004e0e:	d064      	beq.n	8004eda <HAL_TIM_ConfigClockSource+0x156>
 8004e10:	2b30      	cmp	r3, #48	; 0x30
 8004e12:	d86b      	bhi.n	8004eec <HAL_TIM_ConfigClockSource+0x168>
 8004e14:	2b20      	cmp	r3, #32
 8004e16:	d060      	beq.n	8004eda <HAL_TIM_ConfigClockSource+0x156>
 8004e18:	2b20      	cmp	r3, #32
 8004e1a:	d867      	bhi.n	8004eec <HAL_TIM_ConfigClockSource+0x168>
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d05c      	beq.n	8004eda <HAL_TIM_ConfigClockSource+0x156>
 8004e20:	2b10      	cmp	r3, #16
 8004e22:	d05a      	beq.n	8004eda <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004e24:	e062      	b.n	8004eec <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6818      	ldr	r0, [r3, #0]
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	6899      	ldr	r1, [r3, #8]
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	685a      	ldr	r2, [r3, #4]
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	f000 f966 	bl	8005106 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e48:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	609a      	str	r2, [r3, #8]
      break;
 8004e52:	e04e      	b.n	8004ef2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6818      	ldr	r0, [r3, #0]
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	6899      	ldr	r1, [r3, #8]
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	685a      	ldr	r2, [r3, #4]
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	f000 f94f 	bl	8005106 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	689a      	ldr	r2, [r3, #8]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e76:	609a      	str	r2, [r3, #8]
      break;
 8004e78:	e03b      	b.n	8004ef2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6818      	ldr	r0, [r3, #0]
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	6859      	ldr	r1, [r3, #4]
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	461a      	mov	r2, r3
 8004e88:	f000 f8c6 	bl	8005018 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2150      	movs	r1, #80	; 0x50
 8004e92:	4618      	mov	r0, r3
 8004e94:	f000 f91d 	bl	80050d2 <TIM_ITRx_SetConfig>
      break;
 8004e98:	e02b      	b.n	8004ef2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6818      	ldr	r0, [r3, #0]
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	6859      	ldr	r1, [r3, #4]
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	f000 f8e4 	bl	8005074 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2160      	movs	r1, #96	; 0x60
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f000 f90d 	bl	80050d2 <TIM_ITRx_SetConfig>
      break;
 8004eb8:	e01b      	b.n	8004ef2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6818      	ldr	r0, [r3, #0]
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	6859      	ldr	r1, [r3, #4]
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	f000 f8a6 	bl	8005018 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2140      	movs	r1, #64	; 0x40
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f000 f8fd 	bl	80050d2 <TIM_ITRx_SetConfig>
      break;
 8004ed8:	e00b      	b.n	8004ef2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	4610      	mov	r0, r2
 8004ee6:	f000 f8f4 	bl	80050d2 <TIM_ITRx_SetConfig>
        break;
 8004eea:	e002      	b.n	8004ef2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004eec:	bf00      	nop
 8004eee:	e000      	b.n	8004ef2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004ef0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3710      	adds	r7, #16
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f14:	bf00      	nop
 8004f16:	370c      	adds	r7, #12
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bc80      	pop	{r7}
 8004f1c:	4770      	bx	lr

08004f1e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f1e:	b480      	push	{r7}
 8004f20:	b083      	sub	sp, #12
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f26:	bf00      	nop
 8004f28:	370c      	adds	r7, #12
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bc80      	pop	{r7}
 8004f2e:	4770      	bx	lr

08004f30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b083      	sub	sp, #12
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f38:	bf00      	nop
 8004f3a:	370c      	adds	r7, #12
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bc80      	pop	{r7}
 8004f40:	4770      	bx	lr

08004f42 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f42:	b480      	push	{r7}
 8004f44:	b083      	sub	sp, #12
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f4a:	bf00      	nop
 8004f4c:	370c      	adds	r7, #12
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bc80      	pop	{r7}
 8004f52:	4770      	bx	lr

08004f54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b085      	sub	sp, #20
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a29      	ldr	r2, [pc, #164]	; (800500c <TIM_Base_SetConfig+0xb8>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d00b      	beq.n	8004f84 <TIM_Base_SetConfig+0x30>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f72:	d007      	beq.n	8004f84 <TIM_Base_SetConfig+0x30>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a26      	ldr	r2, [pc, #152]	; (8005010 <TIM_Base_SetConfig+0xbc>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d003      	beq.n	8004f84 <TIM_Base_SetConfig+0x30>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a25      	ldr	r2, [pc, #148]	; (8005014 <TIM_Base_SetConfig+0xc0>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d108      	bne.n	8004f96 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a1c      	ldr	r2, [pc, #112]	; (800500c <TIM_Base_SetConfig+0xb8>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d00b      	beq.n	8004fb6 <TIM_Base_SetConfig+0x62>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fa4:	d007      	beq.n	8004fb6 <TIM_Base_SetConfig+0x62>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a19      	ldr	r2, [pc, #100]	; (8005010 <TIM_Base_SetConfig+0xbc>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d003      	beq.n	8004fb6 <TIM_Base_SetConfig+0x62>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a18      	ldr	r2, [pc, #96]	; (8005014 <TIM_Base_SetConfig+0xc0>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d108      	bne.n	8004fc8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	695b      	ldr	r3, [r3, #20]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	689a      	ldr	r2, [r3, #8]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a07      	ldr	r2, [pc, #28]	; (800500c <TIM_Base_SetConfig+0xb8>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d103      	bne.n	8004ffc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	691a      	ldr	r2, [r3, #16]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	615a      	str	r2, [r3, #20]
}
 8005002:	bf00      	nop
 8005004:	3714      	adds	r7, #20
 8005006:	46bd      	mov	sp, r7
 8005008:	bc80      	pop	{r7}
 800500a:	4770      	bx	lr
 800500c:	40012c00 	.word	0x40012c00
 8005010:	40000400 	.word	0x40000400
 8005014:	40000800 	.word	0x40000800

08005018 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005018:	b480      	push	{r7}
 800501a:	b087      	sub	sp, #28
 800501c:	af00      	add	r7, sp, #0
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6a1b      	ldr	r3, [r3, #32]
 8005028:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6a1b      	ldr	r3, [r3, #32]
 800502e:	f023 0201 	bic.w	r2, r3, #1
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005042:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	011b      	lsls	r3, r3, #4
 8005048:	693a      	ldr	r2, [r7, #16]
 800504a:	4313      	orrs	r3, r2
 800504c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	f023 030a 	bic.w	r3, r3, #10
 8005054:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005056:	697a      	ldr	r2, [r7, #20]
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	4313      	orrs	r3, r2
 800505c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	693a      	ldr	r2, [r7, #16]
 8005062:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	697a      	ldr	r2, [r7, #20]
 8005068:	621a      	str	r2, [r3, #32]
}
 800506a:	bf00      	nop
 800506c:	371c      	adds	r7, #28
 800506e:	46bd      	mov	sp, r7
 8005070:	bc80      	pop	{r7}
 8005072:	4770      	bx	lr

08005074 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005074:	b480      	push	{r7}
 8005076:	b087      	sub	sp, #28
 8005078:	af00      	add	r7, sp, #0
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6a1b      	ldr	r3, [r3, #32]
 8005084:	f023 0210 	bic.w	r2, r3, #16
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	699b      	ldr	r3, [r3, #24]
 8005090:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800509e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	031b      	lsls	r3, r3, #12
 80050a4:	697a      	ldr	r2, [r7, #20]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80050b0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	011b      	lsls	r3, r3, #4
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	697a      	ldr	r2, [r7, #20]
 80050c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	693a      	ldr	r2, [r7, #16]
 80050c6:	621a      	str	r2, [r3, #32]
}
 80050c8:	bf00      	nop
 80050ca:	371c      	adds	r7, #28
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bc80      	pop	{r7}
 80050d0:	4770      	bx	lr

080050d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050d2:	b480      	push	{r7}
 80050d4:	b085      	sub	sp, #20
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
 80050da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050ea:	683a      	ldr	r2, [r7, #0]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	f043 0307 	orr.w	r3, r3, #7
 80050f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	609a      	str	r2, [r3, #8]
}
 80050fc:	bf00      	nop
 80050fe:	3714      	adds	r7, #20
 8005100:	46bd      	mov	sp, r7
 8005102:	bc80      	pop	{r7}
 8005104:	4770      	bx	lr

08005106 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005106:	b480      	push	{r7}
 8005108:	b087      	sub	sp, #28
 800510a:	af00      	add	r7, sp, #0
 800510c:	60f8      	str	r0, [r7, #12]
 800510e:	60b9      	str	r1, [r7, #8]
 8005110:	607a      	str	r2, [r7, #4]
 8005112:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005120:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	021a      	lsls	r2, r3, #8
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	431a      	orrs	r2, r3
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	4313      	orrs	r3, r2
 800512e:	697a      	ldr	r2, [r7, #20]
 8005130:	4313      	orrs	r3, r2
 8005132:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	697a      	ldr	r2, [r7, #20]
 8005138:	609a      	str	r2, [r3, #8]
}
 800513a:	bf00      	nop
 800513c:	371c      	adds	r7, #28
 800513e:	46bd      	mov	sp, r7
 8005140:	bc80      	pop	{r7}
 8005142:	4770      	bx	lr

08005144 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005144:	b480      	push	{r7}
 8005146:	b085      	sub	sp, #20
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005154:	2b01      	cmp	r3, #1
 8005156:	d101      	bne.n	800515c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005158:	2302      	movs	r3, #2
 800515a:	e046      	b.n	80051ea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2202      	movs	r2, #2
 8005168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005182:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	4313      	orrs	r3, r2
 800518c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a16      	ldr	r2, [pc, #88]	; (80051f4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d00e      	beq.n	80051be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051a8:	d009      	beq.n	80051be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a12      	ldr	r2, [pc, #72]	; (80051f8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d004      	beq.n	80051be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a10      	ldr	r2, [pc, #64]	; (80051fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d10c      	bne.n	80051d8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	68ba      	ldr	r2, [r7, #8]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	68ba      	ldr	r2, [r7, #8]
 80051d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3714      	adds	r7, #20
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bc80      	pop	{r7}
 80051f2:	4770      	bx	lr
 80051f4:	40012c00 	.word	0x40012c00
 80051f8:	40000400 	.word	0x40000400
 80051fc:	40000800 	.word	0x40000800

08005200 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005208:	bf00      	nop
 800520a:	370c      	adds	r7, #12
 800520c:	46bd      	mov	sp, r7
 800520e:	bc80      	pop	{r7}
 8005210:	4770      	bx	lr

08005212 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005212:	b480      	push	{r7}
 8005214:	b083      	sub	sp, #12
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800521a:	bf00      	nop
 800521c:	370c      	adds	r7, #12
 800521e:	46bd      	mov	sp, r7
 8005220:	bc80      	pop	{r7}
 8005222:	4770      	bx	lr

08005224 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d101      	bne.n	8005236 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e03f      	b.n	80052b6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800523c:	b2db      	uxtb	r3, r3
 800523e:	2b00      	cmp	r3, #0
 8005240:	d106      	bne.n	8005250 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f7fe f87e 	bl	800334c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2224      	movs	r2, #36	; 0x24
 8005254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68da      	ldr	r2, [r3, #12]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005266:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 fb8d 	bl	8005988 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	691a      	ldr	r2, [r3, #16]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800527c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	695a      	ldr	r2, [r3, #20]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800528c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68da      	ldr	r2, [r3, #12]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800529c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2220      	movs	r2, #32
 80052a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2220      	movs	r2, #32
 80052b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3708      	adds	r7, #8
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}

080052be <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052be:	b480      	push	{r7}
 80052c0:	b085      	sub	sp, #20
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	60f8      	str	r0, [r7, #12]
 80052c6:	60b9      	str	r1, [r7, #8]
 80052c8:	4613      	mov	r3, r2
 80052ca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	2b20      	cmp	r3, #32
 80052d6:	d130      	bne.n	800533a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d002      	beq.n	80052e4 <HAL_UART_Transmit_IT+0x26>
 80052de:	88fb      	ldrh	r3, [r7, #6]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d101      	bne.n	80052e8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e029      	b.n	800533c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d101      	bne.n	80052f6 <HAL_UART_Transmit_IT+0x38>
 80052f2:	2302      	movs	r3, #2
 80052f4:	e022      	b.n	800533c <HAL_UART_Transmit_IT+0x7e>
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2201      	movs	r2, #1
 80052fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	68ba      	ldr	r2, [r7, #8]
 8005302:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	88fa      	ldrh	r2, [r7, #6]
 8005308:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	88fa      	ldrh	r2, [r7, #6]
 800530e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2200      	movs	r2, #0
 8005314:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2221      	movs	r2, #33	; 0x21
 800531a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2200      	movs	r2, #0
 8005322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68da      	ldr	r2, [r3, #12]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005334:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005336:	2300      	movs	r3, #0
 8005338:	e000      	b.n	800533c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800533a:	2302      	movs	r3, #2
  }
}
 800533c:	4618      	mov	r0, r3
 800533e:	3714      	adds	r7, #20
 8005340:	46bd      	mov	sp, r7
 8005342:	bc80      	pop	{r7}
 8005344:	4770      	bx	lr
	...

08005348 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b08a      	sub	sp, #40	; 0x28
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	695b      	ldr	r3, [r3, #20]
 8005366:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005368:	2300      	movs	r3, #0
 800536a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800536c:	2300      	movs	r3, #0
 800536e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005372:	f003 030f 	and.w	r3, r3, #15
 8005376:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d10d      	bne.n	800539a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800537e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005380:	f003 0320 	and.w	r3, r3, #32
 8005384:	2b00      	cmp	r3, #0
 8005386:	d008      	beq.n	800539a <HAL_UART_IRQHandler+0x52>
 8005388:	6a3b      	ldr	r3, [r7, #32]
 800538a:	f003 0320 	and.w	r3, r3, #32
 800538e:	2b00      	cmp	r3, #0
 8005390:	d003      	beq.n	800539a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 fa4f 	bl	8005836 <UART_Receive_IT>
      return;
 8005398:	e17b      	b.n	8005692 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	2b00      	cmp	r3, #0
 800539e:	f000 80b1 	beq.w	8005504 <HAL_UART_IRQHandler+0x1bc>
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	f003 0301 	and.w	r3, r3, #1
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d105      	bne.n	80053b8 <HAL_UART_IRQHandler+0x70>
 80053ac:	6a3b      	ldr	r3, [r7, #32]
 80053ae:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	f000 80a6 	beq.w	8005504 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80053b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ba:	f003 0301 	and.w	r3, r3, #1
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d00a      	beq.n	80053d8 <HAL_UART_IRQHandler+0x90>
 80053c2:	6a3b      	ldr	r3, [r7, #32]
 80053c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d005      	beq.n	80053d8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d0:	f043 0201 	orr.w	r2, r3, #1
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80053d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053da:	f003 0304 	and.w	r3, r3, #4
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d00a      	beq.n	80053f8 <HAL_UART_IRQHandler+0xb0>
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	f003 0301 	and.w	r3, r3, #1
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d005      	beq.n	80053f8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f0:	f043 0202 	orr.w	r2, r3, #2
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80053f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fa:	f003 0302 	and.w	r3, r3, #2
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00a      	beq.n	8005418 <HAL_UART_IRQHandler+0xd0>
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	f003 0301 	and.w	r3, r3, #1
 8005408:	2b00      	cmp	r3, #0
 800540a:	d005      	beq.n	8005418 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005410:	f043 0204 	orr.w	r2, r3, #4
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541a:	f003 0308 	and.w	r3, r3, #8
 800541e:	2b00      	cmp	r3, #0
 8005420:	d00f      	beq.n	8005442 <HAL_UART_IRQHandler+0xfa>
 8005422:	6a3b      	ldr	r3, [r7, #32]
 8005424:	f003 0320 	and.w	r3, r3, #32
 8005428:	2b00      	cmp	r3, #0
 800542a:	d104      	bne.n	8005436 <HAL_UART_IRQHandler+0xee>
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	f003 0301 	and.w	r3, r3, #1
 8005432:	2b00      	cmp	r3, #0
 8005434:	d005      	beq.n	8005442 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543a:	f043 0208 	orr.w	r2, r3, #8
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005446:	2b00      	cmp	r3, #0
 8005448:	f000 811e 	beq.w	8005688 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800544c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544e:	f003 0320 	and.w	r3, r3, #32
 8005452:	2b00      	cmp	r3, #0
 8005454:	d007      	beq.n	8005466 <HAL_UART_IRQHandler+0x11e>
 8005456:	6a3b      	ldr	r3, [r7, #32]
 8005458:	f003 0320 	and.w	r3, r3, #32
 800545c:	2b00      	cmp	r3, #0
 800545e:	d002      	beq.n	8005466 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 f9e8 	bl	8005836 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	695b      	ldr	r3, [r3, #20]
 800546c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005470:	2b00      	cmp	r3, #0
 8005472:	bf14      	ite	ne
 8005474:	2301      	movne	r3, #1
 8005476:	2300      	moveq	r3, #0
 8005478:	b2db      	uxtb	r3, r3
 800547a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005480:	f003 0308 	and.w	r3, r3, #8
 8005484:	2b00      	cmp	r3, #0
 8005486:	d102      	bne.n	800548e <HAL_UART_IRQHandler+0x146>
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d031      	beq.n	80054f2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 f92a 	bl	80056e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d023      	beq.n	80054ea <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	695a      	ldr	r2, [r3, #20]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054b0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d013      	beq.n	80054e2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054be:	4a76      	ldr	r2, [pc, #472]	; (8005698 <HAL_UART_IRQHandler+0x350>)
 80054c0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c6:	4618      	mov	r0, r3
 80054c8:	f7fe f988 	bl	80037dc <HAL_DMA_Abort_IT>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d016      	beq.n	8005500 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80054dc:	4610      	mov	r0, r2
 80054de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054e0:	e00e      	b.n	8005500 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 f8ec 	bl	80056c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054e8:	e00a      	b.n	8005500 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 f8e8 	bl	80056c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054f0:	e006      	b.n	8005500 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 f8e4 	bl	80056c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80054fe:	e0c3      	b.n	8005688 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005500:	bf00      	nop
    return;
 8005502:	e0c1      	b.n	8005688 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005508:	2b01      	cmp	r3, #1
 800550a:	f040 80a1 	bne.w	8005650 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800550e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005510:	f003 0310 	and.w	r3, r3, #16
 8005514:	2b00      	cmp	r3, #0
 8005516:	f000 809b 	beq.w	8005650 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800551a:	6a3b      	ldr	r3, [r7, #32]
 800551c:	f003 0310 	and.w	r3, r3, #16
 8005520:	2b00      	cmp	r3, #0
 8005522:	f000 8095 	beq.w	8005650 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005526:	2300      	movs	r3, #0
 8005528:	60fb      	str	r3, [r7, #12]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	60fb      	str	r3, [r7, #12]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	60fb      	str	r3, [r7, #12]
 800553a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	695b      	ldr	r3, [r3, #20]
 8005542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005546:	2b00      	cmp	r3, #0
 8005548:	d04e      	beq.n	80055e8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005554:	8a3b      	ldrh	r3, [r7, #16]
 8005556:	2b00      	cmp	r3, #0
 8005558:	f000 8098 	beq.w	800568c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005560:	8a3a      	ldrh	r2, [r7, #16]
 8005562:	429a      	cmp	r2, r3
 8005564:	f080 8092 	bcs.w	800568c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	8a3a      	ldrh	r2, [r7, #16]
 800556c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005572:	699b      	ldr	r3, [r3, #24]
 8005574:	2b20      	cmp	r3, #32
 8005576:	d02b      	beq.n	80055d0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68da      	ldr	r2, [r3, #12]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005586:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	695a      	ldr	r2, [r3, #20]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f022 0201 	bic.w	r2, r2, #1
 8005596:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	695a      	ldr	r2, [r3, #20]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055a6:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2220      	movs	r2, #32
 80055ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68da      	ldr	r2, [r3, #12]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f022 0210 	bic.w	r2, r2, #16
 80055c4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ca:	4618      	mov	r0, r3
 80055cc:	f7fe f8cb 	bl	8003766 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80055d8:	b29b      	uxth	r3, r3
 80055da:	1ad3      	subs	r3, r2, r3
 80055dc:	b29b      	uxth	r3, r3
 80055de:	4619      	mov	r1, r3
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f000 f876 	bl	80056d2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80055e6:	e051      	b.n	800568c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d047      	beq.n	8005690 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8005600:	8a7b      	ldrh	r3, [r7, #18]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d044      	beq.n	8005690 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68da      	ldr	r2, [r3, #12]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005614:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	695a      	ldr	r2, [r3, #20]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f022 0201 	bic.w	r2, r2, #1
 8005624:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2220      	movs	r2, #32
 800562a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	68da      	ldr	r2, [r3, #12]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f022 0210 	bic.w	r2, r2, #16
 8005642:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005644:	8a7b      	ldrh	r3, [r7, #18]
 8005646:	4619      	mov	r1, r3
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f000 f842 	bl	80056d2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800564e:	e01f      	b.n	8005690 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005656:	2b00      	cmp	r3, #0
 8005658:	d008      	beq.n	800566c <HAL_UART_IRQHandler+0x324>
 800565a:	6a3b      	ldr	r3, [r7, #32]
 800565c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005660:	2b00      	cmp	r3, #0
 8005662:	d003      	beq.n	800566c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 f87f 	bl	8005768 <UART_Transmit_IT>
    return;
 800566a:	e012      	b.n	8005692 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800566c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00d      	beq.n	8005692 <HAL_UART_IRQHandler+0x34a>
 8005676:	6a3b      	ldr	r3, [r7, #32]
 8005678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800567c:	2b00      	cmp	r3, #0
 800567e:	d008      	beq.n	8005692 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f000 f8c0 	bl	8005806 <UART_EndTransmit_IT>
    return;
 8005686:	e004      	b.n	8005692 <HAL_UART_IRQHandler+0x34a>
    return;
 8005688:	bf00      	nop
 800568a:	e002      	b.n	8005692 <HAL_UART_IRQHandler+0x34a>
      return;
 800568c:	bf00      	nop
 800568e:	e000      	b.n	8005692 <HAL_UART_IRQHandler+0x34a>
      return;
 8005690:	bf00      	nop
  }
}
 8005692:	3728      	adds	r7, #40	; 0x28
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}
 8005698:	08005741 	.word	0x08005741

0800569c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80056a4:	bf00      	nop
 80056a6:	370c      	adds	r7, #12
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bc80      	pop	{r7}
 80056ac:	4770      	bx	lr

080056ae <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80056ae:	b480      	push	{r7}
 80056b0:	b083      	sub	sp, #12
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80056b6:	bf00      	nop
 80056b8:	370c      	adds	r7, #12
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bc80      	pop	{r7}
 80056be:	4770      	bx	lr

080056c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80056c8:	bf00      	nop
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bc80      	pop	{r7}
 80056d0:	4770      	bx	lr

080056d2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80056d2:	b480      	push	{r7}
 80056d4:	b083      	sub	sp, #12
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]
 80056da:	460b      	mov	r3, r1
 80056dc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80056de:	bf00      	nop
 80056e0:	370c      	adds	r7, #12
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bc80      	pop	{r7}
 80056e6:	4770      	bx	lr

080056e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	68da      	ldr	r2, [r3, #12]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80056fe:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	695a      	ldr	r2, [r3, #20]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f022 0201 	bic.w	r2, r2, #1
 800570e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005714:	2b01      	cmp	r3, #1
 8005716:	d107      	bne.n	8005728 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68da      	ldr	r2, [r3, #12]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f022 0210 	bic.w	r2, r2, #16
 8005726:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2220      	movs	r2, #32
 800572c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005736:	bf00      	nop
 8005738:	370c      	adds	r7, #12
 800573a:	46bd      	mov	sp, r7
 800573c:	bc80      	pop	{r7}
 800573e:	4770      	bx	lr

08005740 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2200      	movs	r2, #0
 8005758:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800575a:	68f8      	ldr	r0, [r7, #12]
 800575c:	f7ff ffb0 	bl	80056c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005760:	bf00      	nop
 8005762:	3710      	adds	r7, #16
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005768:	b480      	push	{r7}
 800576a:	b085      	sub	sp, #20
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005776:	b2db      	uxtb	r3, r3
 8005778:	2b21      	cmp	r3, #33	; 0x21
 800577a:	d13e      	bne.n	80057fa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005784:	d114      	bne.n	80057b0 <UART_Transmit_IT+0x48>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d110      	bne.n	80057b0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a1b      	ldr	r3, [r3, #32]
 8005792:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	881b      	ldrh	r3, [r3, #0]
 8005798:	461a      	mov	r2, r3
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057a2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a1b      	ldr	r3, [r3, #32]
 80057a8:	1c9a      	adds	r2, r3, #2
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	621a      	str	r2, [r3, #32]
 80057ae:	e008      	b.n	80057c2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6a1b      	ldr	r3, [r3, #32]
 80057b4:	1c59      	adds	r1, r3, #1
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	6211      	str	r1, [r2, #32]
 80057ba:	781a      	ldrb	r2, [r3, #0]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	3b01      	subs	r3, #1
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	4619      	mov	r1, r3
 80057d0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d10f      	bne.n	80057f6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	68da      	ldr	r2, [r3, #12]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057e4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68da      	ldr	r2, [r3, #12]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057f4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80057f6:	2300      	movs	r3, #0
 80057f8:	e000      	b.n	80057fc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80057fa:	2302      	movs	r3, #2
  }
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3714      	adds	r7, #20
 8005800:	46bd      	mov	sp, r7
 8005802:	bc80      	pop	{r7}
 8005804:	4770      	bx	lr

08005806 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005806:	b580      	push	{r7, lr}
 8005808:	b082      	sub	sp, #8
 800580a:	af00      	add	r7, sp, #0
 800580c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	68da      	ldr	r2, [r3, #12]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800581c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2220      	movs	r2, #32
 8005822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f7ff ff38 	bl	800569c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800582c:	2300      	movs	r3, #0
}
 800582e:	4618      	mov	r0, r3
 8005830:	3708      	adds	r7, #8
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}

08005836 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005836:	b580      	push	{r7, lr}
 8005838:	b086      	sub	sp, #24
 800583a:	af00      	add	r7, sp, #0
 800583c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005844:	b2db      	uxtb	r3, r3
 8005846:	2b22      	cmp	r3, #34	; 0x22
 8005848:	f040 8099 	bne.w	800597e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005854:	d117      	bne.n	8005886 <UART_Receive_IT+0x50>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d113      	bne.n	8005886 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800585e:	2300      	movs	r3, #0
 8005860:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005866:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	b29b      	uxth	r3, r3
 8005870:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005874:	b29a      	uxth	r2, r3
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800587e:	1c9a      	adds	r2, r3, #2
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	629a      	str	r2, [r3, #40]	; 0x28
 8005884:	e026      	b.n	80058d4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800588a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800588c:	2300      	movs	r3, #0
 800588e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005898:	d007      	beq.n	80058aa <UART_Receive_IT+0x74>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d10a      	bne.n	80058b8 <UART_Receive_IT+0x82>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d106      	bne.n	80058b8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	b2da      	uxtb	r2, r3
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	701a      	strb	r2, [r3, #0]
 80058b6:	e008      	b.n	80058ca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058c4:	b2da      	uxtb	r2, r3
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ce:	1c5a      	adds	r2, r3, #1
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058d8:	b29b      	uxth	r3, r3
 80058da:	3b01      	subs	r3, #1
 80058dc:	b29b      	uxth	r3, r3
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	4619      	mov	r1, r3
 80058e2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d148      	bne.n	800597a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	68da      	ldr	r2, [r3, #12]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f022 0220 	bic.w	r2, r2, #32
 80058f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	68da      	ldr	r2, [r3, #12]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005906:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	695a      	ldr	r2, [r3, #20]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f022 0201 	bic.w	r2, r2, #1
 8005916:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2220      	movs	r2, #32
 800591c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005924:	2b01      	cmp	r3, #1
 8005926:	d123      	bne.n	8005970 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	68da      	ldr	r2, [r3, #12]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f022 0210 	bic.w	r2, r2, #16
 800593c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 0310 	and.w	r3, r3, #16
 8005948:	2b10      	cmp	r3, #16
 800594a:	d10a      	bne.n	8005962 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800594c:	2300      	movs	r3, #0
 800594e:	60fb      	str	r3, [r7, #12]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	60fb      	str	r3, [r7, #12]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	60fb      	str	r3, [r7, #12]
 8005960:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005966:	4619      	mov	r1, r3
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f7ff feb2 	bl	80056d2 <HAL_UARTEx_RxEventCallback>
 800596e:	e002      	b.n	8005976 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f7ff fe9c 	bl	80056ae <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005976:	2300      	movs	r3, #0
 8005978:	e002      	b.n	8005980 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800597a:	2300      	movs	r3, #0
 800597c:	e000      	b.n	8005980 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800597e:	2302      	movs	r3, #2
  }
}
 8005980:	4618      	mov	r0, r3
 8005982:	3718      	adds	r7, #24
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	68da      	ldr	r2, [r3, #12]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	430a      	orrs	r2, r1
 80059a4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	689a      	ldr	r2, [r3, #8]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	691b      	ldr	r3, [r3, #16]
 80059ae:	431a      	orrs	r2, r3
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	695b      	ldr	r3, [r3, #20]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80059c2:	f023 030c 	bic.w	r3, r3, #12
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	6812      	ldr	r2, [r2, #0]
 80059ca:	68b9      	ldr	r1, [r7, #8]
 80059cc:	430b      	orrs	r3, r1
 80059ce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	695b      	ldr	r3, [r3, #20]
 80059d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	699a      	ldr	r2, [r3, #24]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	430a      	orrs	r2, r1
 80059e4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a2c      	ldr	r2, [pc, #176]	; (8005a9c <UART_SetConfig+0x114>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d103      	bne.n	80059f8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80059f0:	f7fe fd20 	bl	8004434 <HAL_RCC_GetPCLK2Freq>
 80059f4:	60f8      	str	r0, [r7, #12]
 80059f6:	e002      	b.n	80059fe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80059f8:	f7fe fd08 	bl	800440c <HAL_RCC_GetPCLK1Freq>
 80059fc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80059fe:	68fa      	ldr	r2, [r7, #12]
 8005a00:	4613      	mov	r3, r2
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	4413      	add	r3, r2
 8005a06:	009a      	lsls	r2, r3, #2
 8005a08:	441a      	add	r2, r3
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a14:	4a22      	ldr	r2, [pc, #136]	; (8005aa0 <UART_SetConfig+0x118>)
 8005a16:	fba2 2303 	umull	r2, r3, r2, r3
 8005a1a:	095b      	lsrs	r3, r3, #5
 8005a1c:	0119      	lsls	r1, r3, #4
 8005a1e:	68fa      	ldr	r2, [r7, #12]
 8005a20:	4613      	mov	r3, r2
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	4413      	add	r3, r2
 8005a26:	009a      	lsls	r2, r3, #2
 8005a28:	441a      	add	r2, r3
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	009b      	lsls	r3, r3, #2
 8005a30:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a34:	4b1a      	ldr	r3, [pc, #104]	; (8005aa0 <UART_SetConfig+0x118>)
 8005a36:	fba3 0302 	umull	r0, r3, r3, r2
 8005a3a:	095b      	lsrs	r3, r3, #5
 8005a3c:	2064      	movs	r0, #100	; 0x64
 8005a3e:	fb00 f303 	mul.w	r3, r0, r3
 8005a42:	1ad3      	subs	r3, r2, r3
 8005a44:	011b      	lsls	r3, r3, #4
 8005a46:	3332      	adds	r3, #50	; 0x32
 8005a48:	4a15      	ldr	r2, [pc, #84]	; (8005aa0 <UART_SetConfig+0x118>)
 8005a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a4e:	095b      	lsrs	r3, r3, #5
 8005a50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a54:	4419      	add	r1, r3
 8005a56:	68fa      	ldr	r2, [r7, #12]
 8005a58:	4613      	mov	r3, r2
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	4413      	add	r3, r2
 8005a5e:	009a      	lsls	r2, r3, #2
 8005a60:	441a      	add	r2, r3
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a6c:	4b0c      	ldr	r3, [pc, #48]	; (8005aa0 <UART_SetConfig+0x118>)
 8005a6e:	fba3 0302 	umull	r0, r3, r3, r2
 8005a72:	095b      	lsrs	r3, r3, #5
 8005a74:	2064      	movs	r0, #100	; 0x64
 8005a76:	fb00 f303 	mul.w	r3, r0, r3
 8005a7a:	1ad3      	subs	r3, r2, r3
 8005a7c:	011b      	lsls	r3, r3, #4
 8005a7e:	3332      	adds	r3, #50	; 0x32
 8005a80:	4a07      	ldr	r2, [pc, #28]	; (8005aa0 <UART_SetConfig+0x118>)
 8005a82:	fba2 2303 	umull	r2, r3, r2, r3
 8005a86:	095b      	lsrs	r3, r3, #5
 8005a88:	f003 020f 	and.w	r2, r3, #15
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	440a      	add	r2, r1
 8005a92:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005a94:	bf00      	nop
 8005a96:	3710      	adds	r7, #16
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}
 8005a9c:	40013800 	.word	0x40013800
 8005aa0:	51eb851f 	.word	0x51eb851f

08005aa4 <__errno>:
 8005aa4:	4b01      	ldr	r3, [pc, #4]	; (8005aac <__errno+0x8>)
 8005aa6:	6818      	ldr	r0, [r3, #0]
 8005aa8:	4770      	bx	lr
 8005aaa:	bf00      	nop
 8005aac:	2000000c 	.word	0x2000000c

08005ab0 <__libc_init_array>:
 8005ab0:	b570      	push	{r4, r5, r6, lr}
 8005ab2:	2600      	movs	r6, #0
 8005ab4:	4d0c      	ldr	r5, [pc, #48]	; (8005ae8 <__libc_init_array+0x38>)
 8005ab6:	4c0d      	ldr	r4, [pc, #52]	; (8005aec <__libc_init_array+0x3c>)
 8005ab8:	1b64      	subs	r4, r4, r5
 8005aba:	10a4      	asrs	r4, r4, #2
 8005abc:	42a6      	cmp	r6, r4
 8005abe:	d109      	bne.n	8005ad4 <__libc_init_array+0x24>
 8005ac0:	f002 ff0e 	bl	80088e0 <_init>
 8005ac4:	2600      	movs	r6, #0
 8005ac6:	4d0a      	ldr	r5, [pc, #40]	; (8005af0 <__libc_init_array+0x40>)
 8005ac8:	4c0a      	ldr	r4, [pc, #40]	; (8005af4 <__libc_init_array+0x44>)
 8005aca:	1b64      	subs	r4, r4, r5
 8005acc:	10a4      	asrs	r4, r4, #2
 8005ace:	42a6      	cmp	r6, r4
 8005ad0:	d105      	bne.n	8005ade <__libc_init_array+0x2e>
 8005ad2:	bd70      	pop	{r4, r5, r6, pc}
 8005ad4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ad8:	4798      	blx	r3
 8005ada:	3601      	adds	r6, #1
 8005adc:	e7ee      	b.n	8005abc <__libc_init_array+0xc>
 8005ade:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ae2:	4798      	blx	r3
 8005ae4:	3601      	adds	r6, #1
 8005ae6:	e7f2      	b.n	8005ace <__libc_init_array+0x1e>
 8005ae8:	08008d8c 	.word	0x08008d8c
 8005aec:	08008d8c 	.word	0x08008d8c
 8005af0:	08008d8c 	.word	0x08008d8c
 8005af4:	08008d90 	.word	0x08008d90

08005af8 <memset>:
 8005af8:	4603      	mov	r3, r0
 8005afa:	4402      	add	r2, r0
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d100      	bne.n	8005b02 <memset+0xa>
 8005b00:	4770      	bx	lr
 8005b02:	f803 1b01 	strb.w	r1, [r3], #1
 8005b06:	e7f9      	b.n	8005afc <memset+0x4>

08005b08 <__cvt>:
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b0e:	461f      	mov	r7, r3
 8005b10:	bfbb      	ittet	lt
 8005b12:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005b16:	461f      	movlt	r7, r3
 8005b18:	2300      	movge	r3, #0
 8005b1a:	232d      	movlt	r3, #45	; 0x2d
 8005b1c:	b088      	sub	sp, #32
 8005b1e:	4614      	mov	r4, r2
 8005b20:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005b22:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005b24:	7013      	strb	r3, [r2, #0]
 8005b26:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005b28:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005b2c:	f023 0820 	bic.w	r8, r3, #32
 8005b30:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005b34:	d005      	beq.n	8005b42 <__cvt+0x3a>
 8005b36:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005b3a:	d100      	bne.n	8005b3e <__cvt+0x36>
 8005b3c:	3501      	adds	r5, #1
 8005b3e:	2302      	movs	r3, #2
 8005b40:	e000      	b.n	8005b44 <__cvt+0x3c>
 8005b42:	2303      	movs	r3, #3
 8005b44:	aa07      	add	r2, sp, #28
 8005b46:	9204      	str	r2, [sp, #16]
 8005b48:	aa06      	add	r2, sp, #24
 8005b4a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005b4e:	e9cd 3500 	strd	r3, r5, [sp]
 8005b52:	4622      	mov	r2, r4
 8005b54:	463b      	mov	r3, r7
 8005b56:	f000 fcf7 	bl	8006548 <_dtoa_r>
 8005b5a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005b5e:	4606      	mov	r6, r0
 8005b60:	d102      	bne.n	8005b68 <__cvt+0x60>
 8005b62:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005b64:	07db      	lsls	r3, r3, #31
 8005b66:	d522      	bpl.n	8005bae <__cvt+0xa6>
 8005b68:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005b6c:	eb06 0905 	add.w	r9, r6, r5
 8005b70:	d110      	bne.n	8005b94 <__cvt+0x8c>
 8005b72:	7833      	ldrb	r3, [r6, #0]
 8005b74:	2b30      	cmp	r3, #48	; 0x30
 8005b76:	d10a      	bne.n	8005b8e <__cvt+0x86>
 8005b78:	2200      	movs	r2, #0
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	4620      	mov	r0, r4
 8005b7e:	4639      	mov	r1, r7
 8005b80:	f7fa ff12 	bl	80009a8 <__aeabi_dcmpeq>
 8005b84:	b918      	cbnz	r0, 8005b8e <__cvt+0x86>
 8005b86:	f1c5 0501 	rsb	r5, r5, #1
 8005b8a:	f8ca 5000 	str.w	r5, [sl]
 8005b8e:	f8da 3000 	ldr.w	r3, [sl]
 8005b92:	4499      	add	r9, r3
 8005b94:	2200      	movs	r2, #0
 8005b96:	2300      	movs	r3, #0
 8005b98:	4620      	mov	r0, r4
 8005b9a:	4639      	mov	r1, r7
 8005b9c:	f7fa ff04 	bl	80009a8 <__aeabi_dcmpeq>
 8005ba0:	b108      	cbz	r0, 8005ba6 <__cvt+0x9e>
 8005ba2:	f8cd 901c 	str.w	r9, [sp, #28]
 8005ba6:	2230      	movs	r2, #48	; 0x30
 8005ba8:	9b07      	ldr	r3, [sp, #28]
 8005baa:	454b      	cmp	r3, r9
 8005bac:	d307      	bcc.n	8005bbe <__cvt+0xb6>
 8005bae:	4630      	mov	r0, r6
 8005bb0:	9b07      	ldr	r3, [sp, #28]
 8005bb2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005bb4:	1b9b      	subs	r3, r3, r6
 8005bb6:	6013      	str	r3, [r2, #0]
 8005bb8:	b008      	add	sp, #32
 8005bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bbe:	1c59      	adds	r1, r3, #1
 8005bc0:	9107      	str	r1, [sp, #28]
 8005bc2:	701a      	strb	r2, [r3, #0]
 8005bc4:	e7f0      	b.n	8005ba8 <__cvt+0xa0>

08005bc6 <__exponent>:
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005bca:	2900      	cmp	r1, #0
 8005bcc:	f803 2b02 	strb.w	r2, [r3], #2
 8005bd0:	bfb6      	itet	lt
 8005bd2:	222d      	movlt	r2, #45	; 0x2d
 8005bd4:	222b      	movge	r2, #43	; 0x2b
 8005bd6:	4249      	neglt	r1, r1
 8005bd8:	2909      	cmp	r1, #9
 8005bda:	7042      	strb	r2, [r0, #1]
 8005bdc:	dd2b      	ble.n	8005c36 <__exponent+0x70>
 8005bde:	f10d 0407 	add.w	r4, sp, #7
 8005be2:	46a4      	mov	ip, r4
 8005be4:	270a      	movs	r7, #10
 8005be6:	fb91 f6f7 	sdiv	r6, r1, r7
 8005bea:	460a      	mov	r2, r1
 8005bec:	46a6      	mov	lr, r4
 8005bee:	fb07 1516 	mls	r5, r7, r6, r1
 8005bf2:	2a63      	cmp	r2, #99	; 0x63
 8005bf4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005bf8:	4631      	mov	r1, r6
 8005bfa:	f104 34ff 	add.w	r4, r4, #4294967295
 8005bfe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005c02:	dcf0      	bgt.n	8005be6 <__exponent+0x20>
 8005c04:	3130      	adds	r1, #48	; 0x30
 8005c06:	f1ae 0502 	sub.w	r5, lr, #2
 8005c0a:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005c0e:	4629      	mov	r1, r5
 8005c10:	1c44      	adds	r4, r0, #1
 8005c12:	4561      	cmp	r1, ip
 8005c14:	d30a      	bcc.n	8005c2c <__exponent+0x66>
 8005c16:	f10d 0209 	add.w	r2, sp, #9
 8005c1a:	eba2 020e 	sub.w	r2, r2, lr
 8005c1e:	4565      	cmp	r5, ip
 8005c20:	bf88      	it	hi
 8005c22:	2200      	movhi	r2, #0
 8005c24:	4413      	add	r3, r2
 8005c26:	1a18      	subs	r0, r3, r0
 8005c28:	b003      	add	sp, #12
 8005c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c2c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c30:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005c34:	e7ed      	b.n	8005c12 <__exponent+0x4c>
 8005c36:	2330      	movs	r3, #48	; 0x30
 8005c38:	3130      	adds	r1, #48	; 0x30
 8005c3a:	7083      	strb	r3, [r0, #2]
 8005c3c:	70c1      	strb	r1, [r0, #3]
 8005c3e:	1d03      	adds	r3, r0, #4
 8005c40:	e7f1      	b.n	8005c26 <__exponent+0x60>
	...

08005c44 <_printf_float>:
 8005c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c48:	b091      	sub	sp, #68	; 0x44
 8005c4a:	460c      	mov	r4, r1
 8005c4c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005c50:	4616      	mov	r6, r2
 8005c52:	461f      	mov	r7, r3
 8005c54:	4605      	mov	r5, r0
 8005c56:	f001 fa65 	bl	8007124 <_localeconv_r>
 8005c5a:	6803      	ldr	r3, [r0, #0]
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	9309      	str	r3, [sp, #36]	; 0x24
 8005c60:	f7fa fa76 	bl	8000150 <strlen>
 8005c64:	2300      	movs	r3, #0
 8005c66:	930e      	str	r3, [sp, #56]	; 0x38
 8005c68:	f8d8 3000 	ldr.w	r3, [r8]
 8005c6c:	900a      	str	r0, [sp, #40]	; 0x28
 8005c6e:	3307      	adds	r3, #7
 8005c70:	f023 0307 	bic.w	r3, r3, #7
 8005c74:	f103 0208 	add.w	r2, r3, #8
 8005c78:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005c7c:	f8d4 b000 	ldr.w	fp, [r4]
 8005c80:	f8c8 2000 	str.w	r2, [r8]
 8005c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c88:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005c8c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005c90:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005c94:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c96:	f04f 32ff 	mov.w	r2, #4294967295
 8005c9a:	4640      	mov	r0, r8
 8005c9c:	4b9c      	ldr	r3, [pc, #624]	; (8005f10 <_printf_float+0x2cc>)
 8005c9e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005ca0:	f7fa feb4 	bl	8000a0c <__aeabi_dcmpun>
 8005ca4:	bb70      	cbnz	r0, 8005d04 <_printf_float+0xc0>
 8005ca6:	f04f 32ff 	mov.w	r2, #4294967295
 8005caa:	4640      	mov	r0, r8
 8005cac:	4b98      	ldr	r3, [pc, #608]	; (8005f10 <_printf_float+0x2cc>)
 8005cae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005cb0:	f7fa fe8e 	bl	80009d0 <__aeabi_dcmple>
 8005cb4:	bb30      	cbnz	r0, 8005d04 <_printf_float+0xc0>
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	2300      	movs	r3, #0
 8005cba:	4640      	mov	r0, r8
 8005cbc:	4651      	mov	r1, sl
 8005cbe:	f7fa fe7d 	bl	80009bc <__aeabi_dcmplt>
 8005cc2:	b110      	cbz	r0, 8005cca <_printf_float+0x86>
 8005cc4:	232d      	movs	r3, #45	; 0x2d
 8005cc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cca:	4b92      	ldr	r3, [pc, #584]	; (8005f14 <_printf_float+0x2d0>)
 8005ccc:	4892      	ldr	r0, [pc, #584]	; (8005f18 <_printf_float+0x2d4>)
 8005cce:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005cd2:	bf94      	ite	ls
 8005cd4:	4698      	movls	r8, r3
 8005cd6:	4680      	movhi	r8, r0
 8005cd8:	2303      	movs	r3, #3
 8005cda:	f04f 0a00 	mov.w	sl, #0
 8005cde:	6123      	str	r3, [r4, #16]
 8005ce0:	f02b 0304 	bic.w	r3, fp, #4
 8005ce4:	6023      	str	r3, [r4, #0]
 8005ce6:	4633      	mov	r3, r6
 8005ce8:	4621      	mov	r1, r4
 8005cea:	4628      	mov	r0, r5
 8005cec:	9700      	str	r7, [sp, #0]
 8005cee:	aa0f      	add	r2, sp, #60	; 0x3c
 8005cf0:	f000 f9d4 	bl	800609c <_printf_common>
 8005cf4:	3001      	adds	r0, #1
 8005cf6:	f040 8090 	bne.w	8005e1a <_printf_float+0x1d6>
 8005cfa:	f04f 30ff 	mov.w	r0, #4294967295
 8005cfe:	b011      	add	sp, #68	; 0x44
 8005d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d04:	4642      	mov	r2, r8
 8005d06:	4653      	mov	r3, sl
 8005d08:	4640      	mov	r0, r8
 8005d0a:	4651      	mov	r1, sl
 8005d0c:	f7fa fe7e 	bl	8000a0c <__aeabi_dcmpun>
 8005d10:	b148      	cbz	r0, 8005d26 <_printf_float+0xe2>
 8005d12:	f1ba 0f00 	cmp.w	sl, #0
 8005d16:	bfb8      	it	lt
 8005d18:	232d      	movlt	r3, #45	; 0x2d
 8005d1a:	4880      	ldr	r0, [pc, #512]	; (8005f1c <_printf_float+0x2d8>)
 8005d1c:	bfb8      	it	lt
 8005d1e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005d22:	4b7f      	ldr	r3, [pc, #508]	; (8005f20 <_printf_float+0x2dc>)
 8005d24:	e7d3      	b.n	8005cce <_printf_float+0x8a>
 8005d26:	6863      	ldr	r3, [r4, #4]
 8005d28:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005d2c:	1c5a      	adds	r2, r3, #1
 8005d2e:	d142      	bne.n	8005db6 <_printf_float+0x172>
 8005d30:	2306      	movs	r3, #6
 8005d32:	6063      	str	r3, [r4, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	9206      	str	r2, [sp, #24]
 8005d38:	aa0e      	add	r2, sp, #56	; 0x38
 8005d3a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005d3e:	aa0d      	add	r2, sp, #52	; 0x34
 8005d40:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005d44:	9203      	str	r2, [sp, #12]
 8005d46:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005d4a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005d4e:	6023      	str	r3, [r4, #0]
 8005d50:	6863      	ldr	r3, [r4, #4]
 8005d52:	4642      	mov	r2, r8
 8005d54:	9300      	str	r3, [sp, #0]
 8005d56:	4628      	mov	r0, r5
 8005d58:	4653      	mov	r3, sl
 8005d5a:	910b      	str	r1, [sp, #44]	; 0x2c
 8005d5c:	f7ff fed4 	bl	8005b08 <__cvt>
 8005d60:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005d62:	4680      	mov	r8, r0
 8005d64:	2947      	cmp	r1, #71	; 0x47
 8005d66:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005d68:	d108      	bne.n	8005d7c <_printf_float+0x138>
 8005d6a:	1cc8      	adds	r0, r1, #3
 8005d6c:	db02      	blt.n	8005d74 <_printf_float+0x130>
 8005d6e:	6863      	ldr	r3, [r4, #4]
 8005d70:	4299      	cmp	r1, r3
 8005d72:	dd40      	ble.n	8005df6 <_printf_float+0x1b2>
 8005d74:	f1a9 0902 	sub.w	r9, r9, #2
 8005d78:	fa5f f989 	uxtb.w	r9, r9
 8005d7c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005d80:	d81f      	bhi.n	8005dc2 <_printf_float+0x17e>
 8005d82:	464a      	mov	r2, r9
 8005d84:	3901      	subs	r1, #1
 8005d86:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005d8a:	910d      	str	r1, [sp, #52]	; 0x34
 8005d8c:	f7ff ff1b 	bl	8005bc6 <__exponent>
 8005d90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d92:	4682      	mov	sl, r0
 8005d94:	1813      	adds	r3, r2, r0
 8005d96:	2a01      	cmp	r2, #1
 8005d98:	6123      	str	r3, [r4, #16]
 8005d9a:	dc02      	bgt.n	8005da2 <_printf_float+0x15e>
 8005d9c:	6822      	ldr	r2, [r4, #0]
 8005d9e:	07d2      	lsls	r2, r2, #31
 8005da0:	d501      	bpl.n	8005da6 <_printf_float+0x162>
 8005da2:	3301      	adds	r3, #1
 8005da4:	6123      	str	r3, [r4, #16]
 8005da6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d09b      	beq.n	8005ce6 <_printf_float+0xa2>
 8005dae:	232d      	movs	r3, #45	; 0x2d
 8005db0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005db4:	e797      	b.n	8005ce6 <_printf_float+0xa2>
 8005db6:	2947      	cmp	r1, #71	; 0x47
 8005db8:	d1bc      	bne.n	8005d34 <_printf_float+0xf0>
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d1ba      	bne.n	8005d34 <_printf_float+0xf0>
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e7b7      	b.n	8005d32 <_printf_float+0xee>
 8005dc2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005dc6:	d118      	bne.n	8005dfa <_printf_float+0x1b6>
 8005dc8:	2900      	cmp	r1, #0
 8005dca:	6863      	ldr	r3, [r4, #4]
 8005dcc:	dd0b      	ble.n	8005de6 <_printf_float+0x1a2>
 8005dce:	6121      	str	r1, [r4, #16]
 8005dd0:	b913      	cbnz	r3, 8005dd8 <_printf_float+0x194>
 8005dd2:	6822      	ldr	r2, [r4, #0]
 8005dd4:	07d0      	lsls	r0, r2, #31
 8005dd6:	d502      	bpl.n	8005dde <_printf_float+0x19a>
 8005dd8:	3301      	adds	r3, #1
 8005dda:	440b      	add	r3, r1
 8005ddc:	6123      	str	r3, [r4, #16]
 8005dde:	f04f 0a00 	mov.w	sl, #0
 8005de2:	65a1      	str	r1, [r4, #88]	; 0x58
 8005de4:	e7df      	b.n	8005da6 <_printf_float+0x162>
 8005de6:	b913      	cbnz	r3, 8005dee <_printf_float+0x1aa>
 8005de8:	6822      	ldr	r2, [r4, #0]
 8005dea:	07d2      	lsls	r2, r2, #31
 8005dec:	d501      	bpl.n	8005df2 <_printf_float+0x1ae>
 8005dee:	3302      	adds	r3, #2
 8005df0:	e7f4      	b.n	8005ddc <_printf_float+0x198>
 8005df2:	2301      	movs	r3, #1
 8005df4:	e7f2      	b.n	8005ddc <_printf_float+0x198>
 8005df6:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005dfa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005dfc:	4299      	cmp	r1, r3
 8005dfe:	db05      	blt.n	8005e0c <_printf_float+0x1c8>
 8005e00:	6823      	ldr	r3, [r4, #0]
 8005e02:	6121      	str	r1, [r4, #16]
 8005e04:	07d8      	lsls	r0, r3, #31
 8005e06:	d5ea      	bpl.n	8005dde <_printf_float+0x19a>
 8005e08:	1c4b      	adds	r3, r1, #1
 8005e0a:	e7e7      	b.n	8005ddc <_printf_float+0x198>
 8005e0c:	2900      	cmp	r1, #0
 8005e0e:	bfcc      	ite	gt
 8005e10:	2201      	movgt	r2, #1
 8005e12:	f1c1 0202 	rsble	r2, r1, #2
 8005e16:	4413      	add	r3, r2
 8005e18:	e7e0      	b.n	8005ddc <_printf_float+0x198>
 8005e1a:	6823      	ldr	r3, [r4, #0]
 8005e1c:	055a      	lsls	r2, r3, #21
 8005e1e:	d407      	bmi.n	8005e30 <_printf_float+0x1ec>
 8005e20:	6923      	ldr	r3, [r4, #16]
 8005e22:	4642      	mov	r2, r8
 8005e24:	4631      	mov	r1, r6
 8005e26:	4628      	mov	r0, r5
 8005e28:	47b8      	blx	r7
 8005e2a:	3001      	adds	r0, #1
 8005e2c:	d12b      	bne.n	8005e86 <_printf_float+0x242>
 8005e2e:	e764      	b.n	8005cfa <_printf_float+0xb6>
 8005e30:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005e34:	f240 80dd 	bls.w	8005ff2 <_printf_float+0x3ae>
 8005e38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	2300      	movs	r3, #0
 8005e40:	f7fa fdb2 	bl	80009a8 <__aeabi_dcmpeq>
 8005e44:	2800      	cmp	r0, #0
 8005e46:	d033      	beq.n	8005eb0 <_printf_float+0x26c>
 8005e48:	2301      	movs	r3, #1
 8005e4a:	4631      	mov	r1, r6
 8005e4c:	4628      	mov	r0, r5
 8005e4e:	4a35      	ldr	r2, [pc, #212]	; (8005f24 <_printf_float+0x2e0>)
 8005e50:	47b8      	blx	r7
 8005e52:	3001      	adds	r0, #1
 8005e54:	f43f af51 	beq.w	8005cfa <_printf_float+0xb6>
 8005e58:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	db02      	blt.n	8005e66 <_printf_float+0x222>
 8005e60:	6823      	ldr	r3, [r4, #0]
 8005e62:	07d8      	lsls	r0, r3, #31
 8005e64:	d50f      	bpl.n	8005e86 <_printf_float+0x242>
 8005e66:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e6a:	4631      	mov	r1, r6
 8005e6c:	4628      	mov	r0, r5
 8005e6e:	47b8      	blx	r7
 8005e70:	3001      	adds	r0, #1
 8005e72:	f43f af42 	beq.w	8005cfa <_printf_float+0xb6>
 8005e76:	f04f 0800 	mov.w	r8, #0
 8005e7a:	f104 091a 	add.w	r9, r4, #26
 8005e7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e80:	3b01      	subs	r3, #1
 8005e82:	4543      	cmp	r3, r8
 8005e84:	dc09      	bgt.n	8005e9a <_printf_float+0x256>
 8005e86:	6823      	ldr	r3, [r4, #0]
 8005e88:	079b      	lsls	r3, r3, #30
 8005e8a:	f100 8102 	bmi.w	8006092 <_printf_float+0x44e>
 8005e8e:	68e0      	ldr	r0, [r4, #12]
 8005e90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e92:	4298      	cmp	r0, r3
 8005e94:	bfb8      	it	lt
 8005e96:	4618      	movlt	r0, r3
 8005e98:	e731      	b.n	8005cfe <_printf_float+0xba>
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	464a      	mov	r2, r9
 8005e9e:	4631      	mov	r1, r6
 8005ea0:	4628      	mov	r0, r5
 8005ea2:	47b8      	blx	r7
 8005ea4:	3001      	adds	r0, #1
 8005ea6:	f43f af28 	beq.w	8005cfa <_printf_float+0xb6>
 8005eaa:	f108 0801 	add.w	r8, r8, #1
 8005eae:	e7e6      	b.n	8005e7e <_printf_float+0x23a>
 8005eb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	dc38      	bgt.n	8005f28 <_printf_float+0x2e4>
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	4631      	mov	r1, r6
 8005eba:	4628      	mov	r0, r5
 8005ebc:	4a19      	ldr	r2, [pc, #100]	; (8005f24 <_printf_float+0x2e0>)
 8005ebe:	47b8      	blx	r7
 8005ec0:	3001      	adds	r0, #1
 8005ec2:	f43f af1a 	beq.w	8005cfa <_printf_float+0xb6>
 8005ec6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	d102      	bne.n	8005ed4 <_printf_float+0x290>
 8005ece:	6823      	ldr	r3, [r4, #0]
 8005ed0:	07d9      	lsls	r1, r3, #31
 8005ed2:	d5d8      	bpl.n	8005e86 <_printf_float+0x242>
 8005ed4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ed8:	4631      	mov	r1, r6
 8005eda:	4628      	mov	r0, r5
 8005edc:	47b8      	blx	r7
 8005ede:	3001      	adds	r0, #1
 8005ee0:	f43f af0b 	beq.w	8005cfa <_printf_float+0xb6>
 8005ee4:	f04f 0900 	mov.w	r9, #0
 8005ee8:	f104 0a1a 	add.w	sl, r4, #26
 8005eec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005eee:	425b      	negs	r3, r3
 8005ef0:	454b      	cmp	r3, r9
 8005ef2:	dc01      	bgt.n	8005ef8 <_printf_float+0x2b4>
 8005ef4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ef6:	e794      	b.n	8005e22 <_printf_float+0x1de>
 8005ef8:	2301      	movs	r3, #1
 8005efa:	4652      	mov	r2, sl
 8005efc:	4631      	mov	r1, r6
 8005efe:	4628      	mov	r0, r5
 8005f00:	47b8      	blx	r7
 8005f02:	3001      	adds	r0, #1
 8005f04:	f43f aef9 	beq.w	8005cfa <_printf_float+0xb6>
 8005f08:	f109 0901 	add.w	r9, r9, #1
 8005f0c:	e7ee      	b.n	8005eec <_printf_float+0x2a8>
 8005f0e:	bf00      	nop
 8005f10:	7fefffff 	.word	0x7fefffff
 8005f14:	080089b0 	.word	0x080089b0
 8005f18:	080089b4 	.word	0x080089b4
 8005f1c:	080089bc 	.word	0x080089bc
 8005f20:	080089b8 	.word	0x080089b8
 8005f24:	080089c0 	.word	0x080089c0
 8005f28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005f2a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	bfa8      	it	ge
 8005f30:	461a      	movge	r2, r3
 8005f32:	2a00      	cmp	r2, #0
 8005f34:	4691      	mov	r9, r2
 8005f36:	dc37      	bgt.n	8005fa8 <_printf_float+0x364>
 8005f38:	f04f 0b00 	mov.w	fp, #0
 8005f3c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f40:	f104 021a 	add.w	r2, r4, #26
 8005f44:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005f48:	ebaa 0309 	sub.w	r3, sl, r9
 8005f4c:	455b      	cmp	r3, fp
 8005f4e:	dc33      	bgt.n	8005fb8 <_printf_float+0x374>
 8005f50:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005f54:	429a      	cmp	r2, r3
 8005f56:	db3b      	blt.n	8005fd0 <_printf_float+0x38c>
 8005f58:	6823      	ldr	r3, [r4, #0]
 8005f5a:	07da      	lsls	r2, r3, #31
 8005f5c:	d438      	bmi.n	8005fd0 <_printf_float+0x38c>
 8005f5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f60:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005f62:	eba3 020a 	sub.w	r2, r3, sl
 8005f66:	eba3 0901 	sub.w	r9, r3, r1
 8005f6a:	4591      	cmp	r9, r2
 8005f6c:	bfa8      	it	ge
 8005f6e:	4691      	movge	r9, r2
 8005f70:	f1b9 0f00 	cmp.w	r9, #0
 8005f74:	dc34      	bgt.n	8005fe0 <_printf_float+0x39c>
 8005f76:	f04f 0800 	mov.w	r8, #0
 8005f7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f7e:	f104 0a1a 	add.w	sl, r4, #26
 8005f82:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005f86:	1a9b      	subs	r3, r3, r2
 8005f88:	eba3 0309 	sub.w	r3, r3, r9
 8005f8c:	4543      	cmp	r3, r8
 8005f8e:	f77f af7a 	ble.w	8005e86 <_printf_float+0x242>
 8005f92:	2301      	movs	r3, #1
 8005f94:	4652      	mov	r2, sl
 8005f96:	4631      	mov	r1, r6
 8005f98:	4628      	mov	r0, r5
 8005f9a:	47b8      	blx	r7
 8005f9c:	3001      	adds	r0, #1
 8005f9e:	f43f aeac 	beq.w	8005cfa <_printf_float+0xb6>
 8005fa2:	f108 0801 	add.w	r8, r8, #1
 8005fa6:	e7ec      	b.n	8005f82 <_printf_float+0x33e>
 8005fa8:	4613      	mov	r3, r2
 8005faa:	4631      	mov	r1, r6
 8005fac:	4642      	mov	r2, r8
 8005fae:	4628      	mov	r0, r5
 8005fb0:	47b8      	blx	r7
 8005fb2:	3001      	adds	r0, #1
 8005fb4:	d1c0      	bne.n	8005f38 <_printf_float+0x2f4>
 8005fb6:	e6a0      	b.n	8005cfa <_printf_float+0xb6>
 8005fb8:	2301      	movs	r3, #1
 8005fba:	4631      	mov	r1, r6
 8005fbc:	4628      	mov	r0, r5
 8005fbe:	920b      	str	r2, [sp, #44]	; 0x2c
 8005fc0:	47b8      	blx	r7
 8005fc2:	3001      	adds	r0, #1
 8005fc4:	f43f ae99 	beq.w	8005cfa <_printf_float+0xb6>
 8005fc8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005fca:	f10b 0b01 	add.w	fp, fp, #1
 8005fce:	e7b9      	b.n	8005f44 <_printf_float+0x300>
 8005fd0:	4631      	mov	r1, r6
 8005fd2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005fd6:	4628      	mov	r0, r5
 8005fd8:	47b8      	blx	r7
 8005fda:	3001      	adds	r0, #1
 8005fdc:	d1bf      	bne.n	8005f5e <_printf_float+0x31a>
 8005fde:	e68c      	b.n	8005cfa <_printf_float+0xb6>
 8005fe0:	464b      	mov	r3, r9
 8005fe2:	4631      	mov	r1, r6
 8005fe4:	4628      	mov	r0, r5
 8005fe6:	eb08 020a 	add.w	r2, r8, sl
 8005fea:	47b8      	blx	r7
 8005fec:	3001      	adds	r0, #1
 8005fee:	d1c2      	bne.n	8005f76 <_printf_float+0x332>
 8005ff0:	e683      	b.n	8005cfa <_printf_float+0xb6>
 8005ff2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ff4:	2a01      	cmp	r2, #1
 8005ff6:	dc01      	bgt.n	8005ffc <_printf_float+0x3b8>
 8005ff8:	07db      	lsls	r3, r3, #31
 8005ffa:	d537      	bpl.n	800606c <_printf_float+0x428>
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	4642      	mov	r2, r8
 8006000:	4631      	mov	r1, r6
 8006002:	4628      	mov	r0, r5
 8006004:	47b8      	blx	r7
 8006006:	3001      	adds	r0, #1
 8006008:	f43f ae77 	beq.w	8005cfa <_printf_float+0xb6>
 800600c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006010:	4631      	mov	r1, r6
 8006012:	4628      	mov	r0, r5
 8006014:	47b8      	blx	r7
 8006016:	3001      	adds	r0, #1
 8006018:	f43f ae6f 	beq.w	8005cfa <_printf_float+0xb6>
 800601c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006020:	2200      	movs	r2, #0
 8006022:	2300      	movs	r3, #0
 8006024:	f7fa fcc0 	bl	80009a8 <__aeabi_dcmpeq>
 8006028:	b9d8      	cbnz	r0, 8006062 <_printf_float+0x41e>
 800602a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800602c:	f108 0201 	add.w	r2, r8, #1
 8006030:	3b01      	subs	r3, #1
 8006032:	4631      	mov	r1, r6
 8006034:	4628      	mov	r0, r5
 8006036:	47b8      	blx	r7
 8006038:	3001      	adds	r0, #1
 800603a:	d10e      	bne.n	800605a <_printf_float+0x416>
 800603c:	e65d      	b.n	8005cfa <_printf_float+0xb6>
 800603e:	2301      	movs	r3, #1
 8006040:	464a      	mov	r2, r9
 8006042:	4631      	mov	r1, r6
 8006044:	4628      	mov	r0, r5
 8006046:	47b8      	blx	r7
 8006048:	3001      	adds	r0, #1
 800604a:	f43f ae56 	beq.w	8005cfa <_printf_float+0xb6>
 800604e:	f108 0801 	add.w	r8, r8, #1
 8006052:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006054:	3b01      	subs	r3, #1
 8006056:	4543      	cmp	r3, r8
 8006058:	dcf1      	bgt.n	800603e <_printf_float+0x3fa>
 800605a:	4653      	mov	r3, sl
 800605c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006060:	e6e0      	b.n	8005e24 <_printf_float+0x1e0>
 8006062:	f04f 0800 	mov.w	r8, #0
 8006066:	f104 091a 	add.w	r9, r4, #26
 800606a:	e7f2      	b.n	8006052 <_printf_float+0x40e>
 800606c:	2301      	movs	r3, #1
 800606e:	4642      	mov	r2, r8
 8006070:	e7df      	b.n	8006032 <_printf_float+0x3ee>
 8006072:	2301      	movs	r3, #1
 8006074:	464a      	mov	r2, r9
 8006076:	4631      	mov	r1, r6
 8006078:	4628      	mov	r0, r5
 800607a:	47b8      	blx	r7
 800607c:	3001      	adds	r0, #1
 800607e:	f43f ae3c 	beq.w	8005cfa <_printf_float+0xb6>
 8006082:	f108 0801 	add.w	r8, r8, #1
 8006086:	68e3      	ldr	r3, [r4, #12]
 8006088:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800608a:	1a5b      	subs	r3, r3, r1
 800608c:	4543      	cmp	r3, r8
 800608e:	dcf0      	bgt.n	8006072 <_printf_float+0x42e>
 8006090:	e6fd      	b.n	8005e8e <_printf_float+0x24a>
 8006092:	f04f 0800 	mov.w	r8, #0
 8006096:	f104 0919 	add.w	r9, r4, #25
 800609a:	e7f4      	b.n	8006086 <_printf_float+0x442>

0800609c <_printf_common>:
 800609c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060a0:	4616      	mov	r6, r2
 80060a2:	4699      	mov	r9, r3
 80060a4:	688a      	ldr	r2, [r1, #8]
 80060a6:	690b      	ldr	r3, [r1, #16]
 80060a8:	4607      	mov	r7, r0
 80060aa:	4293      	cmp	r3, r2
 80060ac:	bfb8      	it	lt
 80060ae:	4613      	movlt	r3, r2
 80060b0:	6033      	str	r3, [r6, #0]
 80060b2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80060b6:	460c      	mov	r4, r1
 80060b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80060bc:	b10a      	cbz	r2, 80060c2 <_printf_common+0x26>
 80060be:	3301      	adds	r3, #1
 80060c0:	6033      	str	r3, [r6, #0]
 80060c2:	6823      	ldr	r3, [r4, #0]
 80060c4:	0699      	lsls	r1, r3, #26
 80060c6:	bf42      	ittt	mi
 80060c8:	6833      	ldrmi	r3, [r6, #0]
 80060ca:	3302      	addmi	r3, #2
 80060cc:	6033      	strmi	r3, [r6, #0]
 80060ce:	6825      	ldr	r5, [r4, #0]
 80060d0:	f015 0506 	ands.w	r5, r5, #6
 80060d4:	d106      	bne.n	80060e4 <_printf_common+0x48>
 80060d6:	f104 0a19 	add.w	sl, r4, #25
 80060da:	68e3      	ldr	r3, [r4, #12]
 80060dc:	6832      	ldr	r2, [r6, #0]
 80060de:	1a9b      	subs	r3, r3, r2
 80060e0:	42ab      	cmp	r3, r5
 80060e2:	dc28      	bgt.n	8006136 <_printf_common+0x9a>
 80060e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80060e8:	1e13      	subs	r3, r2, #0
 80060ea:	6822      	ldr	r2, [r4, #0]
 80060ec:	bf18      	it	ne
 80060ee:	2301      	movne	r3, #1
 80060f0:	0692      	lsls	r2, r2, #26
 80060f2:	d42d      	bmi.n	8006150 <_printf_common+0xb4>
 80060f4:	4649      	mov	r1, r9
 80060f6:	4638      	mov	r0, r7
 80060f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060fc:	47c0      	blx	r8
 80060fe:	3001      	adds	r0, #1
 8006100:	d020      	beq.n	8006144 <_printf_common+0xa8>
 8006102:	6823      	ldr	r3, [r4, #0]
 8006104:	68e5      	ldr	r5, [r4, #12]
 8006106:	f003 0306 	and.w	r3, r3, #6
 800610a:	2b04      	cmp	r3, #4
 800610c:	bf18      	it	ne
 800610e:	2500      	movne	r5, #0
 8006110:	6832      	ldr	r2, [r6, #0]
 8006112:	f04f 0600 	mov.w	r6, #0
 8006116:	68a3      	ldr	r3, [r4, #8]
 8006118:	bf08      	it	eq
 800611a:	1aad      	subeq	r5, r5, r2
 800611c:	6922      	ldr	r2, [r4, #16]
 800611e:	bf08      	it	eq
 8006120:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006124:	4293      	cmp	r3, r2
 8006126:	bfc4      	itt	gt
 8006128:	1a9b      	subgt	r3, r3, r2
 800612a:	18ed      	addgt	r5, r5, r3
 800612c:	341a      	adds	r4, #26
 800612e:	42b5      	cmp	r5, r6
 8006130:	d11a      	bne.n	8006168 <_printf_common+0xcc>
 8006132:	2000      	movs	r0, #0
 8006134:	e008      	b.n	8006148 <_printf_common+0xac>
 8006136:	2301      	movs	r3, #1
 8006138:	4652      	mov	r2, sl
 800613a:	4649      	mov	r1, r9
 800613c:	4638      	mov	r0, r7
 800613e:	47c0      	blx	r8
 8006140:	3001      	adds	r0, #1
 8006142:	d103      	bne.n	800614c <_printf_common+0xb0>
 8006144:	f04f 30ff 	mov.w	r0, #4294967295
 8006148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800614c:	3501      	adds	r5, #1
 800614e:	e7c4      	b.n	80060da <_printf_common+0x3e>
 8006150:	2030      	movs	r0, #48	; 0x30
 8006152:	18e1      	adds	r1, r4, r3
 8006154:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006158:	1c5a      	adds	r2, r3, #1
 800615a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800615e:	4422      	add	r2, r4
 8006160:	3302      	adds	r3, #2
 8006162:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006166:	e7c5      	b.n	80060f4 <_printf_common+0x58>
 8006168:	2301      	movs	r3, #1
 800616a:	4622      	mov	r2, r4
 800616c:	4649      	mov	r1, r9
 800616e:	4638      	mov	r0, r7
 8006170:	47c0      	blx	r8
 8006172:	3001      	adds	r0, #1
 8006174:	d0e6      	beq.n	8006144 <_printf_common+0xa8>
 8006176:	3601      	adds	r6, #1
 8006178:	e7d9      	b.n	800612e <_printf_common+0x92>
	...

0800617c <_printf_i>:
 800617c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006180:	7e0f      	ldrb	r7, [r1, #24]
 8006182:	4691      	mov	r9, r2
 8006184:	2f78      	cmp	r7, #120	; 0x78
 8006186:	4680      	mov	r8, r0
 8006188:	460c      	mov	r4, r1
 800618a:	469a      	mov	sl, r3
 800618c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800618e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006192:	d807      	bhi.n	80061a4 <_printf_i+0x28>
 8006194:	2f62      	cmp	r7, #98	; 0x62
 8006196:	d80a      	bhi.n	80061ae <_printf_i+0x32>
 8006198:	2f00      	cmp	r7, #0
 800619a:	f000 80d9 	beq.w	8006350 <_printf_i+0x1d4>
 800619e:	2f58      	cmp	r7, #88	; 0x58
 80061a0:	f000 80a4 	beq.w	80062ec <_printf_i+0x170>
 80061a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80061ac:	e03a      	b.n	8006224 <_printf_i+0xa8>
 80061ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80061b2:	2b15      	cmp	r3, #21
 80061b4:	d8f6      	bhi.n	80061a4 <_printf_i+0x28>
 80061b6:	a101      	add	r1, pc, #4	; (adr r1, 80061bc <_printf_i+0x40>)
 80061b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80061bc:	08006215 	.word	0x08006215
 80061c0:	08006229 	.word	0x08006229
 80061c4:	080061a5 	.word	0x080061a5
 80061c8:	080061a5 	.word	0x080061a5
 80061cc:	080061a5 	.word	0x080061a5
 80061d0:	080061a5 	.word	0x080061a5
 80061d4:	08006229 	.word	0x08006229
 80061d8:	080061a5 	.word	0x080061a5
 80061dc:	080061a5 	.word	0x080061a5
 80061e0:	080061a5 	.word	0x080061a5
 80061e4:	080061a5 	.word	0x080061a5
 80061e8:	08006337 	.word	0x08006337
 80061ec:	08006259 	.word	0x08006259
 80061f0:	08006319 	.word	0x08006319
 80061f4:	080061a5 	.word	0x080061a5
 80061f8:	080061a5 	.word	0x080061a5
 80061fc:	08006359 	.word	0x08006359
 8006200:	080061a5 	.word	0x080061a5
 8006204:	08006259 	.word	0x08006259
 8006208:	080061a5 	.word	0x080061a5
 800620c:	080061a5 	.word	0x080061a5
 8006210:	08006321 	.word	0x08006321
 8006214:	682b      	ldr	r3, [r5, #0]
 8006216:	1d1a      	adds	r2, r3, #4
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	602a      	str	r2, [r5, #0]
 800621c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006220:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006224:	2301      	movs	r3, #1
 8006226:	e0a4      	b.n	8006372 <_printf_i+0x1f6>
 8006228:	6820      	ldr	r0, [r4, #0]
 800622a:	6829      	ldr	r1, [r5, #0]
 800622c:	0606      	lsls	r6, r0, #24
 800622e:	f101 0304 	add.w	r3, r1, #4
 8006232:	d50a      	bpl.n	800624a <_printf_i+0xce>
 8006234:	680e      	ldr	r6, [r1, #0]
 8006236:	602b      	str	r3, [r5, #0]
 8006238:	2e00      	cmp	r6, #0
 800623a:	da03      	bge.n	8006244 <_printf_i+0xc8>
 800623c:	232d      	movs	r3, #45	; 0x2d
 800623e:	4276      	negs	r6, r6
 8006240:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006244:	230a      	movs	r3, #10
 8006246:	485e      	ldr	r0, [pc, #376]	; (80063c0 <_printf_i+0x244>)
 8006248:	e019      	b.n	800627e <_printf_i+0x102>
 800624a:	680e      	ldr	r6, [r1, #0]
 800624c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006250:	602b      	str	r3, [r5, #0]
 8006252:	bf18      	it	ne
 8006254:	b236      	sxthne	r6, r6
 8006256:	e7ef      	b.n	8006238 <_printf_i+0xbc>
 8006258:	682b      	ldr	r3, [r5, #0]
 800625a:	6820      	ldr	r0, [r4, #0]
 800625c:	1d19      	adds	r1, r3, #4
 800625e:	6029      	str	r1, [r5, #0]
 8006260:	0601      	lsls	r1, r0, #24
 8006262:	d501      	bpl.n	8006268 <_printf_i+0xec>
 8006264:	681e      	ldr	r6, [r3, #0]
 8006266:	e002      	b.n	800626e <_printf_i+0xf2>
 8006268:	0646      	lsls	r6, r0, #25
 800626a:	d5fb      	bpl.n	8006264 <_printf_i+0xe8>
 800626c:	881e      	ldrh	r6, [r3, #0]
 800626e:	2f6f      	cmp	r7, #111	; 0x6f
 8006270:	bf0c      	ite	eq
 8006272:	2308      	moveq	r3, #8
 8006274:	230a      	movne	r3, #10
 8006276:	4852      	ldr	r0, [pc, #328]	; (80063c0 <_printf_i+0x244>)
 8006278:	2100      	movs	r1, #0
 800627a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800627e:	6865      	ldr	r5, [r4, #4]
 8006280:	2d00      	cmp	r5, #0
 8006282:	bfa8      	it	ge
 8006284:	6821      	ldrge	r1, [r4, #0]
 8006286:	60a5      	str	r5, [r4, #8]
 8006288:	bfa4      	itt	ge
 800628a:	f021 0104 	bicge.w	r1, r1, #4
 800628e:	6021      	strge	r1, [r4, #0]
 8006290:	b90e      	cbnz	r6, 8006296 <_printf_i+0x11a>
 8006292:	2d00      	cmp	r5, #0
 8006294:	d04d      	beq.n	8006332 <_printf_i+0x1b6>
 8006296:	4615      	mov	r5, r2
 8006298:	fbb6 f1f3 	udiv	r1, r6, r3
 800629c:	fb03 6711 	mls	r7, r3, r1, r6
 80062a0:	5dc7      	ldrb	r7, [r0, r7]
 80062a2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80062a6:	4637      	mov	r7, r6
 80062a8:	42bb      	cmp	r3, r7
 80062aa:	460e      	mov	r6, r1
 80062ac:	d9f4      	bls.n	8006298 <_printf_i+0x11c>
 80062ae:	2b08      	cmp	r3, #8
 80062b0:	d10b      	bne.n	80062ca <_printf_i+0x14e>
 80062b2:	6823      	ldr	r3, [r4, #0]
 80062b4:	07de      	lsls	r6, r3, #31
 80062b6:	d508      	bpl.n	80062ca <_printf_i+0x14e>
 80062b8:	6923      	ldr	r3, [r4, #16]
 80062ba:	6861      	ldr	r1, [r4, #4]
 80062bc:	4299      	cmp	r1, r3
 80062be:	bfde      	ittt	le
 80062c0:	2330      	movle	r3, #48	; 0x30
 80062c2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80062c6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80062ca:	1b52      	subs	r2, r2, r5
 80062cc:	6122      	str	r2, [r4, #16]
 80062ce:	464b      	mov	r3, r9
 80062d0:	4621      	mov	r1, r4
 80062d2:	4640      	mov	r0, r8
 80062d4:	f8cd a000 	str.w	sl, [sp]
 80062d8:	aa03      	add	r2, sp, #12
 80062da:	f7ff fedf 	bl	800609c <_printf_common>
 80062de:	3001      	adds	r0, #1
 80062e0:	d14c      	bne.n	800637c <_printf_i+0x200>
 80062e2:	f04f 30ff 	mov.w	r0, #4294967295
 80062e6:	b004      	add	sp, #16
 80062e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062ec:	4834      	ldr	r0, [pc, #208]	; (80063c0 <_printf_i+0x244>)
 80062ee:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80062f2:	6829      	ldr	r1, [r5, #0]
 80062f4:	6823      	ldr	r3, [r4, #0]
 80062f6:	f851 6b04 	ldr.w	r6, [r1], #4
 80062fa:	6029      	str	r1, [r5, #0]
 80062fc:	061d      	lsls	r5, r3, #24
 80062fe:	d514      	bpl.n	800632a <_printf_i+0x1ae>
 8006300:	07df      	lsls	r7, r3, #31
 8006302:	bf44      	itt	mi
 8006304:	f043 0320 	orrmi.w	r3, r3, #32
 8006308:	6023      	strmi	r3, [r4, #0]
 800630a:	b91e      	cbnz	r6, 8006314 <_printf_i+0x198>
 800630c:	6823      	ldr	r3, [r4, #0]
 800630e:	f023 0320 	bic.w	r3, r3, #32
 8006312:	6023      	str	r3, [r4, #0]
 8006314:	2310      	movs	r3, #16
 8006316:	e7af      	b.n	8006278 <_printf_i+0xfc>
 8006318:	6823      	ldr	r3, [r4, #0]
 800631a:	f043 0320 	orr.w	r3, r3, #32
 800631e:	6023      	str	r3, [r4, #0]
 8006320:	2378      	movs	r3, #120	; 0x78
 8006322:	4828      	ldr	r0, [pc, #160]	; (80063c4 <_printf_i+0x248>)
 8006324:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006328:	e7e3      	b.n	80062f2 <_printf_i+0x176>
 800632a:	0659      	lsls	r1, r3, #25
 800632c:	bf48      	it	mi
 800632e:	b2b6      	uxthmi	r6, r6
 8006330:	e7e6      	b.n	8006300 <_printf_i+0x184>
 8006332:	4615      	mov	r5, r2
 8006334:	e7bb      	b.n	80062ae <_printf_i+0x132>
 8006336:	682b      	ldr	r3, [r5, #0]
 8006338:	6826      	ldr	r6, [r4, #0]
 800633a:	1d18      	adds	r0, r3, #4
 800633c:	6961      	ldr	r1, [r4, #20]
 800633e:	6028      	str	r0, [r5, #0]
 8006340:	0635      	lsls	r5, r6, #24
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	d501      	bpl.n	800634a <_printf_i+0x1ce>
 8006346:	6019      	str	r1, [r3, #0]
 8006348:	e002      	b.n	8006350 <_printf_i+0x1d4>
 800634a:	0670      	lsls	r0, r6, #25
 800634c:	d5fb      	bpl.n	8006346 <_printf_i+0x1ca>
 800634e:	8019      	strh	r1, [r3, #0]
 8006350:	2300      	movs	r3, #0
 8006352:	4615      	mov	r5, r2
 8006354:	6123      	str	r3, [r4, #16]
 8006356:	e7ba      	b.n	80062ce <_printf_i+0x152>
 8006358:	682b      	ldr	r3, [r5, #0]
 800635a:	2100      	movs	r1, #0
 800635c:	1d1a      	adds	r2, r3, #4
 800635e:	602a      	str	r2, [r5, #0]
 8006360:	681d      	ldr	r5, [r3, #0]
 8006362:	6862      	ldr	r2, [r4, #4]
 8006364:	4628      	mov	r0, r5
 8006366:	f000 fee9 	bl	800713c <memchr>
 800636a:	b108      	cbz	r0, 8006370 <_printf_i+0x1f4>
 800636c:	1b40      	subs	r0, r0, r5
 800636e:	6060      	str	r0, [r4, #4]
 8006370:	6863      	ldr	r3, [r4, #4]
 8006372:	6123      	str	r3, [r4, #16]
 8006374:	2300      	movs	r3, #0
 8006376:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800637a:	e7a8      	b.n	80062ce <_printf_i+0x152>
 800637c:	462a      	mov	r2, r5
 800637e:	4649      	mov	r1, r9
 8006380:	4640      	mov	r0, r8
 8006382:	6923      	ldr	r3, [r4, #16]
 8006384:	47d0      	blx	sl
 8006386:	3001      	adds	r0, #1
 8006388:	d0ab      	beq.n	80062e2 <_printf_i+0x166>
 800638a:	6823      	ldr	r3, [r4, #0]
 800638c:	079b      	lsls	r3, r3, #30
 800638e:	d413      	bmi.n	80063b8 <_printf_i+0x23c>
 8006390:	68e0      	ldr	r0, [r4, #12]
 8006392:	9b03      	ldr	r3, [sp, #12]
 8006394:	4298      	cmp	r0, r3
 8006396:	bfb8      	it	lt
 8006398:	4618      	movlt	r0, r3
 800639a:	e7a4      	b.n	80062e6 <_printf_i+0x16a>
 800639c:	2301      	movs	r3, #1
 800639e:	4632      	mov	r2, r6
 80063a0:	4649      	mov	r1, r9
 80063a2:	4640      	mov	r0, r8
 80063a4:	47d0      	blx	sl
 80063a6:	3001      	adds	r0, #1
 80063a8:	d09b      	beq.n	80062e2 <_printf_i+0x166>
 80063aa:	3501      	adds	r5, #1
 80063ac:	68e3      	ldr	r3, [r4, #12]
 80063ae:	9903      	ldr	r1, [sp, #12]
 80063b0:	1a5b      	subs	r3, r3, r1
 80063b2:	42ab      	cmp	r3, r5
 80063b4:	dcf2      	bgt.n	800639c <_printf_i+0x220>
 80063b6:	e7eb      	b.n	8006390 <_printf_i+0x214>
 80063b8:	2500      	movs	r5, #0
 80063ba:	f104 0619 	add.w	r6, r4, #25
 80063be:	e7f5      	b.n	80063ac <_printf_i+0x230>
 80063c0:	080089c2 	.word	0x080089c2
 80063c4:	080089d3 	.word	0x080089d3

080063c8 <sniprintf>:
 80063c8:	b40c      	push	{r2, r3}
 80063ca:	b530      	push	{r4, r5, lr}
 80063cc:	4b17      	ldr	r3, [pc, #92]	; (800642c <sniprintf+0x64>)
 80063ce:	1e0c      	subs	r4, r1, #0
 80063d0:	681d      	ldr	r5, [r3, #0]
 80063d2:	b09d      	sub	sp, #116	; 0x74
 80063d4:	da08      	bge.n	80063e8 <sniprintf+0x20>
 80063d6:	238b      	movs	r3, #139	; 0x8b
 80063d8:	f04f 30ff 	mov.w	r0, #4294967295
 80063dc:	602b      	str	r3, [r5, #0]
 80063de:	b01d      	add	sp, #116	; 0x74
 80063e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80063e4:	b002      	add	sp, #8
 80063e6:	4770      	bx	lr
 80063e8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80063ec:	f8ad 3014 	strh.w	r3, [sp, #20]
 80063f0:	bf0c      	ite	eq
 80063f2:	4623      	moveq	r3, r4
 80063f4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80063f8:	9304      	str	r3, [sp, #16]
 80063fa:	9307      	str	r3, [sp, #28]
 80063fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006400:	9002      	str	r0, [sp, #8]
 8006402:	9006      	str	r0, [sp, #24]
 8006404:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006408:	4628      	mov	r0, r5
 800640a:	ab21      	add	r3, sp, #132	; 0x84
 800640c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800640e:	a902      	add	r1, sp, #8
 8006410:	9301      	str	r3, [sp, #4]
 8006412:	f001 fb7d 	bl	8007b10 <_svfiprintf_r>
 8006416:	1c43      	adds	r3, r0, #1
 8006418:	bfbc      	itt	lt
 800641a:	238b      	movlt	r3, #139	; 0x8b
 800641c:	602b      	strlt	r3, [r5, #0]
 800641e:	2c00      	cmp	r4, #0
 8006420:	d0dd      	beq.n	80063de <sniprintf+0x16>
 8006422:	2200      	movs	r2, #0
 8006424:	9b02      	ldr	r3, [sp, #8]
 8006426:	701a      	strb	r2, [r3, #0]
 8006428:	e7d9      	b.n	80063de <sniprintf+0x16>
 800642a:	bf00      	nop
 800642c:	2000000c 	.word	0x2000000c

08006430 <quorem>:
 8006430:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006434:	6903      	ldr	r3, [r0, #16]
 8006436:	690c      	ldr	r4, [r1, #16]
 8006438:	4607      	mov	r7, r0
 800643a:	42a3      	cmp	r3, r4
 800643c:	f2c0 8082 	blt.w	8006544 <quorem+0x114>
 8006440:	3c01      	subs	r4, #1
 8006442:	f100 0514 	add.w	r5, r0, #20
 8006446:	f101 0814 	add.w	r8, r1, #20
 800644a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800644e:	9301      	str	r3, [sp, #4]
 8006450:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006454:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006458:	3301      	adds	r3, #1
 800645a:	429a      	cmp	r2, r3
 800645c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006460:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006464:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006468:	d331      	bcc.n	80064ce <quorem+0x9e>
 800646a:	f04f 0e00 	mov.w	lr, #0
 800646e:	4640      	mov	r0, r8
 8006470:	46ac      	mov	ip, r5
 8006472:	46f2      	mov	sl, lr
 8006474:	f850 2b04 	ldr.w	r2, [r0], #4
 8006478:	b293      	uxth	r3, r2
 800647a:	fb06 e303 	mla	r3, r6, r3, lr
 800647e:	0c12      	lsrs	r2, r2, #16
 8006480:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006484:	b29b      	uxth	r3, r3
 8006486:	fb06 e202 	mla	r2, r6, r2, lr
 800648a:	ebaa 0303 	sub.w	r3, sl, r3
 800648e:	f8dc a000 	ldr.w	sl, [ip]
 8006492:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006496:	fa1f fa8a 	uxth.w	sl, sl
 800649a:	4453      	add	r3, sl
 800649c:	f8dc a000 	ldr.w	sl, [ip]
 80064a0:	b292      	uxth	r2, r2
 80064a2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80064a6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80064b0:	4581      	cmp	r9, r0
 80064b2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80064b6:	f84c 3b04 	str.w	r3, [ip], #4
 80064ba:	d2db      	bcs.n	8006474 <quorem+0x44>
 80064bc:	f855 300b 	ldr.w	r3, [r5, fp]
 80064c0:	b92b      	cbnz	r3, 80064ce <quorem+0x9e>
 80064c2:	9b01      	ldr	r3, [sp, #4]
 80064c4:	3b04      	subs	r3, #4
 80064c6:	429d      	cmp	r5, r3
 80064c8:	461a      	mov	r2, r3
 80064ca:	d32f      	bcc.n	800652c <quorem+0xfc>
 80064cc:	613c      	str	r4, [r7, #16]
 80064ce:	4638      	mov	r0, r7
 80064d0:	f001 f8ce 	bl	8007670 <__mcmp>
 80064d4:	2800      	cmp	r0, #0
 80064d6:	db25      	blt.n	8006524 <quorem+0xf4>
 80064d8:	4628      	mov	r0, r5
 80064da:	f04f 0c00 	mov.w	ip, #0
 80064de:	3601      	adds	r6, #1
 80064e0:	f858 1b04 	ldr.w	r1, [r8], #4
 80064e4:	f8d0 e000 	ldr.w	lr, [r0]
 80064e8:	b28b      	uxth	r3, r1
 80064ea:	ebac 0303 	sub.w	r3, ip, r3
 80064ee:	fa1f f28e 	uxth.w	r2, lr
 80064f2:	4413      	add	r3, r2
 80064f4:	0c0a      	lsrs	r2, r1, #16
 80064f6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80064fa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80064fe:	b29b      	uxth	r3, r3
 8006500:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006504:	45c1      	cmp	r9, r8
 8006506:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800650a:	f840 3b04 	str.w	r3, [r0], #4
 800650e:	d2e7      	bcs.n	80064e0 <quorem+0xb0>
 8006510:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006514:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006518:	b922      	cbnz	r2, 8006524 <quorem+0xf4>
 800651a:	3b04      	subs	r3, #4
 800651c:	429d      	cmp	r5, r3
 800651e:	461a      	mov	r2, r3
 8006520:	d30a      	bcc.n	8006538 <quorem+0x108>
 8006522:	613c      	str	r4, [r7, #16]
 8006524:	4630      	mov	r0, r6
 8006526:	b003      	add	sp, #12
 8006528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800652c:	6812      	ldr	r2, [r2, #0]
 800652e:	3b04      	subs	r3, #4
 8006530:	2a00      	cmp	r2, #0
 8006532:	d1cb      	bne.n	80064cc <quorem+0x9c>
 8006534:	3c01      	subs	r4, #1
 8006536:	e7c6      	b.n	80064c6 <quorem+0x96>
 8006538:	6812      	ldr	r2, [r2, #0]
 800653a:	3b04      	subs	r3, #4
 800653c:	2a00      	cmp	r2, #0
 800653e:	d1f0      	bne.n	8006522 <quorem+0xf2>
 8006540:	3c01      	subs	r4, #1
 8006542:	e7eb      	b.n	800651c <quorem+0xec>
 8006544:	2000      	movs	r0, #0
 8006546:	e7ee      	b.n	8006526 <quorem+0xf6>

08006548 <_dtoa_r>:
 8006548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800654c:	4616      	mov	r6, r2
 800654e:	461f      	mov	r7, r3
 8006550:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006552:	b099      	sub	sp, #100	; 0x64
 8006554:	4605      	mov	r5, r0
 8006556:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800655a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800655e:	b974      	cbnz	r4, 800657e <_dtoa_r+0x36>
 8006560:	2010      	movs	r0, #16
 8006562:	f000 fde3 	bl	800712c <malloc>
 8006566:	4602      	mov	r2, r0
 8006568:	6268      	str	r0, [r5, #36]	; 0x24
 800656a:	b920      	cbnz	r0, 8006576 <_dtoa_r+0x2e>
 800656c:	21ea      	movs	r1, #234	; 0xea
 800656e:	4ba8      	ldr	r3, [pc, #672]	; (8006810 <_dtoa_r+0x2c8>)
 8006570:	48a8      	ldr	r0, [pc, #672]	; (8006814 <_dtoa_r+0x2cc>)
 8006572:	f001 fbdd 	bl	8007d30 <__assert_func>
 8006576:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800657a:	6004      	str	r4, [r0, #0]
 800657c:	60c4      	str	r4, [r0, #12]
 800657e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006580:	6819      	ldr	r1, [r3, #0]
 8006582:	b151      	cbz	r1, 800659a <_dtoa_r+0x52>
 8006584:	685a      	ldr	r2, [r3, #4]
 8006586:	2301      	movs	r3, #1
 8006588:	4093      	lsls	r3, r2
 800658a:	604a      	str	r2, [r1, #4]
 800658c:	608b      	str	r3, [r1, #8]
 800658e:	4628      	mov	r0, r5
 8006590:	f000 fe30 	bl	80071f4 <_Bfree>
 8006594:	2200      	movs	r2, #0
 8006596:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006598:	601a      	str	r2, [r3, #0]
 800659a:	1e3b      	subs	r3, r7, #0
 800659c:	bfaf      	iteee	ge
 800659e:	2300      	movge	r3, #0
 80065a0:	2201      	movlt	r2, #1
 80065a2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80065a6:	9305      	strlt	r3, [sp, #20]
 80065a8:	bfa8      	it	ge
 80065aa:	f8c8 3000 	strge.w	r3, [r8]
 80065ae:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80065b2:	4b99      	ldr	r3, [pc, #612]	; (8006818 <_dtoa_r+0x2d0>)
 80065b4:	bfb8      	it	lt
 80065b6:	f8c8 2000 	strlt.w	r2, [r8]
 80065ba:	ea33 0309 	bics.w	r3, r3, r9
 80065be:	d119      	bne.n	80065f4 <_dtoa_r+0xac>
 80065c0:	f242 730f 	movw	r3, #9999	; 0x270f
 80065c4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80065c6:	6013      	str	r3, [r2, #0]
 80065c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80065cc:	4333      	orrs	r3, r6
 80065ce:	f000 857f 	beq.w	80070d0 <_dtoa_r+0xb88>
 80065d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80065d4:	b953      	cbnz	r3, 80065ec <_dtoa_r+0xa4>
 80065d6:	4b91      	ldr	r3, [pc, #580]	; (800681c <_dtoa_r+0x2d4>)
 80065d8:	e022      	b.n	8006620 <_dtoa_r+0xd8>
 80065da:	4b91      	ldr	r3, [pc, #580]	; (8006820 <_dtoa_r+0x2d8>)
 80065dc:	9303      	str	r3, [sp, #12]
 80065de:	3308      	adds	r3, #8
 80065e0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80065e2:	6013      	str	r3, [r2, #0]
 80065e4:	9803      	ldr	r0, [sp, #12]
 80065e6:	b019      	add	sp, #100	; 0x64
 80065e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065ec:	4b8b      	ldr	r3, [pc, #556]	; (800681c <_dtoa_r+0x2d4>)
 80065ee:	9303      	str	r3, [sp, #12]
 80065f0:	3303      	adds	r3, #3
 80065f2:	e7f5      	b.n	80065e0 <_dtoa_r+0x98>
 80065f4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80065f8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80065fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006600:	2200      	movs	r2, #0
 8006602:	2300      	movs	r3, #0
 8006604:	f7fa f9d0 	bl	80009a8 <__aeabi_dcmpeq>
 8006608:	4680      	mov	r8, r0
 800660a:	b158      	cbz	r0, 8006624 <_dtoa_r+0xdc>
 800660c:	2301      	movs	r3, #1
 800660e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006610:	6013      	str	r3, [r2, #0]
 8006612:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006614:	2b00      	cmp	r3, #0
 8006616:	f000 8558 	beq.w	80070ca <_dtoa_r+0xb82>
 800661a:	4882      	ldr	r0, [pc, #520]	; (8006824 <_dtoa_r+0x2dc>)
 800661c:	6018      	str	r0, [r3, #0]
 800661e:	1e43      	subs	r3, r0, #1
 8006620:	9303      	str	r3, [sp, #12]
 8006622:	e7df      	b.n	80065e4 <_dtoa_r+0x9c>
 8006624:	ab16      	add	r3, sp, #88	; 0x58
 8006626:	9301      	str	r3, [sp, #4]
 8006628:	ab17      	add	r3, sp, #92	; 0x5c
 800662a:	9300      	str	r3, [sp, #0]
 800662c:	4628      	mov	r0, r5
 800662e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006632:	f001 f8c5 	bl	80077c0 <__d2b>
 8006636:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800663a:	4683      	mov	fp, r0
 800663c:	2c00      	cmp	r4, #0
 800663e:	d07f      	beq.n	8006740 <_dtoa_r+0x1f8>
 8006640:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006644:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006646:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800664a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800664e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006652:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006656:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800665a:	2200      	movs	r2, #0
 800665c:	4b72      	ldr	r3, [pc, #456]	; (8006828 <_dtoa_r+0x2e0>)
 800665e:	f7f9 fd83 	bl	8000168 <__aeabi_dsub>
 8006662:	a365      	add	r3, pc, #404	; (adr r3, 80067f8 <_dtoa_r+0x2b0>)
 8006664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006668:	f7f9 ff36 	bl	80004d8 <__aeabi_dmul>
 800666c:	a364      	add	r3, pc, #400	; (adr r3, 8006800 <_dtoa_r+0x2b8>)
 800666e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006672:	f7f9 fd7b 	bl	800016c <__adddf3>
 8006676:	4606      	mov	r6, r0
 8006678:	4620      	mov	r0, r4
 800667a:	460f      	mov	r7, r1
 800667c:	f7f9 fec2 	bl	8000404 <__aeabi_i2d>
 8006680:	a361      	add	r3, pc, #388	; (adr r3, 8006808 <_dtoa_r+0x2c0>)
 8006682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006686:	f7f9 ff27 	bl	80004d8 <__aeabi_dmul>
 800668a:	4602      	mov	r2, r0
 800668c:	460b      	mov	r3, r1
 800668e:	4630      	mov	r0, r6
 8006690:	4639      	mov	r1, r7
 8006692:	f7f9 fd6b 	bl	800016c <__adddf3>
 8006696:	4606      	mov	r6, r0
 8006698:	460f      	mov	r7, r1
 800669a:	f7fa f9cd 	bl	8000a38 <__aeabi_d2iz>
 800669e:	2200      	movs	r2, #0
 80066a0:	4682      	mov	sl, r0
 80066a2:	2300      	movs	r3, #0
 80066a4:	4630      	mov	r0, r6
 80066a6:	4639      	mov	r1, r7
 80066a8:	f7fa f988 	bl	80009bc <__aeabi_dcmplt>
 80066ac:	b148      	cbz	r0, 80066c2 <_dtoa_r+0x17a>
 80066ae:	4650      	mov	r0, sl
 80066b0:	f7f9 fea8 	bl	8000404 <__aeabi_i2d>
 80066b4:	4632      	mov	r2, r6
 80066b6:	463b      	mov	r3, r7
 80066b8:	f7fa f976 	bl	80009a8 <__aeabi_dcmpeq>
 80066bc:	b908      	cbnz	r0, 80066c2 <_dtoa_r+0x17a>
 80066be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80066c2:	f1ba 0f16 	cmp.w	sl, #22
 80066c6:	d858      	bhi.n	800677a <_dtoa_r+0x232>
 80066c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80066cc:	4b57      	ldr	r3, [pc, #348]	; (800682c <_dtoa_r+0x2e4>)
 80066ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80066d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d6:	f7fa f971 	bl	80009bc <__aeabi_dcmplt>
 80066da:	2800      	cmp	r0, #0
 80066dc:	d04f      	beq.n	800677e <_dtoa_r+0x236>
 80066de:	2300      	movs	r3, #0
 80066e0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80066e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80066e6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80066e8:	1b1c      	subs	r4, r3, r4
 80066ea:	1e63      	subs	r3, r4, #1
 80066ec:	9309      	str	r3, [sp, #36]	; 0x24
 80066ee:	bf49      	itett	mi
 80066f0:	f1c4 0301 	rsbmi	r3, r4, #1
 80066f4:	2300      	movpl	r3, #0
 80066f6:	9306      	strmi	r3, [sp, #24]
 80066f8:	2300      	movmi	r3, #0
 80066fa:	bf54      	ite	pl
 80066fc:	9306      	strpl	r3, [sp, #24]
 80066fe:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006700:	f1ba 0f00 	cmp.w	sl, #0
 8006704:	db3d      	blt.n	8006782 <_dtoa_r+0x23a>
 8006706:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006708:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800670c:	4453      	add	r3, sl
 800670e:	9309      	str	r3, [sp, #36]	; 0x24
 8006710:	2300      	movs	r3, #0
 8006712:	930a      	str	r3, [sp, #40]	; 0x28
 8006714:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006716:	2b09      	cmp	r3, #9
 8006718:	f200 808c 	bhi.w	8006834 <_dtoa_r+0x2ec>
 800671c:	2b05      	cmp	r3, #5
 800671e:	bfc4      	itt	gt
 8006720:	3b04      	subgt	r3, #4
 8006722:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006724:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006726:	bfc8      	it	gt
 8006728:	2400      	movgt	r4, #0
 800672a:	f1a3 0302 	sub.w	r3, r3, #2
 800672e:	bfd8      	it	le
 8006730:	2401      	movle	r4, #1
 8006732:	2b03      	cmp	r3, #3
 8006734:	f200 808a 	bhi.w	800684c <_dtoa_r+0x304>
 8006738:	e8df f003 	tbb	[pc, r3]
 800673c:	5b4d4f2d 	.word	0x5b4d4f2d
 8006740:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006744:	441c      	add	r4, r3
 8006746:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800674a:	2b20      	cmp	r3, #32
 800674c:	bfc3      	ittte	gt
 800674e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006752:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8006756:	fa09 f303 	lslgt.w	r3, r9, r3
 800675a:	f1c3 0320 	rsble	r3, r3, #32
 800675e:	bfc6      	itte	gt
 8006760:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006764:	4318      	orrgt	r0, r3
 8006766:	fa06 f003 	lslle.w	r0, r6, r3
 800676a:	f7f9 fe3b 	bl	80003e4 <__aeabi_ui2d>
 800676e:	2301      	movs	r3, #1
 8006770:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006774:	3c01      	subs	r4, #1
 8006776:	9313      	str	r3, [sp, #76]	; 0x4c
 8006778:	e76f      	b.n	800665a <_dtoa_r+0x112>
 800677a:	2301      	movs	r3, #1
 800677c:	e7b2      	b.n	80066e4 <_dtoa_r+0x19c>
 800677e:	900f      	str	r0, [sp, #60]	; 0x3c
 8006780:	e7b1      	b.n	80066e6 <_dtoa_r+0x19e>
 8006782:	9b06      	ldr	r3, [sp, #24]
 8006784:	eba3 030a 	sub.w	r3, r3, sl
 8006788:	9306      	str	r3, [sp, #24]
 800678a:	f1ca 0300 	rsb	r3, sl, #0
 800678e:	930a      	str	r3, [sp, #40]	; 0x28
 8006790:	2300      	movs	r3, #0
 8006792:	930e      	str	r3, [sp, #56]	; 0x38
 8006794:	e7be      	b.n	8006714 <_dtoa_r+0x1cc>
 8006796:	2300      	movs	r3, #0
 8006798:	930b      	str	r3, [sp, #44]	; 0x2c
 800679a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800679c:	2b00      	cmp	r3, #0
 800679e:	dc58      	bgt.n	8006852 <_dtoa_r+0x30a>
 80067a0:	f04f 0901 	mov.w	r9, #1
 80067a4:	464b      	mov	r3, r9
 80067a6:	f8cd 9020 	str.w	r9, [sp, #32]
 80067aa:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80067ae:	2200      	movs	r2, #0
 80067b0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80067b2:	6042      	str	r2, [r0, #4]
 80067b4:	2204      	movs	r2, #4
 80067b6:	f102 0614 	add.w	r6, r2, #20
 80067ba:	429e      	cmp	r6, r3
 80067bc:	6841      	ldr	r1, [r0, #4]
 80067be:	d94e      	bls.n	800685e <_dtoa_r+0x316>
 80067c0:	4628      	mov	r0, r5
 80067c2:	f000 fcd7 	bl	8007174 <_Balloc>
 80067c6:	9003      	str	r0, [sp, #12]
 80067c8:	2800      	cmp	r0, #0
 80067ca:	d14c      	bne.n	8006866 <_dtoa_r+0x31e>
 80067cc:	4602      	mov	r2, r0
 80067ce:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80067d2:	4b17      	ldr	r3, [pc, #92]	; (8006830 <_dtoa_r+0x2e8>)
 80067d4:	e6cc      	b.n	8006570 <_dtoa_r+0x28>
 80067d6:	2301      	movs	r3, #1
 80067d8:	e7de      	b.n	8006798 <_dtoa_r+0x250>
 80067da:	2300      	movs	r3, #0
 80067dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80067de:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80067e0:	eb0a 0903 	add.w	r9, sl, r3
 80067e4:	f109 0301 	add.w	r3, r9, #1
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	9308      	str	r3, [sp, #32]
 80067ec:	bfb8      	it	lt
 80067ee:	2301      	movlt	r3, #1
 80067f0:	e7dd      	b.n	80067ae <_dtoa_r+0x266>
 80067f2:	2301      	movs	r3, #1
 80067f4:	e7f2      	b.n	80067dc <_dtoa_r+0x294>
 80067f6:	bf00      	nop
 80067f8:	636f4361 	.word	0x636f4361
 80067fc:	3fd287a7 	.word	0x3fd287a7
 8006800:	8b60c8b3 	.word	0x8b60c8b3
 8006804:	3fc68a28 	.word	0x3fc68a28
 8006808:	509f79fb 	.word	0x509f79fb
 800680c:	3fd34413 	.word	0x3fd34413
 8006810:	080089f1 	.word	0x080089f1
 8006814:	08008a08 	.word	0x08008a08
 8006818:	7ff00000 	.word	0x7ff00000
 800681c:	080089ed 	.word	0x080089ed
 8006820:	080089e4 	.word	0x080089e4
 8006824:	080089c1 	.word	0x080089c1
 8006828:	3ff80000 	.word	0x3ff80000
 800682c:	08008af8 	.word	0x08008af8
 8006830:	08008a63 	.word	0x08008a63
 8006834:	2401      	movs	r4, #1
 8006836:	2300      	movs	r3, #0
 8006838:	940b      	str	r4, [sp, #44]	; 0x2c
 800683a:	9322      	str	r3, [sp, #136]	; 0x88
 800683c:	f04f 39ff 	mov.w	r9, #4294967295
 8006840:	2200      	movs	r2, #0
 8006842:	2312      	movs	r3, #18
 8006844:	f8cd 9020 	str.w	r9, [sp, #32]
 8006848:	9223      	str	r2, [sp, #140]	; 0x8c
 800684a:	e7b0      	b.n	80067ae <_dtoa_r+0x266>
 800684c:	2301      	movs	r3, #1
 800684e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006850:	e7f4      	b.n	800683c <_dtoa_r+0x2f4>
 8006852:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8006856:	464b      	mov	r3, r9
 8006858:	f8cd 9020 	str.w	r9, [sp, #32]
 800685c:	e7a7      	b.n	80067ae <_dtoa_r+0x266>
 800685e:	3101      	adds	r1, #1
 8006860:	6041      	str	r1, [r0, #4]
 8006862:	0052      	lsls	r2, r2, #1
 8006864:	e7a7      	b.n	80067b6 <_dtoa_r+0x26e>
 8006866:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006868:	9a03      	ldr	r2, [sp, #12]
 800686a:	601a      	str	r2, [r3, #0]
 800686c:	9b08      	ldr	r3, [sp, #32]
 800686e:	2b0e      	cmp	r3, #14
 8006870:	f200 80a8 	bhi.w	80069c4 <_dtoa_r+0x47c>
 8006874:	2c00      	cmp	r4, #0
 8006876:	f000 80a5 	beq.w	80069c4 <_dtoa_r+0x47c>
 800687a:	f1ba 0f00 	cmp.w	sl, #0
 800687e:	dd34      	ble.n	80068ea <_dtoa_r+0x3a2>
 8006880:	4a9a      	ldr	r2, [pc, #616]	; (8006aec <_dtoa_r+0x5a4>)
 8006882:	f00a 030f 	and.w	r3, sl, #15
 8006886:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800688a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800688e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006892:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006896:	ea4f 142a 	mov.w	r4, sl, asr #4
 800689a:	d016      	beq.n	80068ca <_dtoa_r+0x382>
 800689c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80068a0:	4b93      	ldr	r3, [pc, #588]	; (8006af0 <_dtoa_r+0x5a8>)
 80068a2:	2703      	movs	r7, #3
 80068a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80068a8:	f7f9 ff40 	bl	800072c <__aeabi_ddiv>
 80068ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80068b0:	f004 040f 	and.w	r4, r4, #15
 80068b4:	4e8e      	ldr	r6, [pc, #568]	; (8006af0 <_dtoa_r+0x5a8>)
 80068b6:	b954      	cbnz	r4, 80068ce <_dtoa_r+0x386>
 80068b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80068bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068c0:	f7f9 ff34 	bl	800072c <__aeabi_ddiv>
 80068c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80068c8:	e029      	b.n	800691e <_dtoa_r+0x3d6>
 80068ca:	2702      	movs	r7, #2
 80068cc:	e7f2      	b.n	80068b4 <_dtoa_r+0x36c>
 80068ce:	07e1      	lsls	r1, r4, #31
 80068d0:	d508      	bpl.n	80068e4 <_dtoa_r+0x39c>
 80068d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80068d6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80068da:	f7f9 fdfd 	bl	80004d8 <__aeabi_dmul>
 80068de:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80068e2:	3701      	adds	r7, #1
 80068e4:	1064      	asrs	r4, r4, #1
 80068e6:	3608      	adds	r6, #8
 80068e8:	e7e5      	b.n	80068b6 <_dtoa_r+0x36e>
 80068ea:	f000 80a5 	beq.w	8006a38 <_dtoa_r+0x4f0>
 80068ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80068f2:	f1ca 0400 	rsb	r4, sl, #0
 80068f6:	4b7d      	ldr	r3, [pc, #500]	; (8006aec <_dtoa_r+0x5a4>)
 80068f8:	f004 020f 	and.w	r2, r4, #15
 80068fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006904:	f7f9 fde8 	bl	80004d8 <__aeabi_dmul>
 8006908:	2702      	movs	r7, #2
 800690a:	2300      	movs	r3, #0
 800690c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006910:	4e77      	ldr	r6, [pc, #476]	; (8006af0 <_dtoa_r+0x5a8>)
 8006912:	1124      	asrs	r4, r4, #4
 8006914:	2c00      	cmp	r4, #0
 8006916:	f040 8084 	bne.w	8006a22 <_dtoa_r+0x4da>
 800691a:	2b00      	cmp	r3, #0
 800691c:	d1d2      	bne.n	80068c4 <_dtoa_r+0x37c>
 800691e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006920:	2b00      	cmp	r3, #0
 8006922:	f000 808b 	beq.w	8006a3c <_dtoa_r+0x4f4>
 8006926:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800692a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800692e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006932:	2200      	movs	r2, #0
 8006934:	4b6f      	ldr	r3, [pc, #444]	; (8006af4 <_dtoa_r+0x5ac>)
 8006936:	f7fa f841 	bl	80009bc <__aeabi_dcmplt>
 800693a:	2800      	cmp	r0, #0
 800693c:	d07e      	beq.n	8006a3c <_dtoa_r+0x4f4>
 800693e:	9b08      	ldr	r3, [sp, #32]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d07b      	beq.n	8006a3c <_dtoa_r+0x4f4>
 8006944:	f1b9 0f00 	cmp.w	r9, #0
 8006948:	dd38      	ble.n	80069bc <_dtoa_r+0x474>
 800694a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800694e:	2200      	movs	r2, #0
 8006950:	4b69      	ldr	r3, [pc, #420]	; (8006af8 <_dtoa_r+0x5b0>)
 8006952:	f7f9 fdc1 	bl	80004d8 <__aeabi_dmul>
 8006956:	464c      	mov	r4, r9
 8006958:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800695c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8006960:	3701      	adds	r7, #1
 8006962:	4638      	mov	r0, r7
 8006964:	f7f9 fd4e 	bl	8000404 <__aeabi_i2d>
 8006968:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800696c:	f7f9 fdb4 	bl	80004d8 <__aeabi_dmul>
 8006970:	2200      	movs	r2, #0
 8006972:	4b62      	ldr	r3, [pc, #392]	; (8006afc <_dtoa_r+0x5b4>)
 8006974:	f7f9 fbfa 	bl	800016c <__adddf3>
 8006978:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800697c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006980:	9611      	str	r6, [sp, #68]	; 0x44
 8006982:	2c00      	cmp	r4, #0
 8006984:	d15d      	bne.n	8006a42 <_dtoa_r+0x4fa>
 8006986:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800698a:	2200      	movs	r2, #0
 800698c:	4b5c      	ldr	r3, [pc, #368]	; (8006b00 <_dtoa_r+0x5b8>)
 800698e:	f7f9 fbeb 	bl	8000168 <__aeabi_dsub>
 8006992:	4602      	mov	r2, r0
 8006994:	460b      	mov	r3, r1
 8006996:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800699a:	4633      	mov	r3, r6
 800699c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800699e:	f7fa f82b 	bl	80009f8 <__aeabi_dcmpgt>
 80069a2:	2800      	cmp	r0, #0
 80069a4:	f040 829c 	bne.w	8006ee0 <_dtoa_r+0x998>
 80069a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80069ae:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80069b2:	f7fa f803 	bl	80009bc <__aeabi_dcmplt>
 80069b6:	2800      	cmp	r0, #0
 80069b8:	f040 8290 	bne.w	8006edc <_dtoa_r+0x994>
 80069bc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80069c0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80069c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	f2c0 8152 	blt.w	8006c70 <_dtoa_r+0x728>
 80069cc:	f1ba 0f0e 	cmp.w	sl, #14
 80069d0:	f300 814e 	bgt.w	8006c70 <_dtoa_r+0x728>
 80069d4:	4b45      	ldr	r3, [pc, #276]	; (8006aec <_dtoa_r+0x5a4>)
 80069d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80069da:	e9d3 3400 	ldrd	r3, r4, [r3]
 80069de:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80069e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	f280 80db 	bge.w	8006ba0 <_dtoa_r+0x658>
 80069ea:	9b08      	ldr	r3, [sp, #32]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	f300 80d7 	bgt.w	8006ba0 <_dtoa_r+0x658>
 80069f2:	f040 8272 	bne.w	8006eda <_dtoa_r+0x992>
 80069f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80069fa:	2200      	movs	r2, #0
 80069fc:	4b40      	ldr	r3, [pc, #256]	; (8006b00 <_dtoa_r+0x5b8>)
 80069fe:	f7f9 fd6b 	bl	80004d8 <__aeabi_dmul>
 8006a02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a06:	f7f9 ffed 	bl	80009e4 <__aeabi_dcmpge>
 8006a0a:	9c08      	ldr	r4, [sp, #32]
 8006a0c:	4626      	mov	r6, r4
 8006a0e:	2800      	cmp	r0, #0
 8006a10:	f040 8248 	bne.w	8006ea4 <_dtoa_r+0x95c>
 8006a14:	2331      	movs	r3, #49	; 0x31
 8006a16:	9f03      	ldr	r7, [sp, #12]
 8006a18:	f10a 0a01 	add.w	sl, sl, #1
 8006a1c:	f807 3b01 	strb.w	r3, [r7], #1
 8006a20:	e244      	b.n	8006eac <_dtoa_r+0x964>
 8006a22:	07e2      	lsls	r2, r4, #31
 8006a24:	d505      	bpl.n	8006a32 <_dtoa_r+0x4ea>
 8006a26:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006a2a:	f7f9 fd55 	bl	80004d8 <__aeabi_dmul>
 8006a2e:	2301      	movs	r3, #1
 8006a30:	3701      	adds	r7, #1
 8006a32:	1064      	asrs	r4, r4, #1
 8006a34:	3608      	adds	r6, #8
 8006a36:	e76d      	b.n	8006914 <_dtoa_r+0x3cc>
 8006a38:	2702      	movs	r7, #2
 8006a3a:	e770      	b.n	800691e <_dtoa_r+0x3d6>
 8006a3c:	46d0      	mov	r8, sl
 8006a3e:	9c08      	ldr	r4, [sp, #32]
 8006a40:	e78f      	b.n	8006962 <_dtoa_r+0x41a>
 8006a42:	9903      	ldr	r1, [sp, #12]
 8006a44:	4b29      	ldr	r3, [pc, #164]	; (8006aec <_dtoa_r+0x5a4>)
 8006a46:	4421      	add	r1, r4
 8006a48:	9112      	str	r1, [sp, #72]	; 0x48
 8006a4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006a4c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006a50:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006a54:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006a58:	2900      	cmp	r1, #0
 8006a5a:	d055      	beq.n	8006b08 <_dtoa_r+0x5c0>
 8006a5c:	2000      	movs	r0, #0
 8006a5e:	4929      	ldr	r1, [pc, #164]	; (8006b04 <_dtoa_r+0x5bc>)
 8006a60:	f7f9 fe64 	bl	800072c <__aeabi_ddiv>
 8006a64:	463b      	mov	r3, r7
 8006a66:	4632      	mov	r2, r6
 8006a68:	f7f9 fb7e 	bl	8000168 <__aeabi_dsub>
 8006a6c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006a70:	9f03      	ldr	r7, [sp, #12]
 8006a72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a76:	f7f9 ffdf 	bl	8000a38 <__aeabi_d2iz>
 8006a7a:	4604      	mov	r4, r0
 8006a7c:	f7f9 fcc2 	bl	8000404 <__aeabi_i2d>
 8006a80:	4602      	mov	r2, r0
 8006a82:	460b      	mov	r3, r1
 8006a84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a88:	f7f9 fb6e 	bl	8000168 <__aeabi_dsub>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	460b      	mov	r3, r1
 8006a90:	3430      	adds	r4, #48	; 0x30
 8006a92:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006a96:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006a9a:	f807 4b01 	strb.w	r4, [r7], #1
 8006a9e:	f7f9 ff8d 	bl	80009bc <__aeabi_dcmplt>
 8006aa2:	2800      	cmp	r0, #0
 8006aa4:	d174      	bne.n	8006b90 <_dtoa_r+0x648>
 8006aa6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006aaa:	2000      	movs	r0, #0
 8006aac:	4911      	ldr	r1, [pc, #68]	; (8006af4 <_dtoa_r+0x5ac>)
 8006aae:	f7f9 fb5b 	bl	8000168 <__aeabi_dsub>
 8006ab2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006ab6:	f7f9 ff81 	bl	80009bc <__aeabi_dcmplt>
 8006aba:	2800      	cmp	r0, #0
 8006abc:	f040 80b7 	bne.w	8006c2e <_dtoa_r+0x6e6>
 8006ac0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006ac2:	429f      	cmp	r7, r3
 8006ac4:	f43f af7a 	beq.w	80069bc <_dtoa_r+0x474>
 8006ac8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006acc:	2200      	movs	r2, #0
 8006ace:	4b0a      	ldr	r3, [pc, #40]	; (8006af8 <_dtoa_r+0x5b0>)
 8006ad0:	f7f9 fd02 	bl	80004d8 <__aeabi_dmul>
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006ada:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ade:	4b06      	ldr	r3, [pc, #24]	; (8006af8 <_dtoa_r+0x5b0>)
 8006ae0:	f7f9 fcfa 	bl	80004d8 <__aeabi_dmul>
 8006ae4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ae8:	e7c3      	b.n	8006a72 <_dtoa_r+0x52a>
 8006aea:	bf00      	nop
 8006aec:	08008af8 	.word	0x08008af8
 8006af0:	08008ad0 	.word	0x08008ad0
 8006af4:	3ff00000 	.word	0x3ff00000
 8006af8:	40240000 	.word	0x40240000
 8006afc:	401c0000 	.word	0x401c0000
 8006b00:	40140000 	.word	0x40140000
 8006b04:	3fe00000 	.word	0x3fe00000
 8006b08:	4630      	mov	r0, r6
 8006b0a:	4639      	mov	r1, r7
 8006b0c:	f7f9 fce4 	bl	80004d8 <__aeabi_dmul>
 8006b10:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b12:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006b16:	9c03      	ldr	r4, [sp, #12]
 8006b18:	9314      	str	r3, [sp, #80]	; 0x50
 8006b1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b1e:	f7f9 ff8b 	bl	8000a38 <__aeabi_d2iz>
 8006b22:	9015      	str	r0, [sp, #84]	; 0x54
 8006b24:	f7f9 fc6e 	bl	8000404 <__aeabi_i2d>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	460b      	mov	r3, r1
 8006b2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b30:	f7f9 fb1a 	bl	8000168 <__aeabi_dsub>
 8006b34:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006b36:	4606      	mov	r6, r0
 8006b38:	3330      	adds	r3, #48	; 0x30
 8006b3a:	f804 3b01 	strb.w	r3, [r4], #1
 8006b3e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b40:	460f      	mov	r7, r1
 8006b42:	429c      	cmp	r4, r3
 8006b44:	f04f 0200 	mov.w	r2, #0
 8006b48:	d124      	bne.n	8006b94 <_dtoa_r+0x64c>
 8006b4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006b4e:	4bb0      	ldr	r3, [pc, #704]	; (8006e10 <_dtoa_r+0x8c8>)
 8006b50:	f7f9 fb0c 	bl	800016c <__adddf3>
 8006b54:	4602      	mov	r2, r0
 8006b56:	460b      	mov	r3, r1
 8006b58:	4630      	mov	r0, r6
 8006b5a:	4639      	mov	r1, r7
 8006b5c:	f7f9 ff4c 	bl	80009f8 <__aeabi_dcmpgt>
 8006b60:	2800      	cmp	r0, #0
 8006b62:	d163      	bne.n	8006c2c <_dtoa_r+0x6e4>
 8006b64:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006b68:	2000      	movs	r0, #0
 8006b6a:	49a9      	ldr	r1, [pc, #676]	; (8006e10 <_dtoa_r+0x8c8>)
 8006b6c:	f7f9 fafc 	bl	8000168 <__aeabi_dsub>
 8006b70:	4602      	mov	r2, r0
 8006b72:	460b      	mov	r3, r1
 8006b74:	4630      	mov	r0, r6
 8006b76:	4639      	mov	r1, r7
 8006b78:	f7f9 ff20 	bl	80009bc <__aeabi_dcmplt>
 8006b7c:	2800      	cmp	r0, #0
 8006b7e:	f43f af1d 	beq.w	80069bc <_dtoa_r+0x474>
 8006b82:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006b84:	1e7b      	subs	r3, r7, #1
 8006b86:	9314      	str	r3, [sp, #80]	; 0x50
 8006b88:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006b8c:	2b30      	cmp	r3, #48	; 0x30
 8006b8e:	d0f8      	beq.n	8006b82 <_dtoa_r+0x63a>
 8006b90:	46c2      	mov	sl, r8
 8006b92:	e03b      	b.n	8006c0c <_dtoa_r+0x6c4>
 8006b94:	4b9f      	ldr	r3, [pc, #636]	; (8006e14 <_dtoa_r+0x8cc>)
 8006b96:	f7f9 fc9f 	bl	80004d8 <__aeabi_dmul>
 8006b9a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b9e:	e7bc      	b.n	8006b1a <_dtoa_r+0x5d2>
 8006ba0:	9f03      	ldr	r7, [sp, #12]
 8006ba2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006ba6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006baa:	4640      	mov	r0, r8
 8006bac:	4649      	mov	r1, r9
 8006bae:	f7f9 fdbd 	bl	800072c <__aeabi_ddiv>
 8006bb2:	f7f9 ff41 	bl	8000a38 <__aeabi_d2iz>
 8006bb6:	4604      	mov	r4, r0
 8006bb8:	f7f9 fc24 	bl	8000404 <__aeabi_i2d>
 8006bbc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006bc0:	f7f9 fc8a 	bl	80004d8 <__aeabi_dmul>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	460b      	mov	r3, r1
 8006bc8:	4640      	mov	r0, r8
 8006bca:	4649      	mov	r1, r9
 8006bcc:	f7f9 facc 	bl	8000168 <__aeabi_dsub>
 8006bd0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006bd4:	f807 6b01 	strb.w	r6, [r7], #1
 8006bd8:	9e03      	ldr	r6, [sp, #12]
 8006bda:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006bde:	1bbe      	subs	r6, r7, r6
 8006be0:	45b4      	cmp	ip, r6
 8006be2:	4602      	mov	r2, r0
 8006be4:	460b      	mov	r3, r1
 8006be6:	d136      	bne.n	8006c56 <_dtoa_r+0x70e>
 8006be8:	f7f9 fac0 	bl	800016c <__adddf3>
 8006bec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006bf0:	4680      	mov	r8, r0
 8006bf2:	4689      	mov	r9, r1
 8006bf4:	f7f9 ff00 	bl	80009f8 <__aeabi_dcmpgt>
 8006bf8:	bb58      	cbnz	r0, 8006c52 <_dtoa_r+0x70a>
 8006bfa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006bfe:	4640      	mov	r0, r8
 8006c00:	4649      	mov	r1, r9
 8006c02:	f7f9 fed1 	bl	80009a8 <__aeabi_dcmpeq>
 8006c06:	b108      	cbz	r0, 8006c0c <_dtoa_r+0x6c4>
 8006c08:	07e1      	lsls	r1, r4, #31
 8006c0a:	d422      	bmi.n	8006c52 <_dtoa_r+0x70a>
 8006c0c:	4628      	mov	r0, r5
 8006c0e:	4659      	mov	r1, fp
 8006c10:	f000 faf0 	bl	80071f4 <_Bfree>
 8006c14:	2300      	movs	r3, #0
 8006c16:	703b      	strb	r3, [r7, #0]
 8006c18:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006c1a:	f10a 0001 	add.w	r0, sl, #1
 8006c1e:	6018      	str	r0, [r3, #0]
 8006c20:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	f43f acde 	beq.w	80065e4 <_dtoa_r+0x9c>
 8006c28:	601f      	str	r7, [r3, #0]
 8006c2a:	e4db      	b.n	80065e4 <_dtoa_r+0x9c>
 8006c2c:	4627      	mov	r7, r4
 8006c2e:	463b      	mov	r3, r7
 8006c30:	461f      	mov	r7, r3
 8006c32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c36:	2a39      	cmp	r2, #57	; 0x39
 8006c38:	d107      	bne.n	8006c4a <_dtoa_r+0x702>
 8006c3a:	9a03      	ldr	r2, [sp, #12]
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d1f7      	bne.n	8006c30 <_dtoa_r+0x6e8>
 8006c40:	2230      	movs	r2, #48	; 0x30
 8006c42:	9903      	ldr	r1, [sp, #12]
 8006c44:	f108 0801 	add.w	r8, r8, #1
 8006c48:	700a      	strb	r2, [r1, #0]
 8006c4a:	781a      	ldrb	r2, [r3, #0]
 8006c4c:	3201      	adds	r2, #1
 8006c4e:	701a      	strb	r2, [r3, #0]
 8006c50:	e79e      	b.n	8006b90 <_dtoa_r+0x648>
 8006c52:	46d0      	mov	r8, sl
 8006c54:	e7eb      	b.n	8006c2e <_dtoa_r+0x6e6>
 8006c56:	2200      	movs	r2, #0
 8006c58:	4b6e      	ldr	r3, [pc, #440]	; (8006e14 <_dtoa_r+0x8cc>)
 8006c5a:	f7f9 fc3d 	bl	80004d8 <__aeabi_dmul>
 8006c5e:	2200      	movs	r2, #0
 8006c60:	2300      	movs	r3, #0
 8006c62:	4680      	mov	r8, r0
 8006c64:	4689      	mov	r9, r1
 8006c66:	f7f9 fe9f 	bl	80009a8 <__aeabi_dcmpeq>
 8006c6a:	2800      	cmp	r0, #0
 8006c6c:	d09b      	beq.n	8006ba6 <_dtoa_r+0x65e>
 8006c6e:	e7cd      	b.n	8006c0c <_dtoa_r+0x6c4>
 8006c70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006c72:	2a00      	cmp	r2, #0
 8006c74:	f000 80d0 	beq.w	8006e18 <_dtoa_r+0x8d0>
 8006c78:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006c7a:	2a01      	cmp	r2, #1
 8006c7c:	f300 80ae 	bgt.w	8006ddc <_dtoa_r+0x894>
 8006c80:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006c82:	2a00      	cmp	r2, #0
 8006c84:	f000 80a6 	beq.w	8006dd4 <_dtoa_r+0x88c>
 8006c88:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006c8c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006c8e:	9f06      	ldr	r7, [sp, #24]
 8006c90:	9a06      	ldr	r2, [sp, #24]
 8006c92:	2101      	movs	r1, #1
 8006c94:	441a      	add	r2, r3
 8006c96:	9206      	str	r2, [sp, #24]
 8006c98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c9a:	4628      	mov	r0, r5
 8006c9c:	441a      	add	r2, r3
 8006c9e:	9209      	str	r2, [sp, #36]	; 0x24
 8006ca0:	f000 fb5e 	bl	8007360 <__i2b>
 8006ca4:	4606      	mov	r6, r0
 8006ca6:	2f00      	cmp	r7, #0
 8006ca8:	dd0c      	ble.n	8006cc4 <_dtoa_r+0x77c>
 8006caa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	dd09      	ble.n	8006cc4 <_dtoa_r+0x77c>
 8006cb0:	42bb      	cmp	r3, r7
 8006cb2:	bfa8      	it	ge
 8006cb4:	463b      	movge	r3, r7
 8006cb6:	9a06      	ldr	r2, [sp, #24]
 8006cb8:	1aff      	subs	r7, r7, r3
 8006cba:	1ad2      	subs	r2, r2, r3
 8006cbc:	9206      	str	r2, [sp, #24]
 8006cbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cc0:	1ad3      	subs	r3, r2, r3
 8006cc2:	9309      	str	r3, [sp, #36]	; 0x24
 8006cc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cc6:	b1f3      	cbz	r3, 8006d06 <_dtoa_r+0x7be>
 8006cc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	f000 80a8 	beq.w	8006e20 <_dtoa_r+0x8d8>
 8006cd0:	2c00      	cmp	r4, #0
 8006cd2:	dd10      	ble.n	8006cf6 <_dtoa_r+0x7ae>
 8006cd4:	4631      	mov	r1, r6
 8006cd6:	4622      	mov	r2, r4
 8006cd8:	4628      	mov	r0, r5
 8006cda:	f000 fbff 	bl	80074dc <__pow5mult>
 8006cde:	465a      	mov	r2, fp
 8006ce0:	4601      	mov	r1, r0
 8006ce2:	4606      	mov	r6, r0
 8006ce4:	4628      	mov	r0, r5
 8006ce6:	f000 fb51 	bl	800738c <__multiply>
 8006cea:	4680      	mov	r8, r0
 8006cec:	4659      	mov	r1, fp
 8006cee:	4628      	mov	r0, r5
 8006cf0:	f000 fa80 	bl	80071f4 <_Bfree>
 8006cf4:	46c3      	mov	fp, r8
 8006cf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cf8:	1b1a      	subs	r2, r3, r4
 8006cfa:	d004      	beq.n	8006d06 <_dtoa_r+0x7be>
 8006cfc:	4659      	mov	r1, fp
 8006cfe:	4628      	mov	r0, r5
 8006d00:	f000 fbec 	bl	80074dc <__pow5mult>
 8006d04:	4683      	mov	fp, r0
 8006d06:	2101      	movs	r1, #1
 8006d08:	4628      	mov	r0, r5
 8006d0a:	f000 fb29 	bl	8007360 <__i2b>
 8006d0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d10:	4604      	mov	r4, r0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	f340 8086 	ble.w	8006e24 <_dtoa_r+0x8dc>
 8006d18:	461a      	mov	r2, r3
 8006d1a:	4601      	mov	r1, r0
 8006d1c:	4628      	mov	r0, r5
 8006d1e:	f000 fbdd 	bl	80074dc <__pow5mult>
 8006d22:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d24:	4604      	mov	r4, r0
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	dd7f      	ble.n	8006e2a <_dtoa_r+0x8e2>
 8006d2a:	f04f 0800 	mov.w	r8, #0
 8006d2e:	6923      	ldr	r3, [r4, #16]
 8006d30:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006d34:	6918      	ldr	r0, [r3, #16]
 8006d36:	f000 fac5 	bl	80072c4 <__hi0bits>
 8006d3a:	f1c0 0020 	rsb	r0, r0, #32
 8006d3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d40:	4418      	add	r0, r3
 8006d42:	f010 001f 	ands.w	r0, r0, #31
 8006d46:	f000 8092 	beq.w	8006e6e <_dtoa_r+0x926>
 8006d4a:	f1c0 0320 	rsb	r3, r0, #32
 8006d4e:	2b04      	cmp	r3, #4
 8006d50:	f340 808a 	ble.w	8006e68 <_dtoa_r+0x920>
 8006d54:	f1c0 001c 	rsb	r0, r0, #28
 8006d58:	9b06      	ldr	r3, [sp, #24]
 8006d5a:	4407      	add	r7, r0
 8006d5c:	4403      	add	r3, r0
 8006d5e:	9306      	str	r3, [sp, #24]
 8006d60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d62:	4403      	add	r3, r0
 8006d64:	9309      	str	r3, [sp, #36]	; 0x24
 8006d66:	9b06      	ldr	r3, [sp, #24]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	dd05      	ble.n	8006d78 <_dtoa_r+0x830>
 8006d6c:	4659      	mov	r1, fp
 8006d6e:	461a      	mov	r2, r3
 8006d70:	4628      	mov	r0, r5
 8006d72:	f000 fc0d 	bl	8007590 <__lshift>
 8006d76:	4683      	mov	fp, r0
 8006d78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	dd05      	ble.n	8006d8a <_dtoa_r+0x842>
 8006d7e:	4621      	mov	r1, r4
 8006d80:	461a      	mov	r2, r3
 8006d82:	4628      	mov	r0, r5
 8006d84:	f000 fc04 	bl	8007590 <__lshift>
 8006d88:	4604      	mov	r4, r0
 8006d8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d070      	beq.n	8006e72 <_dtoa_r+0x92a>
 8006d90:	4621      	mov	r1, r4
 8006d92:	4658      	mov	r0, fp
 8006d94:	f000 fc6c 	bl	8007670 <__mcmp>
 8006d98:	2800      	cmp	r0, #0
 8006d9a:	da6a      	bge.n	8006e72 <_dtoa_r+0x92a>
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	4659      	mov	r1, fp
 8006da0:	220a      	movs	r2, #10
 8006da2:	4628      	mov	r0, r5
 8006da4:	f000 fa48 	bl	8007238 <__multadd>
 8006da8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006daa:	4683      	mov	fp, r0
 8006dac:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	f000 8194 	beq.w	80070de <_dtoa_r+0xb96>
 8006db6:	4631      	mov	r1, r6
 8006db8:	2300      	movs	r3, #0
 8006dba:	220a      	movs	r2, #10
 8006dbc:	4628      	mov	r0, r5
 8006dbe:	f000 fa3b 	bl	8007238 <__multadd>
 8006dc2:	f1b9 0f00 	cmp.w	r9, #0
 8006dc6:	4606      	mov	r6, r0
 8006dc8:	f300 8093 	bgt.w	8006ef2 <_dtoa_r+0x9aa>
 8006dcc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006dce:	2b02      	cmp	r3, #2
 8006dd0:	dc57      	bgt.n	8006e82 <_dtoa_r+0x93a>
 8006dd2:	e08e      	b.n	8006ef2 <_dtoa_r+0x9aa>
 8006dd4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006dd6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006dda:	e757      	b.n	8006c8c <_dtoa_r+0x744>
 8006ddc:	9b08      	ldr	r3, [sp, #32]
 8006dde:	1e5c      	subs	r4, r3, #1
 8006de0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006de2:	42a3      	cmp	r3, r4
 8006de4:	bfb7      	itett	lt
 8006de6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006de8:	1b1c      	subge	r4, r3, r4
 8006dea:	1ae2      	sublt	r2, r4, r3
 8006dec:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006dee:	bfbe      	ittt	lt
 8006df0:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006df2:	189b      	addlt	r3, r3, r2
 8006df4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006df6:	9b08      	ldr	r3, [sp, #32]
 8006df8:	bfb8      	it	lt
 8006dfa:	2400      	movlt	r4, #0
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	bfbb      	ittet	lt
 8006e00:	9b06      	ldrlt	r3, [sp, #24]
 8006e02:	9a08      	ldrlt	r2, [sp, #32]
 8006e04:	9f06      	ldrge	r7, [sp, #24]
 8006e06:	1a9f      	sublt	r7, r3, r2
 8006e08:	bfac      	ite	ge
 8006e0a:	9b08      	ldrge	r3, [sp, #32]
 8006e0c:	2300      	movlt	r3, #0
 8006e0e:	e73f      	b.n	8006c90 <_dtoa_r+0x748>
 8006e10:	3fe00000 	.word	0x3fe00000
 8006e14:	40240000 	.word	0x40240000
 8006e18:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006e1a:	9f06      	ldr	r7, [sp, #24]
 8006e1c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006e1e:	e742      	b.n	8006ca6 <_dtoa_r+0x75e>
 8006e20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e22:	e76b      	b.n	8006cfc <_dtoa_r+0x7b4>
 8006e24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	dc19      	bgt.n	8006e5e <_dtoa_r+0x916>
 8006e2a:	9b04      	ldr	r3, [sp, #16]
 8006e2c:	b9bb      	cbnz	r3, 8006e5e <_dtoa_r+0x916>
 8006e2e:	9b05      	ldr	r3, [sp, #20]
 8006e30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e34:	b99b      	cbnz	r3, 8006e5e <_dtoa_r+0x916>
 8006e36:	9b05      	ldr	r3, [sp, #20]
 8006e38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e3c:	0d1b      	lsrs	r3, r3, #20
 8006e3e:	051b      	lsls	r3, r3, #20
 8006e40:	b183      	cbz	r3, 8006e64 <_dtoa_r+0x91c>
 8006e42:	f04f 0801 	mov.w	r8, #1
 8006e46:	9b06      	ldr	r3, [sp, #24]
 8006e48:	3301      	adds	r3, #1
 8006e4a:	9306      	str	r3, [sp, #24]
 8006e4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e4e:	3301      	adds	r3, #1
 8006e50:	9309      	str	r3, [sp, #36]	; 0x24
 8006e52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	f47f af6a 	bne.w	8006d2e <_dtoa_r+0x7e6>
 8006e5a:	2001      	movs	r0, #1
 8006e5c:	e76f      	b.n	8006d3e <_dtoa_r+0x7f6>
 8006e5e:	f04f 0800 	mov.w	r8, #0
 8006e62:	e7f6      	b.n	8006e52 <_dtoa_r+0x90a>
 8006e64:	4698      	mov	r8, r3
 8006e66:	e7f4      	b.n	8006e52 <_dtoa_r+0x90a>
 8006e68:	f43f af7d 	beq.w	8006d66 <_dtoa_r+0x81e>
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	301c      	adds	r0, #28
 8006e70:	e772      	b.n	8006d58 <_dtoa_r+0x810>
 8006e72:	9b08      	ldr	r3, [sp, #32]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	dc36      	bgt.n	8006ee6 <_dtoa_r+0x99e>
 8006e78:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006e7a:	2b02      	cmp	r3, #2
 8006e7c:	dd33      	ble.n	8006ee6 <_dtoa_r+0x99e>
 8006e7e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006e82:	f1b9 0f00 	cmp.w	r9, #0
 8006e86:	d10d      	bne.n	8006ea4 <_dtoa_r+0x95c>
 8006e88:	4621      	mov	r1, r4
 8006e8a:	464b      	mov	r3, r9
 8006e8c:	2205      	movs	r2, #5
 8006e8e:	4628      	mov	r0, r5
 8006e90:	f000 f9d2 	bl	8007238 <__multadd>
 8006e94:	4601      	mov	r1, r0
 8006e96:	4604      	mov	r4, r0
 8006e98:	4658      	mov	r0, fp
 8006e9a:	f000 fbe9 	bl	8007670 <__mcmp>
 8006e9e:	2800      	cmp	r0, #0
 8006ea0:	f73f adb8 	bgt.w	8006a14 <_dtoa_r+0x4cc>
 8006ea4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006ea6:	9f03      	ldr	r7, [sp, #12]
 8006ea8:	ea6f 0a03 	mvn.w	sl, r3
 8006eac:	f04f 0800 	mov.w	r8, #0
 8006eb0:	4621      	mov	r1, r4
 8006eb2:	4628      	mov	r0, r5
 8006eb4:	f000 f99e 	bl	80071f4 <_Bfree>
 8006eb8:	2e00      	cmp	r6, #0
 8006eba:	f43f aea7 	beq.w	8006c0c <_dtoa_r+0x6c4>
 8006ebe:	f1b8 0f00 	cmp.w	r8, #0
 8006ec2:	d005      	beq.n	8006ed0 <_dtoa_r+0x988>
 8006ec4:	45b0      	cmp	r8, r6
 8006ec6:	d003      	beq.n	8006ed0 <_dtoa_r+0x988>
 8006ec8:	4641      	mov	r1, r8
 8006eca:	4628      	mov	r0, r5
 8006ecc:	f000 f992 	bl	80071f4 <_Bfree>
 8006ed0:	4631      	mov	r1, r6
 8006ed2:	4628      	mov	r0, r5
 8006ed4:	f000 f98e 	bl	80071f4 <_Bfree>
 8006ed8:	e698      	b.n	8006c0c <_dtoa_r+0x6c4>
 8006eda:	2400      	movs	r4, #0
 8006edc:	4626      	mov	r6, r4
 8006ede:	e7e1      	b.n	8006ea4 <_dtoa_r+0x95c>
 8006ee0:	46c2      	mov	sl, r8
 8006ee2:	4626      	mov	r6, r4
 8006ee4:	e596      	b.n	8006a14 <_dtoa_r+0x4cc>
 8006ee6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ee8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	f000 80fd 	beq.w	80070ec <_dtoa_r+0xba4>
 8006ef2:	2f00      	cmp	r7, #0
 8006ef4:	dd05      	ble.n	8006f02 <_dtoa_r+0x9ba>
 8006ef6:	4631      	mov	r1, r6
 8006ef8:	463a      	mov	r2, r7
 8006efa:	4628      	mov	r0, r5
 8006efc:	f000 fb48 	bl	8007590 <__lshift>
 8006f00:	4606      	mov	r6, r0
 8006f02:	f1b8 0f00 	cmp.w	r8, #0
 8006f06:	d05c      	beq.n	8006fc2 <_dtoa_r+0xa7a>
 8006f08:	4628      	mov	r0, r5
 8006f0a:	6871      	ldr	r1, [r6, #4]
 8006f0c:	f000 f932 	bl	8007174 <_Balloc>
 8006f10:	4607      	mov	r7, r0
 8006f12:	b928      	cbnz	r0, 8006f20 <_dtoa_r+0x9d8>
 8006f14:	4602      	mov	r2, r0
 8006f16:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006f1a:	4b7f      	ldr	r3, [pc, #508]	; (8007118 <_dtoa_r+0xbd0>)
 8006f1c:	f7ff bb28 	b.w	8006570 <_dtoa_r+0x28>
 8006f20:	6932      	ldr	r2, [r6, #16]
 8006f22:	f106 010c 	add.w	r1, r6, #12
 8006f26:	3202      	adds	r2, #2
 8006f28:	0092      	lsls	r2, r2, #2
 8006f2a:	300c      	adds	r0, #12
 8006f2c:	f000 f914 	bl	8007158 <memcpy>
 8006f30:	2201      	movs	r2, #1
 8006f32:	4639      	mov	r1, r7
 8006f34:	4628      	mov	r0, r5
 8006f36:	f000 fb2b 	bl	8007590 <__lshift>
 8006f3a:	46b0      	mov	r8, r6
 8006f3c:	4606      	mov	r6, r0
 8006f3e:	9b03      	ldr	r3, [sp, #12]
 8006f40:	3301      	adds	r3, #1
 8006f42:	9308      	str	r3, [sp, #32]
 8006f44:	9b03      	ldr	r3, [sp, #12]
 8006f46:	444b      	add	r3, r9
 8006f48:	930a      	str	r3, [sp, #40]	; 0x28
 8006f4a:	9b04      	ldr	r3, [sp, #16]
 8006f4c:	f003 0301 	and.w	r3, r3, #1
 8006f50:	9309      	str	r3, [sp, #36]	; 0x24
 8006f52:	9b08      	ldr	r3, [sp, #32]
 8006f54:	4621      	mov	r1, r4
 8006f56:	3b01      	subs	r3, #1
 8006f58:	4658      	mov	r0, fp
 8006f5a:	9304      	str	r3, [sp, #16]
 8006f5c:	f7ff fa68 	bl	8006430 <quorem>
 8006f60:	4603      	mov	r3, r0
 8006f62:	4641      	mov	r1, r8
 8006f64:	3330      	adds	r3, #48	; 0x30
 8006f66:	9006      	str	r0, [sp, #24]
 8006f68:	4658      	mov	r0, fp
 8006f6a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f6c:	f000 fb80 	bl	8007670 <__mcmp>
 8006f70:	4632      	mov	r2, r6
 8006f72:	4681      	mov	r9, r0
 8006f74:	4621      	mov	r1, r4
 8006f76:	4628      	mov	r0, r5
 8006f78:	f000 fb96 	bl	80076a8 <__mdiff>
 8006f7c:	68c2      	ldr	r2, [r0, #12]
 8006f7e:	4607      	mov	r7, r0
 8006f80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f82:	bb02      	cbnz	r2, 8006fc6 <_dtoa_r+0xa7e>
 8006f84:	4601      	mov	r1, r0
 8006f86:	4658      	mov	r0, fp
 8006f88:	f000 fb72 	bl	8007670 <__mcmp>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f90:	4639      	mov	r1, r7
 8006f92:	4628      	mov	r0, r5
 8006f94:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006f98:	f000 f92c 	bl	80071f4 <_Bfree>
 8006f9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006f9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006fa0:	9f08      	ldr	r7, [sp, #32]
 8006fa2:	ea43 0102 	orr.w	r1, r3, r2
 8006fa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fa8:	430b      	orrs	r3, r1
 8006faa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fac:	d10d      	bne.n	8006fca <_dtoa_r+0xa82>
 8006fae:	2b39      	cmp	r3, #57	; 0x39
 8006fb0:	d029      	beq.n	8007006 <_dtoa_r+0xabe>
 8006fb2:	f1b9 0f00 	cmp.w	r9, #0
 8006fb6:	dd01      	ble.n	8006fbc <_dtoa_r+0xa74>
 8006fb8:	9b06      	ldr	r3, [sp, #24]
 8006fba:	3331      	adds	r3, #49	; 0x31
 8006fbc:	9a04      	ldr	r2, [sp, #16]
 8006fbe:	7013      	strb	r3, [r2, #0]
 8006fc0:	e776      	b.n	8006eb0 <_dtoa_r+0x968>
 8006fc2:	4630      	mov	r0, r6
 8006fc4:	e7b9      	b.n	8006f3a <_dtoa_r+0x9f2>
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	e7e2      	b.n	8006f90 <_dtoa_r+0xa48>
 8006fca:	f1b9 0f00 	cmp.w	r9, #0
 8006fce:	db06      	blt.n	8006fde <_dtoa_r+0xa96>
 8006fd0:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006fd2:	ea41 0909 	orr.w	r9, r1, r9
 8006fd6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006fd8:	ea59 0101 	orrs.w	r1, r9, r1
 8006fdc:	d120      	bne.n	8007020 <_dtoa_r+0xad8>
 8006fde:	2a00      	cmp	r2, #0
 8006fe0:	ddec      	ble.n	8006fbc <_dtoa_r+0xa74>
 8006fe2:	4659      	mov	r1, fp
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	4628      	mov	r0, r5
 8006fe8:	9308      	str	r3, [sp, #32]
 8006fea:	f000 fad1 	bl	8007590 <__lshift>
 8006fee:	4621      	mov	r1, r4
 8006ff0:	4683      	mov	fp, r0
 8006ff2:	f000 fb3d 	bl	8007670 <__mcmp>
 8006ff6:	2800      	cmp	r0, #0
 8006ff8:	9b08      	ldr	r3, [sp, #32]
 8006ffa:	dc02      	bgt.n	8007002 <_dtoa_r+0xaba>
 8006ffc:	d1de      	bne.n	8006fbc <_dtoa_r+0xa74>
 8006ffe:	07da      	lsls	r2, r3, #31
 8007000:	d5dc      	bpl.n	8006fbc <_dtoa_r+0xa74>
 8007002:	2b39      	cmp	r3, #57	; 0x39
 8007004:	d1d8      	bne.n	8006fb8 <_dtoa_r+0xa70>
 8007006:	2339      	movs	r3, #57	; 0x39
 8007008:	9a04      	ldr	r2, [sp, #16]
 800700a:	7013      	strb	r3, [r2, #0]
 800700c:	463b      	mov	r3, r7
 800700e:	461f      	mov	r7, r3
 8007010:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007014:	3b01      	subs	r3, #1
 8007016:	2a39      	cmp	r2, #57	; 0x39
 8007018:	d050      	beq.n	80070bc <_dtoa_r+0xb74>
 800701a:	3201      	adds	r2, #1
 800701c:	701a      	strb	r2, [r3, #0]
 800701e:	e747      	b.n	8006eb0 <_dtoa_r+0x968>
 8007020:	2a00      	cmp	r2, #0
 8007022:	dd03      	ble.n	800702c <_dtoa_r+0xae4>
 8007024:	2b39      	cmp	r3, #57	; 0x39
 8007026:	d0ee      	beq.n	8007006 <_dtoa_r+0xabe>
 8007028:	3301      	adds	r3, #1
 800702a:	e7c7      	b.n	8006fbc <_dtoa_r+0xa74>
 800702c:	9a08      	ldr	r2, [sp, #32]
 800702e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007030:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007034:	428a      	cmp	r2, r1
 8007036:	d02a      	beq.n	800708e <_dtoa_r+0xb46>
 8007038:	4659      	mov	r1, fp
 800703a:	2300      	movs	r3, #0
 800703c:	220a      	movs	r2, #10
 800703e:	4628      	mov	r0, r5
 8007040:	f000 f8fa 	bl	8007238 <__multadd>
 8007044:	45b0      	cmp	r8, r6
 8007046:	4683      	mov	fp, r0
 8007048:	f04f 0300 	mov.w	r3, #0
 800704c:	f04f 020a 	mov.w	r2, #10
 8007050:	4641      	mov	r1, r8
 8007052:	4628      	mov	r0, r5
 8007054:	d107      	bne.n	8007066 <_dtoa_r+0xb1e>
 8007056:	f000 f8ef 	bl	8007238 <__multadd>
 800705a:	4680      	mov	r8, r0
 800705c:	4606      	mov	r6, r0
 800705e:	9b08      	ldr	r3, [sp, #32]
 8007060:	3301      	adds	r3, #1
 8007062:	9308      	str	r3, [sp, #32]
 8007064:	e775      	b.n	8006f52 <_dtoa_r+0xa0a>
 8007066:	f000 f8e7 	bl	8007238 <__multadd>
 800706a:	4631      	mov	r1, r6
 800706c:	4680      	mov	r8, r0
 800706e:	2300      	movs	r3, #0
 8007070:	220a      	movs	r2, #10
 8007072:	4628      	mov	r0, r5
 8007074:	f000 f8e0 	bl	8007238 <__multadd>
 8007078:	4606      	mov	r6, r0
 800707a:	e7f0      	b.n	800705e <_dtoa_r+0xb16>
 800707c:	f1b9 0f00 	cmp.w	r9, #0
 8007080:	bfcc      	ite	gt
 8007082:	464f      	movgt	r7, r9
 8007084:	2701      	movle	r7, #1
 8007086:	f04f 0800 	mov.w	r8, #0
 800708a:	9a03      	ldr	r2, [sp, #12]
 800708c:	4417      	add	r7, r2
 800708e:	4659      	mov	r1, fp
 8007090:	2201      	movs	r2, #1
 8007092:	4628      	mov	r0, r5
 8007094:	9308      	str	r3, [sp, #32]
 8007096:	f000 fa7b 	bl	8007590 <__lshift>
 800709a:	4621      	mov	r1, r4
 800709c:	4683      	mov	fp, r0
 800709e:	f000 fae7 	bl	8007670 <__mcmp>
 80070a2:	2800      	cmp	r0, #0
 80070a4:	dcb2      	bgt.n	800700c <_dtoa_r+0xac4>
 80070a6:	d102      	bne.n	80070ae <_dtoa_r+0xb66>
 80070a8:	9b08      	ldr	r3, [sp, #32]
 80070aa:	07db      	lsls	r3, r3, #31
 80070ac:	d4ae      	bmi.n	800700c <_dtoa_r+0xac4>
 80070ae:	463b      	mov	r3, r7
 80070b0:	461f      	mov	r7, r3
 80070b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80070b6:	2a30      	cmp	r2, #48	; 0x30
 80070b8:	d0fa      	beq.n	80070b0 <_dtoa_r+0xb68>
 80070ba:	e6f9      	b.n	8006eb0 <_dtoa_r+0x968>
 80070bc:	9a03      	ldr	r2, [sp, #12]
 80070be:	429a      	cmp	r2, r3
 80070c0:	d1a5      	bne.n	800700e <_dtoa_r+0xac6>
 80070c2:	2331      	movs	r3, #49	; 0x31
 80070c4:	f10a 0a01 	add.w	sl, sl, #1
 80070c8:	e779      	b.n	8006fbe <_dtoa_r+0xa76>
 80070ca:	4b14      	ldr	r3, [pc, #80]	; (800711c <_dtoa_r+0xbd4>)
 80070cc:	f7ff baa8 	b.w	8006620 <_dtoa_r+0xd8>
 80070d0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	f47f aa81 	bne.w	80065da <_dtoa_r+0x92>
 80070d8:	4b11      	ldr	r3, [pc, #68]	; (8007120 <_dtoa_r+0xbd8>)
 80070da:	f7ff baa1 	b.w	8006620 <_dtoa_r+0xd8>
 80070de:	f1b9 0f00 	cmp.w	r9, #0
 80070e2:	dc03      	bgt.n	80070ec <_dtoa_r+0xba4>
 80070e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80070e6:	2b02      	cmp	r3, #2
 80070e8:	f73f aecb 	bgt.w	8006e82 <_dtoa_r+0x93a>
 80070ec:	9f03      	ldr	r7, [sp, #12]
 80070ee:	4621      	mov	r1, r4
 80070f0:	4658      	mov	r0, fp
 80070f2:	f7ff f99d 	bl	8006430 <quorem>
 80070f6:	9a03      	ldr	r2, [sp, #12]
 80070f8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80070fc:	f807 3b01 	strb.w	r3, [r7], #1
 8007100:	1aba      	subs	r2, r7, r2
 8007102:	4591      	cmp	r9, r2
 8007104:	ddba      	ble.n	800707c <_dtoa_r+0xb34>
 8007106:	4659      	mov	r1, fp
 8007108:	2300      	movs	r3, #0
 800710a:	220a      	movs	r2, #10
 800710c:	4628      	mov	r0, r5
 800710e:	f000 f893 	bl	8007238 <__multadd>
 8007112:	4683      	mov	fp, r0
 8007114:	e7eb      	b.n	80070ee <_dtoa_r+0xba6>
 8007116:	bf00      	nop
 8007118:	08008a63 	.word	0x08008a63
 800711c:	080089c0 	.word	0x080089c0
 8007120:	080089e4 	.word	0x080089e4

08007124 <_localeconv_r>:
 8007124:	4800      	ldr	r0, [pc, #0]	; (8007128 <_localeconv_r+0x4>)
 8007126:	4770      	bx	lr
 8007128:	20000160 	.word	0x20000160

0800712c <malloc>:
 800712c:	4b02      	ldr	r3, [pc, #8]	; (8007138 <malloc+0xc>)
 800712e:	4601      	mov	r1, r0
 8007130:	6818      	ldr	r0, [r3, #0]
 8007132:	f000 bc1d 	b.w	8007970 <_malloc_r>
 8007136:	bf00      	nop
 8007138:	2000000c 	.word	0x2000000c

0800713c <memchr>:
 800713c:	4603      	mov	r3, r0
 800713e:	b510      	push	{r4, lr}
 8007140:	b2c9      	uxtb	r1, r1
 8007142:	4402      	add	r2, r0
 8007144:	4293      	cmp	r3, r2
 8007146:	4618      	mov	r0, r3
 8007148:	d101      	bne.n	800714e <memchr+0x12>
 800714a:	2000      	movs	r0, #0
 800714c:	e003      	b.n	8007156 <memchr+0x1a>
 800714e:	7804      	ldrb	r4, [r0, #0]
 8007150:	3301      	adds	r3, #1
 8007152:	428c      	cmp	r4, r1
 8007154:	d1f6      	bne.n	8007144 <memchr+0x8>
 8007156:	bd10      	pop	{r4, pc}

08007158 <memcpy>:
 8007158:	440a      	add	r2, r1
 800715a:	4291      	cmp	r1, r2
 800715c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007160:	d100      	bne.n	8007164 <memcpy+0xc>
 8007162:	4770      	bx	lr
 8007164:	b510      	push	{r4, lr}
 8007166:	f811 4b01 	ldrb.w	r4, [r1], #1
 800716a:	4291      	cmp	r1, r2
 800716c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007170:	d1f9      	bne.n	8007166 <memcpy+0xe>
 8007172:	bd10      	pop	{r4, pc}

08007174 <_Balloc>:
 8007174:	b570      	push	{r4, r5, r6, lr}
 8007176:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007178:	4604      	mov	r4, r0
 800717a:	460d      	mov	r5, r1
 800717c:	b976      	cbnz	r6, 800719c <_Balloc+0x28>
 800717e:	2010      	movs	r0, #16
 8007180:	f7ff ffd4 	bl	800712c <malloc>
 8007184:	4602      	mov	r2, r0
 8007186:	6260      	str	r0, [r4, #36]	; 0x24
 8007188:	b920      	cbnz	r0, 8007194 <_Balloc+0x20>
 800718a:	2166      	movs	r1, #102	; 0x66
 800718c:	4b17      	ldr	r3, [pc, #92]	; (80071ec <_Balloc+0x78>)
 800718e:	4818      	ldr	r0, [pc, #96]	; (80071f0 <_Balloc+0x7c>)
 8007190:	f000 fdce 	bl	8007d30 <__assert_func>
 8007194:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007198:	6006      	str	r6, [r0, #0]
 800719a:	60c6      	str	r6, [r0, #12]
 800719c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800719e:	68f3      	ldr	r3, [r6, #12]
 80071a0:	b183      	cbz	r3, 80071c4 <_Balloc+0x50>
 80071a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071a4:	68db      	ldr	r3, [r3, #12]
 80071a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80071aa:	b9b8      	cbnz	r0, 80071dc <_Balloc+0x68>
 80071ac:	2101      	movs	r1, #1
 80071ae:	fa01 f605 	lsl.w	r6, r1, r5
 80071b2:	1d72      	adds	r2, r6, #5
 80071b4:	4620      	mov	r0, r4
 80071b6:	0092      	lsls	r2, r2, #2
 80071b8:	f000 fb5e 	bl	8007878 <_calloc_r>
 80071bc:	b160      	cbz	r0, 80071d8 <_Balloc+0x64>
 80071be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80071c2:	e00e      	b.n	80071e2 <_Balloc+0x6e>
 80071c4:	2221      	movs	r2, #33	; 0x21
 80071c6:	2104      	movs	r1, #4
 80071c8:	4620      	mov	r0, r4
 80071ca:	f000 fb55 	bl	8007878 <_calloc_r>
 80071ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071d0:	60f0      	str	r0, [r6, #12]
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d1e4      	bne.n	80071a2 <_Balloc+0x2e>
 80071d8:	2000      	movs	r0, #0
 80071da:	bd70      	pop	{r4, r5, r6, pc}
 80071dc:	6802      	ldr	r2, [r0, #0]
 80071de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80071e2:	2300      	movs	r3, #0
 80071e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80071e8:	e7f7      	b.n	80071da <_Balloc+0x66>
 80071ea:	bf00      	nop
 80071ec:	080089f1 	.word	0x080089f1
 80071f0:	08008a74 	.word	0x08008a74

080071f4 <_Bfree>:
 80071f4:	b570      	push	{r4, r5, r6, lr}
 80071f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80071f8:	4605      	mov	r5, r0
 80071fa:	460c      	mov	r4, r1
 80071fc:	b976      	cbnz	r6, 800721c <_Bfree+0x28>
 80071fe:	2010      	movs	r0, #16
 8007200:	f7ff ff94 	bl	800712c <malloc>
 8007204:	4602      	mov	r2, r0
 8007206:	6268      	str	r0, [r5, #36]	; 0x24
 8007208:	b920      	cbnz	r0, 8007214 <_Bfree+0x20>
 800720a:	218a      	movs	r1, #138	; 0x8a
 800720c:	4b08      	ldr	r3, [pc, #32]	; (8007230 <_Bfree+0x3c>)
 800720e:	4809      	ldr	r0, [pc, #36]	; (8007234 <_Bfree+0x40>)
 8007210:	f000 fd8e 	bl	8007d30 <__assert_func>
 8007214:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007218:	6006      	str	r6, [r0, #0]
 800721a:	60c6      	str	r6, [r0, #12]
 800721c:	b13c      	cbz	r4, 800722e <_Bfree+0x3a>
 800721e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007220:	6862      	ldr	r2, [r4, #4]
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007228:	6021      	str	r1, [r4, #0]
 800722a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800722e:	bd70      	pop	{r4, r5, r6, pc}
 8007230:	080089f1 	.word	0x080089f1
 8007234:	08008a74 	.word	0x08008a74

08007238 <__multadd>:
 8007238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800723c:	4607      	mov	r7, r0
 800723e:	460c      	mov	r4, r1
 8007240:	461e      	mov	r6, r3
 8007242:	2000      	movs	r0, #0
 8007244:	690d      	ldr	r5, [r1, #16]
 8007246:	f101 0c14 	add.w	ip, r1, #20
 800724a:	f8dc 3000 	ldr.w	r3, [ip]
 800724e:	3001      	adds	r0, #1
 8007250:	b299      	uxth	r1, r3
 8007252:	fb02 6101 	mla	r1, r2, r1, r6
 8007256:	0c1e      	lsrs	r6, r3, #16
 8007258:	0c0b      	lsrs	r3, r1, #16
 800725a:	fb02 3306 	mla	r3, r2, r6, r3
 800725e:	b289      	uxth	r1, r1
 8007260:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007264:	4285      	cmp	r5, r0
 8007266:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800726a:	f84c 1b04 	str.w	r1, [ip], #4
 800726e:	dcec      	bgt.n	800724a <__multadd+0x12>
 8007270:	b30e      	cbz	r6, 80072b6 <__multadd+0x7e>
 8007272:	68a3      	ldr	r3, [r4, #8]
 8007274:	42ab      	cmp	r3, r5
 8007276:	dc19      	bgt.n	80072ac <__multadd+0x74>
 8007278:	6861      	ldr	r1, [r4, #4]
 800727a:	4638      	mov	r0, r7
 800727c:	3101      	adds	r1, #1
 800727e:	f7ff ff79 	bl	8007174 <_Balloc>
 8007282:	4680      	mov	r8, r0
 8007284:	b928      	cbnz	r0, 8007292 <__multadd+0x5a>
 8007286:	4602      	mov	r2, r0
 8007288:	21b5      	movs	r1, #181	; 0xb5
 800728a:	4b0c      	ldr	r3, [pc, #48]	; (80072bc <__multadd+0x84>)
 800728c:	480c      	ldr	r0, [pc, #48]	; (80072c0 <__multadd+0x88>)
 800728e:	f000 fd4f 	bl	8007d30 <__assert_func>
 8007292:	6922      	ldr	r2, [r4, #16]
 8007294:	f104 010c 	add.w	r1, r4, #12
 8007298:	3202      	adds	r2, #2
 800729a:	0092      	lsls	r2, r2, #2
 800729c:	300c      	adds	r0, #12
 800729e:	f7ff ff5b 	bl	8007158 <memcpy>
 80072a2:	4621      	mov	r1, r4
 80072a4:	4638      	mov	r0, r7
 80072a6:	f7ff ffa5 	bl	80071f4 <_Bfree>
 80072aa:	4644      	mov	r4, r8
 80072ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80072b0:	3501      	adds	r5, #1
 80072b2:	615e      	str	r6, [r3, #20]
 80072b4:	6125      	str	r5, [r4, #16]
 80072b6:	4620      	mov	r0, r4
 80072b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072bc:	08008a63 	.word	0x08008a63
 80072c0:	08008a74 	.word	0x08008a74

080072c4 <__hi0bits>:
 80072c4:	0c02      	lsrs	r2, r0, #16
 80072c6:	0412      	lsls	r2, r2, #16
 80072c8:	4603      	mov	r3, r0
 80072ca:	b9ca      	cbnz	r2, 8007300 <__hi0bits+0x3c>
 80072cc:	0403      	lsls	r3, r0, #16
 80072ce:	2010      	movs	r0, #16
 80072d0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80072d4:	bf04      	itt	eq
 80072d6:	021b      	lsleq	r3, r3, #8
 80072d8:	3008      	addeq	r0, #8
 80072da:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80072de:	bf04      	itt	eq
 80072e0:	011b      	lsleq	r3, r3, #4
 80072e2:	3004      	addeq	r0, #4
 80072e4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80072e8:	bf04      	itt	eq
 80072ea:	009b      	lsleq	r3, r3, #2
 80072ec:	3002      	addeq	r0, #2
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	db05      	blt.n	80072fe <__hi0bits+0x3a>
 80072f2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80072f6:	f100 0001 	add.w	r0, r0, #1
 80072fa:	bf08      	it	eq
 80072fc:	2020      	moveq	r0, #32
 80072fe:	4770      	bx	lr
 8007300:	2000      	movs	r0, #0
 8007302:	e7e5      	b.n	80072d0 <__hi0bits+0xc>

08007304 <__lo0bits>:
 8007304:	6803      	ldr	r3, [r0, #0]
 8007306:	4602      	mov	r2, r0
 8007308:	f013 0007 	ands.w	r0, r3, #7
 800730c:	d00b      	beq.n	8007326 <__lo0bits+0x22>
 800730e:	07d9      	lsls	r1, r3, #31
 8007310:	d421      	bmi.n	8007356 <__lo0bits+0x52>
 8007312:	0798      	lsls	r0, r3, #30
 8007314:	bf49      	itett	mi
 8007316:	085b      	lsrmi	r3, r3, #1
 8007318:	089b      	lsrpl	r3, r3, #2
 800731a:	2001      	movmi	r0, #1
 800731c:	6013      	strmi	r3, [r2, #0]
 800731e:	bf5c      	itt	pl
 8007320:	2002      	movpl	r0, #2
 8007322:	6013      	strpl	r3, [r2, #0]
 8007324:	4770      	bx	lr
 8007326:	b299      	uxth	r1, r3
 8007328:	b909      	cbnz	r1, 800732e <__lo0bits+0x2a>
 800732a:	2010      	movs	r0, #16
 800732c:	0c1b      	lsrs	r3, r3, #16
 800732e:	b2d9      	uxtb	r1, r3
 8007330:	b909      	cbnz	r1, 8007336 <__lo0bits+0x32>
 8007332:	3008      	adds	r0, #8
 8007334:	0a1b      	lsrs	r3, r3, #8
 8007336:	0719      	lsls	r1, r3, #28
 8007338:	bf04      	itt	eq
 800733a:	091b      	lsreq	r3, r3, #4
 800733c:	3004      	addeq	r0, #4
 800733e:	0799      	lsls	r1, r3, #30
 8007340:	bf04      	itt	eq
 8007342:	089b      	lsreq	r3, r3, #2
 8007344:	3002      	addeq	r0, #2
 8007346:	07d9      	lsls	r1, r3, #31
 8007348:	d403      	bmi.n	8007352 <__lo0bits+0x4e>
 800734a:	085b      	lsrs	r3, r3, #1
 800734c:	f100 0001 	add.w	r0, r0, #1
 8007350:	d003      	beq.n	800735a <__lo0bits+0x56>
 8007352:	6013      	str	r3, [r2, #0]
 8007354:	4770      	bx	lr
 8007356:	2000      	movs	r0, #0
 8007358:	4770      	bx	lr
 800735a:	2020      	movs	r0, #32
 800735c:	4770      	bx	lr
	...

08007360 <__i2b>:
 8007360:	b510      	push	{r4, lr}
 8007362:	460c      	mov	r4, r1
 8007364:	2101      	movs	r1, #1
 8007366:	f7ff ff05 	bl	8007174 <_Balloc>
 800736a:	4602      	mov	r2, r0
 800736c:	b928      	cbnz	r0, 800737a <__i2b+0x1a>
 800736e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007372:	4b04      	ldr	r3, [pc, #16]	; (8007384 <__i2b+0x24>)
 8007374:	4804      	ldr	r0, [pc, #16]	; (8007388 <__i2b+0x28>)
 8007376:	f000 fcdb 	bl	8007d30 <__assert_func>
 800737a:	2301      	movs	r3, #1
 800737c:	6144      	str	r4, [r0, #20]
 800737e:	6103      	str	r3, [r0, #16]
 8007380:	bd10      	pop	{r4, pc}
 8007382:	bf00      	nop
 8007384:	08008a63 	.word	0x08008a63
 8007388:	08008a74 	.word	0x08008a74

0800738c <__multiply>:
 800738c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007390:	4691      	mov	r9, r2
 8007392:	690a      	ldr	r2, [r1, #16]
 8007394:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007398:	460c      	mov	r4, r1
 800739a:	429a      	cmp	r2, r3
 800739c:	bfbe      	ittt	lt
 800739e:	460b      	movlt	r3, r1
 80073a0:	464c      	movlt	r4, r9
 80073a2:	4699      	movlt	r9, r3
 80073a4:	6927      	ldr	r7, [r4, #16]
 80073a6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80073aa:	68a3      	ldr	r3, [r4, #8]
 80073ac:	6861      	ldr	r1, [r4, #4]
 80073ae:	eb07 060a 	add.w	r6, r7, sl
 80073b2:	42b3      	cmp	r3, r6
 80073b4:	b085      	sub	sp, #20
 80073b6:	bfb8      	it	lt
 80073b8:	3101      	addlt	r1, #1
 80073ba:	f7ff fedb 	bl	8007174 <_Balloc>
 80073be:	b930      	cbnz	r0, 80073ce <__multiply+0x42>
 80073c0:	4602      	mov	r2, r0
 80073c2:	f240 115d 	movw	r1, #349	; 0x15d
 80073c6:	4b43      	ldr	r3, [pc, #268]	; (80074d4 <__multiply+0x148>)
 80073c8:	4843      	ldr	r0, [pc, #268]	; (80074d8 <__multiply+0x14c>)
 80073ca:	f000 fcb1 	bl	8007d30 <__assert_func>
 80073ce:	f100 0514 	add.w	r5, r0, #20
 80073d2:	462b      	mov	r3, r5
 80073d4:	2200      	movs	r2, #0
 80073d6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80073da:	4543      	cmp	r3, r8
 80073dc:	d321      	bcc.n	8007422 <__multiply+0x96>
 80073de:	f104 0314 	add.w	r3, r4, #20
 80073e2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80073e6:	f109 0314 	add.w	r3, r9, #20
 80073ea:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80073ee:	9202      	str	r2, [sp, #8]
 80073f0:	1b3a      	subs	r2, r7, r4
 80073f2:	3a15      	subs	r2, #21
 80073f4:	f022 0203 	bic.w	r2, r2, #3
 80073f8:	3204      	adds	r2, #4
 80073fa:	f104 0115 	add.w	r1, r4, #21
 80073fe:	428f      	cmp	r7, r1
 8007400:	bf38      	it	cc
 8007402:	2204      	movcc	r2, #4
 8007404:	9201      	str	r2, [sp, #4]
 8007406:	9a02      	ldr	r2, [sp, #8]
 8007408:	9303      	str	r3, [sp, #12]
 800740a:	429a      	cmp	r2, r3
 800740c:	d80c      	bhi.n	8007428 <__multiply+0x9c>
 800740e:	2e00      	cmp	r6, #0
 8007410:	dd03      	ble.n	800741a <__multiply+0x8e>
 8007412:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007416:	2b00      	cmp	r3, #0
 8007418:	d059      	beq.n	80074ce <__multiply+0x142>
 800741a:	6106      	str	r6, [r0, #16]
 800741c:	b005      	add	sp, #20
 800741e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007422:	f843 2b04 	str.w	r2, [r3], #4
 8007426:	e7d8      	b.n	80073da <__multiply+0x4e>
 8007428:	f8b3 a000 	ldrh.w	sl, [r3]
 800742c:	f1ba 0f00 	cmp.w	sl, #0
 8007430:	d023      	beq.n	800747a <__multiply+0xee>
 8007432:	46a9      	mov	r9, r5
 8007434:	f04f 0c00 	mov.w	ip, #0
 8007438:	f104 0e14 	add.w	lr, r4, #20
 800743c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007440:	f8d9 1000 	ldr.w	r1, [r9]
 8007444:	fa1f fb82 	uxth.w	fp, r2
 8007448:	b289      	uxth	r1, r1
 800744a:	fb0a 110b 	mla	r1, sl, fp, r1
 800744e:	4461      	add	r1, ip
 8007450:	f8d9 c000 	ldr.w	ip, [r9]
 8007454:	0c12      	lsrs	r2, r2, #16
 8007456:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800745a:	fb0a c202 	mla	r2, sl, r2, ip
 800745e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007462:	b289      	uxth	r1, r1
 8007464:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007468:	4577      	cmp	r7, lr
 800746a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800746e:	f849 1b04 	str.w	r1, [r9], #4
 8007472:	d8e3      	bhi.n	800743c <__multiply+0xb0>
 8007474:	9a01      	ldr	r2, [sp, #4]
 8007476:	f845 c002 	str.w	ip, [r5, r2]
 800747a:	9a03      	ldr	r2, [sp, #12]
 800747c:	3304      	adds	r3, #4
 800747e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007482:	f1b9 0f00 	cmp.w	r9, #0
 8007486:	d020      	beq.n	80074ca <__multiply+0x13e>
 8007488:	46ae      	mov	lr, r5
 800748a:	f04f 0a00 	mov.w	sl, #0
 800748e:	6829      	ldr	r1, [r5, #0]
 8007490:	f104 0c14 	add.w	ip, r4, #20
 8007494:	f8bc b000 	ldrh.w	fp, [ip]
 8007498:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800749c:	b289      	uxth	r1, r1
 800749e:	fb09 220b 	mla	r2, r9, fp, r2
 80074a2:	4492      	add	sl, r2
 80074a4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80074a8:	f84e 1b04 	str.w	r1, [lr], #4
 80074ac:	f85c 2b04 	ldr.w	r2, [ip], #4
 80074b0:	f8be 1000 	ldrh.w	r1, [lr]
 80074b4:	0c12      	lsrs	r2, r2, #16
 80074b6:	fb09 1102 	mla	r1, r9, r2, r1
 80074ba:	4567      	cmp	r7, ip
 80074bc:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80074c0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80074c4:	d8e6      	bhi.n	8007494 <__multiply+0x108>
 80074c6:	9a01      	ldr	r2, [sp, #4]
 80074c8:	50a9      	str	r1, [r5, r2]
 80074ca:	3504      	adds	r5, #4
 80074cc:	e79b      	b.n	8007406 <__multiply+0x7a>
 80074ce:	3e01      	subs	r6, #1
 80074d0:	e79d      	b.n	800740e <__multiply+0x82>
 80074d2:	bf00      	nop
 80074d4:	08008a63 	.word	0x08008a63
 80074d8:	08008a74 	.word	0x08008a74

080074dc <__pow5mult>:
 80074dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074e0:	4615      	mov	r5, r2
 80074e2:	f012 0203 	ands.w	r2, r2, #3
 80074e6:	4606      	mov	r6, r0
 80074e8:	460f      	mov	r7, r1
 80074ea:	d007      	beq.n	80074fc <__pow5mult+0x20>
 80074ec:	4c25      	ldr	r4, [pc, #148]	; (8007584 <__pow5mult+0xa8>)
 80074ee:	3a01      	subs	r2, #1
 80074f0:	2300      	movs	r3, #0
 80074f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80074f6:	f7ff fe9f 	bl	8007238 <__multadd>
 80074fa:	4607      	mov	r7, r0
 80074fc:	10ad      	asrs	r5, r5, #2
 80074fe:	d03d      	beq.n	800757c <__pow5mult+0xa0>
 8007500:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007502:	b97c      	cbnz	r4, 8007524 <__pow5mult+0x48>
 8007504:	2010      	movs	r0, #16
 8007506:	f7ff fe11 	bl	800712c <malloc>
 800750a:	4602      	mov	r2, r0
 800750c:	6270      	str	r0, [r6, #36]	; 0x24
 800750e:	b928      	cbnz	r0, 800751c <__pow5mult+0x40>
 8007510:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007514:	4b1c      	ldr	r3, [pc, #112]	; (8007588 <__pow5mult+0xac>)
 8007516:	481d      	ldr	r0, [pc, #116]	; (800758c <__pow5mult+0xb0>)
 8007518:	f000 fc0a 	bl	8007d30 <__assert_func>
 800751c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007520:	6004      	str	r4, [r0, #0]
 8007522:	60c4      	str	r4, [r0, #12]
 8007524:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007528:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800752c:	b94c      	cbnz	r4, 8007542 <__pow5mult+0x66>
 800752e:	f240 2171 	movw	r1, #625	; 0x271
 8007532:	4630      	mov	r0, r6
 8007534:	f7ff ff14 	bl	8007360 <__i2b>
 8007538:	2300      	movs	r3, #0
 800753a:	4604      	mov	r4, r0
 800753c:	f8c8 0008 	str.w	r0, [r8, #8]
 8007540:	6003      	str	r3, [r0, #0]
 8007542:	f04f 0900 	mov.w	r9, #0
 8007546:	07eb      	lsls	r3, r5, #31
 8007548:	d50a      	bpl.n	8007560 <__pow5mult+0x84>
 800754a:	4639      	mov	r1, r7
 800754c:	4622      	mov	r2, r4
 800754e:	4630      	mov	r0, r6
 8007550:	f7ff ff1c 	bl	800738c <__multiply>
 8007554:	4680      	mov	r8, r0
 8007556:	4639      	mov	r1, r7
 8007558:	4630      	mov	r0, r6
 800755a:	f7ff fe4b 	bl	80071f4 <_Bfree>
 800755e:	4647      	mov	r7, r8
 8007560:	106d      	asrs	r5, r5, #1
 8007562:	d00b      	beq.n	800757c <__pow5mult+0xa0>
 8007564:	6820      	ldr	r0, [r4, #0]
 8007566:	b938      	cbnz	r0, 8007578 <__pow5mult+0x9c>
 8007568:	4622      	mov	r2, r4
 800756a:	4621      	mov	r1, r4
 800756c:	4630      	mov	r0, r6
 800756e:	f7ff ff0d 	bl	800738c <__multiply>
 8007572:	6020      	str	r0, [r4, #0]
 8007574:	f8c0 9000 	str.w	r9, [r0]
 8007578:	4604      	mov	r4, r0
 800757a:	e7e4      	b.n	8007546 <__pow5mult+0x6a>
 800757c:	4638      	mov	r0, r7
 800757e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007582:	bf00      	nop
 8007584:	08008bc0 	.word	0x08008bc0
 8007588:	080089f1 	.word	0x080089f1
 800758c:	08008a74 	.word	0x08008a74

08007590 <__lshift>:
 8007590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007594:	460c      	mov	r4, r1
 8007596:	4607      	mov	r7, r0
 8007598:	4691      	mov	r9, r2
 800759a:	6923      	ldr	r3, [r4, #16]
 800759c:	6849      	ldr	r1, [r1, #4]
 800759e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80075a2:	68a3      	ldr	r3, [r4, #8]
 80075a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80075a8:	f108 0601 	add.w	r6, r8, #1
 80075ac:	42b3      	cmp	r3, r6
 80075ae:	db0b      	blt.n	80075c8 <__lshift+0x38>
 80075b0:	4638      	mov	r0, r7
 80075b2:	f7ff fddf 	bl	8007174 <_Balloc>
 80075b6:	4605      	mov	r5, r0
 80075b8:	b948      	cbnz	r0, 80075ce <__lshift+0x3e>
 80075ba:	4602      	mov	r2, r0
 80075bc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80075c0:	4b29      	ldr	r3, [pc, #164]	; (8007668 <__lshift+0xd8>)
 80075c2:	482a      	ldr	r0, [pc, #168]	; (800766c <__lshift+0xdc>)
 80075c4:	f000 fbb4 	bl	8007d30 <__assert_func>
 80075c8:	3101      	adds	r1, #1
 80075ca:	005b      	lsls	r3, r3, #1
 80075cc:	e7ee      	b.n	80075ac <__lshift+0x1c>
 80075ce:	2300      	movs	r3, #0
 80075d0:	f100 0114 	add.w	r1, r0, #20
 80075d4:	f100 0210 	add.w	r2, r0, #16
 80075d8:	4618      	mov	r0, r3
 80075da:	4553      	cmp	r3, sl
 80075dc:	db37      	blt.n	800764e <__lshift+0xbe>
 80075de:	6920      	ldr	r0, [r4, #16]
 80075e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80075e4:	f104 0314 	add.w	r3, r4, #20
 80075e8:	f019 091f 	ands.w	r9, r9, #31
 80075ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80075f0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80075f4:	d02f      	beq.n	8007656 <__lshift+0xc6>
 80075f6:	468a      	mov	sl, r1
 80075f8:	f04f 0c00 	mov.w	ip, #0
 80075fc:	f1c9 0e20 	rsb	lr, r9, #32
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	fa02 f209 	lsl.w	r2, r2, r9
 8007606:	ea42 020c 	orr.w	r2, r2, ip
 800760a:	f84a 2b04 	str.w	r2, [sl], #4
 800760e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007612:	4298      	cmp	r0, r3
 8007614:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007618:	d8f2      	bhi.n	8007600 <__lshift+0x70>
 800761a:	1b03      	subs	r3, r0, r4
 800761c:	3b15      	subs	r3, #21
 800761e:	f023 0303 	bic.w	r3, r3, #3
 8007622:	3304      	adds	r3, #4
 8007624:	f104 0215 	add.w	r2, r4, #21
 8007628:	4290      	cmp	r0, r2
 800762a:	bf38      	it	cc
 800762c:	2304      	movcc	r3, #4
 800762e:	f841 c003 	str.w	ip, [r1, r3]
 8007632:	f1bc 0f00 	cmp.w	ip, #0
 8007636:	d001      	beq.n	800763c <__lshift+0xac>
 8007638:	f108 0602 	add.w	r6, r8, #2
 800763c:	3e01      	subs	r6, #1
 800763e:	4638      	mov	r0, r7
 8007640:	4621      	mov	r1, r4
 8007642:	612e      	str	r6, [r5, #16]
 8007644:	f7ff fdd6 	bl	80071f4 <_Bfree>
 8007648:	4628      	mov	r0, r5
 800764a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800764e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007652:	3301      	adds	r3, #1
 8007654:	e7c1      	b.n	80075da <__lshift+0x4a>
 8007656:	3904      	subs	r1, #4
 8007658:	f853 2b04 	ldr.w	r2, [r3], #4
 800765c:	4298      	cmp	r0, r3
 800765e:	f841 2f04 	str.w	r2, [r1, #4]!
 8007662:	d8f9      	bhi.n	8007658 <__lshift+0xc8>
 8007664:	e7ea      	b.n	800763c <__lshift+0xac>
 8007666:	bf00      	nop
 8007668:	08008a63 	.word	0x08008a63
 800766c:	08008a74 	.word	0x08008a74

08007670 <__mcmp>:
 8007670:	4603      	mov	r3, r0
 8007672:	690a      	ldr	r2, [r1, #16]
 8007674:	6900      	ldr	r0, [r0, #16]
 8007676:	b530      	push	{r4, r5, lr}
 8007678:	1a80      	subs	r0, r0, r2
 800767a:	d10d      	bne.n	8007698 <__mcmp+0x28>
 800767c:	3314      	adds	r3, #20
 800767e:	3114      	adds	r1, #20
 8007680:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007684:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007688:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800768c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007690:	4295      	cmp	r5, r2
 8007692:	d002      	beq.n	800769a <__mcmp+0x2a>
 8007694:	d304      	bcc.n	80076a0 <__mcmp+0x30>
 8007696:	2001      	movs	r0, #1
 8007698:	bd30      	pop	{r4, r5, pc}
 800769a:	42a3      	cmp	r3, r4
 800769c:	d3f4      	bcc.n	8007688 <__mcmp+0x18>
 800769e:	e7fb      	b.n	8007698 <__mcmp+0x28>
 80076a0:	f04f 30ff 	mov.w	r0, #4294967295
 80076a4:	e7f8      	b.n	8007698 <__mcmp+0x28>
	...

080076a8 <__mdiff>:
 80076a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076ac:	460d      	mov	r5, r1
 80076ae:	4607      	mov	r7, r0
 80076b0:	4611      	mov	r1, r2
 80076b2:	4628      	mov	r0, r5
 80076b4:	4614      	mov	r4, r2
 80076b6:	f7ff ffdb 	bl	8007670 <__mcmp>
 80076ba:	1e06      	subs	r6, r0, #0
 80076bc:	d111      	bne.n	80076e2 <__mdiff+0x3a>
 80076be:	4631      	mov	r1, r6
 80076c0:	4638      	mov	r0, r7
 80076c2:	f7ff fd57 	bl	8007174 <_Balloc>
 80076c6:	4602      	mov	r2, r0
 80076c8:	b928      	cbnz	r0, 80076d6 <__mdiff+0x2e>
 80076ca:	f240 2132 	movw	r1, #562	; 0x232
 80076ce:	4b3a      	ldr	r3, [pc, #232]	; (80077b8 <__mdiff+0x110>)
 80076d0:	483a      	ldr	r0, [pc, #232]	; (80077bc <__mdiff+0x114>)
 80076d2:	f000 fb2d 	bl	8007d30 <__assert_func>
 80076d6:	2301      	movs	r3, #1
 80076d8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80076dc:	4610      	mov	r0, r2
 80076de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076e2:	bfa4      	itt	ge
 80076e4:	4623      	movge	r3, r4
 80076e6:	462c      	movge	r4, r5
 80076e8:	4638      	mov	r0, r7
 80076ea:	6861      	ldr	r1, [r4, #4]
 80076ec:	bfa6      	itte	ge
 80076ee:	461d      	movge	r5, r3
 80076f0:	2600      	movge	r6, #0
 80076f2:	2601      	movlt	r6, #1
 80076f4:	f7ff fd3e 	bl	8007174 <_Balloc>
 80076f8:	4602      	mov	r2, r0
 80076fa:	b918      	cbnz	r0, 8007704 <__mdiff+0x5c>
 80076fc:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007700:	4b2d      	ldr	r3, [pc, #180]	; (80077b8 <__mdiff+0x110>)
 8007702:	e7e5      	b.n	80076d0 <__mdiff+0x28>
 8007704:	f102 0814 	add.w	r8, r2, #20
 8007708:	46c2      	mov	sl, r8
 800770a:	f04f 0c00 	mov.w	ip, #0
 800770e:	6927      	ldr	r7, [r4, #16]
 8007710:	60c6      	str	r6, [r0, #12]
 8007712:	692e      	ldr	r6, [r5, #16]
 8007714:	f104 0014 	add.w	r0, r4, #20
 8007718:	f105 0914 	add.w	r9, r5, #20
 800771c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007720:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007724:	3410      	adds	r4, #16
 8007726:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800772a:	f859 3b04 	ldr.w	r3, [r9], #4
 800772e:	fa1f f18b 	uxth.w	r1, fp
 8007732:	448c      	add	ip, r1
 8007734:	b299      	uxth	r1, r3
 8007736:	0c1b      	lsrs	r3, r3, #16
 8007738:	ebac 0101 	sub.w	r1, ip, r1
 800773c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007740:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007744:	b289      	uxth	r1, r1
 8007746:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800774a:	454e      	cmp	r6, r9
 800774c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007750:	f84a 3b04 	str.w	r3, [sl], #4
 8007754:	d8e7      	bhi.n	8007726 <__mdiff+0x7e>
 8007756:	1b73      	subs	r3, r6, r5
 8007758:	3b15      	subs	r3, #21
 800775a:	f023 0303 	bic.w	r3, r3, #3
 800775e:	3515      	adds	r5, #21
 8007760:	3304      	adds	r3, #4
 8007762:	42ae      	cmp	r6, r5
 8007764:	bf38      	it	cc
 8007766:	2304      	movcc	r3, #4
 8007768:	4418      	add	r0, r3
 800776a:	4443      	add	r3, r8
 800776c:	461e      	mov	r6, r3
 800776e:	4605      	mov	r5, r0
 8007770:	4575      	cmp	r5, lr
 8007772:	d30e      	bcc.n	8007792 <__mdiff+0xea>
 8007774:	f10e 0103 	add.w	r1, lr, #3
 8007778:	1a09      	subs	r1, r1, r0
 800777a:	f021 0103 	bic.w	r1, r1, #3
 800777e:	3803      	subs	r0, #3
 8007780:	4586      	cmp	lr, r0
 8007782:	bf38      	it	cc
 8007784:	2100      	movcc	r1, #0
 8007786:	4419      	add	r1, r3
 8007788:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800778c:	b18b      	cbz	r3, 80077b2 <__mdiff+0x10a>
 800778e:	6117      	str	r7, [r2, #16]
 8007790:	e7a4      	b.n	80076dc <__mdiff+0x34>
 8007792:	f855 8b04 	ldr.w	r8, [r5], #4
 8007796:	fa1f f188 	uxth.w	r1, r8
 800779a:	4461      	add	r1, ip
 800779c:	140c      	asrs	r4, r1, #16
 800779e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80077a2:	b289      	uxth	r1, r1
 80077a4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80077a8:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80077ac:	f846 1b04 	str.w	r1, [r6], #4
 80077b0:	e7de      	b.n	8007770 <__mdiff+0xc8>
 80077b2:	3f01      	subs	r7, #1
 80077b4:	e7e8      	b.n	8007788 <__mdiff+0xe0>
 80077b6:	bf00      	nop
 80077b8:	08008a63 	.word	0x08008a63
 80077bc:	08008a74 	.word	0x08008a74

080077c0 <__d2b>:
 80077c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80077c4:	2101      	movs	r1, #1
 80077c6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80077ca:	4690      	mov	r8, r2
 80077cc:	461d      	mov	r5, r3
 80077ce:	f7ff fcd1 	bl	8007174 <_Balloc>
 80077d2:	4604      	mov	r4, r0
 80077d4:	b930      	cbnz	r0, 80077e4 <__d2b+0x24>
 80077d6:	4602      	mov	r2, r0
 80077d8:	f240 310a 	movw	r1, #778	; 0x30a
 80077dc:	4b24      	ldr	r3, [pc, #144]	; (8007870 <__d2b+0xb0>)
 80077de:	4825      	ldr	r0, [pc, #148]	; (8007874 <__d2b+0xb4>)
 80077e0:	f000 faa6 	bl	8007d30 <__assert_func>
 80077e4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80077e8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80077ec:	bb2d      	cbnz	r5, 800783a <__d2b+0x7a>
 80077ee:	9301      	str	r3, [sp, #4]
 80077f0:	f1b8 0300 	subs.w	r3, r8, #0
 80077f4:	d026      	beq.n	8007844 <__d2b+0x84>
 80077f6:	4668      	mov	r0, sp
 80077f8:	9300      	str	r3, [sp, #0]
 80077fa:	f7ff fd83 	bl	8007304 <__lo0bits>
 80077fe:	9900      	ldr	r1, [sp, #0]
 8007800:	b1f0      	cbz	r0, 8007840 <__d2b+0x80>
 8007802:	9a01      	ldr	r2, [sp, #4]
 8007804:	f1c0 0320 	rsb	r3, r0, #32
 8007808:	fa02 f303 	lsl.w	r3, r2, r3
 800780c:	430b      	orrs	r3, r1
 800780e:	40c2      	lsrs	r2, r0
 8007810:	6163      	str	r3, [r4, #20]
 8007812:	9201      	str	r2, [sp, #4]
 8007814:	9b01      	ldr	r3, [sp, #4]
 8007816:	2b00      	cmp	r3, #0
 8007818:	bf14      	ite	ne
 800781a:	2102      	movne	r1, #2
 800781c:	2101      	moveq	r1, #1
 800781e:	61a3      	str	r3, [r4, #24]
 8007820:	6121      	str	r1, [r4, #16]
 8007822:	b1c5      	cbz	r5, 8007856 <__d2b+0x96>
 8007824:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007828:	4405      	add	r5, r0
 800782a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800782e:	603d      	str	r5, [r7, #0]
 8007830:	6030      	str	r0, [r6, #0]
 8007832:	4620      	mov	r0, r4
 8007834:	b002      	add	sp, #8
 8007836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800783a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800783e:	e7d6      	b.n	80077ee <__d2b+0x2e>
 8007840:	6161      	str	r1, [r4, #20]
 8007842:	e7e7      	b.n	8007814 <__d2b+0x54>
 8007844:	a801      	add	r0, sp, #4
 8007846:	f7ff fd5d 	bl	8007304 <__lo0bits>
 800784a:	2101      	movs	r1, #1
 800784c:	9b01      	ldr	r3, [sp, #4]
 800784e:	6121      	str	r1, [r4, #16]
 8007850:	6163      	str	r3, [r4, #20]
 8007852:	3020      	adds	r0, #32
 8007854:	e7e5      	b.n	8007822 <__d2b+0x62>
 8007856:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800785a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800785e:	6038      	str	r0, [r7, #0]
 8007860:	6918      	ldr	r0, [r3, #16]
 8007862:	f7ff fd2f 	bl	80072c4 <__hi0bits>
 8007866:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800786a:	6031      	str	r1, [r6, #0]
 800786c:	e7e1      	b.n	8007832 <__d2b+0x72>
 800786e:	bf00      	nop
 8007870:	08008a63 	.word	0x08008a63
 8007874:	08008a74 	.word	0x08008a74

08007878 <_calloc_r>:
 8007878:	b570      	push	{r4, r5, r6, lr}
 800787a:	fba1 5402 	umull	r5, r4, r1, r2
 800787e:	b934      	cbnz	r4, 800788e <_calloc_r+0x16>
 8007880:	4629      	mov	r1, r5
 8007882:	f000 f875 	bl	8007970 <_malloc_r>
 8007886:	4606      	mov	r6, r0
 8007888:	b928      	cbnz	r0, 8007896 <_calloc_r+0x1e>
 800788a:	4630      	mov	r0, r6
 800788c:	bd70      	pop	{r4, r5, r6, pc}
 800788e:	220c      	movs	r2, #12
 8007890:	2600      	movs	r6, #0
 8007892:	6002      	str	r2, [r0, #0]
 8007894:	e7f9      	b.n	800788a <_calloc_r+0x12>
 8007896:	462a      	mov	r2, r5
 8007898:	4621      	mov	r1, r4
 800789a:	f7fe f92d 	bl	8005af8 <memset>
 800789e:	e7f4      	b.n	800788a <_calloc_r+0x12>

080078a0 <_free_r>:
 80078a0:	b538      	push	{r3, r4, r5, lr}
 80078a2:	4605      	mov	r5, r0
 80078a4:	2900      	cmp	r1, #0
 80078a6:	d040      	beq.n	800792a <_free_r+0x8a>
 80078a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078ac:	1f0c      	subs	r4, r1, #4
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	bfb8      	it	lt
 80078b2:	18e4      	addlt	r4, r4, r3
 80078b4:	f000 fa98 	bl	8007de8 <__malloc_lock>
 80078b8:	4a1c      	ldr	r2, [pc, #112]	; (800792c <_free_r+0x8c>)
 80078ba:	6813      	ldr	r3, [r2, #0]
 80078bc:	b933      	cbnz	r3, 80078cc <_free_r+0x2c>
 80078be:	6063      	str	r3, [r4, #4]
 80078c0:	6014      	str	r4, [r2, #0]
 80078c2:	4628      	mov	r0, r5
 80078c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078c8:	f000 ba94 	b.w	8007df4 <__malloc_unlock>
 80078cc:	42a3      	cmp	r3, r4
 80078ce:	d908      	bls.n	80078e2 <_free_r+0x42>
 80078d0:	6820      	ldr	r0, [r4, #0]
 80078d2:	1821      	adds	r1, r4, r0
 80078d4:	428b      	cmp	r3, r1
 80078d6:	bf01      	itttt	eq
 80078d8:	6819      	ldreq	r1, [r3, #0]
 80078da:	685b      	ldreq	r3, [r3, #4]
 80078dc:	1809      	addeq	r1, r1, r0
 80078de:	6021      	streq	r1, [r4, #0]
 80078e0:	e7ed      	b.n	80078be <_free_r+0x1e>
 80078e2:	461a      	mov	r2, r3
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	b10b      	cbz	r3, 80078ec <_free_r+0x4c>
 80078e8:	42a3      	cmp	r3, r4
 80078ea:	d9fa      	bls.n	80078e2 <_free_r+0x42>
 80078ec:	6811      	ldr	r1, [r2, #0]
 80078ee:	1850      	adds	r0, r2, r1
 80078f0:	42a0      	cmp	r0, r4
 80078f2:	d10b      	bne.n	800790c <_free_r+0x6c>
 80078f4:	6820      	ldr	r0, [r4, #0]
 80078f6:	4401      	add	r1, r0
 80078f8:	1850      	adds	r0, r2, r1
 80078fa:	4283      	cmp	r3, r0
 80078fc:	6011      	str	r1, [r2, #0]
 80078fe:	d1e0      	bne.n	80078c2 <_free_r+0x22>
 8007900:	6818      	ldr	r0, [r3, #0]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	4401      	add	r1, r0
 8007906:	6011      	str	r1, [r2, #0]
 8007908:	6053      	str	r3, [r2, #4]
 800790a:	e7da      	b.n	80078c2 <_free_r+0x22>
 800790c:	d902      	bls.n	8007914 <_free_r+0x74>
 800790e:	230c      	movs	r3, #12
 8007910:	602b      	str	r3, [r5, #0]
 8007912:	e7d6      	b.n	80078c2 <_free_r+0x22>
 8007914:	6820      	ldr	r0, [r4, #0]
 8007916:	1821      	adds	r1, r4, r0
 8007918:	428b      	cmp	r3, r1
 800791a:	bf01      	itttt	eq
 800791c:	6819      	ldreq	r1, [r3, #0]
 800791e:	685b      	ldreq	r3, [r3, #4]
 8007920:	1809      	addeq	r1, r1, r0
 8007922:	6021      	streq	r1, [r4, #0]
 8007924:	6063      	str	r3, [r4, #4]
 8007926:	6054      	str	r4, [r2, #4]
 8007928:	e7cb      	b.n	80078c2 <_free_r+0x22>
 800792a:	bd38      	pop	{r3, r4, r5, pc}
 800792c:	20000504 	.word	0x20000504

08007930 <sbrk_aligned>:
 8007930:	b570      	push	{r4, r5, r6, lr}
 8007932:	4e0e      	ldr	r6, [pc, #56]	; (800796c <sbrk_aligned+0x3c>)
 8007934:	460c      	mov	r4, r1
 8007936:	6831      	ldr	r1, [r6, #0]
 8007938:	4605      	mov	r5, r0
 800793a:	b911      	cbnz	r1, 8007942 <sbrk_aligned+0x12>
 800793c:	f000 f9e8 	bl	8007d10 <_sbrk_r>
 8007940:	6030      	str	r0, [r6, #0]
 8007942:	4621      	mov	r1, r4
 8007944:	4628      	mov	r0, r5
 8007946:	f000 f9e3 	bl	8007d10 <_sbrk_r>
 800794a:	1c43      	adds	r3, r0, #1
 800794c:	d00a      	beq.n	8007964 <sbrk_aligned+0x34>
 800794e:	1cc4      	adds	r4, r0, #3
 8007950:	f024 0403 	bic.w	r4, r4, #3
 8007954:	42a0      	cmp	r0, r4
 8007956:	d007      	beq.n	8007968 <sbrk_aligned+0x38>
 8007958:	1a21      	subs	r1, r4, r0
 800795a:	4628      	mov	r0, r5
 800795c:	f000 f9d8 	bl	8007d10 <_sbrk_r>
 8007960:	3001      	adds	r0, #1
 8007962:	d101      	bne.n	8007968 <sbrk_aligned+0x38>
 8007964:	f04f 34ff 	mov.w	r4, #4294967295
 8007968:	4620      	mov	r0, r4
 800796a:	bd70      	pop	{r4, r5, r6, pc}
 800796c:	20000508 	.word	0x20000508

08007970 <_malloc_r>:
 8007970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007974:	1ccd      	adds	r5, r1, #3
 8007976:	f025 0503 	bic.w	r5, r5, #3
 800797a:	3508      	adds	r5, #8
 800797c:	2d0c      	cmp	r5, #12
 800797e:	bf38      	it	cc
 8007980:	250c      	movcc	r5, #12
 8007982:	2d00      	cmp	r5, #0
 8007984:	4607      	mov	r7, r0
 8007986:	db01      	blt.n	800798c <_malloc_r+0x1c>
 8007988:	42a9      	cmp	r1, r5
 800798a:	d905      	bls.n	8007998 <_malloc_r+0x28>
 800798c:	230c      	movs	r3, #12
 800798e:	2600      	movs	r6, #0
 8007990:	603b      	str	r3, [r7, #0]
 8007992:	4630      	mov	r0, r6
 8007994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007998:	4e2e      	ldr	r6, [pc, #184]	; (8007a54 <_malloc_r+0xe4>)
 800799a:	f000 fa25 	bl	8007de8 <__malloc_lock>
 800799e:	6833      	ldr	r3, [r6, #0]
 80079a0:	461c      	mov	r4, r3
 80079a2:	bb34      	cbnz	r4, 80079f2 <_malloc_r+0x82>
 80079a4:	4629      	mov	r1, r5
 80079a6:	4638      	mov	r0, r7
 80079a8:	f7ff ffc2 	bl	8007930 <sbrk_aligned>
 80079ac:	1c43      	adds	r3, r0, #1
 80079ae:	4604      	mov	r4, r0
 80079b0:	d14d      	bne.n	8007a4e <_malloc_r+0xde>
 80079b2:	6834      	ldr	r4, [r6, #0]
 80079b4:	4626      	mov	r6, r4
 80079b6:	2e00      	cmp	r6, #0
 80079b8:	d140      	bne.n	8007a3c <_malloc_r+0xcc>
 80079ba:	6823      	ldr	r3, [r4, #0]
 80079bc:	4631      	mov	r1, r6
 80079be:	4638      	mov	r0, r7
 80079c0:	eb04 0803 	add.w	r8, r4, r3
 80079c4:	f000 f9a4 	bl	8007d10 <_sbrk_r>
 80079c8:	4580      	cmp	r8, r0
 80079ca:	d13a      	bne.n	8007a42 <_malloc_r+0xd2>
 80079cc:	6821      	ldr	r1, [r4, #0]
 80079ce:	3503      	adds	r5, #3
 80079d0:	1a6d      	subs	r5, r5, r1
 80079d2:	f025 0503 	bic.w	r5, r5, #3
 80079d6:	3508      	adds	r5, #8
 80079d8:	2d0c      	cmp	r5, #12
 80079da:	bf38      	it	cc
 80079dc:	250c      	movcc	r5, #12
 80079de:	4638      	mov	r0, r7
 80079e0:	4629      	mov	r1, r5
 80079e2:	f7ff ffa5 	bl	8007930 <sbrk_aligned>
 80079e6:	3001      	adds	r0, #1
 80079e8:	d02b      	beq.n	8007a42 <_malloc_r+0xd2>
 80079ea:	6823      	ldr	r3, [r4, #0]
 80079ec:	442b      	add	r3, r5
 80079ee:	6023      	str	r3, [r4, #0]
 80079f0:	e00e      	b.n	8007a10 <_malloc_r+0xa0>
 80079f2:	6822      	ldr	r2, [r4, #0]
 80079f4:	1b52      	subs	r2, r2, r5
 80079f6:	d41e      	bmi.n	8007a36 <_malloc_r+0xc6>
 80079f8:	2a0b      	cmp	r2, #11
 80079fa:	d916      	bls.n	8007a2a <_malloc_r+0xba>
 80079fc:	1961      	adds	r1, r4, r5
 80079fe:	42a3      	cmp	r3, r4
 8007a00:	6025      	str	r5, [r4, #0]
 8007a02:	bf18      	it	ne
 8007a04:	6059      	strne	r1, [r3, #4]
 8007a06:	6863      	ldr	r3, [r4, #4]
 8007a08:	bf08      	it	eq
 8007a0a:	6031      	streq	r1, [r6, #0]
 8007a0c:	5162      	str	r2, [r4, r5]
 8007a0e:	604b      	str	r3, [r1, #4]
 8007a10:	4638      	mov	r0, r7
 8007a12:	f104 060b 	add.w	r6, r4, #11
 8007a16:	f000 f9ed 	bl	8007df4 <__malloc_unlock>
 8007a1a:	f026 0607 	bic.w	r6, r6, #7
 8007a1e:	1d23      	adds	r3, r4, #4
 8007a20:	1af2      	subs	r2, r6, r3
 8007a22:	d0b6      	beq.n	8007992 <_malloc_r+0x22>
 8007a24:	1b9b      	subs	r3, r3, r6
 8007a26:	50a3      	str	r3, [r4, r2]
 8007a28:	e7b3      	b.n	8007992 <_malloc_r+0x22>
 8007a2a:	6862      	ldr	r2, [r4, #4]
 8007a2c:	42a3      	cmp	r3, r4
 8007a2e:	bf0c      	ite	eq
 8007a30:	6032      	streq	r2, [r6, #0]
 8007a32:	605a      	strne	r2, [r3, #4]
 8007a34:	e7ec      	b.n	8007a10 <_malloc_r+0xa0>
 8007a36:	4623      	mov	r3, r4
 8007a38:	6864      	ldr	r4, [r4, #4]
 8007a3a:	e7b2      	b.n	80079a2 <_malloc_r+0x32>
 8007a3c:	4634      	mov	r4, r6
 8007a3e:	6876      	ldr	r6, [r6, #4]
 8007a40:	e7b9      	b.n	80079b6 <_malloc_r+0x46>
 8007a42:	230c      	movs	r3, #12
 8007a44:	4638      	mov	r0, r7
 8007a46:	603b      	str	r3, [r7, #0]
 8007a48:	f000 f9d4 	bl	8007df4 <__malloc_unlock>
 8007a4c:	e7a1      	b.n	8007992 <_malloc_r+0x22>
 8007a4e:	6025      	str	r5, [r4, #0]
 8007a50:	e7de      	b.n	8007a10 <_malloc_r+0xa0>
 8007a52:	bf00      	nop
 8007a54:	20000504 	.word	0x20000504

08007a58 <__ssputs_r>:
 8007a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a5c:	688e      	ldr	r6, [r1, #8]
 8007a5e:	4682      	mov	sl, r0
 8007a60:	429e      	cmp	r6, r3
 8007a62:	460c      	mov	r4, r1
 8007a64:	4690      	mov	r8, r2
 8007a66:	461f      	mov	r7, r3
 8007a68:	d838      	bhi.n	8007adc <__ssputs_r+0x84>
 8007a6a:	898a      	ldrh	r2, [r1, #12]
 8007a6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007a70:	d032      	beq.n	8007ad8 <__ssputs_r+0x80>
 8007a72:	6825      	ldr	r5, [r4, #0]
 8007a74:	6909      	ldr	r1, [r1, #16]
 8007a76:	3301      	adds	r3, #1
 8007a78:	eba5 0901 	sub.w	r9, r5, r1
 8007a7c:	6965      	ldr	r5, [r4, #20]
 8007a7e:	444b      	add	r3, r9
 8007a80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007a88:	106d      	asrs	r5, r5, #1
 8007a8a:	429d      	cmp	r5, r3
 8007a8c:	bf38      	it	cc
 8007a8e:	461d      	movcc	r5, r3
 8007a90:	0553      	lsls	r3, r2, #21
 8007a92:	d531      	bpl.n	8007af8 <__ssputs_r+0xa0>
 8007a94:	4629      	mov	r1, r5
 8007a96:	f7ff ff6b 	bl	8007970 <_malloc_r>
 8007a9a:	4606      	mov	r6, r0
 8007a9c:	b950      	cbnz	r0, 8007ab4 <__ssputs_r+0x5c>
 8007a9e:	230c      	movs	r3, #12
 8007aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8007aa4:	f8ca 3000 	str.w	r3, [sl]
 8007aa8:	89a3      	ldrh	r3, [r4, #12]
 8007aaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007aae:	81a3      	strh	r3, [r4, #12]
 8007ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ab4:	464a      	mov	r2, r9
 8007ab6:	6921      	ldr	r1, [r4, #16]
 8007ab8:	f7ff fb4e 	bl	8007158 <memcpy>
 8007abc:	89a3      	ldrh	r3, [r4, #12]
 8007abe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007ac2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ac6:	81a3      	strh	r3, [r4, #12]
 8007ac8:	6126      	str	r6, [r4, #16]
 8007aca:	444e      	add	r6, r9
 8007acc:	6026      	str	r6, [r4, #0]
 8007ace:	463e      	mov	r6, r7
 8007ad0:	6165      	str	r5, [r4, #20]
 8007ad2:	eba5 0509 	sub.w	r5, r5, r9
 8007ad6:	60a5      	str	r5, [r4, #8]
 8007ad8:	42be      	cmp	r6, r7
 8007ada:	d900      	bls.n	8007ade <__ssputs_r+0x86>
 8007adc:	463e      	mov	r6, r7
 8007ade:	4632      	mov	r2, r6
 8007ae0:	4641      	mov	r1, r8
 8007ae2:	6820      	ldr	r0, [r4, #0]
 8007ae4:	f000 f966 	bl	8007db4 <memmove>
 8007ae8:	68a3      	ldr	r3, [r4, #8]
 8007aea:	2000      	movs	r0, #0
 8007aec:	1b9b      	subs	r3, r3, r6
 8007aee:	60a3      	str	r3, [r4, #8]
 8007af0:	6823      	ldr	r3, [r4, #0]
 8007af2:	4433      	add	r3, r6
 8007af4:	6023      	str	r3, [r4, #0]
 8007af6:	e7db      	b.n	8007ab0 <__ssputs_r+0x58>
 8007af8:	462a      	mov	r2, r5
 8007afa:	f000 f981 	bl	8007e00 <_realloc_r>
 8007afe:	4606      	mov	r6, r0
 8007b00:	2800      	cmp	r0, #0
 8007b02:	d1e1      	bne.n	8007ac8 <__ssputs_r+0x70>
 8007b04:	4650      	mov	r0, sl
 8007b06:	6921      	ldr	r1, [r4, #16]
 8007b08:	f7ff feca 	bl	80078a0 <_free_r>
 8007b0c:	e7c7      	b.n	8007a9e <__ssputs_r+0x46>
	...

08007b10 <_svfiprintf_r>:
 8007b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b14:	4698      	mov	r8, r3
 8007b16:	898b      	ldrh	r3, [r1, #12]
 8007b18:	4607      	mov	r7, r0
 8007b1a:	061b      	lsls	r3, r3, #24
 8007b1c:	460d      	mov	r5, r1
 8007b1e:	4614      	mov	r4, r2
 8007b20:	b09d      	sub	sp, #116	; 0x74
 8007b22:	d50e      	bpl.n	8007b42 <_svfiprintf_r+0x32>
 8007b24:	690b      	ldr	r3, [r1, #16]
 8007b26:	b963      	cbnz	r3, 8007b42 <_svfiprintf_r+0x32>
 8007b28:	2140      	movs	r1, #64	; 0x40
 8007b2a:	f7ff ff21 	bl	8007970 <_malloc_r>
 8007b2e:	6028      	str	r0, [r5, #0]
 8007b30:	6128      	str	r0, [r5, #16]
 8007b32:	b920      	cbnz	r0, 8007b3e <_svfiprintf_r+0x2e>
 8007b34:	230c      	movs	r3, #12
 8007b36:	603b      	str	r3, [r7, #0]
 8007b38:	f04f 30ff 	mov.w	r0, #4294967295
 8007b3c:	e0d1      	b.n	8007ce2 <_svfiprintf_r+0x1d2>
 8007b3e:	2340      	movs	r3, #64	; 0x40
 8007b40:	616b      	str	r3, [r5, #20]
 8007b42:	2300      	movs	r3, #0
 8007b44:	9309      	str	r3, [sp, #36]	; 0x24
 8007b46:	2320      	movs	r3, #32
 8007b48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b4c:	2330      	movs	r3, #48	; 0x30
 8007b4e:	f04f 0901 	mov.w	r9, #1
 8007b52:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b56:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007cfc <_svfiprintf_r+0x1ec>
 8007b5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b5e:	4623      	mov	r3, r4
 8007b60:	469a      	mov	sl, r3
 8007b62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b66:	b10a      	cbz	r2, 8007b6c <_svfiprintf_r+0x5c>
 8007b68:	2a25      	cmp	r2, #37	; 0x25
 8007b6a:	d1f9      	bne.n	8007b60 <_svfiprintf_r+0x50>
 8007b6c:	ebba 0b04 	subs.w	fp, sl, r4
 8007b70:	d00b      	beq.n	8007b8a <_svfiprintf_r+0x7a>
 8007b72:	465b      	mov	r3, fp
 8007b74:	4622      	mov	r2, r4
 8007b76:	4629      	mov	r1, r5
 8007b78:	4638      	mov	r0, r7
 8007b7a:	f7ff ff6d 	bl	8007a58 <__ssputs_r>
 8007b7e:	3001      	adds	r0, #1
 8007b80:	f000 80aa 	beq.w	8007cd8 <_svfiprintf_r+0x1c8>
 8007b84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b86:	445a      	add	r2, fp
 8007b88:	9209      	str	r2, [sp, #36]	; 0x24
 8007b8a:	f89a 3000 	ldrb.w	r3, [sl]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	f000 80a2 	beq.w	8007cd8 <_svfiprintf_r+0x1c8>
 8007b94:	2300      	movs	r3, #0
 8007b96:	f04f 32ff 	mov.w	r2, #4294967295
 8007b9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b9e:	f10a 0a01 	add.w	sl, sl, #1
 8007ba2:	9304      	str	r3, [sp, #16]
 8007ba4:	9307      	str	r3, [sp, #28]
 8007ba6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007baa:	931a      	str	r3, [sp, #104]	; 0x68
 8007bac:	4654      	mov	r4, sl
 8007bae:	2205      	movs	r2, #5
 8007bb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bb4:	4851      	ldr	r0, [pc, #324]	; (8007cfc <_svfiprintf_r+0x1ec>)
 8007bb6:	f7ff fac1 	bl	800713c <memchr>
 8007bba:	9a04      	ldr	r2, [sp, #16]
 8007bbc:	b9d8      	cbnz	r0, 8007bf6 <_svfiprintf_r+0xe6>
 8007bbe:	06d0      	lsls	r0, r2, #27
 8007bc0:	bf44      	itt	mi
 8007bc2:	2320      	movmi	r3, #32
 8007bc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bc8:	0711      	lsls	r1, r2, #28
 8007bca:	bf44      	itt	mi
 8007bcc:	232b      	movmi	r3, #43	; 0x2b
 8007bce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bd2:	f89a 3000 	ldrb.w	r3, [sl]
 8007bd6:	2b2a      	cmp	r3, #42	; 0x2a
 8007bd8:	d015      	beq.n	8007c06 <_svfiprintf_r+0xf6>
 8007bda:	4654      	mov	r4, sl
 8007bdc:	2000      	movs	r0, #0
 8007bde:	f04f 0c0a 	mov.w	ip, #10
 8007be2:	9a07      	ldr	r2, [sp, #28]
 8007be4:	4621      	mov	r1, r4
 8007be6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bea:	3b30      	subs	r3, #48	; 0x30
 8007bec:	2b09      	cmp	r3, #9
 8007bee:	d94e      	bls.n	8007c8e <_svfiprintf_r+0x17e>
 8007bf0:	b1b0      	cbz	r0, 8007c20 <_svfiprintf_r+0x110>
 8007bf2:	9207      	str	r2, [sp, #28]
 8007bf4:	e014      	b.n	8007c20 <_svfiprintf_r+0x110>
 8007bf6:	eba0 0308 	sub.w	r3, r0, r8
 8007bfa:	fa09 f303 	lsl.w	r3, r9, r3
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	46a2      	mov	sl, r4
 8007c02:	9304      	str	r3, [sp, #16]
 8007c04:	e7d2      	b.n	8007bac <_svfiprintf_r+0x9c>
 8007c06:	9b03      	ldr	r3, [sp, #12]
 8007c08:	1d19      	adds	r1, r3, #4
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	9103      	str	r1, [sp, #12]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	bfbb      	ittet	lt
 8007c12:	425b      	neglt	r3, r3
 8007c14:	f042 0202 	orrlt.w	r2, r2, #2
 8007c18:	9307      	strge	r3, [sp, #28]
 8007c1a:	9307      	strlt	r3, [sp, #28]
 8007c1c:	bfb8      	it	lt
 8007c1e:	9204      	strlt	r2, [sp, #16]
 8007c20:	7823      	ldrb	r3, [r4, #0]
 8007c22:	2b2e      	cmp	r3, #46	; 0x2e
 8007c24:	d10c      	bne.n	8007c40 <_svfiprintf_r+0x130>
 8007c26:	7863      	ldrb	r3, [r4, #1]
 8007c28:	2b2a      	cmp	r3, #42	; 0x2a
 8007c2a:	d135      	bne.n	8007c98 <_svfiprintf_r+0x188>
 8007c2c:	9b03      	ldr	r3, [sp, #12]
 8007c2e:	3402      	adds	r4, #2
 8007c30:	1d1a      	adds	r2, r3, #4
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	9203      	str	r2, [sp, #12]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	bfb8      	it	lt
 8007c3a:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c3e:	9305      	str	r3, [sp, #20]
 8007c40:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8007d00 <_svfiprintf_r+0x1f0>
 8007c44:	2203      	movs	r2, #3
 8007c46:	4650      	mov	r0, sl
 8007c48:	7821      	ldrb	r1, [r4, #0]
 8007c4a:	f7ff fa77 	bl	800713c <memchr>
 8007c4e:	b140      	cbz	r0, 8007c62 <_svfiprintf_r+0x152>
 8007c50:	2340      	movs	r3, #64	; 0x40
 8007c52:	eba0 000a 	sub.w	r0, r0, sl
 8007c56:	fa03 f000 	lsl.w	r0, r3, r0
 8007c5a:	9b04      	ldr	r3, [sp, #16]
 8007c5c:	3401      	adds	r4, #1
 8007c5e:	4303      	orrs	r3, r0
 8007c60:	9304      	str	r3, [sp, #16]
 8007c62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c66:	2206      	movs	r2, #6
 8007c68:	4826      	ldr	r0, [pc, #152]	; (8007d04 <_svfiprintf_r+0x1f4>)
 8007c6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c6e:	f7ff fa65 	bl	800713c <memchr>
 8007c72:	2800      	cmp	r0, #0
 8007c74:	d038      	beq.n	8007ce8 <_svfiprintf_r+0x1d8>
 8007c76:	4b24      	ldr	r3, [pc, #144]	; (8007d08 <_svfiprintf_r+0x1f8>)
 8007c78:	bb1b      	cbnz	r3, 8007cc2 <_svfiprintf_r+0x1b2>
 8007c7a:	9b03      	ldr	r3, [sp, #12]
 8007c7c:	3307      	adds	r3, #7
 8007c7e:	f023 0307 	bic.w	r3, r3, #7
 8007c82:	3308      	adds	r3, #8
 8007c84:	9303      	str	r3, [sp, #12]
 8007c86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c88:	4433      	add	r3, r6
 8007c8a:	9309      	str	r3, [sp, #36]	; 0x24
 8007c8c:	e767      	b.n	8007b5e <_svfiprintf_r+0x4e>
 8007c8e:	460c      	mov	r4, r1
 8007c90:	2001      	movs	r0, #1
 8007c92:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c96:	e7a5      	b.n	8007be4 <_svfiprintf_r+0xd4>
 8007c98:	2300      	movs	r3, #0
 8007c9a:	f04f 0c0a 	mov.w	ip, #10
 8007c9e:	4619      	mov	r1, r3
 8007ca0:	3401      	adds	r4, #1
 8007ca2:	9305      	str	r3, [sp, #20]
 8007ca4:	4620      	mov	r0, r4
 8007ca6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007caa:	3a30      	subs	r2, #48	; 0x30
 8007cac:	2a09      	cmp	r2, #9
 8007cae:	d903      	bls.n	8007cb8 <_svfiprintf_r+0x1a8>
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d0c5      	beq.n	8007c40 <_svfiprintf_r+0x130>
 8007cb4:	9105      	str	r1, [sp, #20]
 8007cb6:	e7c3      	b.n	8007c40 <_svfiprintf_r+0x130>
 8007cb8:	4604      	mov	r4, r0
 8007cba:	2301      	movs	r3, #1
 8007cbc:	fb0c 2101 	mla	r1, ip, r1, r2
 8007cc0:	e7f0      	b.n	8007ca4 <_svfiprintf_r+0x194>
 8007cc2:	ab03      	add	r3, sp, #12
 8007cc4:	9300      	str	r3, [sp, #0]
 8007cc6:	462a      	mov	r2, r5
 8007cc8:	4638      	mov	r0, r7
 8007cca:	4b10      	ldr	r3, [pc, #64]	; (8007d0c <_svfiprintf_r+0x1fc>)
 8007ccc:	a904      	add	r1, sp, #16
 8007cce:	f7fd ffb9 	bl	8005c44 <_printf_float>
 8007cd2:	1c42      	adds	r2, r0, #1
 8007cd4:	4606      	mov	r6, r0
 8007cd6:	d1d6      	bne.n	8007c86 <_svfiprintf_r+0x176>
 8007cd8:	89ab      	ldrh	r3, [r5, #12]
 8007cda:	065b      	lsls	r3, r3, #25
 8007cdc:	f53f af2c 	bmi.w	8007b38 <_svfiprintf_r+0x28>
 8007ce0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ce2:	b01d      	add	sp, #116	; 0x74
 8007ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ce8:	ab03      	add	r3, sp, #12
 8007cea:	9300      	str	r3, [sp, #0]
 8007cec:	462a      	mov	r2, r5
 8007cee:	4638      	mov	r0, r7
 8007cf0:	4b06      	ldr	r3, [pc, #24]	; (8007d0c <_svfiprintf_r+0x1fc>)
 8007cf2:	a904      	add	r1, sp, #16
 8007cf4:	f7fe fa42 	bl	800617c <_printf_i>
 8007cf8:	e7eb      	b.n	8007cd2 <_svfiprintf_r+0x1c2>
 8007cfa:	bf00      	nop
 8007cfc:	08008bcc 	.word	0x08008bcc
 8007d00:	08008bd2 	.word	0x08008bd2
 8007d04:	08008bd6 	.word	0x08008bd6
 8007d08:	08005c45 	.word	0x08005c45
 8007d0c:	08007a59 	.word	0x08007a59

08007d10 <_sbrk_r>:
 8007d10:	b538      	push	{r3, r4, r5, lr}
 8007d12:	2300      	movs	r3, #0
 8007d14:	4d05      	ldr	r5, [pc, #20]	; (8007d2c <_sbrk_r+0x1c>)
 8007d16:	4604      	mov	r4, r0
 8007d18:	4608      	mov	r0, r1
 8007d1a:	602b      	str	r3, [r5, #0]
 8007d1c:	f7fb fa3a 	bl	8003194 <_sbrk>
 8007d20:	1c43      	adds	r3, r0, #1
 8007d22:	d102      	bne.n	8007d2a <_sbrk_r+0x1a>
 8007d24:	682b      	ldr	r3, [r5, #0]
 8007d26:	b103      	cbz	r3, 8007d2a <_sbrk_r+0x1a>
 8007d28:	6023      	str	r3, [r4, #0]
 8007d2a:	bd38      	pop	{r3, r4, r5, pc}
 8007d2c:	2000050c 	.word	0x2000050c

08007d30 <__assert_func>:
 8007d30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007d32:	4614      	mov	r4, r2
 8007d34:	461a      	mov	r2, r3
 8007d36:	4b09      	ldr	r3, [pc, #36]	; (8007d5c <__assert_func+0x2c>)
 8007d38:	4605      	mov	r5, r0
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	68d8      	ldr	r0, [r3, #12]
 8007d3e:	b14c      	cbz	r4, 8007d54 <__assert_func+0x24>
 8007d40:	4b07      	ldr	r3, [pc, #28]	; (8007d60 <__assert_func+0x30>)
 8007d42:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007d46:	9100      	str	r1, [sp, #0]
 8007d48:	462b      	mov	r3, r5
 8007d4a:	4906      	ldr	r1, [pc, #24]	; (8007d64 <__assert_func+0x34>)
 8007d4c:	f000 f80e 	bl	8007d6c <fiprintf>
 8007d50:	f000 faaa 	bl	80082a8 <abort>
 8007d54:	4b04      	ldr	r3, [pc, #16]	; (8007d68 <__assert_func+0x38>)
 8007d56:	461c      	mov	r4, r3
 8007d58:	e7f3      	b.n	8007d42 <__assert_func+0x12>
 8007d5a:	bf00      	nop
 8007d5c:	2000000c 	.word	0x2000000c
 8007d60:	08008bdd 	.word	0x08008bdd
 8007d64:	08008bea 	.word	0x08008bea
 8007d68:	08008c18 	.word	0x08008c18

08007d6c <fiprintf>:
 8007d6c:	b40e      	push	{r1, r2, r3}
 8007d6e:	b503      	push	{r0, r1, lr}
 8007d70:	4601      	mov	r1, r0
 8007d72:	ab03      	add	r3, sp, #12
 8007d74:	4805      	ldr	r0, [pc, #20]	; (8007d8c <fiprintf+0x20>)
 8007d76:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d7a:	6800      	ldr	r0, [r0, #0]
 8007d7c:	9301      	str	r3, [sp, #4]
 8007d7e:	f000 f895 	bl	8007eac <_vfiprintf_r>
 8007d82:	b002      	add	sp, #8
 8007d84:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d88:	b003      	add	sp, #12
 8007d8a:	4770      	bx	lr
 8007d8c:	2000000c 	.word	0x2000000c

08007d90 <__ascii_mbtowc>:
 8007d90:	b082      	sub	sp, #8
 8007d92:	b901      	cbnz	r1, 8007d96 <__ascii_mbtowc+0x6>
 8007d94:	a901      	add	r1, sp, #4
 8007d96:	b142      	cbz	r2, 8007daa <__ascii_mbtowc+0x1a>
 8007d98:	b14b      	cbz	r3, 8007dae <__ascii_mbtowc+0x1e>
 8007d9a:	7813      	ldrb	r3, [r2, #0]
 8007d9c:	600b      	str	r3, [r1, #0]
 8007d9e:	7812      	ldrb	r2, [r2, #0]
 8007da0:	1e10      	subs	r0, r2, #0
 8007da2:	bf18      	it	ne
 8007da4:	2001      	movne	r0, #1
 8007da6:	b002      	add	sp, #8
 8007da8:	4770      	bx	lr
 8007daa:	4610      	mov	r0, r2
 8007dac:	e7fb      	b.n	8007da6 <__ascii_mbtowc+0x16>
 8007dae:	f06f 0001 	mvn.w	r0, #1
 8007db2:	e7f8      	b.n	8007da6 <__ascii_mbtowc+0x16>

08007db4 <memmove>:
 8007db4:	4288      	cmp	r0, r1
 8007db6:	b510      	push	{r4, lr}
 8007db8:	eb01 0402 	add.w	r4, r1, r2
 8007dbc:	d902      	bls.n	8007dc4 <memmove+0x10>
 8007dbe:	4284      	cmp	r4, r0
 8007dc0:	4623      	mov	r3, r4
 8007dc2:	d807      	bhi.n	8007dd4 <memmove+0x20>
 8007dc4:	1e43      	subs	r3, r0, #1
 8007dc6:	42a1      	cmp	r1, r4
 8007dc8:	d008      	beq.n	8007ddc <memmove+0x28>
 8007dca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007dce:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007dd2:	e7f8      	b.n	8007dc6 <memmove+0x12>
 8007dd4:	4601      	mov	r1, r0
 8007dd6:	4402      	add	r2, r0
 8007dd8:	428a      	cmp	r2, r1
 8007dda:	d100      	bne.n	8007dde <memmove+0x2a>
 8007ddc:	bd10      	pop	{r4, pc}
 8007dde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007de2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007de6:	e7f7      	b.n	8007dd8 <memmove+0x24>

08007de8 <__malloc_lock>:
 8007de8:	4801      	ldr	r0, [pc, #4]	; (8007df0 <__malloc_lock+0x8>)
 8007dea:	f000 bc19 	b.w	8008620 <__retarget_lock_acquire_recursive>
 8007dee:	bf00      	nop
 8007df0:	20000510 	.word	0x20000510

08007df4 <__malloc_unlock>:
 8007df4:	4801      	ldr	r0, [pc, #4]	; (8007dfc <__malloc_unlock+0x8>)
 8007df6:	f000 bc14 	b.w	8008622 <__retarget_lock_release_recursive>
 8007dfa:	bf00      	nop
 8007dfc:	20000510 	.word	0x20000510

08007e00 <_realloc_r>:
 8007e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e04:	4680      	mov	r8, r0
 8007e06:	4614      	mov	r4, r2
 8007e08:	460e      	mov	r6, r1
 8007e0a:	b921      	cbnz	r1, 8007e16 <_realloc_r+0x16>
 8007e0c:	4611      	mov	r1, r2
 8007e0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e12:	f7ff bdad 	b.w	8007970 <_malloc_r>
 8007e16:	b92a      	cbnz	r2, 8007e24 <_realloc_r+0x24>
 8007e18:	f7ff fd42 	bl	80078a0 <_free_r>
 8007e1c:	4625      	mov	r5, r4
 8007e1e:	4628      	mov	r0, r5
 8007e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e24:	f000 fc64 	bl	80086f0 <_malloc_usable_size_r>
 8007e28:	4284      	cmp	r4, r0
 8007e2a:	4607      	mov	r7, r0
 8007e2c:	d802      	bhi.n	8007e34 <_realloc_r+0x34>
 8007e2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007e32:	d812      	bhi.n	8007e5a <_realloc_r+0x5a>
 8007e34:	4621      	mov	r1, r4
 8007e36:	4640      	mov	r0, r8
 8007e38:	f7ff fd9a 	bl	8007970 <_malloc_r>
 8007e3c:	4605      	mov	r5, r0
 8007e3e:	2800      	cmp	r0, #0
 8007e40:	d0ed      	beq.n	8007e1e <_realloc_r+0x1e>
 8007e42:	42bc      	cmp	r4, r7
 8007e44:	4622      	mov	r2, r4
 8007e46:	4631      	mov	r1, r6
 8007e48:	bf28      	it	cs
 8007e4a:	463a      	movcs	r2, r7
 8007e4c:	f7ff f984 	bl	8007158 <memcpy>
 8007e50:	4631      	mov	r1, r6
 8007e52:	4640      	mov	r0, r8
 8007e54:	f7ff fd24 	bl	80078a0 <_free_r>
 8007e58:	e7e1      	b.n	8007e1e <_realloc_r+0x1e>
 8007e5a:	4635      	mov	r5, r6
 8007e5c:	e7df      	b.n	8007e1e <_realloc_r+0x1e>

08007e5e <__sfputc_r>:
 8007e5e:	6893      	ldr	r3, [r2, #8]
 8007e60:	b410      	push	{r4}
 8007e62:	3b01      	subs	r3, #1
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	6093      	str	r3, [r2, #8]
 8007e68:	da07      	bge.n	8007e7a <__sfputc_r+0x1c>
 8007e6a:	6994      	ldr	r4, [r2, #24]
 8007e6c:	42a3      	cmp	r3, r4
 8007e6e:	db01      	blt.n	8007e74 <__sfputc_r+0x16>
 8007e70:	290a      	cmp	r1, #10
 8007e72:	d102      	bne.n	8007e7a <__sfputc_r+0x1c>
 8007e74:	bc10      	pop	{r4}
 8007e76:	f000 b949 	b.w	800810c <__swbuf_r>
 8007e7a:	6813      	ldr	r3, [r2, #0]
 8007e7c:	1c58      	adds	r0, r3, #1
 8007e7e:	6010      	str	r0, [r2, #0]
 8007e80:	7019      	strb	r1, [r3, #0]
 8007e82:	4608      	mov	r0, r1
 8007e84:	bc10      	pop	{r4}
 8007e86:	4770      	bx	lr

08007e88 <__sfputs_r>:
 8007e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e8a:	4606      	mov	r6, r0
 8007e8c:	460f      	mov	r7, r1
 8007e8e:	4614      	mov	r4, r2
 8007e90:	18d5      	adds	r5, r2, r3
 8007e92:	42ac      	cmp	r4, r5
 8007e94:	d101      	bne.n	8007e9a <__sfputs_r+0x12>
 8007e96:	2000      	movs	r0, #0
 8007e98:	e007      	b.n	8007eaa <__sfputs_r+0x22>
 8007e9a:	463a      	mov	r2, r7
 8007e9c:	4630      	mov	r0, r6
 8007e9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ea2:	f7ff ffdc 	bl	8007e5e <__sfputc_r>
 8007ea6:	1c43      	adds	r3, r0, #1
 8007ea8:	d1f3      	bne.n	8007e92 <__sfputs_r+0xa>
 8007eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007eac <_vfiprintf_r>:
 8007eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eb0:	460d      	mov	r5, r1
 8007eb2:	4614      	mov	r4, r2
 8007eb4:	4698      	mov	r8, r3
 8007eb6:	4606      	mov	r6, r0
 8007eb8:	b09d      	sub	sp, #116	; 0x74
 8007eba:	b118      	cbz	r0, 8007ec4 <_vfiprintf_r+0x18>
 8007ebc:	6983      	ldr	r3, [r0, #24]
 8007ebe:	b90b      	cbnz	r3, 8007ec4 <_vfiprintf_r+0x18>
 8007ec0:	f000 fb10 	bl	80084e4 <__sinit>
 8007ec4:	4b89      	ldr	r3, [pc, #548]	; (80080ec <_vfiprintf_r+0x240>)
 8007ec6:	429d      	cmp	r5, r3
 8007ec8:	d11b      	bne.n	8007f02 <_vfiprintf_r+0x56>
 8007eca:	6875      	ldr	r5, [r6, #4]
 8007ecc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ece:	07d9      	lsls	r1, r3, #31
 8007ed0:	d405      	bmi.n	8007ede <_vfiprintf_r+0x32>
 8007ed2:	89ab      	ldrh	r3, [r5, #12]
 8007ed4:	059a      	lsls	r2, r3, #22
 8007ed6:	d402      	bmi.n	8007ede <_vfiprintf_r+0x32>
 8007ed8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007eda:	f000 fba1 	bl	8008620 <__retarget_lock_acquire_recursive>
 8007ede:	89ab      	ldrh	r3, [r5, #12]
 8007ee0:	071b      	lsls	r3, r3, #28
 8007ee2:	d501      	bpl.n	8007ee8 <_vfiprintf_r+0x3c>
 8007ee4:	692b      	ldr	r3, [r5, #16]
 8007ee6:	b9eb      	cbnz	r3, 8007f24 <_vfiprintf_r+0x78>
 8007ee8:	4629      	mov	r1, r5
 8007eea:	4630      	mov	r0, r6
 8007eec:	f000 f96e 	bl	80081cc <__swsetup_r>
 8007ef0:	b1c0      	cbz	r0, 8007f24 <_vfiprintf_r+0x78>
 8007ef2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ef4:	07dc      	lsls	r4, r3, #31
 8007ef6:	d50e      	bpl.n	8007f16 <_vfiprintf_r+0x6a>
 8007ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8007efc:	b01d      	add	sp, #116	; 0x74
 8007efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f02:	4b7b      	ldr	r3, [pc, #492]	; (80080f0 <_vfiprintf_r+0x244>)
 8007f04:	429d      	cmp	r5, r3
 8007f06:	d101      	bne.n	8007f0c <_vfiprintf_r+0x60>
 8007f08:	68b5      	ldr	r5, [r6, #8]
 8007f0a:	e7df      	b.n	8007ecc <_vfiprintf_r+0x20>
 8007f0c:	4b79      	ldr	r3, [pc, #484]	; (80080f4 <_vfiprintf_r+0x248>)
 8007f0e:	429d      	cmp	r5, r3
 8007f10:	bf08      	it	eq
 8007f12:	68f5      	ldreq	r5, [r6, #12]
 8007f14:	e7da      	b.n	8007ecc <_vfiprintf_r+0x20>
 8007f16:	89ab      	ldrh	r3, [r5, #12]
 8007f18:	0598      	lsls	r0, r3, #22
 8007f1a:	d4ed      	bmi.n	8007ef8 <_vfiprintf_r+0x4c>
 8007f1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f1e:	f000 fb80 	bl	8008622 <__retarget_lock_release_recursive>
 8007f22:	e7e9      	b.n	8007ef8 <_vfiprintf_r+0x4c>
 8007f24:	2300      	movs	r3, #0
 8007f26:	9309      	str	r3, [sp, #36]	; 0x24
 8007f28:	2320      	movs	r3, #32
 8007f2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f2e:	2330      	movs	r3, #48	; 0x30
 8007f30:	f04f 0901 	mov.w	r9, #1
 8007f34:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f38:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80080f8 <_vfiprintf_r+0x24c>
 8007f3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f40:	4623      	mov	r3, r4
 8007f42:	469a      	mov	sl, r3
 8007f44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f48:	b10a      	cbz	r2, 8007f4e <_vfiprintf_r+0xa2>
 8007f4a:	2a25      	cmp	r2, #37	; 0x25
 8007f4c:	d1f9      	bne.n	8007f42 <_vfiprintf_r+0x96>
 8007f4e:	ebba 0b04 	subs.w	fp, sl, r4
 8007f52:	d00b      	beq.n	8007f6c <_vfiprintf_r+0xc0>
 8007f54:	465b      	mov	r3, fp
 8007f56:	4622      	mov	r2, r4
 8007f58:	4629      	mov	r1, r5
 8007f5a:	4630      	mov	r0, r6
 8007f5c:	f7ff ff94 	bl	8007e88 <__sfputs_r>
 8007f60:	3001      	adds	r0, #1
 8007f62:	f000 80aa 	beq.w	80080ba <_vfiprintf_r+0x20e>
 8007f66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f68:	445a      	add	r2, fp
 8007f6a:	9209      	str	r2, [sp, #36]	; 0x24
 8007f6c:	f89a 3000 	ldrb.w	r3, [sl]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	f000 80a2 	beq.w	80080ba <_vfiprintf_r+0x20e>
 8007f76:	2300      	movs	r3, #0
 8007f78:	f04f 32ff 	mov.w	r2, #4294967295
 8007f7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f80:	f10a 0a01 	add.w	sl, sl, #1
 8007f84:	9304      	str	r3, [sp, #16]
 8007f86:	9307      	str	r3, [sp, #28]
 8007f88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f8c:	931a      	str	r3, [sp, #104]	; 0x68
 8007f8e:	4654      	mov	r4, sl
 8007f90:	2205      	movs	r2, #5
 8007f92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f96:	4858      	ldr	r0, [pc, #352]	; (80080f8 <_vfiprintf_r+0x24c>)
 8007f98:	f7ff f8d0 	bl	800713c <memchr>
 8007f9c:	9a04      	ldr	r2, [sp, #16]
 8007f9e:	b9d8      	cbnz	r0, 8007fd8 <_vfiprintf_r+0x12c>
 8007fa0:	06d1      	lsls	r1, r2, #27
 8007fa2:	bf44      	itt	mi
 8007fa4:	2320      	movmi	r3, #32
 8007fa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007faa:	0713      	lsls	r3, r2, #28
 8007fac:	bf44      	itt	mi
 8007fae:	232b      	movmi	r3, #43	; 0x2b
 8007fb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fb4:	f89a 3000 	ldrb.w	r3, [sl]
 8007fb8:	2b2a      	cmp	r3, #42	; 0x2a
 8007fba:	d015      	beq.n	8007fe8 <_vfiprintf_r+0x13c>
 8007fbc:	4654      	mov	r4, sl
 8007fbe:	2000      	movs	r0, #0
 8007fc0:	f04f 0c0a 	mov.w	ip, #10
 8007fc4:	9a07      	ldr	r2, [sp, #28]
 8007fc6:	4621      	mov	r1, r4
 8007fc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007fcc:	3b30      	subs	r3, #48	; 0x30
 8007fce:	2b09      	cmp	r3, #9
 8007fd0:	d94e      	bls.n	8008070 <_vfiprintf_r+0x1c4>
 8007fd2:	b1b0      	cbz	r0, 8008002 <_vfiprintf_r+0x156>
 8007fd4:	9207      	str	r2, [sp, #28]
 8007fd6:	e014      	b.n	8008002 <_vfiprintf_r+0x156>
 8007fd8:	eba0 0308 	sub.w	r3, r0, r8
 8007fdc:	fa09 f303 	lsl.w	r3, r9, r3
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	46a2      	mov	sl, r4
 8007fe4:	9304      	str	r3, [sp, #16]
 8007fe6:	e7d2      	b.n	8007f8e <_vfiprintf_r+0xe2>
 8007fe8:	9b03      	ldr	r3, [sp, #12]
 8007fea:	1d19      	adds	r1, r3, #4
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	9103      	str	r1, [sp, #12]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	bfbb      	ittet	lt
 8007ff4:	425b      	neglt	r3, r3
 8007ff6:	f042 0202 	orrlt.w	r2, r2, #2
 8007ffa:	9307      	strge	r3, [sp, #28]
 8007ffc:	9307      	strlt	r3, [sp, #28]
 8007ffe:	bfb8      	it	lt
 8008000:	9204      	strlt	r2, [sp, #16]
 8008002:	7823      	ldrb	r3, [r4, #0]
 8008004:	2b2e      	cmp	r3, #46	; 0x2e
 8008006:	d10c      	bne.n	8008022 <_vfiprintf_r+0x176>
 8008008:	7863      	ldrb	r3, [r4, #1]
 800800a:	2b2a      	cmp	r3, #42	; 0x2a
 800800c:	d135      	bne.n	800807a <_vfiprintf_r+0x1ce>
 800800e:	9b03      	ldr	r3, [sp, #12]
 8008010:	3402      	adds	r4, #2
 8008012:	1d1a      	adds	r2, r3, #4
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	9203      	str	r2, [sp, #12]
 8008018:	2b00      	cmp	r3, #0
 800801a:	bfb8      	it	lt
 800801c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008020:	9305      	str	r3, [sp, #20]
 8008022:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80080fc <_vfiprintf_r+0x250>
 8008026:	2203      	movs	r2, #3
 8008028:	4650      	mov	r0, sl
 800802a:	7821      	ldrb	r1, [r4, #0]
 800802c:	f7ff f886 	bl	800713c <memchr>
 8008030:	b140      	cbz	r0, 8008044 <_vfiprintf_r+0x198>
 8008032:	2340      	movs	r3, #64	; 0x40
 8008034:	eba0 000a 	sub.w	r0, r0, sl
 8008038:	fa03 f000 	lsl.w	r0, r3, r0
 800803c:	9b04      	ldr	r3, [sp, #16]
 800803e:	3401      	adds	r4, #1
 8008040:	4303      	orrs	r3, r0
 8008042:	9304      	str	r3, [sp, #16]
 8008044:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008048:	2206      	movs	r2, #6
 800804a:	482d      	ldr	r0, [pc, #180]	; (8008100 <_vfiprintf_r+0x254>)
 800804c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008050:	f7ff f874 	bl	800713c <memchr>
 8008054:	2800      	cmp	r0, #0
 8008056:	d03f      	beq.n	80080d8 <_vfiprintf_r+0x22c>
 8008058:	4b2a      	ldr	r3, [pc, #168]	; (8008104 <_vfiprintf_r+0x258>)
 800805a:	bb1b      	cbnz	r3, 80080a4 <_vfiprintf_r+0x1f8>
 800805c:	9b03      	ldr	r3, [sp, #12]
 800805e:	3307      	adds	r3, #7
 8008060:	f023 0307 	bic.w	r3, r3, #7
 8008064:	3308      	adds	r3, #8
 8008066:	9303      	str	r3, [sp, #12]
 8008068:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800806a:	443b      	add	r3, r7
 800806c:	9309      	str	r3, [sp, #36]	; 0x24
 800806e:	e767      	b.n	8007f40 <_vfiprintf_r+0x94>
 8008070:	460c      	mov	r4, r1
 8008072:	2001      	movs	r0, #1
 8008074:	fb0c 3202 	mla	r2, ip, r2, r3
 8008078:	e7a5      	b.n	8007fc6 <_vfiprintf_r+0x11a>
 800807a:	2300      	movs	r3, #0
 800807c:	f04f 0c0a 	mov.w	ip, #10
 8008080:	4619      	mov	r1, r3
 8008082:	3401      	adds	r4, #1
 8008084:	9305      	str	r3, [sp, #20]
 8008086:	4620      	mov	r0, r4
 8008088:	f810 2b01 	ldrb.w	r2, [r0], #1
 800808c:	3a30      	subs	r2, #48	; 0x30
 800808e:	2a09      	cmp	r2, #9
 8008090:	d903      	bls.n	800809a <_vfiprintf_r+0x1ee>
 8008092:	2b00      	cmp	r3, #0
 8008094:	d0c5      	beq.n	8008022 <_vfiprintf_r+0x176>
 8008096:	9105      	str	r1, [sp, #20]
 8008098:	e7c3      	b.n	8008022 <_vfiprintf_r+0x176>
 800809a:	4604      	mov	r4, r0
 800809c:	2301      	movs	r3, #1
 800809e:	fb0c 2101 	mla	r1, ip, r1, r2
 80080a2:	e7f0      	b.n	8008086 <_vfiprintf_r+0x1da>
 80080a4:	ab03      	add	r3, sp, #12
 80080a6:	9300      	str	r3, [sp, #0]
 80080a8:	462a      	mov	r2, r5
 80080aa:	4630      	mov	r0, r6
 80080ac:	4b16      	ldr	r3, [pc, #88]	; (8008108 <_vfiprintf_r+0x25c>)
 80080ae:	a904      	add	r1, sp, #16
 80080b0:	f7fd fdc8 	bl	8005c44 <_printf_float>
 80080b4:	4607      	mov	r7, r0
 80080b6:	1c78      	adds	r0, r7, #1
 80080b8:	d1d6      	bne.n	8008068 <_vfiprintf_r+0x1bc>
 80080ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80080bc:	07d9      	lsls	r1, r3, #31
 80080be:	d405      	bmi.n	80080cc <_vfiprintf_r+0x220>
 80080c0:	89ab      	ldrh	r3, [r5, #12]
 80080c2:	059a      	lsls	r2, r3, #22
 80080c4:	d402      	bmi.n	80080cc <_vfiprintf_r+0x220>
 80080c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80080c8:	f000 faab 	bl	8008622 <__retarget_lock_release_recursive>
 80080cc:	89ab      	ldrh	r3, [r5, #12]
 80080ce:	065b      	lsls	r3, r3, #25
 80080d0:	f53f af12 	bmi.w	8007ef8 <_vfiprintf_r+0x4c>
 80080d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80080d6:	e711      	b.n	8007efc <_vfiprintf_r+0x50>
 80080d8:	ab03      	add	r3, sp, #12
 80080da:	9300      	str	r3, [sp, #0]
 80080dc:	462a      	mov	r2, r5
 80080de:	4630      	mov	r0, r6
 80080e0:	4b09      	ldr	r3, [pc, #36]	; (8008108 <_vfiprintf_r+0x25c>)
 80080e2:	a904      	add	r1, sp, #16
 80080e4:	f7fe f84a 	bl	800617c <_printf_i>
 80080e8:	e7e4      	b.n	80080b4 <_vfiprintf_r+0x208>
 80080ea:	bf00      	nop
 80080ec:	08008d44 	.word	0x08008d44
 80080f0:	08008d64 	.word	0x08008d64
 80080f4:	08008d24 	.word	0x08008d24
 80080f8:	08008bcc 	.word	0x08008bcc
 80080fc:	08008bd2 	.word	0x08008bd2
 8008100:	08008bd6 	.word	0x08008bd6
 8008104:	08005c45 	.word	0x08005c45
 8008108:	08007e89 	.word	0x08007e89

0800810c <__swbuf_r>:
 800810c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800810e:	460e      	mov	r6, r1
 8008110:	4614      	mov	r4, r2
 8008112:	4605      	mov	r5, r0
 8008114:	b118      	cbz	r0, 800811e <__swbuf_r+0x12>
 8008116:	6983      	ldr	r3, [r0, #24]
 8008118:	b90b      	cbnz	r3, 800811e <__swbuf_r+0x12>
 800811a:	f000 f9e3 	bl	80084e4 <__sinit>
 800811e:	4b21      	ldr	r3, [pc, #132]	; (80081a4 <__swbuf_r+0x98>)
 8008120:	429c      	cmp	r4, r3
 8008122:	d12b      	bne.n	800817c <__swbuf_r+0x70>
 8008124:	686c      	ldr	r4, [r5, #4]
 8008126:	69a3      	ldr	r3, [r4, #24]
 8008128:	60a3      	str	r3, [r4, #8]
 800812a:	89a3      	ldrh	r3, [r4, #12]
 800812c:	071a      	lsls	r2, r3, #28
 800812e:	d52f      	bpl.n	8008190 <__swbuf_r+0x84>
 8008130:	6923      	ldr	r3, [r4, #16]
 8008132:	b36b      	cbz	r3, 8008190 <__swbuf_r+0x84>
 8008134:	6923      	ldr	r3, [r4, #16]
 8008136:	6820      	ldr	r0, [r4, #0]
 8008138:	b2f6      	uxtb	r6, r6
 800813a:	1ac0      	subs	r0, r0, r3
 800813c:	6963      	ldr	r3, [r4, #20]
 800813e:	4637      	mov	r7, r6
 8008140:	4283      	cmp	r3, r0
 8008142:	dc04      	bgt.n	800814e <__swbuf_r+0x42>
 8008144:	4621      	mov	r1, r4
 8008146:	4628      	mov	r0, r5
 8008148:	f000 f938 	bl	80083bc <_fflush_r>
 800814c:	bb30      	cbnz	r0, 800819c <__swbuf_r+0x90>
 800814e:	68a3      	ldr	r3, [r4, #8]
 8008150:	3001      	adds	r0, #1
 8008152:	3b01      	subs	r3, #1
 8008154:	60a3      	str	r3, [r4, #8]
 8008156:	6823      	ldr	r3, [r4, #0]
 8008158:	1c5a      	adds	r2, r3, #1
 800815a:	6022      	str	r2, [r4, #0]
 800815c:	701e      	strb	r6, [r3, #0]
 800815e:	6963      	ldr	r3, [r4, #20]
 8008160:	4283      	cmp	r3, r0
 8008162:	d004      	beq.n	800816e <__swbuf_r+0x62>
 8008164:	89a3      	ldrh	r3, [r4, #12]
 8008166:	07db      	lsls	r3, r3, #31
 8008168:	d506      	bpl.n	8008178 <__swbuf_r+0x6c>
 800816a:	2e0a      	cmp	r6, #10
 800816c:	d104      	bne.n	8008178 <__swbuf_r+0x6c>
 800816e:	4621      	mov	r1, r4
 8008170:	4628      	mov	r0, r5
 8008172:	f000 f923 	bl	80083bc <_fflush_r>
 8008176:	b988      	cbnz	r0, 800819c <__swbuf_r+0x90>
 8008178:	4638      	mov	r0, r7
 800817a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800817c:	4b0a      	ldr	r3, [pc, #40]	; (80081a8 <__swbuf_r+0x9c>)
 800817e:	429c      	cmp	r4, r3
 8008180:	d101      	bne.n	8008186 <__swbuf_r+0x7a>
 8008182:	68ac      	ldr	r4, [r5, #8]
 8008184:	e7cf      	b.n	8008126 <__swbuf_r+0x1a>
 8008186:	4b09      	ldr	r3, [pc, #36]	; (80081ac <__swbuf_r+0xa0>)
 8008188:	429c      	cmp	r4, r3
 800818a:	bf08      	it	eq
 800818c:	68ec      	ldreq	r4, [r5, #12]
 800818e:	e7ca      	b.n	8008126 <__swbuf_r+0x1a>
 8008190:	4621      	mov	r1, r4
 8008192:	4628      	mov	r0, r5
 8008194:	f000 f81a 	bl	80081cc <__swsetup_r>
 8008198:	2800      	cmp	r0, #0
 800819a:	d0cb      	beq.n	8008134 <__swbuf_r+0x28>
 800819c:	f04f 37ff 	mov.w	r7, #4294967295
 80081a0:	e7ea      	b.n	8008178 <__swbuf_r+0x6c>
 80081a2:	bf00      	nop
 80081a4:	08008d44 	.word	0x08008d44
 80081a8:	08008d64 	.word	0x08008d64
 80081ac:	08008d24 	.word	0x08008d24

080081b0 <__ascii_wctomb>:
 80081b0:	4603      	mov	r3, r0
 80081b2:	4608      	mov	r0, r1
 80081b4:	b141      	cbz	r1, 80081c8 <__ascii_wctomb+0x18>
 80081b6:	2aff      	cmp	r2, #255	; 0xff
 80081b8:	d904      	bls.n	80081c4 <__ascii_wctomb+0x14>
 80081ba:	228a      	movs	r2, #138	; 0x8a
 80081bc:	f04f 30ff 	mov.w	r0, #4294967295
 80081c0:	601a      	str	r2, [r3, #0]
 80081c2:	4770      	bx	lr
 80081c4:	2001      	movs	r0, #1
 80081c6:	700a      	strb	r2, [r1, #0]
 80081c8:	4770      	bx	lr
	...

080081cc <__swsetup_r>:
 80081cc:	4b32      	ldr	r3, [pc, #200]	; (8008298 <__swsetup_r+0xcc>)
 80081ce:	b570      	push	{r4, r5, r6, lr}
 80081d0:	681d      	ldr	r5, [r3, #0]
 80081d2:	4606      	mov	r6, r0
 80081d4:	460c      	mov	r4, r1
 80081d6:	b125      	cbz	r5, 80081e2 <__swsetup_r+0x16>
 80081d8:	69ab      	ldr	r3, [r5, #24]
 80081da:	b913      	cbnz	r3, 80081e2 <__swsetup_r+0x16>
 80081dc:	4628      	mov	r0, r5
 80081de:	f000 f981 	bl	80084e4 <__sinit>
 80081e2:	4b2e      	ldr	r3, [pc, #184]	; (800829c <__swsetup_r+0xd0>)
 80081e4:	429c      	cmp	r4, r3
 80081e6:	d10f      	bne.n	8008208 <__swsetup_r+0x3c>
 80081e8:	686c      	ldr	r4, [r5, #4]
 80081ea:	89a3      	ldrh	r3, [r4, #12]
 80081ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80081f0:	0719      	lsls	r1, r3, #28
 80081f2:	d42c      	bmi.n	800824e <__swsetup_r+0x82>
 80081f4:	06dd      	lsls	r5, r3, #27
 80081f6:	d411      	bmi.n	800821c <__swsetup_r+0x50>
 80081f8:	2309      	movs	r3, #9
 80081fa:	6033      	str	r3, [r6, #0]
 80081fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008200:	f04f 30ff 	mov.w	r0, #4294967295
 8008204:	81a3      	strh	r3, [r4, #12]
 8008206:	e03e      	b.n	8008286 <__swsetup_r+0xba>
 8008208:	4b25      	ldr	r3, [pc, #148]	; (80082a0 <__swsetup_r+0xd4>)
 800820a:	429c      	cmp	r4, r3
 800820c:	d101      	bne.n	8008212 <__swsetup_r+0x46>
 800820e:	68ac      	ldr	r4, [r5, #8]
 8008210:	e7eb      	b.n	80081ea <__swsetup_r+0x1e>
 8008212:	4b24      	ldr	r3, [pc, #144]	; (80082a4 <__swsetup_r+0xd8>)
 8008214:	429c      	cmp	r4, r3
 8008216:	bf08      	it	eq
 8008218:	68ec      	ldreq	r4, [r5, #12]
 800821a:	e7e6      	b.n	80081ea <__swsetup_r+0x1e>
 800821c:	0758      	lsls	r0, r3, #29
 800821e:	d512      	bpl.n	8008246 <__swsetup_r+0x7a>
 8008220:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008222:	b141      	cbz	r1, 8008236 <__swsetup_r+0x6a>
 8008224:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008228:	4299      	cmp	r1, r3
 800822a:	d002      	beq.n	8008232 <__swsetup_r+0x66>
 800822c:	4630      	mov	r0, r6
 800822e:	f7ff fb37 	bl	80078a0 <_free_r>
 8008232:	2300      	movs	r3, #0
 8008234:	6363      	str	r3, [r4, #52]	; 0x34
 8008236:	89a3      	ldrh	r3, [r4, #12]
 8008238:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800823c:	81a3      	strh	r3, [r4, #12]
 800823e:	2300      	movs	r3, #0
 8008240:	6063      	str	r3, [r4, #4]
 8008242:	6923      	ldr	r3, [r4, #16]
 8008244:	6023      	str	r3, [r4, #0]
 8008246:	89a3      	ldrh	r3, [r4, #12]
 8008248:	f043 0308 	orr.w	r3, r3, #8
 800824c:	81a3      	strh	r3, [r4, #12]
 800824e:	6923      	ldr	r3, [r4, #16]
 8008250:	b94b      	cbnz	r3, 8008266 <__swsetup_r+0x9a>
 8008252:	89a3      	ldrh	r3, [r4, #12]
 8008254:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008258:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800825c:	d003      	beq.n	8008266 <__swsetup_r+0x9a>
 800825e:	4621      	mov	r1, r4
 8008260:	4630      	mov	r0, r6
 8008262:	f000 fa05 	bl	8008670 <__smakebuf_r>
 8008266:	89a0      	ldrh	r0, [r4, #12]
 8008268:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800826c:	f010 0301 	ands.w	r3, r0, #1
 8008270:	d00a      	beq.n	8008288 <__swsetup_r+0xbc>
 8008272:	2300      	movs	r3, #0
 8008274:	60a3      	str	r3, [r4, #8]
 8008276:	6963      	ldr	r3, [r4, #20]
 8008278:	425b      	negs	r3, r3
 800827a:	61a3      	str	r3, [r4, #24]
 800827c:	6923      	ldr	r3, [r4, #16]
 800827e:	b943      	cbnz	r3, 8008292 <__swsetup_r+0xc6>
 8008280:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008284:	d1ba      	bne.n	80081fc <__swsetup_r+0x30>
 8008286:	bd70      	pop	{r4, r5, r6, pc}
 8008288:	0781      	lsls	r1, r0, #30
 800828a:	bf58      	it	pl
 800828c:	6963      	ldrpl	r3, [r4, #20]
 800828e:	60a3      	str	r3, [r4, #8]
 8008290:	e7f4      	b.n	800827c <__swsetup_r+0xb0>
 8008292:	2000      	movs	r0, #0
 8008294:	e7f7      	b.n	8008286 <__swsetup_r+0xba>
 8008296:	bf00      	nop
 8008298:	2000000c 	.word	0x2000000c
 800829c:	08008d44 	.word	0x08008d44
 80082a0:	08008d64 	.word	0x08008d64
 80082a4:	08008d24 	.word	0x08008d24

080082a8 <abort>:
 80082a8:	2006      	movs	r0, #6
 80082aa:	b508      	push	{r3, lr}
 80082ac:	f000 fa50 	bl	8008750 <raise>
 80082b0:	2001      	movs	r0, #1
 80082b2:	f7fa fefc 	bl	80030ae <_exit>
	...

080082b8 <__sflush_r>:
 80082b8:	898a      	ldrh	r2, [r1, #12]
 80082ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082bc:	4605      	mov	r5, r0
 80082be:	0710      	lsls	r0, r2, #28
 80082c0:	460c      	mov	r4, r1
 80082c2:	d457      	bmi.n	8008374 <__sflush_r+0xbc>
 80082c4:	684b      	ldr	r3, [r1, #4]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	dc04      	bgt.n	80082d4 <__sflush_r+0x1c>
 80082ca:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	dc01      	bgt.n	80082d4 <__sflush_r+0x1c>
 80082d0:	2000      	movs	r0, #0
 80082d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80082d6:	2e00      	cmp	r6, #0
 80082d8:	d0fa      	beq.n	80082d0 <__sflush_r+0x18>
 80082da:	2300      	movs	r3, #0
 80082dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80082e0:	682f      	ldr	r7, [r5, #0]
 80082e2:	602b      	str	r3, [r5, #0]
 80082e4:	d032      	beq.n	800834c <__sflush_r+0x94>
 80082e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80082e8:	89a3      	ldrh	r3, [r4, #12]
 80082ea:	075a      	lsls	r2, r3, #29
 80082ec:	d505      	bpl.n	80082fa <__sflush_r+0x42>
 80082ee:	6863      	ldr	r3, [r4, #4]
 80082f0:	1ac0      	subs	r0, r0, r3
 80082f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80082f4:	b10b      	cbz	r3, 80082fa <__sflush_r+0x42>
 80082f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80082f8:	1ac0      	subs	r0, r0, r3
 80082fa:	2300      	movs	r3, #0
 80082fc:	4602      	mov	r2, r0
 80082fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008300:	4628      	mov	r0, r5
 8008302:	6a21      	ldr	r1, [r4, #32]
 8008304:	47b0      	blx	r6
 8008306:	1c43      	adds	r3, r0, #1
 8008308:	89a3      	ldrh	r3, [r4, #12]
 800830a:	d106      	bne.n	800831a <__sflush_r+0x62>
 800830c:	6829      	ldr	r1, [r5, #0]
 800830e:	291d      	cmp	r1, #29
 8008310:	d82c      	bhi.n	800836c <__sflush_r+0xb4>
 8008312:	4a29      	ldr	r2, [pc, #164]	; (80083b8 <__sflush_r+0x100>)
 8008314:	40ca      	lsrs	r2, r1
 8008316:	07d6      	lsls	r6, r2, #31
 8008318:	d528      	bpl.n	800836c <__sflush_r+0xb4>
 800831a:	2200      	movs	r2, #0
 800831c:	6062      	str	r2, [r4, #4]
 800831e:	6922      	ldr	r2, [r4, #16]
 8008320:	04d9      	lsls	r1, r3, #19
 8008322:	6022      	str	r2, [r4, #0]
 8008324:	d504      	bpl.n	8008330 <__sflush_r+0x78>
 8008326:	1c42      	adds	r2, r0, #1
 8008328:	d101      	bne.n	800832e <__sflush_r+0x76>
 800832a:	682b      	ldr	r3, [r5, #0]
 800832c:	b903      	cbnz	r3, 8008330 <__sflush_r+0x78>
 800832e:	6560      	str	r0, [r4, #84]	; 0x54
 8008330:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008332:	602f      	str	r7, [r5, #0]
 8008334:	2900      	cmp	r1, #0
 8008336:	d0cb      	beq.n	80082d0 <__sflush_r+0x18>
 8008338:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800833c:	4299      	cmp	r1, r3
 800833e:	d002      	beq.n	8008346 <__sflush_r+0x8e>
 8008340:	4628      	mov	r0, r5
 8008342:	f7ff faad 	bl	80078a0 <_free_r>
 8008346:	2000      	movs	r0, #0
 8008348:	6360      	str	r0, [r4, #52]	; 0x34
 800834a:	e7c2      	b.n	80082d2 <__sflush_r+0x1a>
 800834c:	6a21      	ldr	r1, [r4, #32]
 800834e:	2301      	movs	r3, #1
 8008350:	4628      	mov	r0, r5
 8008352:	47b0      	blx	r6
 8008354:	1c41      	adds	r1, r0, #1
 8008356:	d1c7      	bne.n	80082e8 <__sflush_r+0x30>
 8008358:	682b      	ldr	r3, [r5, #0]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d0c4      	beq.n	80082e8 <__sflush_r+0x30>
 800835e:	2b1d      	cmp	r3, #29
 8008360:	d001      	beq.n	8008366 <__sflush_r+0xae>
 8008362:	2b16      	cmp	r3, #22
 8008364:	d101      	bne.n	800836a <__sflush_r+0xb2>
 8008366:	602f      	str	r7, [r5, #0]
 8008368:	e7b2      	b.n	80082d0 <__sflush_r+0x18>
 800836a:	89a3      	ldrh	r3, [r4, #12]
 800836c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008370:	81a3      	strh	r3, [r4, #12]
 8008372:	e7ae      	b.n	80082d2 <__sflush_r+0x1a>
 8008374:	690f      	ldr	r7, [r1, #16]
 8008376:	2f00      	cmp	r7, #0
 8008378:	d0aa      	beq.n	80082d0 <__sflush_r+0x18>
 800837a:	0793      	lsls	r3, r2, #30
 800837c:	bf18      	it	ne
 800837e:	2300      	movne	r3, #0
 8008380:	680e      	ldr	r6, [r1, #0]
 8008382:	bf08      	it	eq
 8008384:	694b      	ldreq	r3, [r1, #20]
 8008386:	1bf6      	subs	r6, r6, r7
 8008388:	600f      	str	r7, [r1, #0]
 800838a:	608b      	str	r3, [r1, #8]
 800838c:	2e00      	cmp	r6, #0
 800838e:	dd9f      	ble.n	80082d0 <__sflush_r+0x18>
 8008390:	4633      	mov	r3, r6
 8008392:	463a      	mov	r2, r7
 8008394:	4628      	mov	r0, r5
 8008396:	6a21      	ldr	r1, [r4, #32]
 8008398:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800839c:	47e0      	blx	ip
 800839e:	2800      	cmp	r0, #0
 80083a0:	dc06      	bgt.n	80083b0 <__sflush_r+0xf8>
 80083a2:	89a3      	ldrh	r3, [r4, #12]
 80083a4:	f04f 30ff 	mov.w	r0, #4294967295
 80083a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083ac:	81a3      	strh	r3, [r4, #12]
 80083ae:	e790      	b.n	80082d2 <__sflush_r+0x1a>
 80083b0:	4407      	add	r7, r0
 80083b2:	1a36      	subs	r6, r6, r0
 80083b4:	e7ea      	b.n	800838c <__sflush_r+0xd4>
 80083b6:	bf00      	nop
 80083b8:	20400001 	.word	0x20400001

080083bc <_fflush_r>:
 80083bc:	b538      	push	{r3, r4, r5, lr}
 80083be:	690b      	ldr	r3, [r1, #16]
 80083c0:	4605      	mov	r5, r0
 80083c2:	460c      	mov	r4, r1
 80083c4:	b913      	cbnz	r3, 80083cc <_fflush_r+0x10>
 80083c6:	2500      	movs	r5, #0
 80083c8:	4628      	mov	r0, r5
 80083ca:	bd38      	pop	{r3, r4, r5, pc}
 80083cc:	b118      	cbz	r0, 80083d6 <_fflush_r+0x1a>
 80083ce:	6983      	ldr	r3, [r0, #24]
 80083d0:	b90b      	cbnz	r3, 80083d6 <_fflush_r+0x1a>
 80083d2:	f000 f887 	bl	80084e4 <__sinit>
 80083d6:	4b14      	ldr	r3, [pc, #80]	; (8008428 <_fflush_r+0x6c>)
 80083d8:	429c      	cmp	r4, r3
 80083da:	d11b      	bne.n	8008414 <_fflush_r+0x58>
 80083dc:	686c      	ldr	r4, [r5, #4]
 80083de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d0ef      	beq.n	80083c6 <_fflush_r+0xa>
 80083e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80083e8:	07d0      	lsls	r0, r2, #31
 80083ea:	d404      	bmi.n	80083f6 <_fflush_r+0x3a>
 80083ec:	0599      	lsls	r1, r3, #22
 80083ee:	d402      	bmi.n	80083f6 <_fflush_r+0x3a>
 80083f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083f2:	f000 f915 	bl	8008620 <__retarget_lock_acquire_recursive>
 80083f6:	4628      	mov	r0, r5
 80083f8:	4621      	mov	r1, r4
 80083fa:	f7ff ff5d 	bl	80082b8 <__sflush_r>
 80083fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008400:	4605      	mov	r5, r0
 8008402:	07da      	lsls	r2, r3, #31
 8008404:	d4e0      	bmi.n	80083c8 <_fflush_r+0xc>
 8008406:	89a3      	ldrh	r3, [r4, #12]
 8008408:	059b      	lsls	r3, r3, #22
 800840a:	d4dd      	bmi.n	80083c8 <_fflush_r+0xc>
 800840c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800840e:	f000 f908 	bl	8008622 <__retarget_lock_release_recursive>
 8008412:	e7d9      	b.n	80083c8 <_fflush_r+0xc>
 8008414:	4b05      	ldr	r3, [pc, #20]	; (800842c <_fflush_r+0x70>)
 8008416:	429c      	cmp	r4, r3
 8008418:	d101      	bne.n	800841e <_fflush_r+0x62>
 800841a:	68ac      	ldr	r4, [r5, #8]
 800841c:	e7df      	b.n	80083de <_fflush_r+0x22>
 800841e:	4b04      	ldr	r3, [pc, #16]	; (8008430 <_fflush_r+0x74>)
 8008420:	429c      	cmp	r4, r3
 8008422:	bf08      	it	eq
 8008424:	68ec      	ldreq	r4, [r5, #12]
 8008426:	e7da      	b.n	80083de <_fflush_r+0x22>
 8008428:	08008d44 	.word	0x08008d44
 800842c:	08008d64 	.word	0x08008d64
 8008430:	08008d24 	.word	0x08008d24

08008434 <std>:
 8008434:	2300      	movs	r3, #0
 8008436:	b510      	push	{r4, lr}
 8008438:	4604      	mov	r4, r0
 800843a:	e9c0 3300 	strd	r3, r3, [r0]
 800843e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008442:	6083      	str	r3, [r0, #8]
 8008444:	8181      	strh	r1, [r0, #12]
 8008446:	6643      	str	r3, [r0, #100]	; 0x64
 8008448:	81c2      	strh	r2, [r0, #14]
 800844a:	6183      	str	r3, [r0, #24]
 800844c:	4619      	mov	r1, r3
 800844e:	2208      	movs	r2, #8
 8008450:	305c      	adds	r0, #92	; 0x5c
 8008452:	f7fd fb51 	bl	8005af8 <memset>
 8008456:	4b05      	ldr	r3, [pc, #20]	; (800846c <std+0x38>)
 8008458:	6224      	str	r4, [r4, #32]
 800845a:	6263      	str	r3, [r4, #36]	; 0x24
 800845c:	4b04      	ldr	r3, [pc, #16]	; (8008470 <std+0x3c>)
 800845e:	62a3      	str	r3, [r4, #40]	; 0x28
 8008460:	4b04      	ldr	r3, [pc, #16]	; (8008474 <std+0x40>)
 8008462:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008464:	4b04      	ldr	r3, [pc, #16]	; (8008478 <std+0x44>)
 8008466:	6323      	str	r3, [r4, #48]	; 0x30
 8008468:	bd10      	pop	{r4, pc}
 800846a:	bf00      	nop
 800846c:	08008789 	.word	0x08008789
 8008470:	080087ab 	.word	0x080087ab
 8008474:	080087e3 	.word	0x080087e3
 8008478:	08008807 	.word	0x08008807

0800847c <_cleanup_r>:
 800847c:	4901      	ldr	r1, [pc, #4]	; (8008484 <_cleanup_r+0x8>)
 800847e:	f000 b8af 	b.w	80085e0 <_fwalk_reent>
 8008482:	bf00      	nop
 8008484:	080083bd 	.word	0x080083bd

08008488 <__sfmoreglue>:
 8008488:	2268      	movs	r2, #104	; 0x68
 800848a:	b570      	push	{r4, r5, r6, lr}
 800848c:	1e4d      	subs	r5, r1, #1
 800848e:	4355      	muls	r5, r2
 8008490:	460e      	mov	r6, r1
 8008492:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008496:	f7ff fa6b 	bl	8007970 <_malloc_r>
 800849a:	4604      	mov	r4, r0
 800849c:	b140      	cbz	r0, 80084b0 <__sfmoreglue+0x28>
 800849e:	2100      	movs	r1, #0
 80084a0:	e9c0 1600 	strd	r1, r6, [r0]
 80084a4:	300c      	adds	r0, #12
 80084a6:	60a0      	str	r0, [r4, #8]
 80084a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80084ac:	f7fd fb24 	bl	8005af8 <memset>
 80084b0:	4620      	mov	r0, r4
 80084b2:	bd70      	pop	{r4, r5, r6, pc}

080084b4 <__sfp_lock_acquire>:
 80084b4:	4801      	ldr	r0, [pc, #4]	; (80084bc <__sfp_lock_acquire+0x8>)
 80084b6:	f000 b8b3 	b.w	8008620 <__retarget_lock_acquire_recursive>
 80084ba:	bf00      	nop
 80084bc:	20000511 	.word	0x20000511

080084c0 <__sfp_lock_release>:
 80084c0:	4801      	ldr	r0, [pc, #4]	; (80084c8 <__sfp_lock_release+0x8>)
 80084c2:	f000 b8ae 	b.w	8008622 <__retarget_lock_release_recursive>
 80084c6:	bf00      	nop
 80084c8:	20000511 	.word	0x20000511

080084cc <__sinit_lock_acquire>:
 80084cc:	4801      	ldr	r0, [pc, #4]	; (80084d4 <__sinit_lock_acquire+0x8>)
 80084ce:	f000 b8a7 	b.w	8008620 <__retarget_lock_acquire_recursive>
 80084d2:	bf00      	nop
 80084d4:	20000512 	.word	0x20000512

080084d8 <__sinit_lock_release>:
 80084d8:	4801      	ldr	r0, [pc, #4]	; (80084e0 <__sinit_lock_release+0x8>)
 80084da:	f000 b8a2 	b.w	8008622 <__retarget_lock_release_recursive>
 80084de:	bf00      	nop
 80084e0:	20000512 	.word	0x20000512

080084e4 <__sinit>:
 80084e4:	b510      	push	{r4, lr}
 80084e6:	4604      	mov	r4, r0
 80084e8:	f7ff fff0 	bl	80084cc <__sinit_lock_acquire>
 80084ec:	69a3      	ldr	r3, [r4, #24]
 80084ee:	b11b      	cbz	r3, 80084f8 <__sinit+0x14>
 80084f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084f4:	f7ff bff0 	b.w	80084d8 <__sinit_lock_release>
 80084f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80084fc:	6523      	str	r3, [r4, #80]	; 0x50
 80084fe:	4b13      	ldr	r3, [pc, #76]	; (800854c <__sinit+0x68>)
 8008500:	4a13      	ldr	r2, [pc, #76]	; (8008550 <__sinit+0x6c>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	62a2      	str	r2, [r4, #40]	; 0x28
 8008506:	42a3      	cmp	r3, r4
 8008508:	bf08      	it	eq
 800850a:	2301      	moveq	r3, #1
 800850c:	4620      	mov	r0, r4
 800850e:	bf08      	it	eq
 8008510:	61a3      	streq	r3, [r4, #24]
 8008512:	f000 f81f 	bl	8008554 <__sfp>
 8008516:	6060      	str	r0, [r4, #4]
 8008518:	4620      	mov	r0, r4
 800851a:	f000 f81b 	bl	8008554 <__sfp>
 800851e:	60a0      	str	r0, [r4, #8]
 8008520:	4620      	mov	r0, r4
 8008522:	f000 f817 	bl	8008554 <__sfp>
 8008526:	2200      	movs	r2, #0
 8008528:	2104      	movs	r1, #4
 800852a:	60e0      	str	r0, [r4, #12]
 800852c:	6860      	ldr	r0, [r4, #4]
 800852e:	f7ff ff81 	bl	8008434 <std>
 8008532:	2201      	movs	r2, #1
 8008534:	2109      	movs	r1, #9
 8008536:	68a0      	ldr	r0, [r4, #8]
 8008538:	f7ff ff7c 	bl	8008434 <std>
 800853c:	2202      	movs	r2, #2
 800853e:	2112      	movs	r1, #18
 8008540:	68e0      	ldr	r0, [r4, #12]
 8008542:	f7ff ff77 	bl	8008434 <std>
 8008546:	2301      	movs	r3, #1
 8008548:	61a3      	str	r3, [r4, #24]
 800854a:	e7d1      	b.n	80084f0 <__sinit+0xc>
 800854c:	080089ac 	.word	0x080089ac
 8008550:	0800847d 	.word	0x0800847d

08008554 <__sfp>:
 8008554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008556:	4607      	mov	r7, r0
 8008558:	f7ff ffac 	bl	80084b4 <__sfp_lock_acquire>
 800855c:	4b1e      	ldr	r3, [pc, #120]	; (80085d8 <__sfp+0x84>)
 800855e:	681e      	ldr	r6, [r3, #0]
 8008560:	69b3      	ldr	r3, [r6, #24]
 8008562:	b913      	cbnz	r3, 800856a <__sfp+0x16>
 8008564:	4630      	mov	r0, r6
 8008566:	f7ff ffbd 	bl	80084e4 <__sinit>
 800856a:	3648      	adds	r6, #72	; 0x48
 800856c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008570:	3b01      	subs	r3, #1
 8008572:	d503      	bpl.n	800857c <__sfp+0x28>
 8008574:	6833      	ldr	r3, [r6, #0]
 8008576:	b30b      	cbz	r3, 80085bc <__sfp+0x68>
 8008578:	6836      	ldr	r6, [r6, #0]
 800857a:	e7f7      	b.n	800856c <__sfp+0x18>
 800857c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008580:	b9d5      	cbnz	r5, 80085b8 <__sfp+0x64>
 8008582:	4b16      	ldr	r3, [pc, #88]	; (80085dc <__sfp+0x88>)
 8008584:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008588:	60e3      	str	r3, [r4, #12]
 800858a:	6665      	str	r5, [r4, #100]	; 0x64
 800858c:	f000 f847 	bl	800861e <__retarget_lock_init_recursive>
 8008590:	f7ff ff96 	bl	80084c0 <__sfp_lock_release>
 8008594:	2208      	movs	r2, #8
 8008596:	4629      	mov	r1, r5
 8008598:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800859c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80085a0:	6025      	str	r5, [r4, #0]
 80085a2:	61a5      	str	r5, [r4, #24]
 80085a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80085a8:	f7fd faa6 	bl	8005af8 <memset>
 80085ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80085b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80085b4:	4620      	mov	r0, r4
 80085b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085b8:	3468      	adds	r4, #104	; 0x68
 80085ba:	e7d9      	b.n	8008570 <__sfp+0x1c>
 80085bc:	2104      	movs	r1, #4
 80085be:	4638      	mov	r0, r7
 80085c0:	f7ff ff62 	bl	8008488 <__sfmoreglue>
 80085c4:	4604      	mov	r4, r0
 80085c6:	6030      	str	r0, [r6, #0]
 80085c8:	2800      	cmp	r0, #0
 80085ca:	d1d5      	bne.n	8008578 <__sfp+0x24>
 80085cc:	f7ff ff78 	bl	80084c0 <__sfp_lock_release>
 80085d0:	230c      	movs	r3, #12
 80085d2:	603b      	str	r3, [r7, #0]
 80085d4:	e7ee      	b.n	80085b4 <__sfp+0x60>
 80085d6:	bf00      	nop
 80085d8:	080089ac 	.word	0x080089ac
 80085dc:	ffff0001 	.word	0xffff0001

080085e0 <_fwalk_reent>:
 80085e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085e4:	4606      	mov	r6, r0
 80085e6:	4688      	mov	r8, r1
 80085e8:	2700      	movs	r7, #0
 80085ea:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80085ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80085f2:	f1b9 0901 	subs.w	r9, r9, #1
 80085f6:	d505      	bpl.n	8008604 <_fwalk_reent+0x24>
 80085f8:	6824      	ldr	r4, [r4, #0]
 80085fa:	2c00      	cmp	r4, #0
 80085fc:	d1f7      	bne.n	80085ee <_fwalk_reent+0xe>
 80085fe:	4638      	mov	r0, r7
 8008600:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008604:	89ab      	ldrh	r3, [r5, #12]
 8008606:	2b01      	cmp	r3, #1
 8008608:	d907      	bls.n	800861a <_fwalk_reent+0x3a>
 800860a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800860e:	3301      	adds	r3, #1
 8008610:	d003      	beq.n	800861a <_fwalk_reent+0x3a>
 8008612:	4629      	mov	r1, r5
 8008614:	4630      	mov	r0, r6
 8008616:	47c0      	blx	r8
 8008618:	4307      	orrs	r7, r0
 800861a:	3568      	adds	r5, #104	; 0x68
 800861c:	e7e9      	b.n	80085f2 <_fwalk_reent+0x12>

0800861e <__retarget_lock_init_recursive>:
 800861e:	4770      	bx	lr

08008620 <__retarget_lock_acquire_recursive>:
 8008620:	4770      	bx	lr

08008622 <__retarget_lock_release_recursive>:
 8008622:	4770      	bx	lr

08008624 <__swhatbuf_r>:
 8008624:	b570      	push	{r4, r5, r6, lr}
 8008626:	460e      	mov	r6, r1
 8008628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800862c:	4614      	mov	r4, r2
 800862e:	2900      	cmp	r1, #0
 8008630:	461d      	mov	r5, r3
 8008632:	b096      	sub	sp, #88	; 0x58
 8008634:	da08      	bge.n	8008648 <__swhatbuf_r+0x24>
 8008636:	2200      	movs	r2, #0
 8008638:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800863c:	602a      	str	r2, [r5, #0]
 800863e:	061a      	lsls	r2, r3, #24
 8008640:	d410      	bmi.n	8008664 <__swhatbuf_r+0x40>
 8008642:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008646:	e00e      	b.n	8008666 <__swhatbuf_r+0x42>
 8008648:	466a      	mov	r2, sp
 800864a:	f000 f903 	bl	8008854 <_fstat_r>
 800864e:	2800      	cmp	r0, #0
 8008650:	dbf1      	blt.n	8008636 <__swhatbuf_r+0x12>
 8008652:	9a01      	ldr	r2, [sp, #4]
 8008654:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008658:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800865c:	425a      	negs	r2, r3
 800865e:	415a      	adcs	r2, r3
 8008660:	602a      	str	r2, [r5, #0]
 8008662:	e7ee      	b.n	8008642 <__swhatbuf_r+0x1e>
 8008664:	2340      	movs	r3, #64	; 0x40
 8008666:	2000      	movs	r0, #0
 8008668:	6023      	str	r3, [r4, #0]
 800866a:	b016      	add	sp, #88	; 0x58
 800866c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008670 <__smakebuf_r>:
 8008670:	898b      	ldrh	r3, [r1, #12]
 8008672:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008674:	079d      	lsls	r5, r3, #30
 8008676:	4606      	mov	r6, r0
 8008678:	460c      	mov	r4, r1
 800867a:	d507      	bpl.n	800868c <__smakebuf_r+0x1c>
 800867c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008680:	6023      	str	r3, [r4, #0]
 8008682:	6123      	str	r3, [r4, #16]
 8008684:	2301      	movs	r3, #1
 8008686:	6163      	str	r3, [r4, #20]
 8008688:	b002      	add	sp, #8
 800868a:	bd70      	pop	{r4, r5, r6, pc}
 800868c:	466a      	mov	r2, sp
 800868e:	ab01      	add	r3, sp, #4
 8008690:	f7ff ffc8 	bl	8008624 <__swhatbuf_r>
 8008694:	9900      	ldr	r1, [sp, #0]
 8008696:	4605      	mov	r5, r0
 8008698:	4630      	mov	r0, r6
 800869a:	f7ff f969 	bl	8007970 <_malloc_r>
 800869e:	b948      	cbnz	r0, 80086b4 <__smakebuf_r+0x44>
 80086a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086a4:	059a      	lsls	r2, r3, #22
 80086a6:	d4ef      	bmi.n	8008688 <__smakebuf_r+0x18>
 80086a8:	f023 0303 	bic.w	r3, r3, #3
 80086ac:	f043 0302 	orr.w	r3, r3, #2
 80086b0:	81a3      	strh	r3, [r4, #12]
 80086b2:	e7e3      	b.n	800867c <__smakebuf_r+0xc>
 80086b4:	4b0d      	ldr	r3, [pc, #52]	; (80086ec <__smakebuf_r+0x7c>)
 80086b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80086b8:	89a3      	ldrh	r3, [r4, #12]
 80086ba:	6020      	str	r0, [r4, #0]
 80086bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086c0:	81a3      	strh	r3, [r4, #12]
 80086c2:	9b00      	ldr	r3, [sp, #0]
 80086c4:	6120      	str	r0, [r4, #16]
 80086c6:	6163      	str	r3, [r4, #20]
 80086c8:	9b01      	ldr	r3, [sp, #4]
 80086ca:	b15b      	cbz	r3, 80086e4 <__smakebuf_r+0x74>
 80086cc:	4630      	mov	r0, r6
 80086ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086d2:	f000 f8d1 	bl	8008878 <_isatty_r>
 80086d6:	b128      	cbz	r0, 80086e4 <__smakebuf_r+0x74>
 80086d8:	89a3      	ldrh	r3, [r4, #12]
 80086da:	f023 0303 	bic.w	r3, r3, #3
 80086de:	f043 0301 	orr.w	r3, r3, #1
 80086e2:	81a3      	strh	r3, [r4, #12]
 80086e4:	89a0      	ldrh	r0, [r4, #12]
 80086e6:	4305      	orrs	r5, r0
 80086e8:	81a5      	strh	r5, [r4, #12]
 80086ea:	e7cd      	b.n	8008688 <__smakebuf_r+0x18>
 80086ec:	0800847d 	.word	0x0800847d

080086f0 <_malloc_usable_size_r>:
 80086f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086f4:	1f18      	subs	r0, r3, #4
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	bfbc      	itt	lt
 80086fa:	580b      	ldrlt	r3, [r1, r0]
 80086fc:	18c0      	addlt	r0, r0, r3
 80086fe:	4770      	bx	lr

08008700 <_raise_r>:
 8008700:	291f      	cmp	r1, #31
 8008702:	b538      	push	{r3, r4, r5, lr}
 8008704:	4604      	mov	r4, r0
 8008706:	460d      	mov	r5, r1
 8008708:	d904      	bls.n	8008714 <_raise_r+0x14>
 800870a:	2316      	movs	r3, #22
 800870c:	6003      	str	r3, [r0, #0]
 800870e:	f04f 30ff 	mov.w	r0, #4294967295
 8008712:	bd38      	pop	{r3, r4, r5, pc}
 8008714:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008716:	b112      	cbz	r2, 800871e <_raise_r+0x1e>
 8008718:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800871c:	b94b      	cbnz	r3, 8008732 <_raise_r+0x32>
 800871e:	4620      	mov	r0, r4
 8008720:	f000 f830 	bl	8008784 <_getpid_r>
 8008724:	462a      	mov	r2, r5
 8008726:	4601      	mov	r1, r0
 8008728:	4620      	mov	r0, r4
 800872a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800872e:	f000 b817 	b.w	8008760 <_kill_r>
 8008732:	2b01      	cmp	r3, #1
 8008734:	d00a      	beq.n	800874c <_raise_r+0x4c>
 8008736:	1c59      	adds	r1, r3, #1
 8008738:	d103      	bne.n	8008742 <_raise_r+0x42>
 800873a:	2316      	movs	r3, #22
 800873c:	6003      	str	r3, [r0, #0]
 800873e:	2001      	movs	r0, #1
 8008740:	e7e7      	b.n	8008712 <_raise_r+0x12>
 8008742:	2400      	movs	r4, #0
 8008744:	4628      	mov	r0, r5
 8008746:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800874a:	4798      	blx	r3
 800874c:	2000      	movs	r0, #0
 800874e:	e7e0      	b.n	8008712 <_raise_r+0x12>

08008750 <raise>:
 8008750:	4b02      	ldr	r3, [pc, #8]	; (800875c <raise+0xc>)
 8008752:	4601      	mov	r1, r0
 8008754:	6818      	ldr	r0, [r3, #0]
 8008756:	f7ff bfd3 	b.w	8008700 <_raise_r>
 800875a:	bf00      	nop
 800875c:	2000000c 	.word	0x2000000c

08008760 <_kill_r>:
 8008760:	b538      	push	{r3, r4, r5, lr}
 8008762:	2300      	movs	r3, #0
 8008764:	4d06      	ldr	r5, [pc, #24]	; (8008780 <_kill_r+0x20>)
 8008766:	4604      	mov	r4, r0
 8008768:	4608      	mov	r0, r1
 800876a:	4611      	mov	r1, r2
 800876c:	602b      	str	r3, [r5, #0]
 800876e:	f7fa fc8e 	bl	800308e <_kill>
 8008772:	1c43      	adds	r3, r0, #1
 8008774:	d102      	bne.n	800877c <_kill_r+0x1c>
 8008776:	682b      	ldr	r3, [r5, #0]
 8008778:	b103      	cbz	r3, 800877c <_kill_r+0x1c>
 800877a:	6023      	str	r3, [r4, #0]
 800877c:	bd38      	pop	{r3, r4, r5, pc}
 800877e:	bf00      	nop
 8008780:	2000050c 	.word	0x2000050c

08008784 <_getpid_r>:
 8008784:	f7fa bc7c 	b.w	8003080 <_getpid>

08008788 <__sread>:
 8008788:	b510      	push	{r4, lr}
 800878a:	460c      	mov	r4, r1
 800878c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008790:	f000 f894 	bl	80088bc <_read_r>
 8008794:	2800      	cmp	r0, #0
 8008796:	bfab      	itete	ge
 8008798:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800879a:	89a3      	ldrhlt	r3, [r4, #12]
 800879c:	181b      	addge	r3, r3, r0
 800879e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80087a2:	bfac      	ite	ge
 80087a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80087a6:	81a3      	strhlt	r3, [r4, #12]
 80087a8:	bd10      	pop	{r4, pc}

080087aa <__swrite>:
 80087aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087ae:	461f      	mov	r7, r3
 80087b0:	898b      	ldrh	r3, [r1, #12]
 80087b2:	4605      	mov	r5, r0
 80087b4:	05db      	lsls	r3, r3, #23
 80087b6:	460c      	mov	r4, r1
 80087b8:	4616      	mov	r6, r2
 80087ba:	d505      	bpl.n	80087c8 <__swrite+0x1e>
 80087bc:	2302      	movs	r3, #2
 80087be:	2200      	movs	r2, #0
 80087c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087c4:	f000 f868 	bl	8008898 <_lseek_r>
 80087c8:	89a3      	ldrh	r3, [r4, #12]
 80087ca:	4632      	mov	r2, r6
 80087cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80087d0:	81a3      	strh	r3, [r4, #12]
 80087d2:	4628      	mov	r0, r5
 80087d4:	463b      	mov	r3, r7
 80087d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087de:	f000 b817 	b.w	8008810 <_write_r>

080087e2 <__sseek>:
 80087e2:	b510      	push	{r4, lr}
 80087e4:	460c      	mov	r4, r1
 80087e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087ea:	f000 f855 	bl	8008898 <_lseek_r>
 80087ee:	1c43      	adds	r3, r0, #1
 80087f0:	89a3      	ldrh	r3, [r4, #12]
 80087f2:	bf15      	itete	ne
 80087f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80087f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80087fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80087fe:	81a3      	strheq	r3, [r4, #12]
 8008800:	bf18      	it	ne
 8008802:	81a3      	strhne	r3, [r4, #12]
 8008804:	bd10      	pop	{r4, pc}

08008806 <__sclose>:
 8008806:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800880a:	f000 b813 	b.w	8008834 <_close_r>
	...

08008810 <_write_r>:
 8008810:	b538      	push	{r3, r4, r5, lr}
 8008812:	4604      	mov	r4, r0
 8008814:	4608      	mov	r0, r1
 8008816:	4611      	mov	r1, r2
 8008818:	2200      	movs	r2, #0
 800881a:	4d05      	ldr	r5, [pc, #20]	; (8008830 <_write_r+0x20>)
 800881c:	602a      	str	r2, [r5, #0]
 800881e:	461a      	mov	r2, r3
 8008820:	f7fa fc6c 	bl	80030fc <_write>
 8008824:	1c43      	adds	r3, r0, #1
 8008826:	d102      	bne.n	800882e <_write_r+0x1e>
 8008828:	682b      	ldr	r3, [r5, #0]
 800882a:	b103      	cbz	r3, 800882e <_write_r+0x1e>
 800882c:	6023      	str	r3, [r4, #0]
 800882e:	bd38      	pop	{r3, r4, r5, pc}
 8008830:	2000050c 	.word	0x2000050c

08008834 <_close_r>:
 8008834:	b538      	push	{r3, r4, r5, lr}
 8008836:	2300      	movs	r3, #0
 8008838:	4d05      	ldr	r5, [pc, #20]	; (8008850 <_close_r+0x1c>)
 800883a:	4604      	mov	r4, r0
 800883c:	4608      	mov	r0, r1
 800883e:	602b      	str	r3, [r5, #0]
 8008840:	f7fa fc78 	bl	8003134 <_close>
 8008844:	1c43      	adds	r3, r0, #1
 8008846:	d102      	bne.n	800884e <_close_r+0x1a>
 8008848:	682b      	ldr	r3, [r5, #0]
 800884a:	b103      	cbz	r3, 800884e <_close_r+0x1a>
 800884c:	6023      	str	r3, [r4, #0]
 800884e:	bd38      	pop	{r3, r4, r5, pc}
 8008850:	2000050c 	.word	0x2000050c

08008854 <_fstat_r>:
 8008854:	b538      	push	{r3, r4, r5, lr}
 8008856:	2300      	movs	r3, #0
 8008858:	4d06      	ldr	r5, [pc, #24]	; (8008874 <_fstat_r+0x20>)
 800885a:	4604      	mov	r4, r0
 800885c:	4608      	mov	r0, r1
 800885e:	4611      	mov	r1, r2
 8008860:	602b      	str	r3, [r5, #0]
 8008862:	f7fa fc72 	bl	800314a <_fstat>
 8008866:	1c43      	adds	r3, r0, #1
 8008868:	d102      	bne.n	8008870 <_fstat_r+0x1c>
 800886a:	682b      	ldr	r3, [r5, #0]
 800886c:	b103      	cbz	r3, 8008870 <_fstat_r+0x1c>
 800886e:	6023      	str	r3, [r4, #0]
 8008870:	bd38      	pop	{r3, r4, r5, pc}
 8008872:	bf00      	nop
 8008874:	2000050c 	.word	0x2000050c

08008878 <_isatty_r>:
 8008878:	b538      	push	{r3, r4, r5, lr}
 800887a:	2300      	movs	r3, #0
 800887c:	4d05      	ldr	r5, [pc, #20]	; (8008894 <_isatty_r+0x1c>)
 800887e:	4604      	mov	r4, r0
 8008880:	4608      	mov	r0, r1
 8008882:	602b      	str	r3, [r5, #0]
 8008884:	f7fa fc70 	bl	8003168 <_isatty>
 8008888:	1c43      	adds	r3, r0, #1
 800888a:	d102      	bne.n	8008892 <_isatty_r+0x1a>
 800888c:	682b      	ldr	r3, [r5, #0]
 800888e:	b103      	cbz	r3, 8008892 <_isatty_r+0x1a>
 8008890:	6023      	str	r3, [r4, #0]
 8008892:	bd38      	pop	{r3, r4, r5, pc}
 8008894:	2000050c 	.word	0x2000050c

08008898 <_lseek_r>:
 8008898:	b538      	push	{r3, r4, r5, lr}
 800889a:	4604      	mov	r4, r0
 800889c:	4608      	mov	r0, r1
 800889e:	4611      	mov	r1, r2
 80088a0:	2200      	movs	r2, #0
 80088a2:	4d05      	ldr	r5, [pc, #20]	; (80088b8 <_lseek_r+0x20>)
 80088a4:	602a      	str	r2, [r5, #0]
 80088a6:	461a      	mov	r2, r3
 80088a8:	f7fa fc68 	bl	800317c <_lseek>
 80088ac:	1c43      	adds	r3, r0, #1
 80088ae:	d102      	bne.n	80088b6 <_lseek_r+0x1e>
 80088b0:	682b      	ldr	r3, [r5, #0]
 80088b2:	b103      	cbz	r3, 80088b6 <_lseek_r+0x1e>
 80088b4:	6023      	str	r3, [r4, #0]
 80088b6:	bd38      	pop	{r3, r4, r5, pc}
 80088b8:	2000050c 	.word	0x2000050c

080088bc <_read_r>:
 80088bc:	b538      	push	{r3, r4, r5, lr}
 80088be:	4604      	mov	r4, r0
 80088c0:	4608      	mov	r0, r1
 80088c2:	4611      	mov	r1, r2
 80088c4:	2200      	movs	r2, #0
 80088c6:	4d05      	ldr	r5, [pc, #20]	; (80088dc <_read_r+0x20>)
 80088c8:	602a      	str	r2, [r5, #0]
 80088ca:	461a      	mov	r2, r3
 80088cc:	f7fa fbf9 	bl	80030c2 <_read>
 80088d0:	1c43      	adds	r3, r0, #1
 80088d2:	d102      	bne.n	80088da <_read_r+0x1e>
 80088d4:	682b      	ldr	r3, [r5, #0]
 80088d6:	b103      	cbz	r3, 80088da <_read_r+0x1e>
 80088d8:	6023      	str	r3, [r4, #0]
 80088da:	bd38      	pop	{r3, r4, r5, pc}
 80088dc:	2000050c 	.word	0x2000050c

080088e0 <_init>:
 80088e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088e2:	bf00      	nop
 80088e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088e6:	bc08      	pop	{r3}
 80088e8:	469e      	mov	lr, r3
 80088ea:	4770      	bx	lr

080088ec <_fini>:
 80088ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ee:	bf00      	nop
 80088f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088f2:	bc08      	pop	{r3}
 80088f4:	469e      	mov	lr, r3
 80088f6:	4770      	bx	lr
